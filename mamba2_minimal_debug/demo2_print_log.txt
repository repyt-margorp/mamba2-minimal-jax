[Mamba2LMHeadModel] Loading pre-trained model from HuggingFace ID: state-spaces/mamba2-1.3b
[Config] Initialized Mamba2Config with d_model=2048, n_layer=48, d_state=128, d_conv=4, expand=2, headdim=64, chunk_size=64, vocab_size=50288, pad_vocab_size_multiple=16
[Config] Computed d_inner=4096, nheads=64
[Mamba2LMHeadModel] Loaded state dict.
[Mamba2LMHeadModel] Initializing backbone...
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0010,  0.0081,  0.0158,  0.0201,  0.0130], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.2433, -0.0274,  0.2743, -0.2542,  0.0859], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([1.4293e-35, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.0339e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([7.0073e+28, 8.4333e+26, 4.5452e+30, 2.6849e-06, 1.8938e+34],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([-7.5193e-01,  4.5710e-41, -7.5193e-01,  4.5710e-41,  1.4013e-45],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0061,  0.0001, -0.0124,  0.0108,  0.0016], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0159, -0.0141, -0.0109,  0.0173, -0.0527], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0057, -0.0132, -0.0010,  0.0065,  0.0082], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0248, -0.0018, -0.0083, -0.0105,  0.0021], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0091, -0.0078, -0.0111, -0.0068,  0.0309], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0239,  0.0080, -0.0105,  0.0216,  0.0310], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0227,  0.0178, -0.0090,  0.0247,  0.0191], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0048, -0.0063,  0.0166,  0.0022, -0.0098], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.3721,  0.1874,  0.2098, -0.3538, -0.3172], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([2.0619e-35, 0.0000e+00, 2.0624e-35, 0.0000e+00, 1.1210e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([ 2.0623e-35,  0.0000e+00, -7.5196e-01,  4.5710e-41,  2.4066e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([2.0622e-35, 0.0000e+00, 2.3556e-35, 0.0000e+00, 1.0182e+22],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0015,  0.0010, -0.0098,  0.0092,  0.0151], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0040,  0.0299,  0.0003,  0.0018,  0.0186], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0043,  0.0376,  0.0177, -0.0020, -0.0027], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0174,  0.0090,  0.0162,  0.0128,  0.0105], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0179,  0.0178,  0.0281,  0.0074, -0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0027,  0.0297, -0.0009, -0.0177,  0.0203], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0439,  0.0255,  0.0188, -0.0314, -0.0279], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0182, -0.0012,  0.0174,  0.0041,  0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.1474, -0.2860, -0.0635,  0.1982,  0.0585], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([2.3556e-35, 0.0000e+00, 2.3553e-35, 0.0000e+00, 3.8115e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([-2.5018e-01,  4.5710e-41,  0.0000e+00,  1.4013e-45,  2.5949e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0031, -0.0062, -0.0083,  0.0067,  0.0058], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0035, -0.0157,  0.0082,  0.0280, -0.0075], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0161, -0.0045,  0.0089, -0.0075, -0.0297], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0230,  0.0005,  0.0348,  0.0196, -0.0161], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0151,  0.0081,  0.0051, -0.0330, -0.0328], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0127,  0.0465,  0.0080, -0.0251,  0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0311, -0.0363, -0.0066, -0.0077,  0.0183], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0111, -0.0098, -0.0038, -0.0170, -0.0191], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.1073, -0.2398,  0.2507, -0.4664, -0.1899], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([-7.5197e-01,  4.5710e-41, -7.5197e-01,  4.5710e-41,  2.3541e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([2.3543e-35, 0.0000e+00, 2.3724e-35, 0.0000e+00, 1.1210e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0140, -0.0073,  0.0061, -0.0119, -0.0046], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0052, -0.0435,  0.0214,  0.0531,  0.0258], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0029,  0.0062, -0.0036, -0.0084, -0.0214], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0235,  0.0105,  0.0068,  0.0067, -0.0072], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0159,  0.0025,  0.0152, -0.0099,  0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0052,  0.0149, -0.0100, -0.0292,  0.0073], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0124, -0.0039, -0.0044,  0.0149,  0.0036], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0053,  0.0198, -0.0202,  0.0006, -0.0174], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.4233,  0.2751,  0.1588, -0.1496, -0.1850], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([ 7.0065e-45,  0.0000e+00, -1.7014e+38,  1.1515e-40,  1.1659e-42],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([2.6403e-35, 0.0000e+00, 2.3558e-35, 0.0000e+00, 1.2954e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0021, -0.0034, -0.0086, -0.0095, -0.0107], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0200, -0.0003, -0.0050,  0.0210,  0.0063], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0225,  0.0314, -0.0177,  0.0140,  0.0081], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0044, -0.0024, -0.0019,  0.0183,  0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0159,  0.0156,  0.0130, -0.0304, -0.0030], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0202,  0.0183,  0.0028,  0.0047, -0.0380], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0007,  0.0398, -0.0115,  0.0294, -0.0166], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0114,  0.0146,  0.0141, -0.0183, -0.0147], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.4842, -0.4758,  0.3840, -0.1999, -0.3952], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([2.3710e-35, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([2.6905e-43, 0.0000e+00, 6.7262e-44, 0.0000e+00, 2.7010e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([1.4013e-45, 0.0000e+00, 7.0065e-45, 0.0000e+00, 0.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0117, -0.0064, -0.0150,  0.0105, -0.0076], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0419, -0.0036, -0.0115,  0.0044, -0.0057], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0187, -0.0090, -0.0309, -0.0393, -0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0066,  0.0479,  0.0073, -0.0099, -0.0033], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0516, -0.0094,  0.0140, -0.0075, -0.0240], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0178, -0.0042, -0.0148,  0.0059,  0.0207], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0087,  0.0240, -0.0024, -0.0119,  0.0338], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0053, -0.0148, -0.0158, -0.0065,  0.0206], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.4178, -0.1206,  0.0593, -0.4485,  0.2084], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([0.0000e+00, 0.0000e+00, 2.7433e-35, 0.0000e+00, 1.0515e-36],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([0.0000e+00, 0.0000e+00, 8.0855e-43, 0.0000e+00, 2.7081e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([-7.5199e-01,  4.5710e-41, -7.5199e-01,  4.5710e-41,  2.3545e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0036,  0.0119, -0.0101,  0.0014,  0.0088], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0060,  0.0327, -0.0016, -0.0075, -0.0440], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0094,  0.0317,  0.0403, -0.0358,  0.0263], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0114, -0.0073, -0.0358,  0.0003,  0.0179], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0220,  0.0156, -0.0009, -0.0108,  0.0072], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0096, -0.0023, -0.0027, -0.0412,  0.0345], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0144,  0.0096, -0.0149, -0.0059,  0.0062], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0149,  0.0175, -0.0033,  0.0163, -0.0197], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.0801,  0.0219, -0.2219, -0.2126, -0.1274], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([2.3530e-35, 0.0000e+00, 0.0000e+00, 1.4013e-45, 2.9147e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([-7.5198e-01,  4.5710e-41, -7.5198e-01,  4.5710e-41,  2.7417e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([-7.5200e-01,  4.5710e-41, -7.5200e-01,  4.5710e-41,  2.7433e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0013,  0.0098, -0.0140,  0.0067, -0.0033], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0338,  0.0068, -0.0133,  0.0004,  0.0033], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0120,  0.0131,  0.0079,  0.0107, -0.0062], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0095,  0.0003, -0.0077, -0.0209,  0.0235], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0045, -0.0086,  0.0269,  0.0053, -0.0069], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0232,  0.0346, -0.0171, -0.0136,  0.0073], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0004, -0.0046, -0.0125, -0.0141, -0.0105], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0037, -0.0198, -0.0107,  0.0073, -0.0073], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.0405,  0.1405, -0.3363, -0.1362,  0.1816], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([ 2.6390e-35,  0.0000e+00, -7.5190e-01,  4.5710e-41,  1.4013e-45],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([ 2.8150e-35,  0.0000e+00, -7.5190e-01,  4.5710e-41,  8.9683e-44],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([1.0515e-36, 0.0000e+00, 7.2802e-32, 4.5710e-41, 0.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0137,  0.0149,  0.0069,  0.0065,  0.0019], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0048, -0.0019,  0.0185, -0.0167,  0.0056], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0230, -0.0134,  0.0172,  0.0218, -0.0158], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0103,  0.0315,  0.0009, -0.0039,  0.0043], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0031, -0.0064, -0.0105, -0.0146, -0.0070], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0148,  0.0064, -0.0111, -0.0002, -0.0203], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0135,  0.0128, -0.0002,  0.0090,  0.0053], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0150,  0.0091,  0.0021, -0.0022,  0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.1517,  0.4951, -0.3213,  0.3201, -0.1418], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([2.0353e-35, 0.0000e+00, 2.6389e-35, 0.0000e+00, 1.1210e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([ 2.6377e-35,  0.0000e+00, -7.5190e-01,  4.5710e-41,  8.9683e-44],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([ 2.6745e-35,  0.0000e+00, -7.5190e-01,  4.5710e-41,  8.9683e-44],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0040, -0.0006, -0.0025, -0.0089,  0.0142], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-6.4941e-06, -9.1966e-03, -1.9235e-02,  2.1210e-02,  9.1661e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0339, -0.0120, -0.0218, -0.0157,  0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0458, -0.0137, -0.0027, -0.0208, -0.0070], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0097, -0.0148,  0.0067, -0.0169, -0.0089], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 3.0916e-02,  2.3686e-03, -1.7851e-02, -1.2613e-02, -6.7879e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0130, -0.0042,  0.0009, -0.0043, -0.0073], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-8.5224e-05,  1.4313e-02,  1.2407e-03,  8.6697e-03, -2.1605e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.4043,  0.4684, -0.3877, -0.4138,  0.0153], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([-7.5197e-01,  4.5710e-41, -7.5197e-01,  4.5710e-41,  2.8860e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([2.7798e-35, 0.0000e+00, 2.7781e-35, 0.0000e+00, 8.9683e-44],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([2.7416e-35, 0.0000e+00, 2.8499e-35, 0.0000e+00, 1.1210e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0019,  0.0111,  0.0048, -0.0142,  0.0082], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0363,  0.0015, -0.0210, -0.0018,  0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0374, -0.0247, -0.0297,  0.0218,  0.0105], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0001, -0.0471,  0.0151,  0.0295,  0.0157], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0080, -0.0003,  0.0057, -0.0010, -0.0067], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0185,  0.0293,  0.0391,  0.0035,  0.0389], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0062,  0.0050,  0.0150, -0.0153, -0.0255], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0194, -0.0051,  0.0009, -0.0089, -0.0094], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.0183,  0.2091,  0.4347, -0.1456, -0.1362], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([-7.5193e-01,  4.5710e-41, -7.5193e-01,  4.5710e-41,  4.4842e-44],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([ 2.8487e-35,  0.0000e+00, -7.5190e-01,  4.5710e-41,  1.4013e-45],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([-7.5193e-01,  4.5710e-41, -7.5193e-01,  4.5710e-41,  2.7417e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0101,  0.0079, -0.0099,  0.0073,  0.0142], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0060,  0.0005,  0.0052, -0.0007,  0.0269], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0129,  0.0042,  0.0071, -0.0037, -0.0249], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0309, -0.0100,  0.0263,  0.0373, -0.0088], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0016,  0.0146, -0.0087, -0.0108,  0.0092], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0077,  0.0102, -0.0052,  0.0068, -0.0116], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0277,  0.0176,  0.0336, -0.0073,  0.0033], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0118, -0.0119, -0.0092, -0.0077, -0.0062], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.1372,  0.2700, -0.1427,  0.2411, -0.0188], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([-7.5196e-01,  4.5710e-41, -7.5196e-01,  4.5710e-41,  0.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([0.0000e+00, 0.0000e+00, 2.7788e-35, 0.0000e+00, 1.0515e-36],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0203], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0078, -0.0106, -0.0060,  0.0101, -0.0071], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0032,  0.0175,  0.0101, -0.0263, -0.0091], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0486, -0.0114, -0.0100,  0.0034,  0.0147], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0594,  0.0005, -0.0030, -0.0124, -0.0076], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0042,  0.0107, -0.0421,  0.0028,  0.0050], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0095, -0.0185, -0.0072,  0.0217,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0187,  0.0042,  0.0033,  0.0287, -0.0101], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0185, -0.0208,  0.0194, -0.0093, -0.0119], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.4656,  0.3830,  0.2290,  0.4940, -0.2087], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([2.9192e-35, 0.0000e+00, 2.8842e-35, 0.0000e+00, 2.9147e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([2.6738e-35, 0.0000e+00, 2.9545e-35, 0.0000e+00, 3.5873e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([6.7262e-44, 0.0000e+00, 6.7262e-44, 0.0000e+00, 2.9590e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0143,  0.0138, -0.0087,  0.0048, -0.0093], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0184, -0.0018, -0.0162, -0.0144, -0.0230], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0161,  0.0140,  0.0063,  0.0083,  0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0317, -0.0060,  0.0199, -0.0023,  0.0434], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([0.0153, 0.0276, 0.0317, 0.0312, 0.0070], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0362, -0.0167, -0.0152, -0.0203,  0.0117], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0286,  0.0258, -0.0162, -0.0154,  0.0313], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0003, -0.0037, -0.0219,  0.0211, -0.0026], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.1123,  0.3293, -0.4184, -0.1642, -0.2161], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([2.9213e-35, 0.0000e+00, 2.9565e-35, 0.0000e+00, 0.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([-7.5193e-01,  4.5710e-41, -7.5193e-01,  4.5710e-41,  2.9555e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0133,  0.0068,  0.0105, -0.0105, -0.0070], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0396,  0.0179,  0.0253, -0.0114,  0.0334], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0372,  0.0154,  0.0258,  0.0194, -0.0121], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0038,  0.0089,  0.0093, -0.0016, -0.0030], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0099,  0.0115, -0.0350,  0.0011, -0.0024], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0237,  0.0122, -0.0368, -0.0344,  0.0234], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0164, -0.0212,  0.0375,  0.0038, -0.0118], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0025,  0.0064,  0.0002, -0.0214,  0.0024], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.2484,  0.4989, -0.4886, -0.2679,  0.1500], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([-7.5196e-01,  4.5710e-41, -7.5196e-01,  4.5710e-41,  4.4842e-44],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([-7.5193e-01,  4.5710e-41, -7.5193e-01,  4.5710e-41,  2.9543e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([2.8576e-35, 0.0000e+00, 1.4013e-45, 0.0000e+00, 1.3452e-42],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0037,  0.0120, -0.0020, -0.0097,  0.0134], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0204,  0.0145,  0.0036, -0.0117,  0.0015], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0156, -0.0071,  0.0010, -0.0151,  0.0070], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 1.6409e-02, -2.4193e-03,  1.4243e-05,  3.1154e-02, -9.0576e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0410,  0.0163, -0.0194, -0.0079, -0.0084], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0026, -0.0051,  0.0137, -0.0059, -0.0040], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0007, -0.0222, -0.0200, -0.0080,  0.0001], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0028,  0.0102, -0.0014, -0.0022,  0.0038], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.1822, -0.4141,  0.2504,  0.2786,  0.2916], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([2.9893e-35, 0.0000e+00, 2.9185e-35, 0.0000e+00, 1.1210e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([-7.5196e-01,  4.5710e-41, -7.5196e-01,  4.5710e-41,  3.0868e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.4013e-45],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0116, -0.0078, -0.0144, -0.0005,  0.0034], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0206,  0.0182, -0.0115, -0.0059,  0.0126], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0104, -0.0049,  0.0451, -0.0014,  0.0331], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0049,  0.0278,  0.0188, -0.0309,  0.0288], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0040, -0.0320,  0.0120, -0.0117,  0.0101], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0185, -0.0116,  0.0088, -0.0103,  0.0171], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0018,  0.0277, -0.0258,  0.0155,  0.0075], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0185,  0.0180,  0.0207,  0.0183,  0.0194], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.0120, -0.1519,  0.1423, -0.0787, -0.2372], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([ 2.7431e-35,  0.0000e+00, -7.5190e-01,  4.5710e-41,  8.9683e-44],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([-7.5190e-01,  4.5710e-41,  2.8504e-35,  0.0000e+00,  3.1286e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([ 2.9188e-35,  0.0000e+00, -7.5190e-01,  4.5710e-41,  8.9683e-44],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0089, -0.0129, -0.0035, -0.0102, -0.0076], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0155, -0.0024, -0.0372, -0.0036, -0.0261], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0106,  0.0043, -0.0040, -0.0247, -0.0176], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0476,  0.0239, -0.0237,  0.0037,  0.0138], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0036,  0.0266, -0.0193, -0.0177,  0.0046], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0166, -0.0298, -0.0227,  0.0250, -0.0396], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([0.0098, 0.0158, 0.0230, 0.0156, 0.0111], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0059,  0.0203,  0.0176, -0.0094,  0.0167], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.3082,  0.2566,  0.1433, -0.3528, -0.0192], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([-7.5194e-01,  4.5710e-41, -7.5194e-01,  4.5710e-41,  0.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([3.1291e-35, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([2.8841e-35, 0.0000e+00, 3.1642e-35, 0.0000e+00, 3.1653e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0045,  0.0073,  0.0085, -0.0144,  0.0006], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0138,  0.0176,  0.0356, -0.0029,  0.0281], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-9.4512e-05, -3.1574e-02,  8.5721e-05,  1.2710e-02, -4.8186e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0094, -0.0151, -0.0007,  0.0040,  0.0123], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0109,  0.0129,  0.0117, -0.0304, -0.0133], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0158, -0.0198,  0.0258,  0.0114, -0.0154], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0039,  0.0024, -0.0219,  0.0103, -0.0214], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0084, -0.0032,  0.0114, -0.0028, -0.0157], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.2639,  0.1052,  0.1885,  0.3441, -0.1417], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([1.0571e+22, 4.5710e-41, 1.5289e-38, 0.0000e+00, 1.0573e+22],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0101, -0.0027,  0.0029, -0.0154, -0.0073], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0009,  0.0197,  0.0137, -0.0116, -0.0021], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0168, -0.0117, -0.0114,  0.0185, -0.0207], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0265, -0.0121,  0.0146, -0.0309,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0245, -0.0083,  0.0337,  0.0422, -0.0242], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0223,  0.0269, -0.0140, -0.0171, -0.0056], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0213,  0.0042, -0.0204, -0.0153,  0.0048], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0195,  0.0198,  0.0050,  0.0146, -0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.0225,  0.1255, -0.0553,  0.2462, -0.2885], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([ 7.0065e-45,  0.0000e+00, -1.7014e+38,  1.1515e-40,  1.3452e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([1.0515e-36, 0.0000e+00, 7.2858e-32, 4.5710e-41, 1.4013e-45],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([1.0515e-36, 0.0000e+00, 7.2860e-32, 4.5710e-41, 0.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0118,  0.0040, -0.0047, -0.0139, -0.0123], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0050, -0.0178, -0.0134,  0.0448,  0.0096], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0075,  0.0066, -0.0056, -0.0091,  0.0098], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0269, -0.0162, -0.0207, -0.0292, -0.0307], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0311, -0.0667, -0.0032, -0.0126,  0.0182], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0282,  0.0084,  0.0085,  0.0048,  0.0037], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0172,  0.0097, -0.0008, -0.0152, -0.0155], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0040, -0.0062, -0.0078, -0.0012,  0.0097], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.4256,  0.2678,  0.0191, -0.2220,  0.3139], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([3.8857e+23, 4.5710e-41, 1.5289e-38, 0.0000e+00, 7.3872e-32],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([0.0000e+00, 0.0000e+00, 3.1292e-35, 0.0000e+00, 1.0515e-36],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([1.0515e-36, 0.0000e+00, 7.2869e-32, 4.5710e-41, 1.4013e-45],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0049, -0.0034,  0.0068, -0.0102,  0.0054], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0137,  0.0072,  0.0118, -0.0022, -0.0302], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0359,  0.0171,  0.0174, -0.0060, -0.0358], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0065,  0.0015,  0.0068, -0.0120,  0.0241], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0193, -0.0010, -0.0083,  0.0078, -0.0189], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0008, -0.0007, -0.0199,  0.0196,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0205, -0.0040, -0.0091, -0.0463, -0.0097], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0086, -0.0071, -0.0089, -0.0118, -0.0192], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.3467,  0.4074, -0.3496,  0.1966, -0.0053], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([3.2971e-35, 0.0000e+00, 3.2318e-35, 0.0000e+00, 1.1210e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([1.0011e+22, 4.5710e-41, 1.5289e-38, 0.0000e+00, 7.3164e+22],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0027, -0.0026,  0.0085, -0.0008,  0.0109], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0220, -0.0129, -0.0011, -0.0024, -0.0143], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0119, -0.0004, -0.0016,  0.0069, -0.0035], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0117,  0.0145, -0.0009,  0.0225, -0.0050], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0054,  0.0164,  0.0025,  0.0217, -0.0326], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0022, -0.0068,  0.0071, -0.0121,  0.0232], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0212, -0.0139,  0.0221,  0.0097,  0.0168], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0153, -0.0008,  0.0136, -0.0019,  0.0199], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.2239, -0.1919,  0.1821, -0.2551,  0.4952], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([-7.5193e-01,  4.5710e-41, -7.5193e-01,  4.5710e-41,  3.2329e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([1.0515e-36, 0.0000e+00, 7.2872e-32, 4.5710e-41, 1.4013e-45],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([0.0000e+00, 0.0000e+00, 3.1275e-35, 0.0000e+00, 1.0515e-36],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0061,  0.0108, -0.0035, -0.0070, -0.0131], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0013,  0.0090, -0.0040,  0.0456, -0.0191], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0051, -0.0122, -0.0041, -0.0072,  0.0051], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0433,  0.0064,  0.0049,  0.0068,  0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0095,  0.0271, -0.0370, -0.0036,  0.0348], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0012, -0.0075,  0.0167,  0.0026,  0.0170], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0143,  0.0040,  0.0240,  0.0050, -0.0104], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0121,  0.0179, -0.0090,  0.0060,  0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.3875,  0.2908, -0.4704, -0.0451, -0.3488], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([-7.5193e-01,  4.5710e-41, -7.5193e-01,  4.5710e-41,  3.2365e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0048,  0.0068, -0.0035,  0.0037, -0.0147], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0061, -0.0167, -0.0406,  0.0258,  0.0197], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0334,  0.0167,  0.0052, -0.0161, -0.0217], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([0.0096, 0.0307, 0.0288, 0.0290, 0.0337], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0084,  0.0290, -0.0203,  0.0022,  0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0058,  0.0148, -0.0174, -0.0015,  0.0171], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0075,  0.0248,  0.0408, -0.0209,  0.0259], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0150,  0.0057,  0.0215, -0.0120, -0.0035], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.0447, -0.4475, -0.4811, -0.1788, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([3.3396e-35, 0.0000e+00, 3.3392e-35, 0.0000e+00, 1.1210e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([0.0051, 0.0054, 0.0059, 0.0082, 0.0021], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0224,  0.0292, -0.0053,  0.0158, -0.0466], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0152, -0.0302,  0.0080,  0.0163,  0.0377], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0039, -0.0158,  0.0088, -0.0201, -0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0057, -0.0185,  0.0209,  0.0444,  0.0119], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0047,  0.0043, -0.0121,  0.0129,  0.0426], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0027, -0.0361, -0.0119, -0.0175, -0.0034], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0187, -0.0172, -0.0014,  0.0110, -0.0108], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.1638, -0.2644,  0.2125,  0.4535,  0.3779], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([3.4456e-35, 0.0000e+00, 3.3763e-35, 0.0000e+00, 1.1902e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([2.5770e-35, 0.0000e+00, 2.7414e-35, 0.0000e+00, 3.3768e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([3.3836e-35, 0.0000e+00, 1.4013e-45, 0.0000e+00, 1.4013e-45],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0056,  0.0054, -0.0141, -0.0084, -0.0097], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0153,  0.0363,  0.0128,  0.0332,  0.0027], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0013,  0.0136, -0.0027,  0.0669, -0.0132], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([0.0314, 0.0096, 0.0210, 0.0010, 0.0098], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0342, -0.0139, -0.0091, -0.0031, -0.0213], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-1.8187e-03, -2.9165e-02,  4.7043e-05, -3.7837e-02, -2.5281e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0094,  0.0009, -0.0102,  0.0058, -0.0071], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0023, -0.0069, -0.0068,  0.0099,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.3881,  0.4809, -0.2000, -0.2781, -0.4732], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([2.7795e-35, 0.0000e+00, 3.0267e-35, 0.0000e+00, 8.9683e-44],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([-7.5193e-01,  4.5710e-41, -7.5193e-01,  4.5710e-41,  3.3769e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([3.4470e-35, 0.0000e+00, 3.4462e-35, 0.0000e+00, 2.9147e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0053, -0.0050,  0.0101,  0.0014,  0.0016], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0101, -0.0210, -0.0002, -0.0034, -0.0101], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0208, -0.0074,  0.0207, -0.0081, -0.0034], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0388, -0.0138, -0.0174, -0.0331,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0190, -0.0182,  0.0202,  0.0092, -0.0049], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0265, -0.0433, -0.0186,  0.0187, -0.0215], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0271,  0.0515, -0.0538, -0.0010,  0.0096], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0091,  0.0108, -0.0019, -0.0087,  0.0212], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.3836,  0.4320,  0.0568, -0.1431, -0.4481], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([-7.5196e-01,  4.5710e-41, -7.5196e-01,  4.5710e-41,  3.3401e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([-7.5193e-01,  4.5710e-41, -7.5193e-01,  4.5710e-41,  3.3405e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([3.3773e-35, 0.0000e+00, 3.3404e-35, 0.0000e+00, 1.4013e-45],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0033, -0.0107,  0.0096, -0.0085,  0.0044], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0199, -0.0086, -0.0067, -0.0195, -0.0206], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0144,  0.0412,  0.0020, -0.0167, -0.0079], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0072,  0.0015, -0.0197, -0.0077,  0.0136], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0035, -0.0049,  0.0142, -0.0051,  0.0180], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0120,  0.0097,  0.0073, -0.0076,  0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0217,  0.0330,  0.0079,  0.0071, -0.0070], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0075, -0.0120,  0.0199,  0.0210, -0.0219], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.4776, -0.0981,  0.3046, -0.2391, -0.1822], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([ 1.4013e-45,  0.0000e+00, -1.7014e+38,  1.1515e-40,  8.9683e-44],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([3.5520e-35, 0.0000e+00, 3.5169e-35, 0.0000e+00, 0.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([3.4817e-35, 0.0000e+00, 3.3404e-35, 0.0000e+00, 2.6008e-42],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([0.0131, 0.0050, 0.0038, 0.0105, 0.0129], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0326, -0.0236, -0.0071,  0.0036,  0.0158], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-2.4653e-02,  2.9879e-02,  5.9825e-02, -1.8760e-02, -6.3289e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0098,  0.0181, -0.0024,  0.0039, -0.0367], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0008, -0.0179,  0.0119, -0.0015,  0.0073], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0318,  0.0041,  0.0277, -0.0016, -0.0472], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0081, -0.0260,  0.0156,  0.0199,  0.0368], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0081,  0.0131, -0.0068,  0.0110, -0.0144], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.4375, -0.2724,  0.3105,  0.3289,  0.4399], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([2.3705e-35, 0.0000e+00, 3.1298e-35, 0.0000e+00, 0.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([3.5176e-35, 0.0000e+00, 3.5858e-35, 0.0000e+00, 0.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0020,  0.0121, -0.0141, -0.0031,  0.0078], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 4.3952e-03, -5.9489e-03, -4.2409e-05, -2.0410e-02,  5.0279e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0425, -0.0244,  0.0291,  0.0124,  0.0074], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0260,  0.0128,  0.0023,  0.0081, -0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0121, -0.0365, -0.0049, -0.0496, -0.0073], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0192, -0.0022, -0.0027, -0.0094,  0.0190], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0102,  0.0261,  0.0091, -0.0040,  0.0178], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0021, -0.0047,  0.0034,  0.0108,  0.0213], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.0082, -0.0116, -0.0604, -0.2963, -0.4538], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([3.6223e-35, 0.0000e+00, 3.6202e-35, 0.0000e+00, 1.1210e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([-7.5197e-01,  4.5710e-41, -7.5197e-01,  4.5710e-41,  3.6216e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([-7.5198e-01,  4.5710e-41, -7.5198e-01,  4.5710e-41,  3.6226e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0087, -0.0007, -0.0143,  0.0045, -0.0081], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0350, -0.0105,  0.0113,  0.0193,  0.0021], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0057, -0.0062, -0.0076, -0.0045,  0.0177], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([5.9634e-02, 8.2115e-03, 1.6088e-02, 3.0667e-02, 8.5203e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0229,  0.0136, -0.0268, -0.0049,  0.0040], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0185, -0.0055, -0.0197, -0.0043, -0.0074], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0089, -0.0282,  0.0300, -0.0151, -0.0340], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0204, -0.0074,  0.0067,  0.0038, -0.0122], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([0.2403, 0.2634, 0.0703, 0.3887, 0.3405], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([3.6203e-35, 0.0000e+00, 3.5171e-35, 0.0000e+00, 1.1210e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([3.5850e-35, 0.0000e+00, 3.3395e-35, 0.0000e+00, 1.1210e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([-7.5197e-01,  4.5710e-41, -7.5197e-01,  4.5710e-41,  3.5509e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0058,  0.0153, -0.0105,  0.0085, -0.0019], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0010, -0.0254, -0.0127,  0.0131,  0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0208,  0.0015,  0.0068, -0.0144,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0326,  0.0097, -0.0230,  0.0095, -0.0117], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0153,  0.0082, -0.0079,  0.0127,  0.0155], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0057, -0.0238, -0.0225,  0.0105,  0.0266], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0162, -0.0089, -0.0138,  0.0270,  0.0067], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0022,  0.0056,  0.0088,  0.0187,  0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.1645,  0.1712, -0.2382, -0.1484,  0.1977], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([9.9949e+21, 4.5710e-41, 1.5289e-38, 0.0000e+00, 9.9024e+21],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([-7.5196e-01,  4.5710e-41, -7.5196e-01,  4.5710e-41,  3.6929e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([3.6576e-35, 0.0000e+00, 3.6553e-35, 0.0000e+00, 3.3402e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0117,  0.0079, -0.0156, -0.0027, -0.0071], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([0.0235, 0.0101, 0.0091, 0.0145, 0.0214], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0066, -0.0045, -0.0061,  0.0056,  0.0091], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0116, -0.0158,  0.0080,  0.0218,  0.0407], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0169,  0.0138, -0.0386,  0.0306, -0.0082], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0202, -0.0282,  0.0198, -0.0105,  0.0102], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0019, -0.0122, -0.0252, -0.0078, -0.0422], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0039, -0.0098,  0.0035, -0.0179, -0.0196], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.4198, -0.2358, -0.4826,  0.0458,  0.2629], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([-7.5195e-01,  4.5710e-41, -7.5195e-01,  4.5710e-41,  7.0065e-45],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([-7.5194e-01,  4.5710e-41, -7.5194e-01,  4.5710e-41,  2.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([1.0515e-36, 0.0000e+00, 1.0652e+22, 4.5710e-41, 1.4013e-45],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0096, -0.0021,  0.0070, -0.0033, -0.0105], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0033,  0.0056,  0.0058,  0.0002, -0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0133, -0.0355, -0.0132, -0.0069, -0.0166], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0013,  0.0367, -0.0195,  0.0072, -0.0133], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0036, -0.0171, -0.0350, -0.0255, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0113,  0.0128,  0.0186, -0.0091, -0.0263], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0065,  0.0206, -0.0106, -0.0080, -0.0241], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0144,  0.0067, -0.0061, -0.0166,  0.0112], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.0852, -0.0873,  0.2420, -0.2327,  0.0933], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([2.3723e-35, 0.0000e+00, 2.3705e-35, 0.0000e+00, 0.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([ 4.5919e-41,  4.1478e-43,  5.1708e-43,  0.0000e+00, -7.5192e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0156,  0.0065, -0.0011,  0.0051,  0.0037], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0114,  0.0186, -0.0092, -0.0083, -0.0027], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0081, -0.0105, -0.0139,  0.0220, -0.0103], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0123,  0.0044,  0.0007, -0.0178, -0.0047], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0099,  0.0221,  0.0058,  0.0180,  0.0401], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0141,  0.0126, -0.0126,  0.0200,  0.0098], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0010, -0.0359,  0.0243, -0.0223, -0.0011], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0195,  0.0212, -0.0154,  0.0049, -0.0037], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.0680, -0.2403, -0.2239, -0.2338, -0.2574], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([-7.5195e-01,  4.5710e-41, -7.5195e-01,  4.5710e-41,  4.4842e-44],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([1.1210e-43, 0.0000e+00, 6.7262e-44, 0.0000e+00, 3.2295e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([3.6911e-35, 0.0000e+00, 3.7968e-35, 0.0000e+00, 1.1210e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0110,  0.0009,  0.0090,  0.0043, -0.0114], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0241, -0.0413, -0.0138,  0.0272, -0.0250], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0291,  0.0234, -0.0307, -0.0109, -0.0328], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0164,  0.0108,  0.0044,  0.0129, -0.0159], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0179, -0.0070,  0.0003, -0.0012,  0.0027], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0043, -0.0251,  0.0182, -0.0045,  0.0196], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0382,  0.0134, -0.0280, -0.0179, -0.0077], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0158, -0.0169,  0.0090,  0.0022, -0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.2740, -0.0222,  0.0412,  0.4144, -0.3032], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([ 3.7946e-35,  0.0000e+00, -7.5190e-01,  4.5710e-41,  8.9683e-44],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([0.0000e+00, 0.0000e+00, 3.8255e-43, 0.0000e+00, 3.7967e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([3.2347e-35, 0.0000e+00, 3.7966e-35, 0.0000e+00, 4.4842e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0062, -0.0143,  0.0028,  0.0050,  0.0025], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0490,  0.0088,  0.0002,  0.0095, -0.0132], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0192, -0.0499,  0.0010,  0.0113, -0.0034], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0127, -0.0338, -0.0298, -0.0023, -0.0506], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0027,  0.0234,  0.0133, -0.0136,  0.0363], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0490, -0.0202,  0.0207,  0.0046,  0.0296], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0391,  0.0050,  0.0010,  0.0291, -0.0120], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0018,  0.0160,  0.0051, -0.0075,  0.0065], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([0.3576, 0.4082, 0.3525, 0.0231, 0.4036], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([1.0500e+22, 4.5710e-41, 1.5289e-38, 0.0000e+00, 7.4841e-32],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([-7.5198e-01,  4.5710e-41, -7.5198e-01,  4.5710e-41,  3.8311e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([1.0515e-36, 0.0000e+00, 1.0656e+22, 4.5710e-41, 1.4013e-45],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0101, -0.0004,  0.0049, -0.0082,  0.0072], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0031,  0.0135, -0.0215, -0.0104, -0.0159], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0089, -0.0131, -0.0093,  0.0003, -0.0268], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0221, -0.0016,  0.0180,  0.0382,  0.0287], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0547, -0.0186,  0.0017, -0.0130,  0.0038], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0086, -0.0475,  0.0212, -0.0077, -0.0045], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0051, -0.0085,  0.0184, -0.0013,  0.0004], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0018, -0.0009,  0.0010, -0.0209, -0.0027], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.4135,  0.0353,  0.0525, -0.4456,  0.1480], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([-7.5190e-01,  4.5710e-41, -7.5190e-01,  4.5710e-41,  3.7975e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([3.7961e-35, 0.0000e+00, 3.8661e-35, 0.0000e+00, 0.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([-7.5201e-01,  4.5710e-41, -7.5201e-01,  4.5710e-41,  3.9011e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0095, -0.0006,  0.0039,  0.0134, -0.0025], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-3.7867e-02, -4.9789e-04,  5.6714e-05,  6.5894e-03, -2.9486e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0350,  0.0001,  0.0222, -0.0091,  0.0335], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0224,  0.0151, -0.0147, -0.0116,  0.0032], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0129, -0.0031, -0.0533, -0.0095,  0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 1.1414e-02, -2.5914e-02, -9.9251e-05,  1.0173e-02,  2.8444e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0060,  0.0202,  0.0025, -0.0049,  0.0073], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0056, -0.0038,  0.0183, -0.0147, -0.0141], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.1685,  0.4533, -0.4173, -0.2168, -0.2630], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([-7.5193e-01,  4.5710e-41, -7.5193e-01,  4.5710e-41, -2.5137e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([3.9014e-35, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([0.0000e+00, 0.0000e+00, 1.3242e-42, 0.0000e+00, 3.9023e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0145, -0.0051,  0.0092, -0.0053, -0.0142], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([ 0.0109, -0.0063,  0.0050,  0.0206, -0.0102], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0043,  0.0126, -0.0071,  0.0156,  0.0241], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0168,  0.0027, -0.0042,  0.0121, -0.0248], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0056, -0.0177,  0.0122,  0.0320, -0.0252], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0099,  0.0390,  0.0038,  0.0373,  0.0148], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([ 0.0309,  0.0225, -0.0017, -0.0155,  0.0013], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0177, -0.0096,  0.0138, -0.0101, -0.0179], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.3283,  0.4954, -0.4285,  0.0422,  0.3393], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([1.0515e-36, 0.0000e+00, 1.0742e+22, 4.5710e-41, 1.4013e-45],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([-7.5193e-01,  4.5710e-41, -7.5193e-01,  4.5710e-41,  3.9717e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([3.2976e-35, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0101,  0.0152,  0.0074,  0.0153,  0.0112], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0266,  0.0262,  0.0200,  0.0236, -0.0372], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0095,  0.0305, -0.0003, -0.0187, -0.0198], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0072,  0.0077,  0.0102,  0.0262, -0.0046], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0174, -0.0174,  0.0109,  0.0289,  0.0031], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0351,  0.0389,  0.0253, -0.0048, -0.0344], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0025, -0.0164,  0.0021, -0.0237,  0.0092], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0039, -0.0165, -0.0045,  0.0151,  0.0032], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.2391,  0.2710, -0.3748,  0.3570,  0.4494], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([3.9023e-35, 0.0000e+00, 3.9713e-35, 0.0000e+00, 8.9683e-44],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([-7.5196e-01,  4.5710e-41, -7.5196e-01,  4.5710e-41,  4.0094e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0088,  0.0142, -0.0124, -0.0086,  0.0129], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0032, -0.0063, -0.0012,  0.0359, -0.0196], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0133,  0.0238,  0.0013,  0.0262, -0.0140], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0126,  0.0210,  0.0295,  0.0030, -0.0088], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([ 0.0175,  0.0151,  0.0099,  0.0029, -0.0063], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0211, -0.0334,  0.0397, -0.0005,  0.0164], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0238,  0.0234, -0.0220, -0.0303, -0.0327], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0073,  0.0035,  0.0170, -0.0219,  0.0085], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.4426, -0.2341,  0.4929, -0.2190, -0.4094], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([-7.5190e-01,  4.5710e-41,  3.9716e-35,  0.0000e+00,  3.9708e-35],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([4.0423e-35, 0.0000e+00, 4.0432e-35, 0.0000e+00, 1.1210e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([0.0000e+00, 0.0000e+00, 3.8947e-35, 0.0000e+00, 1.0515e-36],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0103, -0.0023, -0.0053, -0.0092, -0.0059], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0127, -0.0202,  0.0006, -0.0126, -0.0110], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0048, -0.0058, -0.0078, -0.0001,  0.0097], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0070, -0.0161, -0.0078,  0.0107,  0.0098], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0013,  0.0035, -0.0022,  0.0081, -0.0064], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0085,  0.0324, -0.0325,  0.0085,  0.0106], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0171, -0.0008,  0.0063,  0.0069,  0.0008], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0165,  0.0171,  0.0212, -0.0062, -0.0026], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([-0.3733,  0.1618,  0.0351, -0.3529, -0.2384], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0030, -0.0067, -0.0028,  0.0118, -0.0105], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0115, -0.0141,  0.0259,  0.0116,  0.0110], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([0.0191, 0.0348, 0.0206, 0.0175, 0.0262], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0012, -0.0188, -0.0174, -0.0362,  0.0145], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0039,  0.0250,  0.0119, -0.0134, -0.0177], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0278, -0.0290, -0.0254,  0.0183, -0.0068], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0073, -0.0484,  0.0147,  0.0176, -0.0021], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0041,  0.0017, -0.0177,  0.0001, -0.0168], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([0.2123, 0.1525, 0.4120, 0.0203, 0.0492], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([4.1147e-35, 0.0000e+00, 4.0084e-35, 0.0000e+00, 1.1210e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([4.0780e-35, 0.0000e+00, 4.0774e-35, 0.0000e+00, 8.2957e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([4.0773e-35, 0.0000e+00, 4.0434e-35, 0.0000e+00, 1.1210e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0029,  0.0019,  0.0008, -0.0024, -0.0100], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0062,  0.0333, -0.0361, -0.0089, -0.0103], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0297, -0.0307,  0.0018, -0.0125,  0.0157], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([ 0.0104,  0.0149, -0.0374,  0.0153,  0.0113], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0091, -0.0427,  0.0159, -0.0373,  0.0100], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([ 0.0168, -0.0163, -0.0087,  0.0014, -0.0131], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0281, -0.0186, -0.0050,  0.0110, -0.0044], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([ 0.0130, -0.0178, -0.0145, -0.0189,  0.0031], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.3940,  0.4585, -0.4188, -0.3951,  0.0482], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([4.0077e-35, 0.0000e+00, 2.9200e-35, 0.0000e+00, 1.0697e+22],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([0.0000e+00, 0.0000e+00, 4.0784e-35, 0.0000e+00, 1.0515e-36],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([4.1877e-35, 0.0000e+00, 4.1849e-35, 0.0000e+00, 3.8115e-43],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([-0.0141,  0.0122, -0.0121,  0.0100, -0.0067], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0354, -0.0201, -0.0330, -0.0105,  0.0110], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([ 0.0122,  0.0033,  0.0100, -0.0423,  0.0235], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0009, -0.0057, -0.0034, -0.0205, -0.0032], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0189,  0.0122, -0.0389,  0.0195, -0.0076], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0060, -0.0074,  0.0026,  0.0151,  0.0123], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0040, -0.0062,  0.0145,  0.0277,  0.0103], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2] Initializing Mamba2 mixer...
  [Mamba2] d_in_proj: 8512
  [Mamba2] Initialized in_proj with input_dim=2048, output_dim=8512
  [Mamba2] in_proj.weight shape: torch.Size([8512, 2048])
  [Mamba2] in_proj.weight sample values: tensor([-0.0202,  0.0087,  0.0197, -0.0129,  0.0206], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized conv1d with in_channels=4352, out_channels=4352, kernel_size=4
  [Mamba2] conv1d.weight shape: torch.Size([4352, 1, 4])
  [Mamba2] conv1d.weight sample values: tensor([ 0.0395,  0.2258,  0.2920, -0.2310,  0.0049], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized dt_bias with shape: torch.Size([64])
  [Mamba2] dt_bias sample values: tensor([0., 0., 0., 0., 0.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log with shape: torch.Size([64])
  [Mamba2] A_log sample values: tensor([-7.5194e-01,  4.5710e-41, -7.5194e-01,  4.5710e-41,  6.7262e-44],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized D with shape: torch.Size([64])
  [Mamba2] D sample values: tensor([0.0000e+00, 0.0000e+00, 4.0425e-35, 0.0000e+00, 1.0515e-36],
       grad_fn=<SliceBackward0>)
  [Mamba2] Initialized A_log and D parameters.
[RMSNorm] Initialized RMSNorm with d=4096, eps=1e-05
[RMSNorm] weight shape: torch.Size([4096])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba2] Initialized RMSNorm.
  [Mamba2] Initialized out_proj.
  [Mamba2] out_proj.weight shape: torch.Size([2048, 4096])
  [Mamba2] out_proj.weight sample values: tensor([ 0.0095,  0.0085, -0.0055,  0.0126, -0.0142], grad_fn=<SliceBackward0>)
[Mamba2] Initializing parameters with normal distribution.
  [Mamba2] dt_bias after init: tensor([-0.0257, -0.0178, -0.0030, -0.0275, -0.0112], grad_fn=<SliceBackward0>)
  [Mamba2] A_log after init: tensor([-0.0155, -0.0134, -0.0184, -0.0407, -0.0142], grad_fn=<SliceBackward0>)
  [Mamba2] D after init: tensor([-0.0296, -0.0056, -0.0011,  0.0102,  0.0201], grad_fn=<SliceBackward0>)
  [Mamba2] in_proj.weight after init: tensor([-0.0010,  0.0305, -0.0047,  0.0336,  0.0076], grad_fn=<SliceBackward0>)
  [Mamba2] conv1d.weight after init: tensor([-0.0002,  0.0275, -0.0008,  0.0007, -0.0164], grad_fn=<SliceBackward0>)
  [Mamba2] out_proj.weight after init: tensor([-0.0017,  0.0139,  0.0172,  0.0178,  0.0265], grad_fn=<SliceBackward0>)
[Mamba2] Parameters initialized.
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d=2048, eps=1e-05
[RMSNorm] weight shape: torch.Size([2048])
[RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Initialized embedding with vocab_size=50288 and d_model=2048
[Mamba2LMHeadModel] Initialized layer 1/48
[Mamba2LMHeadModel] Initialized layer 2/48
[Mamba2LMHeadModel] Initialized layer 3/48
[Mamba2LMHeadModel] Initialized layer 4/48
[Mamba2LMHeadModel] Initialized layer 5/48
[Mamba2LMHeadModel] Initialized layer 6/48
[Mamba2LMHeadModel] Initialized layer 7/48
[Mamba2LMHeadModel] Initialized layer 8/48
[Mamba2LMHeadModel] Initialized layer 9/48
[Mamba2LMHeadModel] Initialized layer 10/48
[Mamba2LMHeadModel] Initialized layer 11/48
[Mamba2LMHeadModel] Initialized layer 12/48
[Mamba2LMHeadModel] Initialized layer 13/48
[Mamba2LMHeadModel] Initialized layer 14/48
[Mamba2LMHeadModel] Initialized layer 15/48
[Mamba2LMHeadModel] Initialized layer 16/48
[Mamba2LMHeadModel] Initialized layer 17/48
[Mamba2LMHeadModel] Initialized layer 18/48
[Mamba2LMHeadModel] Initialized layer 19/48
[Mamba2LMHeadModel] Initialized layer 20/48
[Mamba2LMHeadModel] Initialized layer 21/48
[Mamba2LMHeadModel] Initialized layer 22/48
[Mamba2LMHeadModel] Initialized layer 23/48
[Mamba2LMHeadModel] Initialized layer 24/48
[Mamba2LMHeadModel] Initialized layer 25/48
[Mamba2LMHeadModel] Initialized layer 26/48
[Mamba2LMHeadModel] Initialized layer 27/48
[Mamba2LMHeadModel] Initialized layer 28/48
[Mamba2LMHeadModel] Initialized layer 29/48
[Mamba2LMHeadModel] Initialized layer 30/48
[Mamba2LMHeadModel] Initialized layer 31/48
[Mamba2LMHeadModel] Initialized layer 32/48
[Mamba2LMHeadModel] Initialized layer 33/48
[Mamba2LMHeadModel] Initialized layer 34/48
[Mamba2LMHeadModel] Initialized layer 35/48
[Mamba2LMHeadModel] Initialized layer 36/48
[Mamba2LMHeadModel] Initialized layer 37/48
[Mamba2LMHeadModel] Initialized layer 38/48
[Mamba2LMHeadModel] Initialized layer 39/48
[Mamba2LMHeadModel] Initialized layer 40/48
[Mamba2LMHeadModel] Initialized layer 41/48
[Mamba2LMHeadModel] Initialized layer 42/48
[Mamba2LMHeadModel] Initialized layer 43/48
[Mamba2LMHeadModel] Initialized layer 44/48
[Mamba2LMHeadModel] Initialized layer 45/48
[Mamba2LMHeadModel] Initialized layer 46/48
[Mamba2LMHeadModel] Initialized layer 47/48
[Mamba2LMHeadModel] Initialized layer 48/48
[Mamba2LMHeadModel] Initialized LM Head and tied weights with embedding.
[Mamba2LMHeadModel] Model loaded and set to evaluation mode.
[Mamba2LMHeadModel] Loaded model parameters:
  backbone.embedding.weight: torch.Size([50288, 2048])
    Sample values from backbone.embedding.weight: tensor([ 0.2966,  0.4053,  0.1936, -0.1335,  0.1827], grad_fn=<SliceBackward0>)

Generating text for prompt: 'CUDA is Nvidia's biggest moat for'
CUDA is Nvidia's biggest moat for[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] Allocating InferenceCache for batch size: 1
[InferenceCache] conv_state shape: torch.Size([1, 4352, 4])
[InferenceCache] conv_state sample values: tensor([0., 0., 0., 0., 0.])
[InferenceCache] ssm_state shape: torch.Size([1, 64, 64, 128])
[InferenceCache] ssm_state sample values: tensor([0., 0., 0., 0., 0.])
[Mamba2LMHeadModel] Forward pass input_ids shape: torch.Size([1, 1])
[Mamba2LMHeadModel] input_ids sample values: tensor([18094])
[Mamba2LMHeadModel] Embedding output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Embedding sample values: tensor([ 0.1313,  0.1215,  0.3210, -0.1368,  0.0258], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 1/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0426], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([4.8460], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1128,  0.1180,  0.2849, -0.1214,  0.0225], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0210,  0.2543, -0.2305,  0.0129, -0.2272], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0210,  0.2543, -0.2305,  0.0129, -0.2272], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0169, -0.1016,  0.6094, -1.0179, -0.1308], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.3650, -0.0780,  0.3117,  0.0138,  0.3269], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.0169,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0009, -0.0061, -0.0210,  0.0222, -0.0036], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2286,  0.2092,  0.2493,  0.0714, -0.2604], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1273,  0.1155,  0.1401,  0.0370, -0.1133], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1273,  0.1155,  0.1401,  0.0370, -0.1133], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1807,  0.1487, -0.1868, -0.2302,  0.1298], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2641,  0.0648, -0.2774, -0.2694,  0.0260], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6180, -2.5226, -3.0473, -3.3078, -3.9090], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0131, 0.0126, 0.0124, 0.0248, 0.0101], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9663, 0.9688, 0.9631, 0.9213, 0.9613], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1273,  0.1155,  0.1401,  0.0370, -0.1133], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0003,  0.0002, -0.0003, -0.0004,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0003,  0.0002, -0.0003, -0.0004,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0046, -0.0041, -0.0050, -0.0013,  0.0041], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0440,  0.0399,  0.0484,  0.0128, -0.0392], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0440,  0.0399,  0.0484,  0.0128, -0.0392], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 4.6797e-04,  5.7175e-03, -4.9392e-03,  8.2725e-05,  3.9459e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0076], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([11.4353], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0054,  0.0705, -0.0482,  0.0016,  0.0460], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0054,  0.0705, -0.0482,  0.0016,  0.0460], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.6313,  1.4856, -0.6370, -0.4046, -0.9592], grad_fn=<SliceBackward0>)
  [Layer 1] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 1] Output sample values after mixer: tensor([-0.6313,  1.4856, -0.6370, -0.4046, -0.9592], grad_fn=<SliceBackward0>)
  [Layer 1] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 1] Residual connection sample values: tensor([-0.5000,  1.6070, -0.3160, -0.5414, -0.9334], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 2/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.8979], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.0553], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1905,  0.4836, -0.1110, -0.1992, -0.3355], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.2765, -0.4847, -2.5633,  5.7806, -1.5751], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.2765, -0.4847, -2.5633,  5.7806, -1.5751], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.7522, -1.8367,  2.6784,  7.6375, -1.1381], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.5784, 0.3710, 0.7772, 0.9911, 3.1629], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.7522,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0180, -0.0637,  0.1045,  0.4051,  0.0621], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0118, -0.2183,  0.0939,  1.4588,  0.0490], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0059, -0.0973,  0.0492,  1.1836,  0.0251], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0059, -0.0973,  0.0492,  1.1836,  0.0251], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0239,  0.0498,  0.0542, -0.2644,  0.4467], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0303, -0.1847,  0.0406, -0.2784, -0.2757], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-19.8515, -18.6852, -13.5640,  -2.4189,  -0.4662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0292, 0.0091, 0.0454, 0.0196, 0.3016], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5602, 0.8437, 0.5405, 0.9537, 0.8688], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0059, -0.0973,  0.0492,  1.1836,  0.0251], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.0962e-06, -8.5355e-06, -9.2879e-06,  4.5297e-05, -7.6526e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-4.0962e-06, -8.5355e-06, -9.2879e-06,  4.5297e-05, -7.6526e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0004, -0.0060,  0.0030,  0.0728,  0.0015], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0044, -0.0731,  0.0370,  0.8899,  0.0189], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0044, -0.0731,  0.0370,  0.8899,  0.0189], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-4.4042e-03,  1.3512e-02, -6.7809e-03,  5.1285e+00, -5.0985e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.8183], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.1054], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0062,  0.0090, -0.0101,  3.0865, -0.0077], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0062,  0.0090, -0.0101,  3.0865, -0.0077], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.4323,  0.2513,  0.4738,  0.0200,  0.0243], grad_fn=<SliceBackward0>)
  [Layer 2] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 2] Output sample values after mixer: tensor([-0.4323,  0.2513,  0.4738,  0.0200,  0.0243], grad_fn=<SliceBackward0>)
  [Layer 2] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 2] Residual connection sample values: tensor([-0.9323,  1.8583,  0.1579, -0.5214, -0.9091], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 3/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.0703], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9666], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3571,  0.5565,  0.0542, -0.1841, -0.3452], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.5777,  0.3860, -0.6934, -2.5354,  0.8674], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.5777,  0.3860, -0.6934, -2.5354,  0.8674], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.1963, -0.3184, -1.6561,  1.3048,  0.1652], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.1698, 0.9654, 2.1665, 1.8739, 2.1385], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 1.1963, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0292,  0.0048,  0.2159,  0.1481, -0.0059], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0277, -0.0145,  0.3396,  0.1357, -0.0222], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0140, -0.0072,  0.1983,  0.0725, -0.0110], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0140, -0.0072,  0.1983,  0.0725, -0.0110], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3475, -0.0262, -0.0732,  0.0074, -0.0898], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.4415,  0.0354, -0.1988, -0.0924,  0.6227], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6506, -3.9939, -6.7806, -0.9419, -6.0308], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0711, 0.0527, 0.1131, 0.0420, 0.1706], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9548, 0.8103, 0.4645, 0.9612, 0.3574], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0140, -0.0072,  0.1983,  0.0725, -0.0110], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.4648e-04, -2.6082e-05, -7.2944e-05,  7.3473e-06, -8.9507e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 3.4648e-04, -2.6082e-05, -7.2944e-05,  7.3473e-06, -8.9507e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0003, -0.0001,  0.0036,  0.0013, -0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0066, -0.0034,  0.0939,  0.0343, -0.0052], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0066, -0.0034,  0.0939,  0.0343, -0.0052], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0018, -0.0008, -0.0217, -0.0064, -0.0032], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.2303], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9015], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0023, -0.0011, -0.0239, -0.0108, -0.0031], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0023, -0.0011, -0.0239, -0.0108, -0.0031], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0036, -0.0432, -0.1122,  0.2833,  0.1078], grad_fn=<SliceBackward0>)
  [Layer 3] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 3] Output sample values after mixer: tensor([ 0.0036, -0.0432, -0.1122,  0.2833,  0.1078], grad_fn=<SliceBackward0>)
  [Layer 3] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 3] Residual connection sample values: tensor([-0.9286,  1.8151,  0.0457, -0.2382, -0.8013], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 4/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.1905], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9165], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3973,  0.5881,  0.0173, -0.0931, -0.3439], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-2.2171, -0.2160,  1.2662, -0.5757,  0.7680], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-2.2171, -0.2160,  1.2662, -0.5757,  0.7680], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0897, -0.0484,  0.1687, -0.7693, -1.0675], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4714, 2.7259, 2.9746, 0.9247, 0.8770], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.0897, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0151, -0.0019, -0.0272,  0.0222,  0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0587, -0.0371, -0.0754,  0.0064,  0.2937], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0285, -0.0182, -0.0363,  0.0032,  0.1682], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0285, -0.0182, -0.0363,  0.0032,  0.1682], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3216,  0.7312, -0.0384, -0.0189,  0.4350], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.7387,  0.3917,  0.0519, -0.2733,  0.1456], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.7127,  -1.2862,  -1.4870, -27.0280,  -4.0727],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0265, 0.0362, 0.0368, 0.0081, 0.0888], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9557, 0.9545, 0.9467, 0.8023, 0.6966], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0285, -0.0182, -0.0363,  0.0032,  0.1682], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.4238e-04, -5.5112e-04,  2.8972e-05,  1.4226e-05, -3.2787e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.4238e-04, -5.5112e-04,  2.8972e-05,  1.4226e-05, -3.2787e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0015, -0.0010, -0.0020,  0.0002,  0.0091], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0176, -0.0112, -0.0224,  0.0020,  0.1038], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0176, -0.0112, -0.0224,  0.0020,  0.1038], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0038,  0.0011, -0.0221, -0.0004,  0.0544], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([2.6956], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6091], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0049,  0.0009, -0.0277, -0.0004,  0.0343], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0049,  0.0009, -0.0277, -0.0004,  0.0343], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0218,  0.0311,  0.2894,  0.0269, -0.0646], grad_fn=<SliceBackward0>)
  [Layer 4] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 4] Output sample values after mixer: tensor([-0.0218,  0.0311,  0.2894,  0.0269, -0.0646], grad_fn=<SliceBackward0>)
  [Layer 4] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 4] Residual connection sample values: tensor([-0.9505,  1.8462,  0.3351, -0.2113, -0.8659], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 5/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.3960], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8464], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3631,  0.5829,  0.1196, -0.0773, -0.3414], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2840,  1.0912, -1.4123, -0.9904, -1.3571], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2840,  1.0912, -1.4123, -0.9904, -1.3571], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.0174, -1.6878,  0.6597,  2.3109, -3.1647], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.2634, 1.9134, 2.4119, 1.8900, 0.7364], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -1.0174,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0777, -0.0842, -0.0953,  0.0891, -0.3790], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1293, -0.1215, -0.1648,  0.0630, -0.3848], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0605, -0.0571, -0.0756,  0.0325, -0.1558], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0605, -0.0571, -0.0756,  0.0325, -0.1558], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 1.6077e-03, -1.4577e-02, -1.6665e-02, -7.4727e-05, -1.7178e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0667,  0.2347, -0.0179,  0.0823, -0.0300], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.5763,  -1.0444,  -0.8388,  -5.6765, -20.4018],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0137, 0.0788, 0.3944, 0.0886, 0.0071], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9786, 0.9210, 0.7183, 0.6049, 0.8651], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0605, -0.0571, -0.0756,  0.0325, -0.1558], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.3322e-06,  1.2079e-05,  1.3810e-05,  6.1924e-08,  1.4235e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.3322e-06,  1.2079e-05,  1.3810e-05,  6.1924e-08,  1.4235e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0002, -0.0002, -0.0003,  0.0001, -0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0328, -0.0309, -0.0410,  0.0176, -0.0844], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0328, -0.0309, -0.0410,  0.0176, -0.0844], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0053, -0.0252,  0.0113, -0.0047,  0.0235], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.9941], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.0030], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0084, -0.0406,  0.0174, -0.0076,  0.0333], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0084, -0.0406,  0.0174, -0.0076,  0.0333], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0180,  0.2528,  0.2115, -0.3194,  0.2177], grad_fn=<SliceBackward0>)
  [Layer 5] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 5] Output sample values after mixer: tensor([ 0.0180,  0.2528,  0.2115, -0.3194,  0.2177], grad_fn=<SliceBackward0>)
  [Layer 5] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 5] Residual connection sample values: tensor([-0.9325,  2.0990,  0.5466, -0.5306, -0.6482], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 6/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.5745], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7969], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3275,  0.5705,  0.1704, -0.1710, -0.2309], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1914,  0.3053,  0.8833,  0.7736, -0.5469], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1914,  0.3053,  0.8833,  0.7736, -0.5469], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.4182, -0.3348, -0.1450,  0.1416, -0.8840], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.6303, 1.8494, 1.0915, 1.4616, 1.9448], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.4182,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0484, -0.0419, -0.0509, -0.0116, -0.2942], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0828, -0.1143, -0.1130,  0.0505, -0.2245], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0431, -0.0539, -0.0533,  0.0259, -0.0997], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0431, -0.0539, -0.0533,  0.0259, -0.0997], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1147, -0.2579, -0.2378, -0.1164, -0.0192], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0205,  0.3594, -0.2645, -0.1219,  0.4703], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9866, -8.7747, -3.3046, -2.9913, -3.3435], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1239, 0.0842, 0.2317, 0.2578, 0.1912], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8850, 0.4776, 0.4650, 0.4625, 0.5276], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0431, -0.0539, -0.0533,  0.0259, -0.0997], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0006, -0.0014, -0.0013, -0.0006, -0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0006, -0.0014, -0.0013, -0.0006, -0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0044, -0.0055, -0.0055,  0.0027, -0.0103], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0138, -0.0172, -0.0170,  0.0083, -0.0319], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0138, -0.0172, -0.0170,  0.0083, -0.0319], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0014, -0.0030, -0.0106,  0.0044,  0.0064], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.1679], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9253], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0026, -0.0025, -0.0084,  0.0045,  0.0046], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0026, -0.0025, -0.0084,  0.0045,  0.0046], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2513,  0.0538, -0.5076, -0.4927,  0.1452], grad_fn=<SliceBackward0>)
  [Layer 6] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 6] Output sample values after mixer: tensor([-0.2513,  0.0538, -0.5076, -0.4927,  0.1452], grad_fn=<SliceBackward0>)
  [Layer 6] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 6] Residual connection sample values: tensor([-1.1838,  2.1528,  0.0390, -1.0234, -0.5030], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 7/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.7111], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7645], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3482,  0.5259,  0.0106, -0.2756, -0.1484], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.6386, -1.9115, -1.5535, -0.6682, -0.2364], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.6386, -1.9115, -1.5535, -0.6682, -0.2364], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.3217,  0.5518, -2.5074,  1.4774, -0.6066], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.5596,  0.8937,  2.0647,  1.2797, -0.1018], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -1.3217,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1954, -0.1728,  0.0389,  0.1944,  0.0449], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1273, -0.1482,  0.0382,  0.2008,  0.0414], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0677, -0.0686,  0.0195,  0.1105,  0.0211], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0677, -0.0686,  0.0195,  0.1105,  0.0211], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 4.6378e-02, -1.2214e-02, -8.7536e-05, -2.0138e-03, -5.8411e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1697,  0.1666, -0.0782,  0.0352, -0.0617], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2959, -1.1836, -0.3113, -0.1314, -1.5015], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0805, 0.0146, 0.0197, 0.0530, 0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9765, 0.9829, 0.9939, 0.9931, 0.9985], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0677, -0.0686,  0.0195,  0.1105,  0.0211], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.5256e-04, -6.6514e-05, -4.7668e-07, -1.0966e-05, -3.1808e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.5256e-04, -6.6514e-05, -4.7668e-07, -1.0966e-05, -3.1808e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0005, -0.0005,  0.0002,  0.0009,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0007, -0.0007,  0.0002,  0.0011,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0007, -0.0007,  0.0002,  0.0011,  0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 2.8480e-04,  1.7015e-04, -5.3126e-05, -2.5189e-04, -2.2160e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0120], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.1149], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0032,  0.0011, -0.0008, -0.0026, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0032,  0.0011, -0.0008, -0.0026, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0855,  0.3370, -0.1799,  0.3828, -0.1126], grad_fn=<SliceBackward0>)
  [Layer 7] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 7] Output sample values after mixer: tensor([-0.0855,  0.3370, -0.1799,  0.3828, -0.1126], grad_fn=<SliceBackward0>)
  [Layer 7] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 7] Residual connection sample values: tensor([-1.2693,  2.4898, -0.1409, -0.6406, -0.6156], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 8/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.0161], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7043], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.4609,  0.7076, -0.0477, -0.2157, -0.2225], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6883, -2.4727,  2.2092, -3.1674, -1.4833], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6883, -2.4727,  2.2092, -3.1674, -1.4833], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.7961, -1.7793, -1.4090,  0.5470,  1.3271], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.8897,  0.0804,  2.7458,  1.2030, -0.6978], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.7961,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0338,  0.0395,  0.1789, -0.0026,  0.2402], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.4291,  0.0085, -0.1358, -0.0542,  0.1841], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.2599,  0.0043, -0.0633, -0.0264,  0.1005], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.2599,  0.0043, -0.0633, -0.0264,  0.1005], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0195, -0.0036, -0.0023, -0.0139, -0.0520], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0844, -0.1006, -0.1017, -0.2121, -0.1061], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.6543, -0.9827, -0.5550, -3.9397, -1.8081], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0041, 0.0587, 0.1608, 0.0780, 0.0048], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9850, 0.9440, 0.9146, 0.7354, 0.9913], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.2599,  0.0043, -0.0633, -0.0264,  0.1005], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.1035e-05, -3.8586e-06, -2.4481e-06, -1.5019e-05, -5.6077e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.1035e-05, -3.8586e-06, -2.4481e-06, -1.5019e-05, -5.6077e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 1.6741e-03,  2.7435e-05, -4.0779e-04, -1.6980e-04,  6.4748e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.2204,  0.0036, -0.0537, -0.0224,  0.0853], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.2204,  0.0036, -0.0537, -0.0224,  0.0853], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0507, -0.0007, -0.1069,  0.0029, -0.0234], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.8008], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.1175], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0548, -0.0010, -0.0999,  0.0042, -0.0409], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0548, -0.0010, -0.0999,  0.0042, -0.0409], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1215,  1.0796,  0.1234,  0.1994, -0.1905], grad_fn=<SliceBackward0>)
  [Layer 8] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 8] Output sample values after mixer: tensor([-0.1215,  1.0796,  0.1234,  0.1994, -0.1905], grad_fn=<SliceBackward0>)
  [Layer 8] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 8] Residual connection sample values: tensor([-1.3908,  3.5693, -0.0175, -0.4412, -0.8061], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 9/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.4186], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6430], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.4249,  0.8909, -0.0049, -0.1190, -0.2431], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-2.2699, -0.5457, -0.6981, -2.6758, -1.8424], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-2.2699, -0.5457, -0.6981, -2.6758, -1.8424], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.0604,  0.1938, -0.0243, -0.7922, -0.6569], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.5119, 1.9851, 1.5092, 2.1540, 1.5747], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 1.0604, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0553,  0.0284,  0.0013, -0.0209, -0.0391], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0480,  0.0031, -0.0854, -0.0949, -0.0140], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0234,  0.0015, -0.0409, -0.0452, -0.0070], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0234,  0.0015, -0.0409, -0.0452, -0.0070], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1835, -0.2548,  0.9991,  0.4899,  0.0233], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2574, -0.2363, -0.2187, -0.2613, -0.1861], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-5.2345, -1.2161, -1.4888, -0.9523, -3.9667], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0450, 0.2452, 0.0215, 0.7752, 0.0738], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7900, 0.7422, 0.9684, 0.4779, 0.7463], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0234,  0.0015, -0.0409, -0.0452, -0.0070], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.9336e-04,  2.6849e-04, -1.0527e-03, -5.1614e-04, -2.4508e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.9336e-04,  2.6849e-04, -1.0527e-03, -5.1614e-04, -2.4508e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.6281e-04,  1.0706e-05, -2.8443e-04, -3.1431e-04, -4.8395e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0319,  0.0021, -0.0557, -0.0616, -0.0095], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0319,  0.0021, -0.0557, -0.0616, -0.0095], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0068, -0.0004,  0.0129,  0.0106,  0.0024], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.0372], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9819], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0069, -0.0006,  0.0131,  0.0085,  0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0069, -0.0006,  0.0131,  0.0085,  0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2181, -0.0704,  0.1979, -0.2094, -0.1090], grad_fn=<SliceBackward0>)
  [Layer 9] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 9] Output sample values after mixer: tensor([-0.2181, -0.0704,  0.1979, -0.2094, -0.1090], grad_fn=<SliceBackward0>)
  [Layer 9] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 9] Residual connection sample values: tensor([-1.6089,  3.4989,  0.1804, -0.6506, -0.9151], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 10/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.8495], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5924], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3898,  0.7085,  0.0395, -0.1409, -0.2167], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.0349, -0.0959, -1.8080, -1.1463, -0.2066], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.0349, -0.0959, -1.8080, -1.1463, -0.2066], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.8273,  0.3770,  1.3248,  1.5314,  0.8131], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.0160, -0.1325,  0.3717, -1.0673,  1.0444], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.8273,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1353, -0.0938,  0.1826, -0.2746,  0.1484], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1737, -0.1809,  0.0788, -0.3604,  0.0888], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0793, -0.0823,  0.0409, -0.1481,  0.0464], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0793, -0.0823,  0.0409, -0.1481,  0.0464], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0030, -0.1582, -0.0118, -0.0185, -0.0140], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1536,  0.1307, -0.1316, -0.1995, -0.1575], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.7155, -1.4068, -0.3534, -2.0102, -0.4653], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0012, 0.0031, 0.1344, 0.0006, 0.0214], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9955, 0.9956, 0.9536, 0.9987, 0.9901], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0793, -0.0823,  0.0409, -0.1481,  0.0464], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.9044e-07,  1.5213e-05,  1.1370e-06,  1.7838e-06,  1.3507e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.9044e-07,  1.5213e-05,  1.1370e-06,  1.7838e-06,  1.3507e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.0395e-04, -1.0786e-04,  5.3645e-05, -1.9408e-04,  6.0788e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0175, -0.0182,  0.0090, -0.0327,  0.0103], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0175, -0.0182,  0.0090, -0.0327,  0.0103], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0048,  0.0008, -0.0023,  0.0090, -0.0009], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0156], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.0138], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0571,  0.0049, -0.0217,  0.0969, -0.0094], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0571,  0.0049, -0.0217,  0.0969, -0.0094], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0876,  0.1769, -0.1758, -0.3122, -0.0831], grad_fn=<SliceBackward0>)
  [Layer 10] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 10] Output sample values after mixer: tensor([-0.0876,  0.1769, -0.1758, -0.3122, -0.0831], grad_fn=<SliceBackward0>)
  [Layer 10] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 10] Residual connection sample values: tensor([-1.6966,  3.6757,  0.0046, -0.9629, -0.9982], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 11/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3.3894], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5432], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.4236,  0.7468,  0.0010, -0.2095, -0.2383], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8205, -2.3796, -1.4823, -1.0285,  2.1131], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8205, -2.3796, -1.4823, -1.0285,  2.1131], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.1212,  0.3120, -1.8119,  1.1294, -0.1290], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.5325, 4.2837, 1.3757, 4.6234, 2.6660], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 1.1212, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2973, -0.0495,  0.4293, -0.1078, -0.0283], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3115, -0.4071,  0.5259, -0.0957, -0.0051], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1317, -0.1627,  0.3305, -0.0455, -0.0026], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1317, -0.1627,  0.3305, -0.0455, -0.0026], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2694, -0.0463, -0.2529,  0.1349,  0.1799], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1099, -0.0636, -0.2664, -0.2746,  0.0518], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.3116, -0.0902, -1.5786, -0.2096, -0.6694], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2016, 1.1991, 0.4082, 1.6953, 0.1023], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9391, 0.8975, 0.5250, 0.7009, 0.9338], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1317, -0.1627,  0.3305, -0.0455, -0.0026], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0072,  0.0012,  0.0067, -0.0036, -0.0048], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0072,  0.0012,  0.0067, -0.0036, -0.0048], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0173, -0.0213,  0.0433, -0.0060, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0656, -0.0810,  0.1646, -0.0227, -0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0656, -0.0810,  0.1646, -0.0227, -0.0013], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0164,  0.0163, -0.0451,  0.0061, -0.0024], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.4517], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8300], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0168,  0.0163, -0.0320,  0.0142, -0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0168,  0.0163, -0.0320,  0.0142, -0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0402,  0.2803,  0.0897, -0.3124,  0.2971], grad_fn=<SliceBackward0>)
  [Layer 11] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 11] Output sample values after mixer: tensor([ 0.0402,  0.2803,  0.0897, -0.3124,  0.2971], grad_fn=<SliceBackward0>)
  [Layer 11] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 11] Residual connection sample values: tensor([-1.6564,  3.9560,  0.0943, -1.2752, -0.7011], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 12/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4.6419], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4641], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3176,  0.6294,  0.0158, -0.2121, -0.1288], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3564, -1.5877, -1.9370, -0.6410,  1.5931], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3564, -1.5877, -1.9370, -0.6410,  1.5931], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2311, -0.2467,  0.2266, -0.5970,  0.0835], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.6831, 1.6707, 1.2673, 1.2083, 2.1427], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.2311, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0377,  0.0617,  0.0171, -0.0679,  0.0150], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0053,  0.0746, -0.0177, -0.0976,  0.0276], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0026,  0.0387, -0.0088, -0.0464,  0.0140], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0026,  0.0387, -0.0088, -0.0464,  0.0140], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0777, -0.2164, -0.1455, -0.0387, -0.1392], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1995, -0.2381, -0.1654, -0.2759, -0.2243], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2412, -0.7694, -1.9975, -1.2368, -1.0181], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2093, 0.3156, 0.0926, 0.2819, 0.5240], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7712, 0.7844, 0.8311, 0.7056, 0.5866], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0026,  0.0387, -0.0088, -0.0464,  0.0140], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.3028e-05,  1.1981e-04,  8.0524e-05,  2.1451e-05,  7.7086e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-4.3028e-05,  1.1981e-04,  8.0524e-05,  2.1451e-05,  7.7086e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-3.2295e-05,  4.7261e-04, -1.0731e-04, -5.6697e-04,  1.7106e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0019,  0.0283, -0.0064, -0.0340,  0.0103], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0019,  0.0283, -0.0064, -0.0340,  0.0103], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0003, -0.0076,  0.0016,  0.0075,  0.0136], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.3457], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.7006], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0009, -0.0153,  0.0024,  0.0131,  0.0339], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0009, -0.0153,  0.0024,  0.0131,  0.0339], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.4714, -0.0050, -0.0565,  0.2837,  0.4280], grad_fn=<SliceBackward0>)
  [Layer 12] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 12] Output sample values after mixer: tensor([-0.4714, -0.0050, -0.0565,  0.2837,  0.4280], grad_fn=<SliceBackward0>)
  [Layer 12] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 12] Residual connection sample values: tensor([-2.1278,  3.9510,  0.0378, -0.9916, -0.2731], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 13/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([5.3154], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4337], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3734,  0.6000,  0.0061, -0.1511, -0.0486], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.4876,  0.9681, -0.7544,  0.5445,  1.0624], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.4876,  0.9681, -0.7544,  0.5445,  1.0624], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.4691, -2.0080,  1.0430,  0.4511,  2.0032], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.5093, 2.1077, 2.7672, 1.1373, 5.0582], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.4691,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0054, -0.2198,  0.0097,  0.0122,  0.3846], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2592, -0.3297, -0.0108,  0.0114,  0.3607], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1129, -0.1379, -0.0054,  0.0057,  0.2125], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1129, -0.1379, -0.0054,  0.0057,  0.2125], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3464, -0.1739,  0.0072,  0.5274, -0.0236], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2159,  0.1103, -0.0049,  0.4370, -0.0356], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3103, -1.7871, -0.8606, -1.8811, -0.5252], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1122, 0.0776, 0.4836, 0.1389, 1.3330], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8633, 0.8705, 0.6596, 0.7701, 0.4966], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1129, -0.1379, -0.0054,  0.0057,  0.2125], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.3864e-03,  2.2020e-03, -9.1595e-05, -6.6788e-03,  2.9919e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-4.3864e-03,  2.2020e-03, -9.1595e-05, -6.6788e-03,  2.9919e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0091, -0.0112, -0.0004,  0.0005,  0.0172], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0140, -0.0171, -0.0007,  0.0007,  0.0264], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0140, -0.0171, -0.0007,  0.0007,  0.0264], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0038, -0.0120,  0.0002,  0.0002,  0.0208], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0852], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.4263], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0179, -0.0184,  0.0010,  0.0018,  0.0569], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0179, -0.0184,  0.0010,  0.0018,  0.0569], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0950,  0.7413, -0.0092, -0.0778, -0.2739], grad_fn=<SliceBackward0>)
  [Layer 13] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 13] Output sample values after mixer: tensor([ 0.0950,  0.7413, -0.0092, -0.0778, -0.2739], grad_fn=<SliceBackward0>)
  [Layer 13] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 13] Residual connection sample values: tensor([-2.0328,  4.6923,  0.0286, -1.0694, -0.5470], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 14/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([5.8847], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4122], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2926,  0.5931,  0.0038, -0.1340, -0.0769], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.8323, -0.7872, -0.1643, -0.8191, -1.0853], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.8323, -0.7872, -0.1643, -0.8191, -1.0853], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2845, -1.8295,  1.8725,  0.1488, -0.4031], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.1398,  0.4133,  1.3585, -0.0524,  0.9673], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.2845, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0631,  0.4359, -0.3134,  0.0322,  0.0606], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0236,  0.3947, -0.3742, -0.0306,  0.0972], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0119,  0.2358, -0.1525, -0.0151,  0.0509], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0119,  0.2358, -0.1525, -0.0151,  0.0509], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0417, -0.0827,  0.0654, -0.0082, -0.0156], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0121, -0.1838, -0.0082, -0.1021,  0.3045], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.3184, -0.7621, -2.6670, -5.1836, -2.8487], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0453, 0.0181, 0.2848, 0.0157, 0.0361], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8222, 0.9863, 0.4679, 0.9218, 0.9022], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0119,  0.2358, -0.1525, -0.0151,  0.0509], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.2523e-05, -4.4726e-05,  3.5345e-05, -4.4368e-06, -8.4132e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.2523e-05, -4.4726e-05,  3.5345e-05, -4.4368e-06, -8.4132e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0006,  0.0126, -0.0082, -0.0008,  0.0027], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0055,  0.1079, -0.0698, -0.0069,  0.0233], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0055,  0.1079, -0.0698, -0.0069,  0.0233], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0086, -0.0266,  0.0053,  0.0017, -0.0064], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0667], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.8714], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0364, -0.0652,  0.0188,  0.0087, -0.0371], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0364, -0.0652,  0.0188,  0.0087, -0.0371], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2350, -0.0992, -0.3072,  0.0374,  0.1151], grad_fn=<SliceBackward0>)
  [Layer 14] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 14] Output sample values after mixer: tensor([ 0.2350, -0.0992, -0.3072,  0.0374,  0.1151], grad_fn=<SliceBackward0>)
  [Layer 14] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 14] Residual connection sample values: tensor([-1.7978,  4.5930, -0.2786, -1.0320, -0.4319], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 15/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([6.4502], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3937], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2480,  0.5387, -0.0353, -0.1225, -0.0571], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5150,  0.6112, -1.3246,  0.3942, -0.3529], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5150,  0.6112, -1.3246,  0.3942, -0.3529], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.4773, -0.1675,  0.0427, -0.8700,  0.5747], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4949, 1.8217, 0.9227, 2.0499, 2.1457], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.4773,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0145,  0.0366, -0.0060,  0.1037,  0.0053], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0230,  0.0297, -0.0307,  0.0860, -0.0201], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0113,  0.0151, -0.0151,  0.0448, -0.0099], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0113,  0.0151, -0.0151,  0.0448, -0.0099], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 1.9718e-03, -4.7071e-03, -3.2333e-03,  2.6270e-05,  6.3979e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0120, -0.0035,  0.0147,  0.0009, -0.0592], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2782, -0.6808, -2.7209, -0.1126, -3.8484], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0086, 0.0942, 0.0376, 0.0436, 0.1825], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9976, 0.9379, 0.9027, 0.9951, 0.4954], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0113,  0.0151, -0.0151,  0.0448, -0.0099], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.9245e-07,  4.5943e-07,  3.1558e-07, -2.5640e-09, -6.2445e-08],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.9245e-07,  4.5943e-07,  3.1558e-07, -2.5640e-09, -6.2445e-08],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.7624e-06,  2.3415e-06, -2.3506e-06,  6.9647e-06, -1.5424e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0019,  0.0026, -0.0026,  0.0076, -0.0017], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0019,  0.0026, -0.0026,  0.0076, -0.0017], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0004, 0.0010, 0.0007, 0.0018, 0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0057], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.2810], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0051, 0.0183, 0.0099, 0.0290, 0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0051, 0.0183, 0.0099, 0.0290, 0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.4876,  0.4215,  0.2455,  0.2123, -0.2496], grad_fn=<SliceBackward0>)
  [Layer 15] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 15] Output sample values after mixer: tensor([ 0.4876,  0.4215,  0.2455,  0.2123, -0.2496], grad_fn=<SliceBackward0>)
  [Layer 15] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 15] Residual connection sample values: tensor([-1.3102,  5.0145, -0.0331, -0.8197, -0.6815], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 16/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([7.8816], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3562], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1821,  0.5826, -0.0042, -0.0956, -0.0910], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.9581, -0.3752, -0.3926, -0.6217, -0.1386], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.9581, -0.3752, -0.3926, -0.6217, -0.1386], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.8404, -0.5851,  0.3558, -0.8228, -0.2551], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.1448, 5.7738, 1.4952, 0.9679, 1.9998], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.8404,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1865, -0.1121,  0.0802, -0.1217, -0.0652], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2226, -0.1532,  0.0671, -0.2141, -0.1072], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0990, -0.0707,  0.0347, -0.0956, -0.0507], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0990, -0.0707,  0.0347, -0.0956, -0.0507], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1291,  0.1918,  0.0895, -0.0610, -0.2782], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2654, -0.0230, -0.0690,  0.8679,  0.0365], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6906, -0.1348, -1.3129, -3.7740, -1.2635], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1695, 3.1609, 0.2013, 0.1828, 0.1608], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6339, 0.6530, 0.7678, 0.5016, 0.8162], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0990, -0.0707,  0.0347, -0.0956, -0.0507], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0022, -0.0032, -0.0015,  0.0010,  0.0047], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0022, -0.0032, -0.0015,  0.0010,  0.0047], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0136, -0.0097,  0.0048, -0.0131, -0.0070], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0773, -0.0552,  0.0271, -0.0747, -0.0396], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0773, -0.0552,  0.0271, -0.0747, -0.0396], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0205,  0.0084, -0.0043,  0.0162,  0.0026], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2150], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([2.1565], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0569,  0.0184, -0.0112,  0.0377,  0.0061], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0569,  0.0184, -0.0112,  0.0377,  0.0061], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2862, -0.0263,  0.0833, -0.1430, -0.0942], grad_fn=<SliceBackward0>)
  [Layer 16] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 16] Output sample values after mixer: tensor([ 0.2862, -0.0263,  0.0833, -0.1430, -0.0942], grad_fn=<SliceBackward0>)
  [Layer 16] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 16] Residual connection sample values: tensor([-1.0239,  4.9882,  0.0502, -0.9627, -0.7757], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 17/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([8.5054], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3429], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1358,  0.5558,  0.0059, -0.1052, -0.0990], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2705, -0.3250,  0.8382, -0.6139,  0.2887], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2705, -0.3250,  0.8382, -0.6139,  0.2887], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.8958,  0.4550,  1.0845,  0.5615, -0.6712], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.3277, -0.0342,  0.2497,  1.8276,  1.7170], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.8958,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1537, -0.0771, -0.2457, -0.0604,  0.1162], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1855, -0.1033, -0.2601, -0.0658,  0.1288], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0842, -0.0490, -0.1132, -0.0318,  0.0685], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0842, -0.0490, -0.1132, -0.0318,  0.0685], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0176, -0.0344, -0.0587,  0.0021,  0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0170, -0.0946, -0.0912,  0.6628,  0.0845], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.1571, -11.4668, -14.2150,  -0.1286, -14.2428],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0007, 0.0099, 0.0276, 0.1290, 0.0387], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9992, 0.8925, 0.6751, 0.9835, 0.5762], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0842, -0.0490, -0.1132, -0.0318,  0.0685], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.0571e-06,  2.0627e-06,  3.5209e-06, -1.2775e-07, -3.4667e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.0571e-06,  2.0627e-06,  3.5209e-06, -1.2775e-07, -3.4667e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.8037e-05, -1.0493e-05, -2.4254e-05, -6.8156e-06,  1.4685e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0543, -0.0316, -0.0730, -0.0205,  0.0442], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0543, -0.0316, -0.0730, -0.0205,  0.0442], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0083,  0.0043, -0.0427,  0.0044,  0.0073], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1389], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([2.6826], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0347,  0.0219, -0.1650,  0.0208,  0.0345], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0347,  0.0219, -0.1650,  0.0208,  0.0345], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.4466,  0.6149, -0.0334,  0.1683, -0.3201], grad_fn=<SliceBackward0>)
  [Layer 17] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 17] Output sample values after mixer: tensor([-0.4466,  0.6149, -0.0334,  0.1683, -0.3201], grad_fn=<SliceBackward0>)
  [Layer 17] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 17] Residual connection sample values: tensor([-1.4705,  5.6031,  0.0168, -0.7943, -1.0958], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 18/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([10.3965], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3101], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1579,  0.5087,  0.0016, -0.0716, -0.1131], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.8957, -0.7130, -0.6764, -1.2306, -0.0831], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.8957, -0.7130, -0.6764, -1.2306, -0.0831], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1965,  0.9587,  0.8677,  0.1701,  0.6425], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.8415, 1.5256, 1.6396, 1.8616, 1.1882], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.1965,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0348, -0.5945,  0.0563,  0.0187,  0.1540], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0448, -0.8599,  0.3361,  0.0049,  0.1119], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0219, -0.2557,  0.1960,  0.0025,  0.0591], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0219, -0.2557,  0.1960,  0.0025,  0.0591], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0955, -0.0154, -0.1933,  0.0694,  0.0836], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2779, -0.0177, -0.1999, -0.1312,  0.1149], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3011, -1.4686, -1.2083, -1.2129, -2.5875], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.4904, 0.2294, 0.3313, 0.4022, 0.1342], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5283, 0.7140, 0.6701, 0.6139, 0.7067], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0219, -0.2557,  0.1960,  0.0025,  0.0591], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0010,  0.0002,  0.0021, -0.0007, -0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0010,  0.0002,  0.0021, -0.0007, -0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0065, -0.0761,  0.0584,  0.0007,  0.0176], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0108, -0.1255,  0.0962,  0.0012,  0.0290], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0108, -0.1255,  0.0962,  0.0012,  0.0290], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0068,  0.0294, -0.0219, -0.0003, -0.0012], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1146], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([2.9544], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0264,  0.0467, -0.0633, -0.0012, -0.0068], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0264,  0.0467, -0.0633, -0.0012, -0.0068], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1970,  0.0748, -0.1522, -0.2431, -0.3936], grad_fn=<SliceBackward0>)
  [Layer 18] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 18] Output sample values after mixer: tensor([-0.1970,  0.0748, -0.1522, -0.2431, -0.3936], grad_fn=<SliceBackward0>)
  [Layer 18] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 18] Residual connection sample values: tensor([-1.6675,  5.6780, -0.1354, -1.0375, -1.4894], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 19/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([11.8069], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2910], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1655,  0.4865, -0.0125, -0.0885, -0.1475], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5889, -0.7423,  1.1570,  0.4402, -0.2083], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5889, -0.7423,  1.1570,  0.4402, -0.2083], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.2690, -0.3797,  0.5721,  1.4271,  0.2206], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.1575, 1.5225, 1.4076, 1.0998, 1.5427], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.2690,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0423, -0.0538,  0.1139,  0.2855, -0.0443], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0779, -0.0782,  0.1089,  0.2429, -0.0773], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0375, -0.0376,  0.0574,  0.1361, -0.0371], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0375, -0.0376,  0.0574,  0.1361, -0.0371], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0266, -0.1097,  0.1467,  0.1802, -0.0237], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2418, -0.0480,  0.1638, -0.1442, -0.2188], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9436, -1.8179, -2.0862, -1.0006, -0.9650], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1639, 0.1257, 0.0912, 0.1466, 0.2998], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7272, 0.7958, 0.8267, 0.8635, 0.7488], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0375, -0.0376,  0.0574,  0.1361, -0.0371], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0002,  0.0007, -0.0009, -0.0011,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0002,  0.0007, -0.0009, -0.0011,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0020, -0.0020,  0.0031,  0.0074, -0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0062, -0.0063,  0.0096,  0.0227, -0.0062], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0062, -0.0063,  0.0096,  0.0227, -0.0062], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0013, 0.0015, 0.0084, 0.0061, 0.0006], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0063], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.5880], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0200, 0.0240, 0.1730, 0.0913, 0.0123], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0200, 0.0240, 0.1730, 0.0913, 0.0123], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1329,  0.1071,  0.2249,  0.4267, -0.1807], grad_fn=<SliceBackward0>)
  [Layer 19] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 19] Output sample values after mixer: tensor([ 0.1329,  0.1071,  0.2249,  0.4267, -0.1807], grad_fn=<SliceBackward0>)
  [Layer 19] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 19] Residual connection sample values: tensor([-1.5346,  5.7850,  0.0895, -0.6107, -1.6701], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 20/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([14.0383], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2669], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1583,  0.5115,  0.0085, -0.0535, -0.1670], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4422, -0.6018, -1.1675,  0.2173, -0.8813], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4422, -0.6018, -1.1675,  0.2173, -0.8813], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5822, -0.3463, -0.3573,  0.7590, -0.5216], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.1488, 1.4677, 3.0129, 2.1177, 2.3227], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.5822, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0025, -0.0331,  0.0094,  0.0070, -0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0360, -0.0246,  0.0759, -0.0118, -0.0279], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0177, -0.0121,  0.0394, -0.0059, -0.0137], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0177, -0.0121,  0.0394, -0.0059, -0.0137], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0032, -0.0084,  0.0426, -0.0082,  0.2076], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0819, -0.2619,  0.0974, -0.1350,  0.6842], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.6216, -5.0389, -1.2056, -1.6435, -1.3345], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2267, 0.0484, 0.1645, 0.3306, 0.2723], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6924, 0.7838, 0.8201, 0.5808, 0.6953], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0177, -0.0121,  0.0394, -0.0059, -0.0137], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.2899e-05,  3.3514e-05, -1.7096e-04,  3.2865e-05, -8.3220e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.2899e-05,  3.3514e-05, -1.7096e-04,  3.2865e-05, -8.3220e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0031, -0.0021,  0.0070, -0.0010, -0.0024], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0033, -0.0022,  0.0073, -0.0011, -0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0033, -0.0022,  0.0073, -0.0011, -0.0025], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0006,  0.0005, -0.0020, -0.0001,  0.0007], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0213], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.8452], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0052,  0.0047, -0.0264, -0.0013,  0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0052,  0.0047, -0.0264, -0.0013,  0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3596,  0.2011, -0.5989, -0.2338, -0.0716], grad_fn=<SliceBackward0>)
  [Layer 20] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 20] Output sample values after mixer: tensor([ 0.3596,  0.2011, -0.5989, -0.2338, -0.0716], grad_fn=<SliceBackward0>)
  [Layer 20] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 20] Residual connection sample values: tensor([-1.1751,  5.9861, -0.5094, -0.8445, -1.7418], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 21/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([14.1048], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2663], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0917,  0.4242, -0.0342, -0.0547, -0.1272], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0534, -0.5279, -0.2003, -0.2018, -1.5349], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0534, -0.5279, -0.2003, -0.2018, -1.5349], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5341,  0.4050, -1.1390,  0.3618, -0.3583], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.1276,  1.1302,  0.0853,  0.1582,  0.9271], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.5341,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0836,  0.0749,  0.1483, -0.0611,  0.0503], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0523,  0.0448,  0.1632, -0.0662,  0.0781], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0268,  0.0229,  0.0882, -0.0320,  0.0406], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0268,  0.0229,  0.0882, -0.0320,  0.0406], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-7.9015e-03,  7.4757e-04, -5.8761e-03, -6.0099e-03, -6.6308e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0102, -0.1052, -0.0168,  0.0223, -0.0978], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.2092, -0.0434, -3.8147, -6.6624, -0.0228], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0515, 0.0131, 0.0327, 0.0282, 0.0197], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8476, 0.9994, 0.8826, 0.8285, 0.9996], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0268,  0.0229,  0.0882, -0.0320,  0.0406], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.0922e-05,  1.0334e-06, -8.1224e-06, -8.3074e-06, -9.1656e-08],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.0922e-05,  1.0334e-06, -8.1224e-06, -8.3074e-06, -9.1656e-08],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-5.5301e-05, -4.7207e-05, -1.8185e-04,  6.5913e-05, -8.3666e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0047,  0.0040,  0.0153, -0.0055,  0.0070], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0047,  0.0040,  0.0153, -0.0055,  0.0070], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0001, -0.0008, -0.0014,  0.0005, -0.0019], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0012], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([28.1852], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0046, -0.0255, -0.0601,  0.0185, -0.0633], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0046, -0.0255, -0.0601,  0.0185, -0.0633], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0054, -0.1808, -0.0168, -0.0836, -0.3196], grad_fn=<SliceBackward0>)
  [Layer 21] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 21] Output sample values after mixer: tensor([-0.0054, -0.1808, -0.0168, -0.0836, -0.3196], grad_fn=<SliceBackward0>)
  [Layer 21] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 21] Residual connection sample values: tensor([-1.1805,  5.8053, -0.5262, -0.9282, -2.0614], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 22/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([15.8069], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2515], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1369,  0.5672, -0.0545, -0.0886, -0.2242], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5426, -0.7488,  0.1022,  0.4611, -2.1856], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5426, -0.7488,  0.1022,  0.4611, -2.1856], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.8760,  0.7301,  0.1280, -1.6652,  0.2059], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.7878, 1.2746, 1.0885, 0.5946, 1.7740], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.8760,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([0.0405, 0.1614, 0.0194, 0.2761, 0.0606], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0072,  0.0827,  0.3387,  0.2351, -0.0051], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0036,  0.0430,  0.1978,  0.1313, -0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0036,  0.0430,  0.1978,  0.1313, -0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0152,  0.0073, -0.0019, -0.2472,  0.0783], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1425, -0.0338, -0.0838, -0.0225, -0.1155], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.1489, -3.5006, -2.8321, -5.5396, -1.7186], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0079, 0.1380, 0.1748, 0.0818, 0.0167], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9676, 0.6170, 0.6096, 0.6356, 0.9716], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0036,  0.0430,  0.1978,  0.1313, -0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.3265e-07, -2.0656e-07,  5.4354e-08,  7.0283e-06, -2.2254e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-4.3265e-07, -2.0656e-07,  5.4354e-08,  7.0283e-06, -2.2254e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-7.4677e-06,  8.9652e-05,  4.1193e-04,  2.7345e-04, -5.3101e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0009,  0.0105,  0.0483,  0.0321, -0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0009,  0.0105,  0.0483,  0.0321, -0.0006], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0002, -0.0025,  0.0026,  0.0091,  0.0001], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0104], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.7841], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0006, -0.0232,  0.0136,  0.1167,  0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0006, -0.0232,  0.0136,  0.1167,  0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2359,  0.2368,  0.6578, -0.2873, -1.4134], grad_fn=<SliceBackward0>)
  [Layer 22] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 22] Output sample values after mixer: tensor([-0.2359,  0.2368,  0.6578, -0.2873, -1.4134], grad_fn=<SliceBackward0>)
  [Layer 22] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 22] Residual connection sample values: tensor([-1.4164,  6.0421,  0.1317, -1.2154, -3.4748], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 23/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([18.7975], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2306], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1057,  0.3879,  0.0090, -0.0784, -0.2512], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1519, -0.1971,  0.2312,  0.5386, -0.2234], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1519, -0.1971,  0.2312,  0.5386, -0.2234], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.2347, -0.4408,  0.2422, -0.7064, -0.7379], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.4124, 0.3473, 1.4913, 0.0465, 2.2122], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.2347,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0912,  0.2426,  0.0789, -0.1421,  0.2933], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1135,  0.2095,  0.0676, -0.1443,  0.2439], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0536,  0.1157,  0.0349, -0.0669,  0.1368], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0536,  0.1157,  0.0349, -0.0669,  0.1368], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0179, -0.0136,  0.0294,  0.0007,  0.0849], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0890, -0.0186,  0.0411, -0.0266,  0.0310], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0811, -3.7998, -0.0826, -0.4878, -1.4532], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0178, 0.0604, 0.0453, 0.0015, 0.0094], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9986, 0.7948, 0.9963, 0.9993, 0.9864], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0536,  0.1157,  0.0349, -0.0669,  0.1368], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.7088e-05,  1.3031e-05, -2.8098e-05, -7.1548e-07, -8.1121e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.7088e-05,  1.3031e-05, -2.8098e-05, -7.1548e-07, -8.1121e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0002,  0.0003,  0.0001, -0.0002,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0010, -0.0021, -0.0006,  0.0012, -0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0010, -0.0021, -0.0006,  0.0012, -0.0025], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-6.9194e-05,  1.8921e-04, -8.2933e-05,  4.1914e-04,  2.4996e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0018], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([23.7896], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0073,  0.0025, -0.0020,  0.0159,  0.0277], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0073,  0.0025, -0.0020,  0.0159,  0.0277], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2918, -0.0055, -0.6294, -0.3052,  0.0086], grad_fn=<SliceBackward0>)
  [Layer 23] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 23] Output sample values after mixer: tensor([-0.2918, -0.0055, -0.6294, -0.3052,  0.0086], grad_fn=<SliceBackward0>)
  [Layer 23] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 23] Residual connection sample values: tensor([-1.7083,  6.0366, -0.4977, -1.5207, -3.4662], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 24/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([21.1430], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2175], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0989,  0.3333, -0.0266, -0.0783, -0.1945], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.5562,  0.0113,  0.8383, -0.3429, -0.1240], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.5562,  0.0113,  0.8383, -0.3429, -0.1240], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4722,  0.3786,  0.1888, -0.2305, -0.1861], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.4902, -0.2135, -0.0756,  1.6389,  0.5808], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.4722, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0942,  0.0171,  0.0259, -0.0418, -0.0876], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0975,  0.0171,  0.0219, -0.0434, -0.0923], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0464,  0.0086,  0.0111, -0.0212, -0.0440], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0464,  0.0086,  0.0111, -0.0212, -0.0440], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0078,  0.0053, -0.0028, -0.0022, -0.0383], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1103, -0.2726, -0.2656, -0.2187,  0.2347], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0742, -3.4497, -3.2885, -0.1609, -2.6945], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0645, 0.0235, 0.0425, 0.0234, 0.0383], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9952, 0.9220, 0.8697, 0.9962, 0.9020], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0464,  0.0086,  0.0111, -0.0212, -0.0440], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.3220e-05, -1.5720e-05,  8.4424e-06,  6.6829e-06,  1.1463e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.3220e-05, -1.5720e-05,  8.4424e-06,  6.6829e-06,  1.1463e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0009,  0.0002,  0.0002, -0.0004, -0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0006,  0.0001,  0.0001, -0.0003, -0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0006,  0.0001,  0.0001, -0.0003, -0.0006], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-2.2003e-04,  6.6092e-07,  8.7005e-05,  4.0542e-05,  3.4358e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0008], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([34.1838], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-7.1137e-03,  3.0271e-05,  3.5986e-03,  6.1174e-03,  3.0670e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-7.1137e-03,  3.0271e-05,  3.5986e-03,  6.1174e-03,  3.0670e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.0350, -0.0593,  0.4391,  0.9228, -0.5087], grad_fn=<SliceBackward0>)
  [Layer 24] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 24] Output sample values after mixer: tensor([ 1.0350, -0.0593,  0.4391,  0.9228, -0.5087], grad_fn=<SliceBackward0>)
  [Layer 24] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 24] Residual connection sample values: tensor([-0.6733,  5.9773, -0.0586, -0.5978, -3.9749], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 25/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([24.1007], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2037], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0409,  0.3317, -0.0034, -0.0320, -0.2388], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1117, -0.4082, -0.3936, -0.3096, -0.4099], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1117, -0.4082, -0.3936, -0.3096, -0.4099], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6639,  0.2783, -0.1274,  0.0505, -0.2186], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.3594, -0.0659,  1.6911,  2.3415, -0.5599], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.6639,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0113, -0.0166, -0.0054, -0.0039, -0.0107], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0139, -0.0448, -0.0168,  0.0569, -0.0165], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0069, -0.0219, -0.0083,  0.0293, -0.0082], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0069, -0.0219, -0.0083,  0.0293, -0.0082], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0072,  0.0745,  0.0296,  0.0122, -0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0074, -0.0422, -0.0425,  0.0285, -0.0867], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -0.3702,  -1.5045,  -5.7210,  -0.8176, -14.6662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.4527, 0.0060, 0.1345, 0.0708, 0.0188], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8457, 0.9910, 0.4631, 0.9437, 0.7594], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0069, -0.0219, -0.0083,  0.0293, -0.0082], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.2390e-05, -2.3237e-04, -9.2337e-05, -3.7965e-05,  3.6138e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.2390e-05, -2.3237e-04, -9.2337e-05, -3.7965e-05,  3.6138e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0001, -0.0003, -0.0001,  0.0005, -0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0002, -0.0006, -0.0002,  0.0008, -0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0002, -0.0006, -0.0002,  0.0008, -0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 9.4815e-06,  9.3178e-05,  3.4492e-05, -1.0016e-04,  3.4883e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0013], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([27.1649], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0003,  0.0021,  0.0012, -0.0021,  0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0003,  0.0021,  0.0012, -0.0021,  0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.1505,  0.4937, -0.7196, -0.3079,  0.1051], grad_fn=<SliceBackward0>)
  [Layer 25] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 25] Output sample values after mixer: tensor([ 1.1505,  0.4937, -0.7196, -0.3079,  0.1051], grad_fn=<SliceBackward0>)
  [Layer 25] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 25] Residual connection sample values: tensor([ 0.4772,  6.4710, -0.7783, -0.9057, -3.8698], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 26/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([28.4013], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1876], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0345,  0.4334, -0.0525, -0.0599, -0.2739], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2668,  0.2731, -0.0448, -0.2154, -0.2135], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2668,  0.2731, -0.0448, -0.2154, -0.2135], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4492, -0.1835,  0.5785, -0.3958, -0.4522], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.7137, 1.2583, 1.6576, 1.1537, 1.9206], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.4492, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([0.1460, 0.0402, 0.1213, 0.0748, 0.0933], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0575, -0.0158,  0.1854,  0.0479,  0.1014], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0296, -0.0079,  0.1013,  0.0245,  0.0533], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0296, -0.0079,  0.1013,  0.0245,  0.0533], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0011, -0.0009, -0.0103,  0.0040,  0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1015, -0.1060, -0.0486,  0.1129, -0.0480], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9595, -0.3945, -0.8420, -1.4275, -0.1466], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1127, 0.3412, 0.2917, 0.3074, 0.0725], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8975, 0.8741, 0.7822, 0.6448, 0.9894], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0296, -0.0079,  0.1013,  0.0245,  0.0533], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.7198e-06, -2.9547e-06, -3.4445e-05,  1.3188e-05,  2.9858e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.7198e-06, -2.9547e-06, -3.4445e-05,  1.3188e-05,  2.9858e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0005, -0.0001,  0.0017,  0.0004,  0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0042, -0.0011,  0.0146,  0.0035,  0.0077], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0042, -0.0011,  0.0146,  0.0035,  0.0077], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0006, -0.0002, -0.0003, -0.0003, -0.0007], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0040], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([15.8067], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0051, -0.0031, -0.0048, -0.0077, -0.0145], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0051, -0.0031, -0.0048, -0.0077, -0.0145], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.8430,  1.0544, -0.4631,  1.6037, -0.2614], grad_fn=<SliceBackward0>)
  [Layer 26] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 26] Output sample values after mixer: tensor([-0.8430,  1.0544, -0.4631,  1.6037, -0.2614], grad_fn=<SliceBackward0>)
  [Layer 26] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 26] Residual connection sample values: tensor([-0.3658,  7.5254, -1.2413,  0.6979, -4.1312], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 27/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([34.8842], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1693], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0259,  0.4865, -0.0861,  0.0445, -0.3045], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1084, -1.0231,  1.2308, -0.6488,  0.4878], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1084, -1.0231,  1.2308, -0.6488,  0.4878], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7173,  0.0301, -0.7526, -0.2742,  0.1071], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.2072, 1.1090, 0.3863, 0.8686, 1.9879], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.7173, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1118, -0.0032, -0.1821,  0.0311, -0.0132], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0858, -0.0397, -0.1921, -0.1708, -0.0430], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0447, -0.0195, -0.0869, -0.0781, -0.0210], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0447, -0.0195, -0.0869, -0.0781, -0.0210], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0835, -0.0279,  0.1916, -0.0202,  0.1491], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 1.3005e-01, -2.4064e-01,  2.1424e-04, -4.0932e-02, -2.5416e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3662, -1.3799, -1.8268, -2.0409, -2.3490], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1349, 0.1363, 0.0708, 0.0394, 0.2903], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8317, 0.8286, 0.8786, 0.9227, 0.5057], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0447, -0.0195, -0.0869, -0.0781, -0.0210], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0005, -0.0002,  0.0012, -0.0001,  0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0005, -0.0002,  0.0012, -0.0001,  0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0030, -0.0013, -0.0058, -0.0052, -0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0075, -0.0033, -0.0146, -0.0131, -0.0035], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0075, -0.0033, -0.0146, -0.0131, -0.0035], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0004,  0.0009, -0.0139,  0.0029, -0.0011], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0212], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.8720], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0045,  0.0075, -0.2032,  0.0384, -0.0086], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0045,  0.0075, -0.2032,  0.0384, -0.0086], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.4477,  0.6198,  0.2529,  0.5544, -0.4078], grad_fn=<SliceBackward0>)
  [Layer 27] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 27] Output sample values after mixer: tensor([ 0.4477,  0.6198,  0.2529,  0.5544, -0.4078], grad_fn=<SliceBackward0>)
  [Layer 27] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 27] Residual connection sample values: tensor([ 0.0819,  8.1452, -0.9885,  1.2524, -4.5390], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 28/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([37.8104], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1626], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0054,  0.5032, -0.0617,  0.0760, -0.2966], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.6186,  0.1577,  0.0559,  0.1045, -0.8385], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.6186,  0.1577,  0.0559,  0.1045, -0.8385], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5642, -0.7533,  0.0267, -0.5819, -0.8615], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.5772, 0.5902, 0.9707, 0.2871, 1.1588], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.5642, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0983,  0.1142,  0.0055, -0.0929,  0.1404], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1561,  0.1028, -0.0082, -0.1043,  0.2451], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0720,  0.0541, -0.0041, -0.0494,  0.1375], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0720,  0.0541, -0.0041, -0.0494,  0.1375], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0026, -0.0221, -0.0789, -0.0222,  0.2517], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1132, -0.1563,  0.5164,  0.0846,  0.3845], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2728, -3.9978, -2.5177, -2.1714, -2.8655], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0181, 0.0780, 0.1067, 0.0228, 0.0478], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9773, 0.7320, 0.7644, 0.9518, 0.8720], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0720,  0.0541, -0.0041, -0.0494,  0.1375], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.4052e-06,  2.8779e-05,  1.0258e-04,  2.8918e-05, -3.2726e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.4052e-06,  2.8779e-05,  1.0258e-04,  2.8918e-05, -3.2726e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-3.9448e-04,  2.9629e-04, -2.2303e-05, -2.7090e-04,  7.5345e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0160,  0.0120, -0.0009, -0.0110,  0.0306], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0160,  0.0120, -0.0009, -0.0110,  0.0306], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 4.2827e-03,  1.0220e-03, -2.5982e-05, -6.0400e-04, -7.7335e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0061], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.8188], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1137,  0.0180, -0.0004, -0.0116, -0.1443], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1137,  0.0180, -0.0004, -0.0116, -0.1443], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.8545, -1.9348,  0.7756,  1.1880,  0.4988], grad_fn=<SliceBackward0>)
  [Layer 28] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 28] Output sample values after mixer: tensor([-0.8545, -1.9348,  0.7756,  1.1880,  0.4988], grad_fn=<SliceBackward0>)
  [Layer 28] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 28] Residual connection sample values: tensor([-0.7726,  6.2104, -0.2129,  2.4404, -4.0403], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 29/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([48.7313], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1433], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0428,  0.3288, -0.0113,  0.1246, -0.2224], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1943, -0.4681, -0.2752, -0.0436,  0.8224], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1943, -0.4681, -0.2752, -0.0436,  0.8224], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.6059, -0.3100,  0.7313, -0.3387,  0.1841], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.5327, 1.0091, 0.6456, 3.3596, 1.1014], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.6059, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0376,  0.0887, -0.1261,  0.0633,  0.0193], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0242,  0.0542, -0.1233,  0.0029, -0.0937], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0122,  0.0278, -0.0579,  0.0014, -0.0447], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0122,  0.0278, -0.0579,  0.0014, -0.0447], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0125,  0.0397, -0.1178,  0.1520, -0.0713], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2196, -0.2187, -0.2067, -0.2359, -0.2401], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8072, -2.1170, -1.9257, -0.2904, -2.0499], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0359, 0.1301, 0.1180, 0.0443, 0.1781], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9372, 0.7592, 0.7967, 0.9872, 0.6941], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0122,  0.0278, -0.0579,  0.0014, -0.0447], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.4963e-06,  1.7422e-05, -5.1667e-05,  6.6677e-05, -3.1301e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 5.4963e-06,  1.7422e-05, -5.1667e-05,  6.6677e-05, -3.1301e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 1.7157e-04,  3.9058e-04, -8.1213e-04,  2.0247e-05, -6.2722e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0127,  0.0288, -0.0600,  0.0015, -0.0463], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0127,  0.0288, -0.0600,  0.0015, -0.0463], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.1118e-03, -5.1981e-03,  7.1222e-03, -3.1845e-05, -2.6463e-02],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0544], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.2859], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0052, -0.0229,  0.0498, -0.0002, -0.1472], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0052, -0.0229,  0.0498, -0.0002, -0.1472], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2971,  1.7181,  0.5314,  0.6778, -0.0413], grad_fn=<SliceBackward0>)
  [Layer 29] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 29] Output sample values after mixer: tensor([-0.2971,  1.7181,  0.5314,  0.6778, -0.0413], grad_fn=<SliceBackward0>)
  [Layer 29] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 29] Residual connection sample values: tensor([-1.0696,  7.9285,  0.3185,  3.1182, -4.0816], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 30/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([56.0687], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1335], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0608,  0.4436,  0.0177,  0.1634, -0.2385], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1069, -0.1988, -0.2070, -0.2091, -1.1924], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1069, -0.1988, -0.2070, -0.2091, -1.1924], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.0781, -0.5649, -0.1534,  0.6038, -0.4635], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.2445, 1.9703, 2.1997, 2.4479, 2.2948], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 1.0781, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1765, -0.0778, -0.0632, -0.1127,  0.0934], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1532, -0.0641, -0.0300, -0.1308,  0.0661], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0825, -0.0310, -0.0148, -0.0611,  0.0341], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0825, -0.0310, -0.0148, -0.0611,  0.0341], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0308, -0.0015, -0.0589,  0.2314, -0.0266], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2782, -0.2766, -0.2578,  0.0643, -0.1753], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0150, -0.4675, -0.4280, -0.7895, -0.4175], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0138, 0.5809, 1.2286, 0.5076, 0.7349], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9861, 0.7622, 0.5911, 0.6698, 0.7358], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0825, -0.0310, -0.0148, -0.0611,  0.0341], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.4914e-05, -1.7052e-06, -6.6858e-05,  2.6261e-04, -3.0150e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 3.4914e-05, -1.7052e-06, -6.6858e-05,  2.6261e-04, -3.0150e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 3.7875e-04, -1.4246e-04, -6.7910e-05, -2.8088e-04,  1.5678e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1020, -0.0383, -0.0183, -0.0756,  0.0422], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1020, -0.0383, -0.0183, -0.0756,  0.0422], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0052,  0.0034,  0.0017,  0.0071, -0.0117], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0549], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.2684], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0317,  0.0214,  0.0064,  0.0361, -0.0530], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0317,  0.0214,  0.0064,  0.0361, -0.0530], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1540, -0.9035, -0.3801,  0.4782,  0.5945], grad_fn=<SliceBackward0>)
  [Layer 30] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 30] Output sample values after mixer: tensor([ 0.1540, -0.9035, -0.3801,  0.4782,  0.5945], grad_fn=<SliceBackward0>)
  [Layer 30] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 30] Residual connection sample values: tensor([-0.9156,  7.0250, -0.0616,  3.5963, -3.4871], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 31/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([61.4771], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1275], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0498,  0.3751, -0.0033,  0.1875, -0.1918], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2255, -0.6600, -0.7083, -0.2264,  0.6515], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2255, -0.6600, -0.7083, -0.2264,  0.6515], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5427, -0.4215, -0.2593, -0.6646, -1.7702], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.5814, 1.3919, 0.4357, 0.5483, 2.3758], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.5427, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0979,  0.0602, -0.0138,  0.1100,  0.3382], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0974,  0.0499, -0.0127,  0.1081,  0.3329], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0510,  0.0256, -0.0063,  0.0570,  0.1939], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0510,  0.0256, -0.0063,  0.0570,  0.1939], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0139,  0.0510, -0.0595, -0.0607, -0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.4892, -0.1319, -0.2437,  0.0019, -0.1330], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.9478, -3.5384, -4.7060, -2.4630, -0.9027], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1511, 0.0884, 0.0243, 0.1013, 0.3760], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6405, 0.7314, 0.8919, 0.7792, 0.7122], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0510,  0.0256, -0.0063,  0.0570,  0.1939], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.0703e-04,  3.9378e-04, -4.5865e-04, -4.6835e-04, -2.1234e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.0703e-04,  3.9378e-04, -4.5865e-04, -4.6835e-04, -2.1234e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0038,  0.0019, -0.0005,  0.0043,  0.0146], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0390,  0.0195, -0.0048,  0.0435,  0.1480], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0390,  0.0195, -0.0048,  0.0435,  0.1480], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0039, -0.0044,  0.0011, -0.0044,  0.0634], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0579], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.1565], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0319, -0.0314,  0.0072, -0.0296,  0.5091], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0319, -0.0314,  0.0072, -0.0296,  0.5091], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.4111, -0.0719,  0.4920,  0.0165,  1.1904], grad_fn=<SliceBackward0>)
  [Layer 31] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 31] Output sample values after mixer: tensor([-0.4111, -0.0719,  0.4920,  0.0165,  1.1904], grad_fn=<SliceBackward0>)
  [Layer 31] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 31] Residual connection sample values: tensor([-1.3267,  6.9531,  0.4304,  3.6128, -2.2968], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 32/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([68.4239], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1209], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0728,  0.3831,  0.0237,  0.1860, -0.1310], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4361,  0.5782, -1.2939, -1.4919, -0.2745], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4361,  0.5782, -1.2939, -1.4919, -0.2745], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0430,  0.2318,  0.1274,  0.4336, -0.0507], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.5415, 2.2502, 1.1002, 1.3500, 1.7211], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.0430, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0002,  0.0145, -0.0004, -0.0861, -0.0053], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0374, -0.0375, -0.0162, -0.0736, -0.0123], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0190, -0.0184, -0.0080, -0.0355, -0.0061], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0190, -0.0184, -0.0080, -0.0355, -0.0061], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0153,  0.0313,  0.0373, -0.0009, -0.0270], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2316, -0.0720, -0.2526, -0.2755, -0.1684], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6971, -2.0893, -1.7967, -1.3894, -1.0395], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.7091, 0.0505, 0.3124, 0.3428, 0.6740], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6100, 0.8999, 0.5705, 0.6211, 0.4963], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0190, -0.0184, -0.0080, -0.0355, -0.0061], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.0600e-04,  4.2208e-04,  5.0408e-04, -1.2626e-05, -3.6425e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.0600e-04,  4.2208e-04,  5.0408e-04, -1.2626e-05, -3.6425e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0076, -0.0074, -0.0032, -0.0142, -0.0024], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0122, -0.0118, -0.0051, -0.0227, -0.0039], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0122, -0.0118, -0.0051, -0.0227, -0.0039], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0021, -0.0044,  0.0014,  0.0062,  0.0005], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0888], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.3559], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0085, -0.0143,  0.0091,  0.0324,  0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0085, -0.0143,  0.0091,  0.0324,  0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.6334,  1.0568, -0.4316, -0.2053, -0.4275], grad_fn=<SliceBackward0>)
  [Layer 32] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 32] Output sample values after mixer: tensor([ 0.6334,  1.0568, -0.4316, -0.2053, -0.4275], grad_fn=<SliceBackward0>)
  [Layer 32] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 32] Residual connection sample values: tensor([-6.9326e-01,  8.0098e+00, -1.1497e-03,  3.4075e+00, -2.7243e+00],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 33/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([91.0508], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1048], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-3.4234e-02,  4.0988e-01, -5.7831e-05,  1.6643e-01, -1.3934e-01],
       grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6732, -0.0330, -0.9012, -0.3806, -0.6849], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6732, -0.0330, -0.9012, -0.3806, -0.6849], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5178,  1.0434, -0.0941, -0.4759,  0.6631], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.0072, 0.2160, 0.9018, 1.7969, 0.9015], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.5178, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0747,  0.0854,  0.0179, -0.0787, -0.1034], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0615,  0.0360,  0.0447, -0.0799, -0.1046], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0317,  0.0183,  0.0228, -0.0384, -0.0495], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0317,  0.0183,  0.0228, -0.0384, -0.0495], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3802, -0.0554, -0.0654, -0.0113,  0.1939], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0057, -0.2242, -0.2478, -0.2308, -0.0294], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9791, -9.6938, -6.1678, -0.1135, -2.0903], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0118, 0.0124, 0.0316, 0.0480, 0.0071], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9768, 0.8869, 0.8228, 0.9946, 0.9854], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0317,  0.0183,  0.0228, -0.0384, -0.0495], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.4270e-04, -2.0803e-05, -2.4561e-05, -4.2502e-06,  7.2781e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.4270e-04, -2.0803e-05, -2.4561e-05, -4.2502e-06,  7.2781e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0002,  0.0001,  0.0002, -0.0003, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0332,  0.0192,  0.0240, -0.0402, -0.0519], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0332,  0.0192,  0.0240, -0.0402, -0.0519], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0076, -0.0003, -0.0062,  0.0062,  0.0119], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0417], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.8967], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0557, -0.0014, -0.0345,  0.0336,  0.0730], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0557, -0.0014, -0.0345,  0.0336,  0.0730], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.4342, -0.1670,  0.6451, -0.1011, -0.3059], grad_fn=<SliceBackward0>)
  [Layer 33] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 33] Output sample values after mixer: tensor([ 0.4342, -0.1670,  0.6451, -0.1011, -0.3059], grad_fn=<SliceBackward0>)
  [Layer 33] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 33] Residual connection sample values: tensor([-0.2590,  7.8428,  0.6440,  3.3063, -3.0302], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 34/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([108.7594], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0959], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0096,  0.3070,  0.0238,  0.1231, -0.1174], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2012,  0.0203,  0.0511, -0.5416,  0.1268], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2012,  0.0203,  0.0511, -0.5416,  0.1268], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0410,  0.0739,  0.3280, -1.2198,  0.8718], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.5434, -0.1006,  2.9274,  4.0451,  3.5851], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.0410, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0092, -0.0111,  0.0523,  0.2926,  0.1748], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0411,  0.0149,  0.0404,  0.2531,  0.1663], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0201,  0.0075,  0.0206,  0.1425,  0.0900], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0201,  0.0075,  0.0206,  0.1425,  0.0900], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.6684, -0.0243,  0.0009,  0.0076,  0.0254], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0209, -0.2424, -0.2779, -0.1138, -0.1309], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.5611, -2.4811, -2.8936, -0.0159, -0.0261], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0883, 0.0294, 0.1622, 0.6030, 0.2398], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7976, 0.9297, 0.6254, 0.9905, 0.9938], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0201,  0.0075,  0.0206,  0.1425,  0.0900], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.1868e-03,  4.3168e-05, -1.5183e-06, -1.3489e-05, -4.5026e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.1868e-03,  4.3168e-05, -1.5183e-06, -1.3489e-05, -4.5026e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0004,  0.0001,  0.0004,  0.0027,  0.0017], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0128,  0.0048,  0.0131,  0.0905,  0.0572], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0128,  0.0048,  0.0131,  0.0905,  0.0572], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 1.1562e-03,  4.8931e-05,  3.4254e-04, -1.8026e-02,  3.8553e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0125], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.9586], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0206,  0.0008,  0.0068, -0.4018,  0.0816], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0206,  0.0008,  0.0068, -0.4018,  0.0816], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.7685,  2.0799,  0.8128,  0.8906, -0.5742], grad_fn=<SliceBackward0>)
  [Layer 34] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 34] Output sample values after mixer: tensor([ 0.7685,  2.0799,  0.8128,  0.8906, -0.5742], grad_fn=<SliceBackward0>)
  [Layer 34] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 34] Residual connection sample values: tensor([ 0.5094,  9.9227,  1.4568,  4.1969, -3.6044], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 35/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([114.1605], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0936], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0247,  0.4793,  0.0692,  0.1871, -0.1726], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.0342, -0.6864,  0.6620, -0.0942, -0.2948], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.0342, -0.6864,  0.6620, -0.0942, -0.2948], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.7415,  0.1216,  0.1303,  0.6639,  0.6929], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.9161, 1.2284, 2.9109, 1.4928, 1.1019], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.7415,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1256, -0.0284, -0.0198,  0.1322,  0.1258], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0304,  0.0127, -0.0560,  0.0872,  0.0843], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0150,  0.0064, -0.0272,  0.0455,  0.0439], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0150,  0.0064, -0.0272,  0.0455,  0.0439], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0066,  0.1012, -0.2782,  0.2432, -0.0627], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1935,  0.2155, -0.0947, -0.2599, -0.1250], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7098, -2.7746, -0.4453, -1.1391, -3.5906], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3776, 0.0569, 1.4207, 0.2673, 0.0760], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7649, 0.8540, 0.5312, 0.7375, 0.7612], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0150,  0.0064, -0.0272,  0.0455,  0.0439], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.7455e-05, -5.7181e-04,  1.5714e-03, -1.3737e-03,  3.5386e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.7455e-05, -5.7181e-04,  1.5714e-03, -1.3737e-03,  3.5386e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0017,  0.0007, -0.0030,  0.0050,  0.0048], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0118,  0.0050, -0.0214,  0.0358,  0.0346], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0118,  0.0050, -0.0214,  0.0358,  0.0346], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0032, -0.0012, -0.0093, -0.0016, -0.0043], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0570], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.1869], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0436, -0.0084, -0.0480, -0.0095, -0.0347], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0436, -0.0084, -0.0480, -0.0095, -0.0347], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 4.5666,  3.5074, -3.6412,  1.9854, -3.2651], grad_fn=<SliceBackward0>)
  [Layer 35] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 35] Output sample values after mixer: tensor([ 4.5666,  3.5074, -3.6412,  1.9854, -3.2651], grad_fn=<SliceBackward0>)
  [Layer 35] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 35] Residual connection sample values: tensor([ 5.0760, 13.4301, -2.1845,  6.1823, -6.8695], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 36/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([144.8157], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0831], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2070,  0.5545, -0.0885,  0.2487, -0.2868], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1620,  0.4960, -0.9137, -1.5618, -0.2604], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1620,  0.4960, -0.9137, -1.5618, -0.2604], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0056, -0.3173, -1.1996,  0.5295, -0.4610], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.7578, 3.5614, 1.7038, 1.4916, 1.6519], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.0056, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0010, -0.0540, -0.1883,  0.0935,  0.0840], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0372, -0.0542, -0.2168,  0.0686,  0.0561], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0182, -0.0264, -0.0967,  0.0355,  0.0288], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0182, -0.0264, -0.0967,  0.0355,  0.0288], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1059,  0.3357, -0.0936,  0.0372,  0.0351], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.6698, -0.2774, -0.1707, -0.1304, -0.2629], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6566, -1.1306, -1.6058, -2.4414, -2.8823], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2254, 0.1222, 0.1131, 0.1533, 0.1974], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5495, 0.8709, 0.8339, 0.6877, 0.5660], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0182, -0.0264, -0.0967,  0.0355,  0.0288], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0004, -0.0014,  0.0004, -0.0002, -0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0004, -0.0014,  0.0004, -0.0002, -0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0007, -0.0010, -0.0038,  0.0014,  0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0216, -0.0312, -0.1146,  0.0421,  0.0342], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0216, -0.0312, -0.1146,  0.0421,  0.0342], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0016, -0.0096,  0.0300, -0.0114, -0.0039], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0313], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.6485], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0134, -0.1166,  0.2451, -0.1048, -0.0309], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0134, -0.1166,  0.2451, -0.1048, -0.0309], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 4.8307,  2.5594, -0.6668,  1.7713,  0.9278], grad_fn=<SliceBackward0>)
  [Layer 36] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 36] Output sample values after mixer: tensor([ 4.8307,  2.5594, -0.6668,  1.7713,  0.9278], grad_fn=<SliceBackward0>)
  [Layer 36] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 36] Residual connection sample values: tensor([ 9.9068, 15.9895, -2.8513,  7.9537, -5.9417], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 37/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([174.2907], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0757], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.4280,  0.7067, -0.1217,  0.3324, -0.2587], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.7708,  1.9053,  1.2175, -3.9409, -0.8878], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.7708,  1.9053,  1.2175, -3.9409, -0.8878], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0595, -0.2778,  0.2970, -0.6011,  1.6487], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.2308, -1.0985,  2.4162,  1.7604, -0.2299], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.0595,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0114,  0.0440,  0.0249, -0.2709,  0.2333], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0010,  0.0155,  0.0299, -0.4218,  0.2480], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0005,  0.0078,  0.0152, -0.1671,  0.1393], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0005,  0.0078,  0.0152, -0.1671,  0.1393], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0227,  0.0112, -0.0003, -0.0085,  0.0182], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2678,  0.0855, -0.1466, -0.0493, -0.1470], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0606, -3.2470, -0.8191, -0.2453, -1.9752], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0841, 0.0033, 0.1004, 0.0072, 0.0093], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9949, 0.9895, 0.9210, 0.9982, 0.9818], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0005,  0.0078,  0.0152, -0.1671,  0.1393], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-9.6884e-07, -4.7651e-07,  1.2106e-08,  3.6065e-07, -7.7523e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-9.6884e-07, -4.7651e-07,  1.2106e-08,  3.6065e-07, -7.7523e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-4.1481e-05,  6.3954e-04,  1.2402e-03, -1.3669e-02,  1.1397e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 5.4999e-05, -8.4797e-04, -1.6444e-03,  1.8124e-02, -1.5111e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 5.4999e-05, -8.4797e-04, -1.6444e-03,  1.8124e-02, -1.5111e-02],
       grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 8.3226e-05, -1.4064e-03, -1.5447e-03, -1.3614e-03,  3.9115e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1265], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([2.8110], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0004, -0.0058, -0.0126, -0.0204,  0.0131], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0004, -0.0058, -0.0126, -0.0204,  0.0131], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.7882, -0.7337,  1.3830,  0.0704,  2.7819], grad_fn=<SliceBackward0>)
  [Layer 37] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 37] Output sample values after mixer: tensor([ 0.7882, -0.7337,  1.3830,  0.0704,  2.7819], grad_fn=<SliceBackward0>)
  [Layer 37] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 37] Residual connection sample values: tensor([10.6949, 15.2558, -1.4682,  8.0241, -3.1598], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 38/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([211.0095], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0688], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.3818,  0.5405, -0.0518,  0.2761, -0.1114], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7804,  0.2412, -0.5104, -0.3145,  0.9957], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7804,  0.2412, -0.5104, -0.3145,  0.9957], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0800, -0.2691, -0.9587, -0.4418,  0.8611], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.2130, 0.4285, 2.1894, 0.0536, 1.1828], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.0800,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([0.0133, 0.0470, 0.1601, 0.0812, 0.1654], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([0.0414, 0.0098, 0.1343, 0.0696, 0.1442], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([0.0211, 0.0049, 0.0717, 0.0360, 0.0773], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([0.0211, 0.0049, 0.0717, 0.0360, 0.0773], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2767, -0.2424, -0.0359,  0.0334, -0.2774], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0679, -0.2696, -0.2707, -0.2591, -0.2731], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0881, -1.3536, -1.1764, -1.6451, -1.1941], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3970, 0.0457, 0.9680, 0.0444, 0.0731], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6492, 0.9401, 0.3202, 0.9296, 0.9164], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([0.0211, 0.0049, 0.0717, 0.0360, 0.0773], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0023, -0.0020, -0.0003,  0.0003, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0023, -0.0020, -0.0003,  0.0003, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([0.0016, 0.0004, 0.0054, 0.0027, 0.0059], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([0.0187, 0.0044, 0.0635, 0.0319, 0.0685], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([0.0187, 0.0044, 0.0635, 0.0319, 0.0685], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0046,  0.0006, -0.0122, -0.0042,  0.0498], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0267], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.1171], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0560,  0.0070, -0.1506, -0.0478,  0.5061], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0560,  0.0070, -0.1506, -0.0478,  0.5061], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 3.0504, -2.5763, -1.6838,  0.4902,  1.9247], grad_fn=<SliceBackward0>)
  [Layer 38] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 38] Output sample values after mixer: tensor([ 3.0504, -2.5763, -1.6838,  0.4902,  1.9247], grad_fn=<SliceBackward0>)
  [Layer 38] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 38] Residual connection sample values: tensor([13.7454, 12.6794, -3.1521,  8.5143, -1.2351], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 39/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([246.3477], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0637], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.3951,  0.3682, -0.0908,  0.2455, -0.0359], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.9712,  0.5443,  1.2667,  0.7919, -0.9937], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.9712,  0.5443,  1.2667,  0.7919, -0.9937], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.6529,  0.7972, -0.6485, -0.4809,  1.1783], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.6913,  0.6993,  2.1860,  0.9113, -1.2879], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.6529, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0969, -0.1289, -0.1130, -0.0857,  0.2086], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0826, -0.0437, -0.1353, -0.0816,  0.1876], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0430, -0.0214, -0.0631, -0.0391,  0.1026], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0430, -0.0214, -0.0631, -0.0391,  0.1026], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0370, -0.1289,  0.0010, -0.0168,  0.0225], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.2177, -0.1545,  0.1535, -0.2279, -0.2513], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6942, -0.9243, -1.3151, -3.1533, -2.1087], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0691, 0.0151, 0.0764, 0.0668, 0.0072], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9531, 0.9861, 0.9044, 0.8101, 0.9850], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0430, -0.0214, -0.0631, -0.0391,  0.1026], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.1004e-04, -3.8307e-04,  3.0312e-06, -4.9908e-05,  6.6953e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.1004e-04, -3.8307e-04,  3.0312e-06, -4.9908e-05,  6.6953e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0008, -0.0004, -0.0011, -0.0007,  0.0019], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0376, -0.0187, -0.0552, -0.0342,  0.0897], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0376, -0.0187, -0.0552, -0.0342,  0.0897], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0265, -0.0064, -0.0546, -0.0187, -0.0241], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0167], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.7456], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.3863, -0.1010, -0.8731, -0.2415, -0.3556], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.3863, -0.1010, -0.8731, -0.2415, -0.3556], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.7451, -4.1038, -1.3300,  0.0310,  0.4762], grad_fn=<SliceBackward0>)
  [Layer 39] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 39] Output sample values after mixer: tensor([ 2.7451, -4.1038, -1.3300,  0.0310,  0.4762], grad_fn=<SliceBackward0>)
  [Layer 39] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 39] Residual connection sample values: tensor([16.4905,  8.5757, -4.4821,  8.5453, -0.7589], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 40/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([300.0248], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0577], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.4158,  0.2179, -0.1169,  0.2175, -0.0191], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3287, -1.4895, -0.6198, -0.1937,  0.8404], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3287, -1.4895, -0.6198, -0.1937,  0.8404], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0841, -1.2376,  0.1355,  0.4282,  0.5073], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3133, 1.7607, 2.1522, 0.8591, 0.7890], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.0841, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0169,  0.2097,  0.0269, -0.0746,  0.0972], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0012,  0.1911,  0.0327, -0.0845,  0.0924], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0006,  0.1046,  0.0166, -0.0405,  0.0483], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0006,  0.1046,  0.0166, -0.0405,  0.0483], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0392,  0.0909, -0.0050, -0.0814,  0.0521], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1023, -0.1455, -0.0385,  0.0810,  0.0487], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9810, -1.4352, -0.7966, -1.6062, -1.8465], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1977, 0.0762, 0.0385, 0.0850, 0.1258], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6760, 0.8964, 0.9698, 0.8724, 0.7928], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0006,  0.1046,  0.0166, -0.0405,  0.0483], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.6783e-06,  1.0858e-05, -5.9507e-07, -9.7283e-06,  6.2193e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-4.6783e-06,  1.0858e-05, -5.9507e-07, -9.7283e-06,  6.2193e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 2.7457e-05,  4.7528e-03,  7.5396e-04, -1.8386e-03,  2.1953e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0005,  0.0902,  0.0143, -0.0349,  0.0417], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0005,  0.0902,  0.0143, -0.0349,  0.0417], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-7.1683e-05, -2.4720e-02, -3.1024e-03,  3.0537e-03,  2.4460e-02],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0107], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.6479], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0014, -0.4707, -0.0582,  0.0678,  0.4570], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0014, -0.4707, -0.0582,  0.0678,  0.4570], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.7097, -2.0496,  0.3234,  0.8814,  1.2196], grad_fn=<SliceBackward0>)
  [Layer 40] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 40] Output sample values after mixer: tensor([-0.7097, -2.0496,  0.3234,  0.8814,  1.2196], grad_fn=<SliceBackward0>)
  [Layer 40] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 40] Residual connection sample values: tensor([15.7808,  6.5261, -4.1587,  9.4267,  0.4607], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 41/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([347.3723], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0537], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.3777,  0.1575, -0.1016,  0.2256,  0.0111], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.9396, -0.8825, -0.5269, -1.3532, -0.6953], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.9396, -0.8825, -0.5269, -1.3532, -0.6953], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.4675,  0.1662, -0.5645, -0.0105,  0.9849], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.5161, 0.8278, 4.1320, 0.4762, 2.1337], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.4675,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0798,  0.0242, -0.0958, -0.0017,  0.3020], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0665,  0.0102, -0.0937, -0.0085,  0.2864], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0344,  0.0051, -0.0446, -0.0042,  0.1636], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0344,  0.0051, -0.0446, -0.0042,  0.1636], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1395,  0.1526, -0.0450, -0.1489,  0.1408], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0856, -0.0386, -0.1136, -0.1059, -0.2334], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8259, -1.8637, -1.2829, -1.4543, -4.4079], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0618, 0.0704, 0.3718, 0.0657, 0.0527], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8934, 0.8770, 0.6206, 0.9089, 0.7928], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0344,  0.0051, -0.0446, -0.0042,  0.1636], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.9591e-04,  3.2384e-04, -9.5437e-05, -3.1600e-04,  2.9876e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.9591e-04,  3.2384e-04, -9.5437e-05, -3.1600e-04,  2.9876e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 2.8431e-04,  4.2508e-05, -3.6954e-04, -3.4868e-05,  1.3538e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0338,  0.0050, -0.0439, -0.0041,  0.1608], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0338,  0.0050, -0.0439, -0.0041,  0.1608], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0089, -0.0013,  0.0086,  0.0012, -0.0372], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0083], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.9378], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1687, -0.0247,  0.1598,  0.0225, -0.5672], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1687, -0.0247,  0.1598,  0.0225, -0.5672], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 3.5776, -1.7665, -2.5780,  4.9634,  1.7960], grad_fn=<SliceBackward0>)
  [Layer 41] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 41] Output sample values after mixer: tensor([ 3.5776, -1.7665, -2.5780,  4.9634,  1.7960], grad_fn=<SliceBackward0>)
  [Layer 41] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 41] Residual connection sample values: tensor([19.3584,  4.7596, -6.7367, 14.3902,  2.2567], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 42/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([401.7590], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0499], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.4581,  0.1148, -0.1611,  0.3381,  0.0532], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7254,  1.2558, -0.1218, -0.7086,  0.5597], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7254,  1.2558, -0.1218, -0.7086,  0.5597], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4171, -0.8272, -0.8989,  0.7359,  0.7561], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.1080,  1.8776,  2.8468, -0.2382,  0.3650], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 0.4171, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0642,  0.1282, -0.1297, -0.0628,  0.1264], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0548,  0.1150, -0.1196, -0.0593,  0.1064], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0282,  0.0608, -0.0562, -0.0288,  0.0560], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0282,  0.0608, -0.0562, -0.0288,  0.0560], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0031, -0.0218,  0.0755,  0.0280,  0.3986], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0971, -0.1690, -0.1595, -0.2479, -0.2334], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0661, -1.4514, -0.7270, -1.9455, -0.6256], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0192, 0.7611, 0.0578, 0.0214, 0.0162], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9798, 0.3313, 0.9588, 0.9592, 0.9899], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0282,  0.0608, -0.0562, -0.0288,  0.0560], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.6995e-06, -1.1788e-05,  4.0808e-05,  1.5112e-05,  2.1538e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.6995e-06, -1.1788e-05,  4.0808e-05,  1.5112e-05,  2.1538e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-9.1826e-06, -1.9829e-05,  1.8340e-05,  9.3824e-06, -1.8270e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0283,  0.0610, -0.0564, -0.0289,  0.0562], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0283,  0.0610, -0.0564, -0.0289,  0.0562], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0067,  0.0596,  0.0032,  0.0067,  0.0200], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0090], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.5618], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1465,  1.2842,  0.0707,  0.1224,  0.3982], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1465,  1.2842,  0.0707,  0.1224,  0.3982], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.1237, -2.7113, -2.0093,  4.7688, -3.9223], grad_fn=<SliceBackward0>)
  [Layer 42] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 42] Output sample values after mixer: tensor([ 1.1237, -2.7113, -2.0093,  4.7688, -3.9223], grad_fn=<SliceBackward0>)
  [Layer 42] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 42] Residual connection sample values: tensor([20.4821,  2.0483, -8.7460, 19.1589, -1.6656], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 43/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([457.1539], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0468], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.4530,  0.0475, -0.1940,  0.4310, -0.0365], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.4657, -1.3375, -0.0354, -0.3716,  1.2400], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.4657, -1.3375, -0.0354, -0.3716,  1.2400], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1363, -0.7891, -1.1674, -1.7444,  0.2651], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.8784, 0.5563, 2.2585, 1.5374, 0.8957], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.1363,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0186, -0.0275, -0.2039,  0.3120, -0.0425], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0221, -0.0732, -0.1915,  0.3179, -0.0513], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0110, -0.0353, -0.0866,  0.1840, -0.0250], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0110, -0.0353, -0.0866,  0.1840, -0.0250], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0096, -0.1001,  0.8879,  0.0139,  0.0301], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2419, -0.0701, -0.2761, -0.1842,  0.2023], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9762, -1.4783, -1.0589, -1.0815, -5.9141], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0262, 0.0258, 0.0755, 0.0317, 0.1264], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9748, 0.9625, 0.9232, 0.9663, 0.4736], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0110, -0.0353, -0.0866,  0.1840, -0.0250], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.7583e-06,  2.8699e-05, -2.5462e-04, -3.9789e-06, -8.6418e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.7583e-06,  2.8699e-05, -2.5462e-04, -3.9789e-06, -8.6418e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0001, -0.0003, -0.0008,  0.0017, -0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0096, -0.0310, -0.0760,  0.1615, -0.0219], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0096, -0.0310, -0.0760,  0.1615, -0.0219], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0027,  0.0086,  0.0013, -0.0245, -0.0211], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0099], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.0507], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0728,  0.1748,  0.0252, -0.5144, -0.5110], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0728,  0.1748,  0.0252, -0.5144, -0.5110], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1739, -1.8796,  1.6224,  1.0319,  2.4422], grad_fn=<SliceBackward0>)
  [Layer 43] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 43] Output sample values after mixer: tensor([-0.1739, -1.8796,  1.6224,  1.0319,  2.4422], grad_fn=<SliceBackward0>)
  [Layer 43] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 43] Residual connection sample values: tensor([20.3082,  0.1687, -7.1236, 20.1909,  0.7766], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 44/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([508.7486], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0443], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.4229,  0.0037, -0.1497,  0.4183,  0.0162], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.6640, -2.1792, -0.6713, -1.3084, -0.5236], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.6640, -2.1792, -0.6713, -1.3084, -0.5236], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.4055, -0.1717, -0.8993, -0.4415,  0.6870], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.2660,  0.9674,  0.1155, -0.6020, -0.6112], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.4055,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0679,  0.0217, -0.1406, -0.0587, -0.0795], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0740,  0.0821, -0.1591, -0.0652, -0.1320], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0356,  0.0427, -0.0732, -0.0316, -0.0616], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0356,  0.0427, -0.0732, -0.0316, -0.0616], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2655,  0.0750,  0.0651, -0.0736,  0.1232], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2767,  0.0932,  0.0462, -0.0726, -0.1254], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7482, -0.6439, -1.1771, -1.3506, -1.0269], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0168, 0.0392, 0.0125, 0.0054, 0.0203], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9875, 0.9751, 0.9854, 0.9927, 0.9794], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0356,  0.0427, -0.0732, -0.0316, -0.0616], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.5922e-04, -4.4982e-05, -3.9020e-05,  4.4105e-05, -7.3863e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.5922e-04, -4.4982e-05, -3.9020e-05,  4.4105e-05, -7.3863e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-7.2246e-05,  8.6642e-05, -1.4844e-04, -6.3963e-05, -1.2495e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0336,  0.0402, -0.0689, -0.0297, -0.0580], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0336,  0.0402, -0.0689, -0.0297, -0.0580], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0089, -0.0089,  0.0157,  0.0083,  0.0113], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0083], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.9460], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1815, -0.1453,  0.3443,  0.1578,  0.2347], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1815, -0.1453,  0.3443,  0.1578,  0.2347], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.3494,  2.6280, -0.9063,  4.1922,  2.6828], grad_fn=<SliceBackward0>)
  [Layer 44] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 44] Output sample values after mixer: tensor([-2.3494,  2.6280, -0.9063,  4.1922,  2.6828], grad_fn=<SliceBackward0>)
  [Layer 44] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 44] Residual connection sample values: tensor([17.9588,  2.7966, -8.0299, 24.3831,  3.4595], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 45/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([565.0865], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0421], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.3624,  0.0580, -0.1627,  0.4841,  0.0695], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8058,  0.0948, -1.1501, -0.5396, -1.0617], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8058,  0.0948, -1.1501, -0.5396, -1.0617], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.1707, -0.8449, -0.0401,  0.6605, -0.3405], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.4952,  0.1131, -0.4964,  0.1814, -0.1924], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -1.1707,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1736,  0.1506, -0.0061,  0.1132,  0.0554], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1782,  0.2028, -0.0086,  0.1066,  0.0529], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0812,  0.1116, -0.0043,  0.0561,  0.0272], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0812,  0.1116, -0.0043,  0.0561,  0.0272], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1100,  0.1300, -0.0407, -0.1247, -0.0556], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0629, -0.0367, -0.0807, -0.1151,  0.2346], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.2502, -4.1815, -1.0937, -2.6774, -2.3149], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0118, 0.0253, 0.0119, 0.0151, 0.0046], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9738, 0.8998, 0.9871, 0.9604, 0.9895], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0812,  0.1116, -0.0043,  0.0561,  0.0272], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.0533e-04, -1.2448e-04,  3.8989e-05,  1.1942e-04,  5.3228e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.0533e-04, -1.2448e-04,  3.8989e-05,  1.1942e-04,  5.3228e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-3.3007e-04,  4.5387e-04, -1.7395e-05,  2.2827e-04,  1.1040e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0914,  0.1257, -0.0048,  0.0632,  0.0306], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0914,  0.1257, -0.0048,  0.0632,  0.0306], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0227,  0.0062,  0.0013, -0.0126, -0.0083], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0110], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.5136], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.5059,  0.1006,  0.0272, -0.2351, -0.1674], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.5059,  0.1006,  0.0272, -0.2351, -0.1674], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.4526,  1.7351, -2.4131, -0.1692, -0.9309], grad_fn=<SliceBackward0>)
  [Layer 45] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 45] Output sample values after mixer: tensor([-1.4526,  1.7351, -2.4131, -0.1692, -0.9309], grad_fn=<SliceBackward0>)
  [Layer 45] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 45] Residual connection sample values: tensor([ 16.5062,   4.5318, -10.4431,  24.2139,   2.5286],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 46/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([621.1328], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0401], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.3826,  0.1095, -0.2465,  0.5674,  0.0582], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.5693, -0.2385, -0.1747,  0.6355, -0.3474], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.5693, -0.2385, -0.1747,  0.6355, -0.3474], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.1878, -1.5029, -0.0362, -1.1121, -0.1026], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.4029, 3.0713, 1.4172, 1.1248, 1.0188], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0000, 1.1878, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1786, -0.2312, -0.0061,  0.1648,  0.0167], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1818, -0.2350, -0.0272,  0.1490,  0.0370], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0826, -0.1037, -0.0134,  0.0800,  0.0188], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0826, -0.1037, -0.0134,  0.0800,  0.0188], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0289, -0.2768, -0.0391,  0.0038,  0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0030, -0.2748, -0.1480,  0.0598, -0.0977], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8673, -0.9793, -1.6584, -0.9408, -0.4381], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0045, 0.1159, 0.0259, 0.0315, 0.0242], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9916, 0.8927, 0.9580, 0.9708, 0.9894], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0826, -0.1037, -0.0134,  0.0800,  0.0188], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.0803e-05,  1.0331e-04,  1.4600e-05, -1.4156e-06, -1.0519e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.0803e-05,  1.0331e-04,  1.4600e-05, -1.4156e-06, -1.0519e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-6.8142e-05, -8.5533e-05, -1.1067e-05,  6.5980e-05,  1.5537e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0661, -0.0829, -0.0107,  0.0640,  0.0151], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0661, -0.0829, -0.0107,  0.0640,  0.0151], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0858,  0.0087,  0.0009,  0.0266, -0.0022], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0131], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.7344], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-1.7447,  0.1692,  0.0150,  0.4313, -0.0429], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-1.7447,  0.1692,  0.0150,  0.4313, -0.0429], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.5501,  1.7849, -1.5543, -1.8209,  0.8099], grad_fn=<SliceBackward0>)
  [Layer 46] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 46] Output sample values after mixer: tensor([-1.5501,  1.7849, -1.5543, -1.8209,  0.8099], grad_fn=<SliceBackward0>)
  [Layer 46] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 46] Residual connection sample values: tensor([ 14.9561,   6.3167, -11.9974,  22.3931,   3.3385],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 47/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([687.3706], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0381], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2927,  0.1248, -0.2278,  0.4304,  0.0611], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1169, -0.4040, -2.0413, -0.3240, -0.4371], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1169, -0.4040, -2.0413, -0.3240, -0.4371], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.2364,  0.0030, -0.4163, -0.8275, -1.4597], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-2.0961,  0.9257,  3.0168,  1.1729,  2.6657], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -1.2364,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 1.7101e-01, -1.1069e-04, -3.9661e-02,  1.2091e-01, -1.9886e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1881, -0.0250, -0.2591,  0.1175, -0.1937], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1029, -0.0124, -0.1129,  0.0622, -0.0875], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1029, -0.0124, -0.1129,  0.0622, -0.0875], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2226, -0.0208, -0.2735, -0.2764, -0.0551], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.6741, -0.1164,  0.0537, -0.2772, -0.2183], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -3.5522, -11.2450,  -2.6866,  -3.1935,  -3.1998],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0028, 0.0379, 0.0515, 0.0118, 0.1553], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9902, 0.6530, 0.8708, 0.9631, 0.6083], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1029, -0.0124, -0.1129,  0.0622, -0.0875], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-6.3594e-05, -5.9430e-06, -7.8120e-05, -7.8935e-05, -1.5733e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-6.3594e-05, -5.9430e-06, -7.8120e-05, -7.8935e-05, -1.5733e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 2.1195e-04, -2.5445e-05, -2.3256e-04,  1.2818e-04, -1.8026e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1457, -0.0175, -0.1598,  0.0881, -0.1239], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1457, -0.0175, -0.1598,  0.0881, -0.1239], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0080,  0.0028,  0.0375, -0.0120,  0.0212], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0118], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.2106], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1582,  0.0335,  0.7258, -0.2422,  0.4121], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1582,  0.0335,  0.7258, -0.2422,  0.4121], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.5139,  2.6310,  2.8900,  4.4993,  2.3946], grad_fn=<SliceBackward0>)
  [Layer 47] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 47] Output sample values after mixer: tensor([-1.5139,  2.6310,  2.8900,  4.4993,  2.3946], grad_fn=<SliceBackward0>)
  [Layer 47] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 47] Residual connection sample values: tensor([13.4423,  8.9477, -9.1073, 26.8924,  5.7331], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 48/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([859.9871], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0341], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2399,  0.1491, -0.1484,  0.4520,  0.0909], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1662, -1.0028, -1.1275,  1.0820, -0.9220], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1662, -1.0028, -1.1275,  1.0820, -0.9220], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.8173, -0.9233,  1.0846,  0.9239,  0.1423], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.4683, -0.2074,  0.8566,  2.8699, -0.3005], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0000, -0.8173,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1352, -0.1023,  0.1548,  0.1680, -0.0215], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1300,  0.1177,  0.0689,  0.1018, -0.0239], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0692,  0.0623,  0.0356,  0.0535, -0.0118], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0692,  0.0623,  0.0356,  0.0535, -0.0118], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0172, -0.0354, -0.0491,  0.0426, -0.0030], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0367, -0.1731, -0.0363, -0.2496, -0.0463], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-54.8118, -78.5143, -47.2508,  -2.3308,  -4.2266],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1276, 0.0072, 0.0095, 0.0191, 0.0056], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([9.1858e-04, 5.6943e-01, 6.3707e-01, 9.5637e-01, 9.7673e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0692,  0.0623,  0.0356,  0.0535, -0.0118], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.5192e-04, -3.1270e-04, -4.3338e-04,  3.7585e-04, -2.6179e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.5192e-04, -3.1270e-04, -4.3338e-04,  3.7585e-04, -2.6179e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0021,  0.0019,  0.0011,  0.0016, -0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0572,  0.0515,  0.0294,  0.0442, -0.0098], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0572,  0.0515,  0.0294,  0.0442, -0.0098], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0044, -0.0138, -0.0081,  0.0357,  0.0026], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0080], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([11.2006], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1117, -0.2910, -0.1765,  0.8892,  0.0710], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1117, -0.2910, -0.1765,  0.8892,  0.0710], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ -4.5851,  -2.3205,   4.3624,   8.1275, -14.1852],
       grad_fn=<SliceBackward0>)
  [Layer 48] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 48] Output sample values after mixer: tensor([ -4.5851,  -2.3205,   4.3624,   8.1275, -14.1852],
       grad_fn=<SliceBackward0>)
  [Layer 48] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 48] Residual connection sample values: tensor([ 8.8572,  6.6272, -4.7449, 35.0199, -8.4521], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1228.0305], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0285], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1408,  0.1165, -0.0768,  0.5782, -0.1331], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Final backbone norm output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Final backbone norm output sample values: tensor([ 0.1408,  0.1165, -0.0768,  0.5782, -0.1331], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Logits shape: torch.Size([1, 1, 50288])
[Mamba2LMHeadModel] Logits sample values: tensor([12.9962,  3.8463, 13.2097, 14.0274, 13.4840], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Forward pass input_ids shape: torch.Size([1, 1])
[Mamba2LMHeadModel] input_ids sample values: tensor([4877])
[Mamba2LMHeadModel] Embedding output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Embedding sample values: tensor([-0.2245, -0.3135, -0.0594, -0.0320,  0.1243], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 1/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0386], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([5.0877], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2024, -0.3199, -0.0554, -0.0298,  0.1138], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4956,  0.8227,  0.3271, -0.2363,  0.0947], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4956,  0.8227,  0.3271, -0.2363,  0.0947], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3530,  0.7994, -0.4369, -0.7808,  0.9879], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.3307,  0.1062,  0.2109, -0.0398,  0.2930], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.0169,  0.3530,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0208,  0.0648,  0.1273, -0.1544,  0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2070,  0.2802,  0.3975, -0.1052, -0.2559], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1142,  0.1596,  0.2378, -0.0498, -0.1117], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1142,  0.1596,  0.2378, -0.0498, -0.1117], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.2149,  0.0366, -0.1949, -0.2231,  0.1900], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2760,  0.0325, -0.2497, -0.2782, -0.0855], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6180, -2.5226, -3.0473, -3.3078, -3.9090], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0126, 0.0151, 0.0112, 0.0235, 0.0098], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9675, 0.9627, 0.9665, 0.9252, 0.9626], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1142,  0.1596,  0.2378, -0.0498, -0.1117], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.1012e-04,  5.2838e-05, -2.8129e-04, -3.2195e-04,  2.7416e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0006,  0.0003, -0.0006, -0.0007,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0171, -0.0174, -0.0225, -0.0023,  0.0156], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0264,  0.0435,  0.0682, -0.0213, -0.0270], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0264,  0.0435,  0.0682, -0.0213, -0.0270], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0050,  0.0249,  0.0130,  0.0022, -0.0013], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0224], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.6779], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0331,  0.1790,  0.0739,  0.0245, -0.0091], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0331,  0.1790,  0.0739,  0.0245, -0.0091], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2011, -0.1340, -0.2078, -0.2314,  0.1261], grad_fn=<SliceBackward0>)
  [Layer 1] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 1] Output sample values after mixer: tensor([ 0.2011, -0.1340, -0.2078, -0.2314,  0.1261], grad_fn=<SliceBackward0>)
  [Layer 1] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 1] Residual connection sample values: tensor([-0.0234, -0.4475, -0.2672, -0.2634,  0.2504], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 2/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1850], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([2.3246], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0196, -0.2966, -0.2067, -0.2134,  0.1982], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.0410,  0.4316,  1.8019, -0.5604, -1.5664], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.0410,  0.4316,  1.8019, -0.5604, -1.5664], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.1875,  0.7720, -0.0212,  4.3428, -1.2404], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.2648,  1.6325,  1.2252,  0.3707, -0.1780], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.7522, -1.1875,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0889, -0.0766, -0.4056, -3.2658, -0.1072], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1187, -0.2312, -0.4161, -2.2121, -0.1203], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0558, -0.1023, -0.1654, -0.2183, -0.0565], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0558, -0.1023, -0.1654, -0.2183, -0.0565], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0226,  0.0624, -0.0808, -0.0022, -0.0931], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1912, -0.2045,  0.1386, -0.1095, -0.2153], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-19.8515, -18.6852, -13.5640,  -2.4189,  -0.4662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0214, 0.0318, 0.0701, 0.0106, 0.0124], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6537, 0.5525, 0.3864, 0.9747, 0.9942], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0558, -0.1023, -0.1654, -0.2183, -0.0565], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.6982e-05, -7.4678e-05,  9.6611e-05,  2.6388e-06,  1.1139e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.9660e-05, -8.0258e-05,  9.0540e-05,  3.2248e-05,  6.1370e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0004, -0.0023, -0.0001,  0.0195,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0390, -0.0729, -0.1143, -0.1312, -0.0389], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0390, -0.0729, -0.1143, -0.1312, -0.0389], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0300, -0.0191, -0.1768,  0.0267,  0.0105], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.7159], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.1819], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0450, -0.0135, -0.2810,  0.0172,  0.0170], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0450, -0.0135, -0.2810,  0.0172,  0.0170], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0220,  0.2023,  0.4475, -0.0062,  0.2442], grad_fn=<SliceBackward0>)
  [Layer 2] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 2] Output sample values after mixer: tensor([ 0.0220,  0.2023,  0.4475, -0.0062,  0.2442], grad_fn=<SliceBackward0>)
  [Layer 2] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 2] Residual connection sample values: tensor([-0.0014, -0.2451,  0.1803, -0.2696,  0.4946], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 3/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.3899], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.6015], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0009, -0.1216,  0.1025, -0.1577,  0.3111], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5669, -0.5292, -0.5095, -0.5915,  2.3980], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5669, -0.5292, -0.5095, -0.5915,  2.3980], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4664, -0.3912, -0.4663, -0.6095,  0.6138], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9837, 1.6770, 1.6273, 2.2438, 0.9656], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 1.1963, 0.4664, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2179,  0.0561, -0.0992, -0.3297, -0.0228], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2194,  0.0368,  0.0244, -0.3421, -0.0391], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0977,  0.0187,  0.0124, -0.1421, -0.0192], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0977,  0.0187,  0.0124, -0.1421, -0.0192], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.4251, -0.0412,  0.0607, -0.1082,  0.1269], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.4367, -0.0724, -0.2677,  0.3748,  0.0532], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6506, -3.9939, -6.7806, -0.9419, -6.0308], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0223, 0.1045, 0.0675, 0.0602, 0.0560], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9856, 0.6588, 0.6328, 0.9449, 0.7135], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0977,  0.0187,  0.0124, -0.1421, -0.0192], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-9.2497e-04,  8.9671e-05, -1.3204e-04,  2.3540e-04, -2.7610e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.8347e-04,  6.3964e-05, -2.0393e-04,  2.4264e-04, -3.6432e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-3.1318e-04,  2.4014e-05,  1.6410e-03, -3.8585e-05, -1.7132e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0448,  0.0086,  0.0073, -0.0647, -0.0089], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0448,  0.0086,  0.0073, -0.0647, -0.0089], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0092, -0.0017, -0.0014,  0.0136, -0.0196], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.6154], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.2748], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0163, -0.0033, -0.0022,  0.0326, -0.0270], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0163, -0.0033, -0.0022,  0.0326, -0.0270], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1140, -0.5201, -0.1040, -1.0072, -0.8933], grad_fn=<SliceBackward0>)
  [Layer 3] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 3] Output sample values after mixer: tensor([ 0.1140, -0.5201, -0.1040, -1.0072, -0.8933], grad_fn=<SliceBackward0>)
  [Layer 3] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 3] Residual connection sample values: tensor([ 0.1127, -0.7652,  0.0763, -1.2768, -0.3988], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 4/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.7775], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.1341], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0596, -0.3068,  0.0357, -0.6176, -0.2118], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-2.0228, -1.7053, -2.4148, -0.8270, -0.7426], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-2.0228, -1.7053, -2.4148, -0.8270, -0.7426], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.6892, -2.3705,  0.3414,  0.2439, -2.0480], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.5252, 1.8798, 1.9146, 1.7691, 0.3789], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0897, 0.6892, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1141, -0.0876, -0.0497, -0.1402,  0.1535], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0403, -0.1227, -0.0979, -0.1560,  0.4465], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0205, -0.0576, -0.0465, -0.0719,  0.2723], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0205, -0.0576, -0.0465, -0.0719,  0.2723], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.4615,  0.3402,  1.6040,  0.3791, -0.0110], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.7388,  0.8488, -0.1792, -0.2693, -0.0982], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.7127,  -1.2862,  -1.4870, -27.0280,  -4.0727],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0104, 0.0157, 0.0129, 0.0189, 0.0549], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9824, 0.9800, 0.9810, 0.6007, 0.7997], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0205, -0.0576, -0.0465, -0.0719,  0.2723], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 9.8236e-05,  7.2419e-05,  3.4146e-04,  8.0693e-05, -2.3453e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.3988e-04, -4.6901e-04,  3.6992e-04,  9.4669e-05, -3.2445e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0006, -0.0022, -0.0027, -0.0017,  0.0138], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0109, -0.0346, -0.0289, -0.0422,  0.1671], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0109, -0.0346, -0.0289, -0.0422,  0.1671], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0026,  0.0091,  0.0057,  0.0106, -0.0400], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.5632], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7998], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0043,  0.0098,  0.0094,  0.0147, -0.0331], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0043,  0.0098,  0.0094,  0.0147, -0.0331], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.4520, -0.2265, -0.0135,  0.2411, -0.2951], grad_fn=<SliceBackward0>)
  [Layer 4] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 4] Output sample values after mixer: tensor([-0.4520, -0.2265, -0.0135,  0.2411, -0.2951], grad_fn=<SliceBackward0>)
  [Layer 4] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 4] Residual connection sample values: tensor([-0.3393, -0.9918,  0.0628, -1.0358, -0.6938], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 5/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.0151], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9925], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1520, -0.3672,  0.0263, -0.4445, -0.3208], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6764, -1.3196,  0.2466,  0.5980, -2.0331], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6764, -1.3196,  0.2466,  0.5980, -2.0331], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3543, -1.7480,  1.7799,  2.0270, -0.1313], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.6473,  1.9372,  0.5976,  1.2806, -0.9064], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -1.0174,  0.3543,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1775,  0.1448, -0.3223, -0.3373, -0.4015], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1259,  0.1075, -0.3919, -0.3635, -0.4073], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0669,  0.0566, -0.1580, -0.1491, -0.1627], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0669,  0.0566, -0.1580, -0.1491, -0.1627], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0778,  0.1239, -0.0119,  0.0257, -0.0514], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0123, -0.0934, -0.0642,  0.0261,  0.0396], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.5763,  -1.0444,  -0.8388,  -5.6765, -20.4018],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0200, 0.0807, 0.0758, 0.0491, 0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9689, 0.9192, 0.9384, 0.7567, 0.9723], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0669,  0.0566, -0.1580, -0.1491, -0.1627], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.0438e-04,  1.6617e-04, -1.6004e-05,  3.4483e-05, -6.8990e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.0567e-04,  1.7787e-04, -2.6238e-06,  3.4543e-05, -5.5198e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0006,  0.0005, -0.0025, -0.0019, -0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0366,  0.0309, -0.0874, -0.0820, -0.0904], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0366,  0.0309, -0.0874, -0.0820, -0.0904], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0083, -0.0086, -0.0121, -0.0316,  0.0213], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.8972], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.0558], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0138, -0.0146, -0.0195, -0.0534,  0.0318], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0138, -0.0146, -0.0195, -0.0534,  0.0318], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2201,  0.1058, -0.2982,  0.0315,  0.2296], grad_fn=<SliceBackward0>)
  [Layer 5] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 5] Output sample values after mixer: tensor([-0.2201,  0.1058, -0.2982,  0.0315,  0.2296], grad_fn=<SliceBackward0>)
  [Layer 5] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 5] Residual connection sample values: tensor([-0.5594, -0.8860, -0.2354, -1.0043, -0.4642], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 6/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.1978], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9137], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2253, -0.2761, -0.0841, -0.3710, -0.1896], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.3056, -1.0692,  0.5326, -0.4131, -0.0775], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.3056, -1.0692,  0.5326, -0.4131, -0.0775], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-2.9153, -1.9623,  0.3729,  0.2618,  0.0311], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.1571, 1.2469, 0.7267, 0.4330, 1.6726], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.4182, -2.9153,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.3481, -0.2797,  0.0801, -0.0313, -0.2957], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.3825, -0.3520,  0.0179,  0.0308, -0.2260], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.2274, -0.1454,  0.0090,  0.0156, -0.1003], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.2274, -0.1454,  0.0090,  0.0156, -0.1003], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.2872, -0.0784, -0.2392, -0.0371, -0.0218], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.3577,  0.0110, -0.2637,  0.1438,  0.3944], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9866, -8.7747, -3.3046, -2.9913, -3.3435], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2016, 0.0470, 0.1664, 0.1000, 0.1489], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8197, 0.6621, 0.5770, 0.7415, 0.6079], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.2274, -0.1454,  0.0090,  0.0156, -0.1003], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0132, -0.0036, -0.0110, -0.0017, -0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0137, -0.0047, -0.0120, -0.0022, -0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0681, -0.0457, -0.0018,  0.0066, -0.0367], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1173, -0.0772,  0.0001,  0.0100, -0.0584], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1173, -0.0772,  0.0001,  0.0100, -0.0584], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-3.2660e-02,  2.1086e-02,  4.2240e-05, -1.6377e-03,  2.1743e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.2348], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8999], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-5.6458e-02,  1.7076e-02,  3.2519e-05, -1.6393e-03,  1.5363e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-5.6458e-02,  1.7076e-02,  3.2519e-05, -1.6393e-03,  1.5363e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0763,  0.4313, -0.2167, -0.1033, -0.1485], grad_fn=<SliceBackward0>)
  [Layer 6] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 6] Output sample values after mixer: tensor([-0.0763,  0.4313, -0.2167, -0.1033, -0.1485], grad_fn=<SliceBackward0>)
  [Layer 6] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 6] Residual connection sample values: tensor([-0.6358, -0.4547, -0.4521, -1.1076, -0.6127], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 7/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.5231], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8103], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1982, -0.1177, -0.1307, -0.3162, -0.1916], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.5859, -1.6107, -0.6985, -0.6521, -0.0971], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.5859, -1.6107, -0.6985, -0.6521, -0.0971], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-3.4444,  0.8299, -1.9053, -0.9272, -0.3983], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.1604, 0.8790, 0.5454, 0.7709, 0.8112], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -1.3217, -3.4444,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.3407, -0.4786,  0.5282,  0.2517,  0.1549], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2726, -0.4540,  0.5274,  0.2581,  0.1513], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1548, -0.1763,  0.3317,  0.1456,  0.0813], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1548, -0.1763,  0.3317,  0.1456,  0.0813], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1131,  0.1565, -0.0616,  0.0168, -0.0768], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0132,  0.0635,  0.0107,  0.0037,  0.1730], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2959, -1.1836, -0.3113, -0.1314, -1.5015], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0547, 0.0144, 0.0044, 0.0322, 0.0024], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9839, 0.9831, 0.9986, 0.9958, 0.9964], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1548, -0.1763,  0.3317,  0.1456,  0.0813], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0010,  0.0013, -0.0005,  0.0001, -0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0012,  0.0013, -0.0005,  0.0001, -0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0044, -0.0049,  0.0086,  0.0044,  0.0022], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0047, -0.0053,  0.0093,  0.0048,  0.0024], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0047, -0.0053,  0.0093,  0.0048,  0.0024], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0062,  0.0014, -0.0022, -0.0011, -0.0001], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0165], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.7935], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0603,  0.0077, -0.0275, -0.0095, -0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0603,  0.0077, -0.0275, -0.0095, -0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1935,  0.1123, -0.1015,  0.0571,  0.1704], grad_fn=<SliceBackward0>)
  [Layer 7] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 7] Output sample values after mixer: tensor([ 0.1935,  0.1123, -0.1015,  0.0571,  0.1704], grad_fn=<SliceBackward0>)
  [Layer 7] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 7] Residual connection sample values: tensor([-0.4423, -0.3424, -0.5536, -1.0504, -0.4423], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 8/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.6716], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7735], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1764, -0.1069, -0.2057, -0.3884, -0.1756], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.3634, -1.9521,  1.2215, -2.9449, -2.1291], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.3634, -1.9521,  1.2215, -2.9449, -2.1291], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.7797, -1.8805, -0.9777, -0.1543,  0.7725], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.2010, -0.8826,  0.9178,  0.6468, -1.0652], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.7961, -1.7797,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1283, -0.0101,  0.1633,  0.1054,  0.0753], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.3346, -0.0411, -0.1514,  0.0539,  0.0192], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1950, -0.0201, -0.0700,  0.0277,  0.0097], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1950, -0.0201, -0.0700,  0.0277,  0.0097], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0497, -0.0272, -0.0798, -0.0360,  0.1688], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1015, -0.0629, -0.0825, -0.1588, -0.2450], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.6543, -0.9827, -0.5550, -3.9397, -1.8081], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0082, 0.0228, 0.0276, 0.0455, 0.0033], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9703, 0.9778, 0.9848, 0.8360, 0.9940], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1950, -0.0201, -0.0700,  0.0277,  0.0097], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-7.9805e-05, -4.3734e-05, -1.2816e-04, -5.7878e-05,  2.7119e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.9394e-05, -4.7478e-05, -1.3054e-04, -7.2451e-05,  2.1677e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0044, -0.0003, -0.0015,  0.0004,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1685, -0.0173, -0.0604,  0.0237,  0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1685, -0.0173, -0.0604,  0.0237,  0.0087], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0468,  0.0042, -0.0570, -0.0035, -0.0020], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.1341], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9390], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0424,  0.0048, -0.0447, -0.0043, -0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0424,  0.0048, -0.0447, -0.0043, -0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2494,  1.2371,  0.0603, -0.3168, -0.5707], grad_fn=<SliceBackward0>)
  [Layer 8] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 8] Output sample values after mixer: tensor([ 0.2494,  1.2371,  0.0603, -0.3168, -0.5707], grad_fn=<SliceBackward0>)
  [Layer 8] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 8] Residual connection sample values: tensor([-0.1929,  0.8948, -0.4933, -1.3672, -1.0131], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 9/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.5994], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6202], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0568,  0.2154, -0.1336, -0.3557, -0.2947], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1084, -0.7368, -0.0139, -1.8426, -2.5241], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1084, -0.7368, -0.0139, -1.8426, -2.5241], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5307, -1.0925,  0.2974, -0.4645, -0.9536], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.8733, 0.7637, 0.6677, 0.3515, 1.8723], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  1.0604, -0.5307,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1808, -0.1597, -0.0167,  0.1448, -0.1564], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1735, -0.1851, -0.1034,  0.0709, -0.1314], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0792, -0.0840, -0.0490,  0.0367, -0.0614], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0792, -0.0840, -0.0490,  0.0367, -0.0614], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1018, -0.2519,  0.4592,  0.4559,  0.3506], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2768, -0.2741, -0.2446, -0.2267, -0.0223], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-5.2345, -1.2161, -1.4888, -0.9523, -3.9667], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0240, 0.0787, 0.0093, 0.1765, 0.0981], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8818, 0.9087, 0.9862, 0.8452, 0.6776], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0792, -0.0840, -0.0490,  0.0367, -0.0614], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0002,  0.0005, -0.0009, -0.0009, -0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0004,  0.0007, -0.0018, -0.0013, -0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.1753e-03, -1.8631e-03, -1.7897e-03,  6.5352e-05, -1.4974e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1096, -0.1157, -0.0682,  0.0498, -0.0847], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1096, -0.1157, -0.0682,  0.0498, -0.0847], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0063,  0.0276,  0.0005, -0.0125,  0.0159], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.3771], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8521], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0055,  0.0363,  0.0004, -0.0087,  0.0160], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0055,  0.0363,  0.0004, -0.0087,  0.0160], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.5055, -0.4438, -0.9539, -0.7459, -0.0164], grad_fn=<SliceBackward0>)
  [Layer 9] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 9] Output sample values after mixer: tensor([ 0.5055, -0.4438, -0.9539, -0.7459, -0.0164], grad_fn=<SliceBackward0>)
  [Layer 9] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 9] Residual connection sample values: tensor([ 0.3126,  0.4509, -1.4472, -2.1131, -1.0295], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 10/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3.2582], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5540], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0708,  0.0854, -0.2960, -0.4279, -0.2279], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.4908,  0.2466, -0.6029, -1.8121, -0.5970], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.4908,  0.2466, -0.6029, -1.8121, -0.5970], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.9168,  1.0273,  1.1716, -1.4076,  3.8066], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.4033,  0.3770, -0.2799,  1.2744,  0.6319], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.8273, -0.9168,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1465, -0.2917,  0.2348,  0.1970,  0.7174], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1848, -0.3788,  0.1310,  0.1112,  0.6578], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0839, -0.1539,  0.0698,  0.0587,  0.4334], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0839, -0.1539,  0.0698,  0.0587,  0.4334], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0045, -0.0794, -0.0167, -0.1897, -0.0723], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2107,  0.0778, -0.0985, -0.1008, -0.0933], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.7155, -1.4068, -0.3534, -2.0102, -0.4653], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0007, 0.0052, 0.0723, 0.0065, 0.0142], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9976, 0.9927, 0.9748, 0.9870, 0.9934], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0839, -0.1539,  0.0698,  0.0587,  0.4334], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.4888e-07,  4.3775e-06,  9.2185e-07,  1.0457e-05,  3.9852e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.3862e-07,  1.9554e-05,  2.0561e-06,  1.2236e-05,  5.3326e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.3527e-04, -3.6584e-04,  1.6964e-04, -4.7412e-05,  8.3691e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0187, -0.0342,  0.0155,  0.0128,  0.0961], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0187, -0.0342,  0.0155,  0.0128,  0.0961], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0051, -0.0047, -0.0033, -0.0033, -0.0204], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0148], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.2129], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0630, -0.0284, -0.0319, -0.0359, -0.2067], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0630, -0.0284, -0.0319, -0.0359, -0.2067], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.7836,  0.2799, -1.0416,  0.1101, -0.4398], grad_fn=<SliceBackward0>)
  [Layer 10] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 10] Output sample values after mixer: tensor([-0.7836,  0.2799, -1.0416,  0.1101, -0.4398], grad_fn=<SliceBackward0>)
  [Layer 10] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 10] Residual connection sample values: tensor([-0.4710,  0.7309, -2.4888, -2.0030, -1.4693], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 11/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4.2339], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4860], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1052,  0.1329, -0.4967, -0.3900, -0.3138], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.1317, -4.2857, -1.9334,  0.2306,  2.7393], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.1317, -4.2857, -1.9334,  0.2306,  2.7393], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.1446,  0.7978, -1.8810, -0.2967, -2.1044], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([4.0487, 5.6712, 2.1226, 1.4659, 4.0739], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 1.1212, 1.1446, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3803, -0.1532,  0.5078,  0.0070, -0.4644], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3945, -0.5109,  0.6043,  0.0191, -0.4413], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1588, -0.1916,  0.3908,  0.0096, -0.1727], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1588, -0.1916,  0.3908,  0.0096, -0.1727], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2783,  0.4183, -0.2741, -0.1442,  0.3789], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1485, -0.1904, -0.2779, -0.2571,  0.1446], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.3116, -0.0902, -1.5786, -0.2096, -0.6694], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.7019, 2.3302, 0.7246, 0.1733, 0.3648], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8036, 0.8105, 0.3186, 0.9643, 0.7834], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1588, -0.1916,  0.3908,  0.0096, -0.1727], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0310, -0.0466,  0.0306,  0.0161, -0.0422], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0368, -0.0457,  0.0360,  0.0132, -0.0461], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0932, -0.1129,  0.2301, -0.0008, -0.0844], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1515, -0.1832,  0.3735,  0.0027, -0.1478], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1515, -0.1832,  0.3735,  0.0027, -0.1478], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 4.1807e-02,  1.0659e-02, -9.1258e-02,  3.5188e-04, -3.8021e-01],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.4257], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8375], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0430,  0.0107, -0.0653,  0.0008, -0.2911], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0430,  0.0107, -0.0653,  0.0008, -0.2911], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1832, -0.6199, -0.3212,  0.3389,  0.0344], grad_fn=<SliceBackward0>)
  [Layer 11] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 11] Output sample values after mixer: tensor([-0.1832, -0.6199, -0.3212,  0.3389,  0.0344], grad_fn=<SliceBackward0>)
  [Layer 11] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 11] Residual connection sample values: tensor([-0.6543,  0.1110, -2.8100, -1.6641, -1.4349], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 12/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([5.2228], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4376], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1183,  0.0167, -0.4437, -0.2610, -0.2485], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.4996, -0.4884, -2.2683, -0.2708, -0.0659], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.4996, -0.4884, -2.2683, -0.2708, -0.0659], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.6048, -0.3055,  3.0457, -0.2820, -2.9545], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.7674, 1.1603, 1.0998, 1.1504, 1.7073], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.2311, 0.6048, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1012,  0.0823,  0.2805,  0.0216, -0.5323], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0582,  0.0952,  0.2456, -0.0081, -0.5197], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0300,  0.0499,  0.1378, -0.0040, -0.1938], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0300,  0.0499,  0.1378, -0.0040, -0.1938], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0875, -0.1939,  0.1250, -0.1038, -0.1060], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1943, -0.2770, -0.1171, -0.2780, -0.2726], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2412, -0.7694, -1.9975, -1.2368, -1.0181], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2258, 0.2011, 0.0789, 0.2680, 0.3685], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7556, 0.8567, 0.8542, 0.7179, 0.6871], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0300,  0.0499,  0.1378, -0.0040, -0.1938], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0006, -0.0013,  0.0008, -0.0007, -0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0006, -0.0012,  0.0009, -0.0007, -0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0029,  0.0057,  0.0135, -0.0013, -0.0190], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0245,  0.0416,  0.1127, -0.0042, -0.1585], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0245,  0.0416,  0.1127, -0.0042, -0.1585], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0067, -0.0077, -0.0240,  0.0005,  0.0050], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2382], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([2.0487], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0246, -0.0187, -0.0439,  0.0010,  0.0152], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0246, -0.0187, -0.0439,  0.0010,  0.0152], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.6670,  0.0933,  0.0619, -0.0682, -0.7875], grad_fn=<SliceBackward0>)
  [Layer 12] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 12] Output sample values after mixer: tensor([-0.6670,  0.0933,  0.0619, -0.0682, -0.7875], grad_fn=<SliceBackward0>)
  [Layer 12] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 12] Residual connection sample values: tensor([-1.3213,  0.2043, -2.7481, -1.7323, -2.2224], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 13/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([6.0003], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4082], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2182,  0.0292, -0.4188, -0.2484, -0.3726], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.5319, -0.9159, -0.7952, -0.3862, -0.0444], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.5319, -0.9159, -0.7952, -0.3862, -0.0444], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.9624, -0.4452,  0.9173, -0.4742,  0.3561], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3287, 1.1434, 1.2625, 1.0216, 1.9151], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.4691, -0.9624,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0753,  0.8048, -0.2320, -0.0730,  0.7169], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3400,  0.6949, -0.2525, -0.0738,  0.6929], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1414,  0.4635, -0.1104, -0.0356,  0.4619], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1414,  0.4635, -0.1104, -0.0356,  0.4619], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0789,  0.2178,  0.0907,  0.5331,  0.0188], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1703,  0.0216, -0.0945,  0.4643, -0.1462], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3103, -1.7871, -0.8606, -1.8811, -0.5252], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0358, 0.0303, 0.1294, 0.1246, 0.1138], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9542, 0.9473, 0.8946, 0.7910, 0.9420], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1414,  0.4635, -0.1104, -0.0356,  0.4619], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.9909e-04, -1.1024e-03, -4.5916e-04, -2.6979e-03, -9.5021e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0038,  0.0010, -0.0005, -0.0091,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0189,  0.0068, -0.0058, -0.0010,  0.0447], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0249,  0.0268, -0.0105, -0.0026,  0.0646], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0249,  0.0268, -0.0105, -0.0026,  0.0646], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0068, -0.0070,  0.0026,  0.0004, -0.0014], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0771], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.6003], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0332, -0.0113,  0.0172,  0.0030, -0.0040], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0332, -0.0113,  0.0172,  0.0030, -0.0040], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0291,  0.7358, -0.1707, -0.4061, -0.6771], grad_fn=<SliceBackward0>)
  [Layer 13] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 13] Output sample values after mixer: tensor([-0.0291,  0.7358, -0.1707, -0.4061, -0.6771], grad_fn=<SliceBackward0>)
  [Layer 13] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 13] Residual connection sample values: tensor([-1.3503,  0.9401, -2.9188, -2.1384, -2.8995], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 14/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([6.8934], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3809], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1796,  0.1098, -0.3593, -0.2476, -0.3764], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.5732,  0.0912,  0.7999,  0.4766, -0.3658], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.5732,  0.0912,  0.7999,  0.4766, -0.3658], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1825, -0.1269,  0.9613, -0.3662, -0.1929], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.9222,  1.1249,  0.9051,  0.6897,  0.3751], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.2845, -0.1825,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0286,  0.3789, -0.3991, -0.0727,  0.0252], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0682,  0.3376, -0.4599, -0.1355,  0.0618], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0329,  0.1970, -0.1780, -0.0632,  0.0319], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0329,  0.1970, -0.1780, -0.0632,  0.0319], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0595, -0.0548,  0.0424,  0.0061,  0.0247], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1933, -0.1171, -0.1220, -0.0814,  0.1581], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.3184, -0.7621, -2.6670, -5.1836, -2.8487], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0159, 0.0366, 0.1901, 0.0327, 0.0201], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9336, 0.9725, 0.6023, 0.8441, 0.9442], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0329,  0.1970, -0.1780, -0.0632,  0.0319], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.1156e-05,  2.8727e-05, -2.2228e-05, -3.1935e-06, -1.2942e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.0127e-05, -1.3030e-05,  1.0770e-05, -7.3358e-06, -2.0797e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0005,  0.0066, -0.0052, -0.0014,  0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0138,  0.0862, -0.0772, -0.0269,  0.0141], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0138,  0.0862, -0.0772, -0.0269,  0.0141], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0051,  0.0041, -0.0426, -0.0079, -0.0021], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0318], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.6105], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0309,  0.0146, -0.2200, -0.0575, -0.0178], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0309,  0.0146, -0.2200, -0.0575, -0.0178], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0712, -0.6301, -0.4224,  0.4173, -0.0887], grad_fn=<SliceBackward0>)
  [Layer 14] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 14] Output sample values after mixer: tensor([-0.0712, -0.6301, -0.4224,  0.4173, -0.0887], grad_fn=<SliceBackward0>)
  [Layer 14] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 14] Residual connection sample values: tensor([-1.4215,  0.3100, -3.3411, -1.7211, -2.9882], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 15/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([8.2273], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3486], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1736,  0.0322, -0.3751, -0.1809, -0.3497], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4627,  1.8816, -0.8663,  1.8837,  1.0921], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4627,  1.8816, -0.8663,  1.8837,  1.0921], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.2982,  0.1388, -0.1236, -0.3600,  0.0927], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.3515, 0.1073, 0.2670, 0.6134, 0.8066], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.4773, -1.2982,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0645, -0.0290,  0.0105,  0.1317, -0.1233], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1019, -0.0358, -0.0143,  0.1139, -0.1486], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0484, -0.0176, -0.0071,  0.0602, -0.0688], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0484, -0.0176, -0.0071,  0.0602, -0.0688], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0134,  0.0083,  0.0010, -0.0111, -0.0772], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0738,  0.0315,  0.0607, -0.0665, -0.0127], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2782, -0.6808, -2.7209, -0.1126, -3.8484], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0028, 0.0176, 0.0197, 0.0105, 0.0511], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9992, 0.9881, 0.9478, 0.9988, 0.8213], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0484, -0.0176, -0.0071,  0.0602, -0.0688], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.7817e-06, -1.1054e-06, -1.3193e-07,  1.4805e-06,  1.0267e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.5894e-06, -6.4635e-07,  1.8340e-07,  1.4779e-06,  1.0205e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-5.1212e-06,  1.8618e-07, -2.1893e-06,  9.6536e-06, -6.6216e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0082, -0.0030, -0.0012,  0.0103, -0.0117], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0082, -0.0030, -0.0012,  0.0103, -0.0117], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0015, -0.0049,  0.0003,  0.0168, -0.0096], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0035], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([16.9889], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0259, -0.1125,  0.0055,  0.3461, -0.1451], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0259, -0.1125,  0.0055,  0.3461, -0.1451], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.4282, -0.1859,  0.7569, -0.2522, -0.5341], grad_fn=<SliceBackward0>)
  [Layer 15] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 15] Output sample values after mixer: tensor([-0.4282, -0.1859,  0.7569, -0.2522, -0.5341], grad_fn=<SliceBackward0>)
  [Layer 15] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 15] Residual connection sample values: tensor([-1.8497,  0.1241, -2.5842, -1.9733, -3.5223], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 16/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([9.6863], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3213], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2319,  0.0130, -0.2968, -0.2076, -0.4241], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.0267,  0.4358, -1.0550, -0.0202, -0.5077], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.0267,  0.4358, -1.0550, -0.0202, -0.5077], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.8465, -1.1857, -0.1942, -1.0777,  0.0982], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.8550, 2.6947, 0.7406, 0.6123, 0.9711], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.8404,  0.8465,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1228, -0.2854, -0.0331, -0.2455,  0.0139], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0866, -0.3265, -0.0462, -0.3379, -0.0282], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0452, -0.1368, -0.0226, -0.1407, -0.0139], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0452, -0.1368, -0.0226, -0.1407, -0.0139], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0733, -0.0269,  0.1847,  0.0221,  0.3449], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2762, -0.1142, -0.2586,  0.5573, -0.1327], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6906, -0.1348, -1.3129, -3.7740, -1.2635], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1295, 0.7126, 0.0997, 0.1315, 0.0605], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7059, 0.9084, 0.8773, 0.6087, 0.9264], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0452, -0.1368, -0.0226, -0.1407, -0.0139], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0004, -0.0002,  0.0011,  0.0001,  0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.0996e-03, -2.4284e-03,  2.1405e-05,  8.5142e-04,  5.3122e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.9971e-03, -3.0925e-02, -9.5153e-05, -3.4264e-02, -7.8435e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0261, -0.1190, -0.0146, -0.1248, -0.0168], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0261, -0.1190, -0.0146, -0.1248, -0.0168], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0071, -0.0315,  0.0040,  0.0013,  0.0032], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1448], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([2.6275], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0239, -0.0835,  0.0126,  0.0035,  0.0093], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0239, -0.0835,  0.0126,  0.0035,  0.0093], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2303, -0.2841, -0.3619, -0.7631,  0.3030], grad_fn=<SliceBackward0>)
  [Layer 16] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 16] Output sample values after mixer: tensor([-0.2303, -0.2841, -0.3619, -0.7631,  0.3030], grad_fn=<SliceBackward0>)
  [Layer 16] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 16] Residual connection sample values: tensor([-2.0800, -0.1600, -2.9461, -2.7364, -3.2192], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 17/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([10.5738], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3075], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2474, -0.0160, -0.3121, -0.2681, -0.3684], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0929, -0.4624, -0.9267, -0.8557,  0.7073], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0929, -0.4624, -0.9267, -0.8557,  0.7073], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6822,  0.0095,  0.7618, -0.5603, -0.1219], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.3543, 0.2965, 0.4650, 1.8023, 1.5648], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.8958, -0.6822,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1430, -0.0082, -0.1907,  0.0995,  0.0206], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1748, -0.0344, -0.2051,  0.0941,  0.0333], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0798, -0.0169, -0.0921,  0.0493,  0.0169], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0798, -0.0169, -0.0921,  0.0493,  0.0169], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0233, -0.0240, -0.0850,  0.3998,  0.0102], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.3301, -0.2059, -0.0604, -0.0443, -0.0849], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.1571, -11.4668, -14.2150,  -0.1286, -14.2428],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0054, 0.0138, 0.0342, 0.1259, 0.0333], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9938, 0.8538, 0.6152, 0.9839, 0.6220], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0798, -0.0169, -0.0921,  0.0493,  0.0169], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.0033e-05,  1.0320e-05,  3.6553e-05, -1.7200e-04, -4.4099e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.1083e-05,  1.2370e-05,  4.0052e-05, -1.7213e-04, -4.7544e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.4505e-04, -3.5220e-05, -1.6971e-04,  7.7538e-05,  3.8038e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0516, -0.0109, -0.0596,  0.0318,  0.0109], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0516, -0.0109, -0.0596,  0.0318,  0.0109], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0023,  0.0020,  0.0157, -0.0081,  0.0052], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0618], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.0228], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0143,  0.0149,  0.0906, -0.0573,  0.0367], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0143,  0.0149,  0.0906, -0.0573,  0.0367], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2971,  0.1637,  0.6524,  0.2037,  0.0643], grad_fn=<SliceBackward0>)
  [Layer 17] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 17] Output sample values after mixer: tensor([-0.2971,  0.1637,  0.6524,  0.2037,  0.0643], grad_fn=<SliceBackward0>)
  [Layer 17] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 17] Residual connection sample values: tensor([-2.3771,  0.0037, -2.2937, -2.5328, -3.1550], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 18/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([11.7796], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2914], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2398,  0.0003, -0.2069, -0.2144, -0.3059], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6879,  1.1553,  0.0773,  0.1065, -1.3701], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6879,  1.1553,  0.0773,  0.1065, -1.3701], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4484,  0.0785,  0.4523, -1.1219,  2.3912], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9056, 0.6617, 0.8383, 0.8170, 0.6545], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.1965,  0.4484,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0441, -0.2961,  0.1714, -0.0760,  0.5379], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0341, -0.5615,  0.4512, -0.0898,  0.4958], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0173, -0.2039,  0.2756, -0.0429,  0.3081], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0173, -0.2039,  0.2756, -0.0429,  0.3081], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1652, -0.0639, -0.0845,  0.1251,  0.0806], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2557, -0.1170, -0.2223,  0.1823,  0.0024], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3011, -1.4686, -1.2083, -1.2129, -2.5875], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2218, 0.1032, 0.1623, 0.1606, 0.0809], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7494, 0.8594, 0.8219, 0.8230, 0.8112], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0173, -0.2039,  0.2756, -0.0429,  0.3081], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0006, -0.0002, -0.0003,  0.0005,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.3407e-04, -1.2173e-04,  1.2314e-03, -7.7901e-05, -3.6295e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0039, -0.1330,  0.1275, -0.0083,  0.0866], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0006, -0.1724,  0.1807, -0.0166,  0.1461], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0006, -0.1724,  0.1807, -0.0166,  0.1461], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 1.3739e-04, -1.5145e-01,  7.2503e-03, -9.3112e-04, -4.0562e-02],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0773], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.5956], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0006, -0.2922,  0.0254, -0.0042, -0.2883], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0006, -0.2922,  0.0254, -0.0042, -0.2883], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.3228, -0.4486, -0.0384,  0.6230, -0.4163], grad_fn=<SliceBackward0>)
  [Layer 18] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 18] Output sample values after mixer: tensor([-0.3228, -0.4486, -0.0384,  0.6230, -0.4163], grad_fn=<SliceBackward0>)
  [Layer 18] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 18] Residual connection sample values: tensor([-2.6999, -0.4448, -2.3320, -1.9097, -3.5713], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 19/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([13.0176], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2772], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2552, -0.0363, -0.2058, -0.1552, -0.3369], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0109, -1.1705, -1.1436, -1.2145,  0.2825], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0109, -1.1705, -1.1436, -1.2145,  0.2825], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.9309, -0.3608, -0.5966,  0.3200, -0.2618], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.7364, 1.4340, 1.3371, 1.2880, 0.9831], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.2690, -0.9309,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1921, -0.1033, -0.0907,  0.2198,  0.0499], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2277, -0.1277, -0.0957,  0.1772,  0.0169], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1010, -0.0598, -0.0456,  0.0964,  0.0085], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1010, -0.0598, -0.0456,  0.0964,  0.0085], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0275, -0.2516,  0.2273,  0.1992, -0.0155], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2440, -0.0133,  0.2208,  0.0773, -0.2317], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9436, -1.8179, -2.0862, -1.0006, -0.9650], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1106, 0.1156, 0.0853, 0.1745, 0.1821], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8066, 0.8105, 0.8370, 0.8398, 0.8388], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1010, -0.0598, -0.0456,  0.0964,  0.0085], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0003,  0.0028, -0.0025, -0.0022,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0002,  0.0034, -0.0033, -0.0031,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0057, -0.0043,  0.0020,  0.0116, -0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0170, -0.0110, -0.0031,  0.0225, -0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0170, -0.0110, -0.0031,  0.0225, -0.0011], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-9.3198e-05,  3.0577e-03,  8.5285e-04, -6.2485e-03, -1.7010e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0049], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([14.2420], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0016,  0.0553,  0.0198, -0.1061, -0.0041], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0016,  0.0553,  0.0198, -0.1061, -0.0041], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.5525,  0.2139, -0.0642,  0.1846,  0.0875], grad_fn=<SliceBackward0>)
  [Layer 19] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 19] Output sample values after mixer: tensor([-0.5525,  0.2139, -0.0642,  0.1846,  0.0875], grad_fn=<SliceBackward0>)
  [Layer 19] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 19] Residual connection sample values: tensor([-3.2524, -0.2309, -2.3963, -1.7251, -3.4838], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 20/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([16.3127], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2476], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3112, -0.0189, -0.2105, -0.1402, -0.3232], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3116,  0.1475, -0.5565,  1.1445, -0.3856], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3116,  0.1475, -0.5565,  1.1445, -0.3856], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5412,  0.7648,  0.0506,  0.0366,  0.0105], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4496, 1.0214, 2.1616, 1.1970, 1.3364], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.5822, -0.5412,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1227,  0.0087, -0.0763, -0.1821, -0.1283], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1612,  0.0173, -0.0098, -0.2009, -0.1558], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0741,  0.0087, -0.0049, -0.0904, -0.0718], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0741,  0.0087, -0.0049, -0.0904, -0.0718], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1981,  0.0307,  0.3702, -0.0219,  0.2080], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1083, -0.2678, -0.0200, -0.0507,  0.6887], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.6216, -5.0389, -1.2056, -1.6435, -1.3345], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1191, 0.0312, 0.0736, 0.1450, 0.1104], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8244, 0.8545, 0.9151, 0.7880, 0.8630], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0741,  0.0087, -0.0049, -0.0904, -0.0718], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0017, -0.0003, -0.0033,  0.0002, -0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0017, -0.0002, -0.0034,  0.0002, -0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0104, -0.0007,  0.0049, -0.0105, -0.0096], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0110, -0.0007,  0.0049, -0.0112, -0.0102], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0110, -0.0007,  0.0049, -0.0112, -0.0102], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 1.4476e-03, -5.3497e-05, -9.9064e-04, -9.7504e-03,  1.5892e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0132], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.7105], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0168, -0.0007, -0.0165, -0.1230,  0.0179], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0168, -0.0007, -0.0165, -0.1230,  0.0179], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2697, -0.3926, -0.4176,  0.9659, -0.1334], grad_fn=<SliceBackward0>)
  [Layer 20] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 20] Output sample values after mixer: tensor([-0.2697, -0.3926, -0.4176,  0.9659, -0.1334], grad_fn=<SliceBackward0>)
  [Layer 20] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 20] Residual connection sample values: tensor([-3.5221, -0.6235, -2.8138, -0.7592, -3.6172], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 21/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([17.2380], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2409], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2487, -0.0400, -0.1711, -0.0445, -0.2389], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1812, -0.8425, -1.2692, -0.2705, -0.5938], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1812, -0.8425, -1.2692, -0.2705, -0.5938], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.1242,  0.9806, -0.3988, -0.1711,  0.1538], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.1622,  0.8696,  0.6456,  0.3392,  0.9334], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.5341,  0.1242,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0300,  0.1953,  0.0635,  0.0185, -0.0134], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0613,  0.1653,  0.0784,  0.0134,  0.0145], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0297,  0.0894,  0.0407,  0.0068,  0.0073], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0297,  0.0894,  0.0407,  0.0068,  0.0073], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0123, -0.0783, -0.0022,  0.0212, -0.0657], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0714, -0.1488, -0.0122, -0.0347, -0.0097], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.2092, -0.0434, -3.8147, -6.6624, -0.0228], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0498, 0.0101, 0.0566, 0.0338, 0.0198], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8523, 0.9996, 0.8057, 0.7986, 0.9995], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0297,  0.0894,  0.0407,  0.0068,  0.0073], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.8253e-05,  1.1572e-04,  3.2685e-06, -3.1419e-05,  9.7093e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.7562e-05,  1.1660e-04, -3.6542e-06, -3.8500e-05,  9.7015e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-3.4027e-04,  8.9788e-04,  3.1345e-04,  1.0930e-04,  2.5926e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0056,  0.0166,  0.0075,  0.0013,  0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0056,  0.0166,  0.0075,  0.0013,  0.0013], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0005, -0.0042, -0.0021, -0.0002, -0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0008], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([34.8544], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0242, -0.1706, -0.1120, -0.0069, -0.0113], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0242, -0.1706, -0.1120, -0.0069, -0.0113], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1377, -0.1169,  0.4823,  0.1863, -0.4074], grad_fn=<SliceBackward0>)
  [Layer 21] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 21] Output sample values after mixer: tensor([-0.1377, -0.1169,  0.4823,  0.1863, -0.4074], grad_fn=<SliceBackward0>)
  [Layer 21] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 21] Residual connection sample values: tensor([-3.6598, -0.7404, -2.3316, -0.5729, -4.0245], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 22/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([19.2818], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2277], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3844, -0.0655, -0.2186, -0.0495, -0.3963], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.8714, -0.8978,  0.0271,  1.6399, -1.5157], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.8714, -0.8978,  0.0271,  1.6399, -1.5157], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.9552, -0.0407,  0.9204, -0.0327, -0.2614], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4294, 1.2890, 0.3713, 0.1262, 0.9828], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.8760, -0.9552,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3592,  0.0260,  0.1397,  0.0468, -0.0621], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.4069, -0.0527,  0.4591,  0.0058, -0.1278], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1626, -0.0257,  0.2813,  0.0029, -0.0598], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1626, -0.0257,  0.2813,  0.0029, -0.0598], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0258,  0.0149,  0.0560, -0.1390,  0.0788], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0020, -0.0162, -0.0403, -0.0075, -0.0667], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.1489, -3.5006, -2.8321, -5.5396, -1.7186], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0055, 0.1398, 0.0891, 0.0520, 0.0076], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9772, 0.6129, 0.7769, 0.7497, 0.9870], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1626, -0.0257,  0.2813,  0.0029, -0.0598], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.3300e-05, -1.3441e-05, -5.0541e-05,  1.2542e-04, -7.1071e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.3723e-05, -1.3643e-05, -5.0488e-05,  1.3228e-04, -7.3246e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.8459e-04,  4.8974e-05,  9.0471e-04,  2.8753e-04, -1.0732e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0397, -0.0062,  0.0690,  0.0010, -0.0146], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0397, -0.0062,  0.0690,  0.0010, -0.0146], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0244,  0.0016,  0.0009,  0.0014,  0.0040], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0063], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.5783], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1021,  0.0189,  0.0064,  0.0225,  0.0433], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1021,  0.0189,  0.0064,  0.0225,  0.0433], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-5.9924e-01,  6.0380e-05, -9.5257e-01, -5.7095e-02, -4.7839e-01],
       grad_fn=<SliceBackward0>)
  [Layer 22] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 22] Output sample values after mixer: tensor([-5.9924e-01,  6.0380e-05, -9.5257e-01, -5.7095e-02, -4.7839e-01],
       grad_fn=<SliceBackward0>)
  [Layer 22] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 22] Residual connection sample values: tensor([-4.2590, -0.7403, -3.2841, -0.6300, -4.5029], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 23/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([21.8170], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2141], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2950, -0.0441, -0.2082, -0.0377, -0.3022], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1109,  0.0837, -0.0255,  0.7513, -0.3075], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1109,  0.0837, -0.0255,  0.7513, -0.3075], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.1229, -0.2457, -0.1611, -0.7128, -0.5768], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.1074, 0.4649, 2.0394, 0.0669, 1.7264], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.2347,  0.1229,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0592,  0.2778, -0.0427, -0.1317,  0.2011], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0369,  0.2447, -0.0541, -0.1339,  0.1517], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0188,  0.1372, -0.0263, -0.0625,  0.0816], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0188,  0.1372, -0.0263, -0.0625,  0.0816], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0578, -0.0350,  0.0578, -0.0060,  0.0123], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0457, -0.0769,  0.0100,  0.0543,  0.0145], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0811, -3.7998, -0.0826, -0.4878, -1.4532], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0132, 0.0677, 0.0772, 0.0016, 0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9989, 0.7731, 0.9936, 0.9992, 0.9916], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0188,  0.1372, -0.0263, -0.0625,  0.0816], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.4309e-05, -8.6489e-06,  1.4289e-05, -1.4790e-06,  3.0341e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.7604e-06,  4.3687e-06, -1.3779e-05, -2.1937e-06, -7.8000e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-3.2294e-05,  8.2601e-04, -3.8792e-05, -4.0594e-04,  6.3344e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0004, -0.0021,  0.0005,  0.0009, -0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0004, -0.0021,  0.0005,  0.0009, -0.0011], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 2.2659e-05, -9.1675e-05, -6.5844e-06,  4.7313e-04,  1.4425e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0013], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([28.1598], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0028, -0.0015, -0.0002,  0.0212,  0.0189], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0028, -0.0015, -0.0002,  0.0212,  0.0189], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1006, -0.0086, -0.8314, -0.0577,  0.1697], grad_fn=<SliceBackward0>)
  [Layer 23] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 23] Output sample values after mixer: tensor([-0.1006, -0.0086, -0.8314, -0.0577,  0.1697], grad_fn=<SliceBackward0>)
  [Layer 23] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 23] Residual connection sample values: tensor([-4.3596, -0.7489, -4.1156, -0.6878, -4.3332], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 24/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([25.5961], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1977], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2293, -0.0376, -0.1996, -0.0322, -0.2210], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2874, -0.6417,  0.3172,  0.0503, -0.1742], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2874, -0.6417,  0.3172,  0.0503, -0.1742], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7547,  0.3210, -0.6942, -0.4602, -0.0911], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.3092,  0.1325, -0.1596,  2.3000,  0.2108], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.4722, 0.7547, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1419, -0.0648, -0.0977, -0.0778, -0.0432], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1452, -0.0648, -0.1017, -0.0794, -0.0479], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0673, -0.0314, -0.0483, -0.0381, -0.0234], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0673, -0.0314, -0.0483, -0.0381, -0.0234], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0282, -0.1053, -0.0347, -0.0088, -0.0442], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1022, -0.2145, -0.1534, -0.2426,  0.1669], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0742, -3.4497, -3.2885, -0.1609, -2.6945], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0541, 0.0331, 0.0391, 0.0448, 0.0266], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9960, 0.8920, 0.8794, 0.9928, 0.9308], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0673, -0.0314, -0.0483, -0.0381, -0.0234], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.0271e-04,  3.8351e-04,  1.2645e-04,  3.1899e-05,  1.6100e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-7.9584e-05,  3.6785e-04,  1.3486e-04,  3.8556e-05,  2.7517e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0015, -0.0005, -0.0007, -0.0008, -0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0011, -0.0003, -0.0005, -0.0006, -0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0011, -0.0003, -0.0005, -0.0006, -0.0006], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.8070e-04,  6.4332e-05, -8.5105e-05, -1.5113e-05,  4.6659e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0006], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([40.7068], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0070,  0.0035, -0.0042, -0.0027,  0.0050], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0070,  0.0035, -0.0042, -0.0027,  0.0050], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3846, -0.3059,  1.0715, -0.1950,  0.4712], grad_fn=<SliceBackward0>)
  [Layer 24] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 24] Output sample values after mixer: tensor([ 0.3846, -0.3059,  1.0715, -0.1950,  0.4712], grad_fn=<SliceBackward0>)
  [Layer 24] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 24] Residual connection sample values: tensor([-3.9750, -1.0548, -3.0441, -0.8828, -3.8620], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 25/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([28.8477], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1862], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2206, -0.0535, -0.1595, -0.0433, -0.2121], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8226,  0.0017,  0.6483, -0.2279, -0.0540], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8226,  0.0017,  0.6483, -0.2279, -0.0540], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2826, -0.0771, -0.8424, -0.2008, -0.7085], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.1300,  0.5154,  1.7292,  0.2584, -0.3861], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.6639,  0.2826,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1349,  0.1063, -0.0164,  0.0273,  0.0240], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1323,  0.0781, -0.0279,  0.0881,  0.0182], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0705,  0.0406, -0.0137,  0.0460,  0.0092], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0705,  0.0406, -0.0137,  0.0460,  0.0092], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0033,  0.0096, -0.0510,  0.0263,  0.0177], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0152, -0.0298,  0.0221,  0.0161, -0.0086], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -0.3702,  -1.5045,  -5.7210,  -0.8176, -14.6662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3752, 0.0107, 0.1394, 0.0091, 0.0223], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8703, 0.9841, 0.4504, 0.9926, 0.7211], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0705,  0.0406, -0.0137,  0.0460,  0.0092], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 8.7298e-05,  2.5467e-04, -1.3497e-03,  6.9586e-04,  4.6881e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.0678e-04,  5.2440e-05, -1.4301e-03,  6.6282e-04,  4.7195e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.7258e-03, -1.5729e-03,  2.3231e-05, -3.2718e-05, -4.6019e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0010, -0.0011, -0.0001,  0.0004, -0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0010, -0.0011, -0.0001,  0.0004, -0.0004], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 2.4830e-04, -9.6647e-07, -5.1197e-05, -4.5210e-05,  9.5680e-06],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0008], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([35.0735], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 1.0426e-02, -2.7724e-05, -2.3708e-03, -1.2489e-03,  5.7875e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 1.0426e-02, -2.7724e-05, -2.3708e-03, -1.2489e-03,  5.7875e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1378, -0.2062, -1.3869, -0.4997, -0.8897], grad_fn=<SliceBackward0>)
  [Layer 25] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 25] Output sample values after mixer: tensor([-0.1378, -0.2062, -1.3869, -0.4997, -0.8897], grad_fn=<SliceBackward0>)
  [Layer 25] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 25] Residual connection sample values: tensor([-4.1128, -1.2610, -4.4310, -1.3824, -4.7517], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 26/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([32.0530], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1766], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2802, -0.0795, -0.2813, -0.0861, -0.3166], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.3697, -0.5894,  0.7226, -0.7996, -0.6557], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.3697, -0.5894,  0.7226, -0.7996, -0.6557], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.8614, -1.5217, -0.8404, -0.0939, -1.4583], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.8203, 1.7348, 1.0865, 0.1759, 2.2720], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.4492, 0.8614, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1210,  0.3568, -0.1167,  0.0411,  0.3246], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0325,  0.3007, -0.0526,  0.0142,  0.3327], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0165,  0.1728, -0.0256,  0.0071,  0.1938], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0165,  0.1728, -0.0256,  0.0071,  0.1938], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0057,  0.0264, -0.0274,  0.0092, -0.0072], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1071,  0.0362,  0.0443,  0.0523,  0.2165], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9595, -0.3945, -0.8420, -1.4275, -0.1466], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1246, 0.5037, 0.1751, 0.1269, 0.1016], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8873, 0.8198, 0.8629, 0.8343, 0.9852], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0165,  0.1728, -0.0256,  0.0071,  0.1938], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.1832e-05,  5.4416e-05, -5.6425e-05,  1.8982e-05, -1.4781e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.5132e-05,  5.1794e-05, -8.6989e-05,  3.0684e-05, -1.2132e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([0.0008, 0.0034, 0.0011, 0.0005, 0.0047], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0029,  0.0254, -0.0022,  0.0014,  0.0294], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0029,  0.0254, -0.0022,  0.0014,  0.0294], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0032, -0.0053, -0.0011, -0.0004, -0.0066], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0030], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([18.1611], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0288, -0.1076, -0.0182, -0.0093, -0.1504], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0288, -0.1076, -0.0182, -0.0093, -0.1504], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.8554,  1.7675, -0.6104,  0.9287, -0.7876], grad_fn=<SliceBackward0>)
  [Layer 26] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 26] Output sample values after mixer: tensor([-0.8554,  1.7675, -0.6104,  0.9287, -0.7876], grad_fn=<SliceBackward0>)
  [Layer 26] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 26] Residual connection sample values: tensor([-4.9682,  0.5065, -5.0413, -0.4537, -5.5394], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 27/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([39.5293], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1591], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3307,  0.0308, -0.3285, -0.0272, -0.3835], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2526,  0.2158,  0.4807, -0.6116,  0.4349], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2526,  0.2158,  0.4807, -0.6116,  0.4349], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1709, -0.0280, -1.0624, -0.5345,  0.8835], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.6995, 0.7897, 0.5271, 1.4411, 1.3539], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.7173, -0.1709,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0704, -0.0054, -0.2302,  0.1300, -0.0806], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0444, -0.0419, -0.2402, -0.0719, -0.1103], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0227, -0.0205, -0.1058, -0.0347, -0.0521], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0227, -0.0205, -0.1058, -0.0347, -0.0521], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.4951, -0.0417,  0.2724,  0.1043,  0.1348], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0109, -0.1986,  0.2195,  0.0627, -0.1956], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3662, -1.3799, -1.8268, -2.0409, -2.3490], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0833, 0.1008, 0.0811, 0.0689, 0.1644], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8924, 0.8701, 0.8623, 0.8689, 0.6797], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0227, -0.0205, -0.1058, -0.0347, -0.0521], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 9.3565e-04, -7.8773e-05,  5.1484e-04,  1.9707e-04,  2.5474e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 4.8601e-04, -2.2911e-04,  1.5465e-03,  8.8552e-05,  1.0578e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0049, -0.0028, -0.0133, -0.0083, -0.0048], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0072, -0.0049, -0.0240, -0.0118, -0.0101], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0072, -0.0049, -0.0240, -0.0118, -0.0101], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0008, -0.0006, -0.0071,  0.0025, -0.0027], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0176], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.5296], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0102, -0.0054, -0.1141,  0.0367, -0.0236], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0102, -0.0054, -0.1141,  0.0367, -0.0236], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2325,  0.7202,  0.1791, -0.2872,  0.3274], grad_fn=<SliceBackward0>)
  [Layer 27] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 27] Output sample values after mixer: tensor([-0.2325,  0.7202,  0.1791, -0.2872,  0.3274], grad_fn=<SliceBackward0>)
  [Layer 27] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 27] Residual connection sample values: tensor([-5.2006,  1.2267, -4.8622, -0.7409, -5.2120], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 28/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([44.2581], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1503], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3174,  0.0700, -0.2805, -0.0415, -0.3148], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7290,  1.4702,  1.0251, -0.1630, -0.2365], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7290,  1.4702,  1.0251, -0.1630, -0.2365], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.2131, -1.6030,  0.5963, -0.9703, -0.1461], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.9918, -0.0806,  0.2225,  0.3799,  0.8313], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.5642, -1.2131,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2473,  0.2903,  0.1237, -0.1698, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1895,  0.2789,  0.1100, -0.1811,  0.1023], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1037,  0.1588,  0.0580, -0.0824,  0.0538], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1037,  0.1588,  0.0580, -0.0824,  0.0538], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0156, -0.0845, -0.0472,  0.1399,  0.2006], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1537, -0.1261,  0.3664, -0.0562,  0.4670], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2728, -3.9978, -2.5177, -2.1714, -2.8655], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0272, 0.0407, 0.0519, 0.0249, 0.0347], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9660, 0.8500, 0.8774, 0.9473, 0.9054], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1037,  0.1588,  0.0580, -0.0824,  0.0538], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 4.4061e-05, -2.3861e-04, -1.3317e-04,  3.9482e-04,  5.6610e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 4.0772e-05, -2.1081e-04, -3.4087e-05,  4.2276e-04,  2.4999e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0005,  0.0023,  0.0006, -0.0014,  0.0019], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0230,  0.0367,  0.0132, -0.0193,  0.0135], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0230,  0.0367,  0.0132, -0.0193,  0.0135], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0055,  0.0439,  0.0100,  0.0014, -0.0014], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0046], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([14.7288], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1664,  0.8875,  0.1907,  0.0319, -0.0303], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1664,  0.8875,  0.1907,  0.0319, -0.0303], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.8884, -0.4181, -0.6295,  0.0429,  0.0801], grad_fn=<SliceBackward0>)
  [Layer 28] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 28] Output sample values after mixer: tensor([-0.8884, -0.4181, -0.6295,  0.0429,  0.0801], grad_fn=<SliceBackward0>)
  [Layer 28] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 28] Residual connection sample values: tensor([-6.0890,  0.8086, -5.4917, -0.6980, -5.1319], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 29/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([51.8084], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1389], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3269,  0.0415, -0.2824, -0.0346, -0.2740], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0523, -0.3363, -0.4755,  0.6550,  1.5293], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0523, -0.3363, -0.4755,  0.6550,  1.5293], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7516, -0.2900,  0.2918, -0.4864,  0.3322], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.8830, 1.2482, 0.4244, 6.3469, 0.5388], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.6059, 0.7516, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0232,  0.0924, -0.0589,  0.0974,  0.0381], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0366,  0.0578, -0.0560,  0.0370, -0.0750], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0180,  0.0298, -0.0272,  0.0188, -0.0361], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0180,  0.0298, -0.0272,  0.0188, -0.0361], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0200, -0.0334, -0.0737, -0.0234,  0.0595], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2741, -0.2609, -0.1146, -0.1656, -0.2224], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8072, -2.1170, -1.9257, -0.2904, -2.0499], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0506, 0.1626, 0.0957, 0.6414, 0.1053], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9126, 0.7088, 0.8317, 0.8300, 0.8058], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0180,  0.0298, -0.0272,  0.0188, -0.0361], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.8173e-05,  3.0288e-05,  6.6954e-05,  2.1214e-05, -5.4001e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.3157e-05,  4.6188e-05,  1.9800e-05,  8.2066e-05, -8.2567e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0001,  0.0005, -0.0007,  0.0002, -0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0185,  0.0310, -0.0285,  0.0195, -0.0376], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0185,  0.0310, -0.0285,  0.0195, -0.0376], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0005, -0.0043,  0.0052,  0.0084, -0.0473], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0389], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.0709], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0026, -0.0226,  0.0430,  0.0624, -0.3113], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0026, -0.0226,  0.0430,  0.0624, -0.3113], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0446,  0.7947,  0.2007, -0.2288, -0.9421], grad_fn=<SliceBackward0>)
  [Layer 29] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 29] Output sample values after mixer: tensor([ 0.0446,  0.7947,  0.2007, -0.2288, -0.9421], grad_fn=<SliceBackward0>)
  [Layer 29] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 29] Residual connection sample values: tensor([-6.0445,  1.6033, -5.2911, -0.9269, -6.0740], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 30/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([61.0502], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1280], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3294,  0.0860, -0.2817, -0.0465, -0.3401], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2662, -0.9326,  0.0513, -0.9096, -1.5755], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2662, -0.9326,  0.0513, -0.9096, -1.5755], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.1552, -0.5248, -0.2523, -0.6700, -1.0975], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0580, 1.3897, 0.8657, 1.5414, 1.4901], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 1.0781, 0.1552, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0252, -0.0724, -0.1040,  0.1147,  0.2333], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0019, -0.0587, -0.0709,  0.0965,  0.2060], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0010, -0.0285, -0.0342,  0.0506,  0.1135], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0010, -0.0285, -0.0342,  0.0506,  0.1135], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1467, -0.0238,  0.0068,  0.3350,  0.0349], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2487, -0.2782, -0.1588,  0.1142, -0.0382], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0150, -0.4675, -0.4280, -0.7895, -0.4175], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0114, 0.3652, 0.4926, 0.2368, 0.3957], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9885, 0.8431, 0.8099, 0.8295, 0.8477], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0010, -0.0285, -0.0342,  0.0506,  0.1135], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.6215e-06, -2.6363e-07,  7.5345e-08,  3.7027e-06,  3.8605e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 3.6133e-05, -1.9492e-06, -6.6012e-05,  2.6328e-04, -2.9416e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 8.4807e-04, -6.1141e-04, -5.0584e-04, -9.5176e-05,  1.5282e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0020, -0.0357, -0.0426,  0.0622,  0.1414], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0020, -0.0357, -0.0426,  0.0622,  0.1414], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0002,  0.0094, -0.0011, -0.0162, -0.0382], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0542], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.2953], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0015,  0.0589, -0.0043, -0.0833, -0.1740], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0015,  0.0589, -0.0043, -0.0833, -0.1740], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.8162,  0.7288, -1.2303, -0.3286, -0.0219], grad_fn=<SliceBackward0>)
  [Layer 30] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 30] Output sample values after mixer: tensor([ 0.8162,  0.7288, -1.2303, -0.3286, -0.0219], grad_fn=<SliceBackward0>)
  [Layer 30] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 30] Residual connection sample values: tensor([-5.2283,  2.3321, -6.5214, -1.2555, -6.0959], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 31/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([66.9773], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1222], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2726,  0.1193, -0.3346, -0.0627, -0.3211], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2058, -0.3301, -1.0260,  0.3334,  0.8696], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2058, -0.3301, -1.0260,  0.3334,  0.8696], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.3020, -0.1925, -0.0125, -1.0585, -1.4381], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.0713, 1.0102, 1.7043, 0.2448, 1.1793], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.5427, -0.3020,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0532,  0.0296, -0.0317,  0.1805,  0.2637], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0537,  0.0193, -0.0307,  0.1786,  0.2584], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0261,  0.0097, -0.0151,  0.0972,  0.1458], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0261,  0.0097, -0.0151,  0.0972,  0.1458], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3102,  0.1239,  0.0216, -0.2226, -0.0051], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.4528, -0.1430, -0.1446, -0.0419, -0.1321], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.9478, -3.5384, -4.7060, -2.4630, -0.9027], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0354, 0.0612, 0.0839, 0.0757, 0.1292], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9009, 0.8054, 0.6739, 0.8298, 0.8899], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0261,  0.0097, -0.0151,  0.0972,  0.1458], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.8693e-04, -1.1459e-04, -1.9987e-05,  2.0586e-04,  4.7208e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.8335e-04,  2.4016e-04, -4.3318e-04, -2.1607e-04, -1.4409e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0038,  0.0025, -0.0009,  0.0073,  0.0204], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0141,  0.0092, -0.0113,  0.0742,  0.1207], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0141,  0.0092, -0.0113,  0.0742,  0.1207], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0016, -0.0013,  0.0031,  0.0144,  0.0739], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0428], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.8320], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0153, -0.0105,  0.0227,  0.1135,  0.6905], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0153, -0.0105,  0.0227,  0.1135,  0.6905], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.6330, -0.2460, -1.0585, -0.0295,  1.2691], grad_fn=<SliceBackward0>)
  [Layer 31] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 31] Output sample values after mixer: tensor([-0.6330, -0.2460, -1.0585, -0.0295,  1.2691], grad_fn=<SliceBackward0>)
  [Layer 31] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 31] Residual connection sample values: tensor([-5.8613,  2.0861, -7.5799, -1.2850, -4.8268], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 32/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([76.2727], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1145], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3046,  0.1089, -0.3945, -0.0626, -0.2608], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5074,  0.9434, -1.9416, -1.4726, -0.1372], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5074,  0.9434, -1.9416, -1.4726, -0.1372], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1956,  0.9773,  0.0269,  0.0306, -0.6147], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4145, 2.1417, 0.2596, 0.5506, 0.5473], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0430, -0.1956,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0128, -0.0125, -0.0081, -0.0368, -0.0518], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0244, -0.0645, -0.0239, -0.0244, -0.0587], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0123, -0.0312, -0.0118, -0.0120, -0.0285], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0123, -0.0312, -0.0118, -0.0120, -0.0285], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0519,  0.0470,  0.0674, -0.0259, -0.0505], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2781,  0.4174, -0.1409, -0.2313, -0.0586], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6971, -2.0893, -1.7967, -1.3894, -1.0395], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2885, 0.0454, 0.1469, 0.1688, 0.2604], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8178, 0.9095, 0.7681, 0.7910, 0.7628], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0123, -0.0312, -0.0118, -0.0120, -0.0285], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.8465e-04,  1.6739e-04,  2.3991e-04, -9.2268e-05, -1.7973e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0004,  0.0005,  0.0007, -0.0001, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0133, -0.0155, -0.0065, -0.0233, -0.0076], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0163, -0.0230, -0.0094, -0.0262, -0.0145], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0163, -0.0230, -0.0094, -0.0262, -0.0145], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0031, -0.0156,  0.0023,  0.0072,  0.0009], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0803], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.5278], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0133, -0.0539,  0.0153,  0.0395,  0.0041], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0133, -0.0539,  0.0153,  0.0395,  0.0041], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0021, -0.7503,  0.3527, -0.0021, -0.4003], grad_fn=<SliceBackward0>)
  [Layer 32] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 32] Output sample values after mixer: tensor([ 0.0021, -0.7503,  0.3527, -0.0021, -0.4003], grad_fn=<SliceBackward0>)
  [Layer 32] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 32] Residual connection sample values: tensor([-5.8592,  1.3357, -7.2272, -1.2871, -5.2271], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 33/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([93.6512], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1033], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2853,  0.0674, -0.3585, -0.0620, -0.2636], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7897, -1.4533, -0.1076, -0.6406, -0.5485], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7897, -1.4533, -0.1076, -0.6406, -0.5485], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0701,  0.3914, -0.4814,  0.4214,  0.5850], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.5710,  0.7113,  2.3265,  0.7828,  1.1977], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.5178, -0.0701,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0002,  0.1609,  0.0948,  0.0598, -0.1037], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0134,  0.1116,  0.1216,  0.0586, -0.1049], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0067,  0.0589,  0.0645,  0.0301, -0.0497], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0067,  0.0589,  0.0645,  0.0301, -0.0497], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2778, -0.0364, -0.0775, -0.0105,  0.0082], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0075, -0.2184, -0.2484, -0.1773, -0.0359], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9791, -9.6938, -6.1678, -0.1135, -2.0903], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0067, 0.0202, 0.1254, 0.0177, 0.0095], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9869, 0.8219, 0.4616, 0.9980, 0.9804], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0067,  0.0589,  0.0645,  0.0301, -0.0497], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.2302e-05,  1.6107e-06,  3.4317e-06,  4.6531e-07, -3.6221e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.5314e-04, -1.8920e-05, -2.0808e-05, -3.7292e-06,  7.1466e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 8.0763e-05,  3.5819e-04,  4.0218e-04,  1.1910e-05, -4.2461e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0068,  0.0617,  0.0675,  0.0314, -0.0522], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0068,  0.0617,  0.0675,  0.0314, -0.0522], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0017, -0.0170, -0.0034, -0.0069,  0.0105], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0379], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.1379], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0131, -0.0783, -0.0200, -0.0394,  0.0673], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0131, -0.0783, -0.0200, -0.0394,  0.0673], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.3936, -1.8228, -1.2654, -1.0959,  1.1628], grad_fn=<SliceBackward0>)
  [Layer 33] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 33] Output sample values after mixer: tensor([ 1.3936, -1.8228, -1.2654, -1.0959,  1.1628], grad_fn=<SliceBackward0>)
  [Layer 33] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 33] Residual connection sample values: tensor([-4.4656, -0.4871, -8.4925, -2.3830, -4.0642], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 34/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([101.3078], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0994], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1709, -0.0198, -0.3249, -0.0920, -0.1632], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.1250,  0.1421, -0.0105, -1.1783, -0.2663], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.1250,  0.1421, -0.0105, -1.1783, -0.2663], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5418, -0.1374,  0.3570, -1.1555,  0.8770], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0599, 0.6101, 2.0227, 4.0685, 3.8330], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0410, 0.5418, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1223,  0.0191,  0.0664,  0.2856,  0.1828], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1542,  0.0451,  0.0545,  0.2460,  0.1743], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0712,  0.0231,  0.0280,  0.1381,  0.0947], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0712,  0.0231,  0.0280,  0.1381,  0.0947], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.2958, -0.0272, -0.0219,  0.0491,  0.0057], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0164, -0.1527, -0.2314, -0.0458, -0.2001], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.5611, -2.4811, -2.8936, -0.0159, -0.0261], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1439, 0.0589, 0.0688, 0.6136, 0.2981], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6917, 0.8640, 0.8194, 0.9903, 0.9922], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0712,  0.0231,  0.0280,  0.1381,  0.0947], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.0296e-03,  2.7870e-04,  2.2406e-04, -5.0324e-04, -5.7946e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.8505e-03,  3.0857e-04,  2.2301e-04, -5.1257e-04, -8.9093e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0041,  0.0013,  0.0017,  0.0085,  0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0479,  0.0155,  0.0189,  0.0935,  0.0641], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0479,  0.0155,  0.0189,  0.0935,  0.0641], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-4.0709e-02,  1.1820e-03, -9.8766e-05, -2.5943e-02, -7.4066e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0121], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.1021], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.7375,  0.0208, -0.0020, -0.5876, -0.1593], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.7375,  0.0208, -0.0020, -0.5876, -0.1593], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0976, -1.0872,  2.2683, -0.2191, -2.1934], grad_fn=<SliceBackward0>)
  [Layer 34] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 34] Output sample values after mixer: tensor([-0.0976, -1.0872,  2.2683, -0.2191, -2.1934], grad_fn=<SliceBackward0>)
  [Layer 34] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 34] Residual connection sample values: tensor([-4.5632, -1.5743, -6.2243, -2.6021, -6.2576], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 35/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([164.9234], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0779], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1837, -0.0633, -0.2461, -0.0965, -0.2493], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-2.3065,  0.1559,  1.3442,  0.6154, -0.2986], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-2.3065,  0.1559,  1.3442,  0.6154, -0.2986], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0892,  0.4032, -0.0147,  0.0796, -0.0754], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([4.0470, 1.2988, 1.7829, 1.3167, 1.7137], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.7415, -0.0892,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0117, -0.0966,  0.0004,  0.0320,  0.0098], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1443, -0.0554, -0.0358, -0.0130, -0.0317], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0670, -0.0270, -0.0176, -0.0064, -0.0156], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0670, -0.0270, -0.0176, -0.0064, -0.0156], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0508,  0.1669, -0.2751,  0.2887, -0.0196], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2782,  0.4258, -0.1443, -0.2153,  0.0421], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7098, -2.7746, -0.4453, -1.1391, -3.5906], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.4206, 0.0609, 0.7013, 0.2287, 0.1359], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7419, 0.8445, 0.7318, 0.7707, 0.6138], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0670, -0.0270, -0.0176, -0.0064, -0.0156], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0014, -0.0047,  0.0078, -0.0081,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0015, -0.0051,  0.0089, -0.0092,  0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0138, -0.0038, -0.0069,  0.0052,  0.0034], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0591, -0.0221, -0.0188,  0.0008, -0.0072], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0591, -0.0221, -0.0188,  0.0008, -0.0072], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0124, -0.0019, -0.0200,  0.0003,  0.0009], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0556], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.2394], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1710, -0.0137, -0.1040,  0.0020,  0.0074], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1710, -0.0137, -0.1040,  0.0020,  0.0074], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.1086,  4.2033,  1.5592, -3.9359,  1.4324], grad_fn=<SliceBackward0>)
  [Layer 35] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 35] Output sample values after mixer: tensor([ 1.1086,  4.2033,  1.5592, -3.9359,  1.4324], grad_fn=<SliceBackward0>)
  [Layer 35] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 35] Residual connection sample values: tensor([-3.4545,  2.6290, -4.6651, -6.5380, -4.8253], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 36/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([228.4995], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0662], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1121,  0.0864, -0.1504, -0.2094, -0.1604], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0752, -0.3805,  0.2815, -0.5752,  0.0565], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0752, -0.3805,  0.2815, -0.5752,  0.0565], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0599, -0.2265, -1.1112, -0.1122,  0.0806], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4087, 3.9685, 0.6631, 1.1514, 1.2214], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 0.0056, 0.0599, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0110, -0.0411, -0.2466, -0.0096, -0.0071], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0472, -0.0412, -0.2751, -0.0345, -0.0349], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0230, -0.0202, -0.1187, -0.0170, -0.0172], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0230, -0.0202, -0.1187, -0.0170, -0.0172], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0858,  0.3407,  0.0077, -0.0717, -0.0551], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1360, -0.2776, -0.2555, -0.0562, -0.2025], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6566, -1.1306, -1.6058, -2.4414, -2.8823], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1641, 0.1784, 0.0414, 0.1115, 0.1327], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6466, 0.8173, 0.9356, 0.7617, 0.6821], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0230, -0.0202, -0.1187, -0.0170, -0.0172], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.2435e-04, -1.2871e-03, -2.9145e-05,  2.7084e-04,  2.0803e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0006, -0.0022,  0.0002,  0.0002,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.4224e-03, -1.4783e-03, -7.3943e-03,  4.2524e-05, -1.1442e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0278, -0.0246, -0.1434, -0.0194, -0.0198], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0278, -0.0246, -0.1434, -0.0194, -0.0198], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0010,  0.0038, -0.0230,  0.0040, -0.0006], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0205], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.9856], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0103,  0.0569, -0.2327,  0.0457, -0.0057], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0103,  0.0569, -0.2327,  0.0457, -0.0057], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.0559,  2.2834, -0.4031, -1.9949, -0.7422], grad_fn=<SliceBackward0>)
  [Layer 36] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 36] Output sample values after mixer: tensor([-1.0559,  2.2834, -0.4031, -1.9949, -0.7422], grad_fn=<SliceBackward0>)
  [Layer 36] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 36] Residual connection sample values: tensor([-4.5104,  4.9123, -5.0682, -8.5330, -5.5675], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 37/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([273.3976], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0605], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1556,  0.1734, -0.1727, -0.2847, -0.1935], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.6703,  2.1318,  1.9347, -3.0770, -0.4871], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.6703,  2.1318,  1.9347, -3.0770, -0.4871], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.1299,  0.1745, -0.9486,  1.4525,  1.5414], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.2601, 1.4664, 3.1848, 2.1262, 0.5258], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.0595,  0.1299,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0283, -0.0421, -0.0882,  0.7352,  0.2540], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0407, -0.0706, -0.0832,  0.5843,  0.2687], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0199, -0.0340, -0.0399,  0.3752,  0.1523], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0199, -0.0340, -0.0399,  0.3752,  0.1523], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0506,  0.1734,  0.0378,  0.1583,  0.0264], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2106, -0.0837, -0.2303,  0.0778, -0.2455], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0606, -3.2470, -0.8191, -0.2453, -1.9752], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2196, 0.0416, 0.2052, 0.0104, 0.0197], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9868, 0.8736, 0.8453, 0.9974, 0.9619], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0199, -0.0340, -0.0399,  0.3752,  0.1523], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0002, -0.0008, -0.0002, -0.0007, -0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0002, -0.0008, -0.0002, -0.0007, -0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0047, -0.0077, -0.0087,  0.0805,  0.0427], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0009, -0.0012, -0.0011,  0.0091,  0.0137], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0009, -0.0012, -0.0011,  0.0091,  0.0137], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0013, -0.0023, -0.0018, -0.0012, -0.0025], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0883], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.3644], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0072, -0.0111, -0.0180, -0.0222, -0.0102], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0072, -0.0111, -0.0180, -0.0222, -0.0102], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2373, -1.2371, -4.3717,  3.3406,  1.5101], grad_fn=<SliceBackward0>)
  [Layer 37] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 37] Output sample values after mixer: tensor([ 0.2373, -1.2371, -4.3717,  3.3406,  1.5101], grad_fn=<SliceBackward0>)
  [Layer 37] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 37] Residual connection sample values: tensor([-4.2731,  3.6752, -9.4399, -5.1923, -4.0574], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 38/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([339.0058], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0543], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1203,  0.1027, -0.2626, -0.1409, -0.1129], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0732,  0.0309,  1.0763, -0.4830,  0.0735], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0732,  0.0309,  1.0763, -0.4830,  0.0735], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3686,  0.3605,  0.1575, -0.6741, -0.4717], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.3501, 2.7736, 0.3079, 1.0602, 2.4462], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.0800,  0.3686,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0592, -0.0503,  0.0381,  0.1403, -0.0734], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0312, -0.0875,  0.0123,  0.1287, -0.0946], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0153, -0.0418,  0.0062,  0.0685, -0.0451], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0153, -0.0418,  0.0062,  0.0685, -0.0451], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2679, -0.2711, -0.0651, -0.0932, -0.2635], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1495, -0.2399, -0.2207,  0.2503, -0.2785], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0881, -1.3536, -1.1764, -1.6451, -1.1941], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.4441, 0.3971, 0.2221, 0.1170, 0.2377], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6168, 0.5842, 0.7700, 0.8249, 0.7529], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0153, -0.0418,  0.0062,  0.0685, -0.0451], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([0.0018, 0.0018, 0.0004, 0.0006, 0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([0.0004, 0.0006, 0.0003, 0.0008, 0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0005, -0.0057,  0.0068,  0.0130, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0130, -0.0396,  0.0118,  0.0685, -0.0368], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0130, -0.0396,  0.0118,  0.0685, -0.0368], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0005, -0.0006,  0.0095, -0.0126, -0.0014], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0204], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.9946], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0069, -0.0084,  0.1341, -0.1631, -0.0163], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0069, -0.0084,  0.1341, -0.1631, -0.0163], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1507,  0.6917, -2.0551, -0.6062,  0.4083], grad_fn=<SliceBackward0>)
  [Layer 38] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 38] Output sample values after mixer: tensor([-0.1507,  0.6917, -2.0551, -0.6062,  0.4083], grad_fn=<SliceBackward0>)
  [Layer 38] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 38] Residual connection sample values: tensor([ -4.4238,   4.3670, -11.4950,  -5.7985,  -3.6490],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 39/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([405.6365], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0497], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0991,  0.0988, -0.2579, -0.1303, -0.0827], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.0984,  0.4625,  0.6947, -0.9615,  0.3013], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.0984,  0.4625,  0.6947, -0.9615,  0.3013], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1321,  0.3731, -0.0529,  0.1014,  0.4470], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 3.7428,  2.5710,  2.3525,  1.2442, -0.8581], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.6529, -0.1321,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0097, -0.0579, -0.0147, -0.0058,  0.1041], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0240,  0.0273, -0.0371, -0.0017,  0.0831], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0119,  0.0138, -0.0182, -0.0008,  0.0433], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0119,  0.0138, -0.0182, -0.0008,  0.0433], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1249, -0.0638,  0.0053,  0.0311,  0.0951], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1196, -0.0149,  0.1824, -0.0355, -0.2487], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6942, -0.9243, -1.3151, -3.1533, -2.1087], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1864, 0.0945, 0.0897, 0.0920, 0.0110], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8786, 0.9164, 0.8887, 0.7482, 0.9771], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0119,  0.0138, -0.0182, -0.0008,  0.0433], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.7631e-04,  1.4120e-04, -1.1637e-05, -6.8716e-05, -2.1029e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.7299e-04, -1.9537e-04, -8.9737e-06, -1.1257e-04, -1.5146e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0002,  0.0003, -0.0021, -0.0008,  0.0041], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0100,  0.0122, -0.0177, -0.0015,  0.0412], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0100,  0.0122, -0.0177, -0.0015,  0.0412], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0082,  0.0035, -0.0082,  0.0004,  0.0071], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0109], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.5583], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1482,  0.0667, -0.1616,  0.0063,  0.1299], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1482,  0.0667, -0.1616,  0.0063,  0.1299], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.8786, -0.6117, -2.4529, -1.5952, -2.0388], grad_fn=<SliceBackward0>)
  [Layer 39] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 39] Output sample values after mixer: tensor([ 2.8786, -0.6117, -2.4529, -1.5952, -2.0388], grad_fn=<SliceBackward0>)
  [Layer 39] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 39] Residual connection sample values: tensor([ -1.5452,   3.7553, -13.9479,  -7.3938,  -5.6879],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 40/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([485.0647], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0454], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0306,  0.0751, -0.2862, -0.1480, -0.1125], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3930, -1.5872, -1.0316, -0.8215,  0.3169], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3930, -1.5872, -1.0316, -0.8215,  0.3169], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0091, -0.8359,  0.3658, -0.3849, -0.3016], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.4313, 1.7291, 2.9753, 1.3273, 1.1498], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.0841, -0.0091,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0004,  0.2113,  0.0754,  0.0626, -0.0438], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0153,  0.1927,  0.0811,  0.0528, -0.0486], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0076,  0.1056,  0.0422,  0.0271, -0.0237], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0076,  0.1056,  0.0422,  0.0271, -0.0237], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0592,  0.0478, -0.0787,  0.1166, -0.0889], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2061, -0.0906, -0.0167,  0.5522,  0.0353], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9810, -1.4352, -0.7966, -1.6062, -1.8465], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0866, 0.0739, 0.0856, 0.1325, 0.1758], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8423, 0.8994, 0.9341, 0.8083, 0.7228], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0076,  0.1056,  0.0422,  0.0271, -0.0237], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.8810e-05, -3.1344e-05,  5.1583e-05, -7.6482e-05,  5.8303e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 3.4869e-05, -2.2199e-05,  5.1082e-05, -8.4676e-05,  6.3542e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0001,  0.0087,  0.0019, -0.0018,  0.0024], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0063,  0.0949,  0.0364,  0.0203, -0.0170], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0063,  0.0949,  0.0364,  0.0203, -0.0170], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0015, -0.0256, -0.0099, -0.0051, -0.0031], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0077], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([11.3715], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0331, -0.5739, -0.2181, -0.1333, -0.0686], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0331, -0.5739, -0.2181, -0.1333, -0.0686], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-3.3487,  1.4033, -2.3668, -3.5383,  4.4549], grad_fn=<SliceBackward0>)
  [Layer 40] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 40] Output sample values after mixer: tensor([-3.3487,  1.4033, -2.3668, -3.5383,  4.4549], grad_fn=<SliceBackward0>)
  [Layer 40] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 40] Residual connection sample values: tensor([ -4.8939,   5.1587, -16.3147, -10.9320,  -1.2329],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 41/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([565.3126], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0421], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0918,  0.0976, -0.3126, -0.2051, -0.0232], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0995,  0.0540, -0.4099, -0.5672,  0.3168], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0995,  0.0540, -0.4099, -0.5672,  0.3168], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.0878, -0.5384,  0.3322,  0.0164, -0.3313], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.1041, 0.8375, 3.0384, 1.1709, 2.4449], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.4675,  1.0878,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1734, -0.0705,  0.0417,  0.0022, -0.1245], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1868, -0.0845,  0.0438, -0.0045, -0.1401], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0847, -0.0405,  0.0224, -0.0022, -0.0651], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0847, -0.0405,  0.0224, -0.0022, -0.0651], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0191,  0.1184,  0.1231, -0.2284,  0.1596], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0534, -0.0115, -0.1093, -0.0582, -0.0494], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8259, -1.8637, -1.2829, -1.4543, -4.4079], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1086, 0.0711, 0.1405, 0.1275, 0.0712], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8202, 0.8759, 0.8350, 0.8307, 0.7305], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0847, -0.0405,  0.0224, -0.0022, -0.0651], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0002, -0.0011, -0.0011,  0.0021, -0.0015], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-6.7496e-05, -8.2302e-04, -1.2105e-03,  1.8411e-03, -1.2225e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.8704e-03, -9.3428e-04,  3.6655e-04, -6.7953e-05, -9.4605e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0844, -0.0404,  0.0222, -0.0023, -0.0644], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0844, -0.0404,  0.0222, -0.0023, -0.0644], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0040, -0.0011, -0.0036,  0.0005, -0.0118], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0054], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.5828], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0938, -0.0263, -0.0839,  0.0112, -0.2236], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0938, -0.0263, -0.0839,  0.0112, -0.2236], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.8309, -1.9240, -1.9508, -0.5963,  0.7463], grad_fn=<SliceBackward0>)
  [Layer 41] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 41] Output sample values after mixer: tensor([ 1.8309, -1.9240, -1.9508, -0.5963,  0.7463], grad_fn=<SliceBackward0>)
  [Layer 41] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 41] Residual connection sample values: tensor([ -3.0630,   3.2347, -18.2656, -11.5283,  -0.4866],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 42/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([623.6270], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0400], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0582,  0.0626, -0.3505, -0.2174, -0.0092], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0948,  0.6330, -0.5398, -0.7525,  0.9152], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0948,  0.6330, -0.5398, -0.7525,  0.9152], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0179,  0.3734,  0.2212, -1.0091,  1.2488], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.6858,  0.9238,  3.1532, -0.0138,  3.6420], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000,  0.4171, -0.0179,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0015, -0.0497,  0.0233,  0.0174,  0.2198], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0079, -0.0629,  0.0333,  0.0209,  0.1999], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0039, -0.0305,  0.0170,  0.0106,  0.1099], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0039, -0.0305,  0.0170,  0.0106,  0.1099], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-5.1059e-05, -6.0564e-02, -7.7192e-03, -8.5272e-02,  3.9913e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0392, -0.1014, -0.0495, -0.1376, -0.2672], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0661, -1.4514, -0.7270, -1.9455, -0.6256], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1102, 0.3642, 0.0778, 0.0267, 0.3605], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8892, 0.5894, 0.9450, 0.9494, 0.7981], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0039, -0.0305,  0.0170,  0.0106,  0.1099], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.2012e-08,  2.6109e-05,  3.3277e-06,  3.6761e-05, -1.7206e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.4892e-06,  1.5628e-05,  3.9613e-05,  5.0198e-05,  1.9444e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 5.5005e-05, -2.4383e-04,  4.0479e-05,  5.2017e-05,  2.0458e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0039, -0.0308,  0.0171,  0.0107,  0.1123], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0039, -0.0308,  0.0171,  0.0107,  0.1123], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0002, -0.0127, -0.0034, -0.0026,  0.0734], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0063], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.6007], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0050, -0.3276, -0.0886, -0.0556,  1.7415], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0050, -0.3276, -0.0886, -0.0556,  1.7415], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.2858,  3.3838, -2.0845,  1.8429,  2.2103], grad_fn=<SliceBackward0>)
  [Layer 42] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 42] Output sample values after mixer: tensor([ 1.2858,  3.3838, -2.0845,  1.8429,  2.2103], grad_fn=<SliceBackward0>)
  [Layer 42] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 42] Residual connection sample values: tensor([ -1.7772,   6.6185, -20.3501,  -9.6855,   1.7237],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 43/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([678.8160], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0384], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0323,  0.1260, -0.3705, -0.1788,  0.0310], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6990, -0.7877,  0.8437, -0.1010,  0.2829], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6990, -0.7877,  0.8437, -0.1010,  0.2829], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5834,  0.2289, -1.8491,  0.6309,  0.3376], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.4510, 1.5917, 2.1883, 1.9438, 1.7737], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.1363,  0.5834,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0773, -0.1002, -0.3648, -0.0977, -0.0561], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0737, -0.1459, -0.3523, -0.0918, -0.0649], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0382, -0.0676, -0.1454, -0.0438, -0.0314], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0382, -0.0676, -0.1454, -0.0438, -0.0314], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0255, -0.0598,  0.8440,  0.0431, -0.0260], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1173, -0.0315, -0.2720, -0.1642,  0.0247], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9762, -1.4783, -1.0589, -1.0815, -5.9141], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1203, 0.0711, 0.0705, 0.0472, 0.2807], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8892, 0.9002, 0.9280, 0.9502, 0.1901], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0382, -0.0676, -0.1454, -0.0438, -0.0314], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0001, -0.0003,  0.0039,  0.0002, -0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0001, -0.0002,  0.0037,  0.0002, -0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0011, -0.0021, -0.0045, -0.0006, -0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0342, -0.0608, -0.1308, -0.0386, -0.0283], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0342, -0.0608, -0.1308, -0.0386, -0.0283], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0079,  0.0150, -0.0772,  0.0019, -0.0046], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0070], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([11.9838], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2507,  0.3624, -1.7530,  0.0464, -0.1318], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2507,  0.3624, -1.7530,  0.0464, -0.1318], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2487, -3.9993,  0.7117,  0.1062,  5.7374], grad_fn=<SliceBackward0>)
  [Layer 43] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 43] Output sample values after mixer: tensor([-0.2487, -3.9993,  0.7117,  0.1062,  5.7374], grad_fn=<SliceBackward0>)
  [Layer 43] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 43] Residual connection sample values: tensor([ -2.0258,   2.6192, -19.6384,  -9.5792,   7.4611],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 44/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([721.3151], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0372], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0354,  0.0476, -0.3467, -0.1667,  0.1304], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.1594, -2.2981, -0.5240,  0.0153, -0.2539], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.1594, -2.2981, -0.5240,  0.0153, -0.2539], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4141, -0.2487, -0.3376, -0.3420, -1.4364], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0443, 2.4739, 2.2509, 1.6269, 2.6139], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.4055,  0.4141,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0625,  0.0320, -0.0687, -0.0772,  0.1655], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0564,  0.0924, -0.0872, -0.0838,  0.1130], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0290,  0.0483, -0.0417, -0.0401,  0.0597], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0290,  0.0483, -0.0417, -0.0401,  0.0597], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2747,  0.1567,  0.0349, -0.0384,  0.0420], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2775,  0.1629, -0.0049,  0.0914,  0.0284], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7482, -0.6439, -1.1771, -1.3506, -1.0269], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0610, 0.1657, 0.1010, 0.0492, 0.4161], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9554, 0.8988, 0.8879, 0.9357, 0.6522], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0290,  0.0483, -0.0417, -0.0401,  0.0597], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.8568e-04,  2.7709e-04,  6.1681e-05, -6.7965e-05,  7.4162e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.3356e-04,  2.3411e-04,  2.4402e-05, -2.5828e-05,  3.5938e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0002,  0.0005, -0.0005, -0.0004,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0274,  0.0459, -0.0396, -0.0381,  0.0564], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0274,  0.0459, -0.0396, -0.0381,  0.0564], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0076, -0.0096,  0.0077, -0.0003, -0.0063], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0062], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.6522], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1789, -0.1813,  0.1964, -0.0065, -0.1502], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1789, -0.1813,  0.1964, -0.0065, -0.1502], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.3963,  1.9598, -1.8160,  0.4551,  0.0388], grad_fn=<SliceBackward0>)
  [Layer 44] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 44] Output sample values after mixer: tensor([-0.3963,  1.9598, -1.8160,  0.4551,  0.0388], grad_fn=<SliceBackward0>)
  [Layer 44] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 44] Residual connection sample values: tensor([ -2.4222,   4.5790, -21.4544,  -9.1242,   7.4999],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 45/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([778.5545], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0358], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0416,  0.0809, -0.3704, -0.1543,  0.1283], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.1522, -0.2339, -0.8561,  0.2152, -0.4043], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.1522, -0.2339, -0.8561,  0.2152, -0.4043], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6203,  0.5507, -0.6588,  0.7583, -1.8227], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.5012, 1.5760, 2.2223, 1.6459, 2.1656], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -1.1707, -0.6203,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1092, -0.0864, -0.1014,  0.1399,  0.3032], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1138, -0.0342, -0.1039,  0.1334,  0.3007], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0537, -0.0168, -0.0493,  0.0711,  0.1728], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0537, -0.0168, -0.0493,  0.0711,  0.1728], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1107,  0.0103,  0.0452, -0.2049, -0.0300], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0305,  0.0611,  0.0036,  0.0379,  0.2263], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.2502, -4.1815, -1.0937, -2.6774, -2.3149], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0845, 0.1048, 0.1664, 0.0637, 0.0474], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8269, 0.6453, 0.8336, 0.8432, 0.8961], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0537, -0.0168, -0.0493,  0.0711,  0.1728], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.0201e-04, -4.6879e-05, -2.0475e-04,  9.2910e-04,  1.3597e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0006, -0.0001, -0.0002,  0.0010,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0016, -0.0002, -0.0013,  0.0020,  0.0046], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0618, -0.0190, -0.0566,  0.0818,  0.1984], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0618, -0.0190, -0.0566,  0.0818,  0.1984], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0171,  0.0020,  0.0144,  0.0097, -0.0321], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0085], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.8239], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.4327,  0.0361,  0.3357,  0.2074, -0.7332], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.4327,  0.0361,  0.3357,  0.2074, -0.7332], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 3.0836, -2.6106,  0.8310,  4.4537,  0.8380], grad_fn=<SliceBackward0>)
  [Layer 45] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 45] Output sample values after mixer: tensor([ 3.0836, -2.6106,  0.8310,  4.4537,  0.8380], grad_fn=<SliceBackward0>)
  [Layer 45] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 45] Residual connection sample values: tensor([  0.6614,   1.9684, -20.6233,  -4.6705,   8.3380],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 46/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([851.7520], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0343], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0131,  0.0406, -0.4158, -0.0935,  0.1639], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1453, -0.6908, -1.4321, -0.5120, -1.1300], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1453, -0.6908, -1.4321, -0.5120, -1.1300], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0893,  0.8736,  0.4146, -0.0858,  0.3536], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.2106, 3.3777, 1.0171, 2.3211, 1.3013], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0000, 1.1878, 0.0893, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0499,  0.1015,  0.0701,  0.0027, -0.0575], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0530,  0.0977,  0.0490, -0.0131, -0.0371], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0258,  0.0512,  0.0251, -0.0065, -0.0182], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0258,  0.0512,  0.0251, -0.0065, -0.0182], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0495, -0.2774, -0.0271, -0.0761, -0.0470], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0293, -0.2334, -0.1100,  0.0753,  0.2181], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8673, -0.9793, -1.6584, -0.9408, -0.4381], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0272, 0.1544, 0.0174, 0.1007, 0.0320], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9504, 0.8597, 0.9715, 0.9096, 0.9861], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0258,  0.0512,  0.0251, -0.0065, -0.0182], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.4778e-05,  1.9491e-04,  1.9063e-05,  5.3498e-05,  3.3034e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-4.5046e-05,  2.9310e-04,  3.2940e-05,  5.2153e-05,  3.2034e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-3.8513e-04,  3.2743e-04,  2.2133e-04,  6.7439e-05, -1.4599e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0210,  0.0412,  0.0203, -0.0051, -0.0147], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0210,  0.0412,  0.0203, -0.0051, -0.0147], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0016, -0.0095, -0.0056,  0.0010,  0.0041], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0116], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.2929], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0354, -0.1964, -0.1043,  0.0170,  0.0855], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0354, -0.1964, -0.1043,  0.0170,  0.0855], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.1708, -0.4442, -0.4687, -2.7215, -0.5672], grad_fn=<SliceBackward0>)
  [Layer 46] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 46] Output sample values after mixer: tensor([-1.1708, -0.4442, -0.4687, -2.7215, -0.5672], grad_fn=<SliceBackward0>)
  [Layer 46] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 46] Residual connection sample values: tensor([ -0.5094,   1.5242, -21.0920,  -7.3919,   7.7708],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 47/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([914.1970], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0331], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0086,  0.0261, -0.3473, -0.1232,  0.1234], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2591, -0.4451, -1.4603, -0.2854,  0.9010], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2591, -0.4451, -1.4603, -0.2854,  0.9010], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.6534, -0.2784,  0.0943,  1.8201,  0.4216], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.7543, -0.8353,  4.1660,  3.0334,  1.9945], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -1.2364, -1.6534,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2282,  0.0102,  0.0095, -0.2494,  0.0568], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2453, -0.0147, -0.2100, -0.2528,  0.0620], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1376, -0.0073, -0.0940, -0.1105,  0.0319], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1376, -0.0073, -0.0940, -0.1105,  0.0319], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1790, -0.0517, -0.2784, -0.2783,  0.0352], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.6808,  0.0033,  0.0764, -0.2680, -0.1567], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -3.5522, -11.2450,  -2.6866,  -3.1935,  -3.1998],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0470, 0.0066, 0.1543, 0.0733, 0.0824], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8463, 0.9283, 0.6607, 0.7912, 0.7682], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1376, -0.0073, -0.0940, -0.1105,  0.0319], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0012, -0.0003, -0.0018, -0.0018,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0012, -0.0003, -0.0019, -0.0019,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0049, -0.0003, -0.0034, -0.0037,  0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1995, -0.0106, -0.1363, -0.1600,  0.0462], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1995, -0.0106, -0.1363, -0.1600,  0.0462], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0292, 0.0018, 0.0375, 0.0196, 0.0296], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0121], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.1015], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.5689, 0.0215, 0.7175, 0.3915, 0.5667], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.5689, 0.0215, 0.7175, 0.3915, 0.5667], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.8469, -0.5375, -3.5919, -1.3615,  1.0079], grad_fn=<SliceBackward0>)
  [Layer 47] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 47] Output sample values after mixer: tensor([-2.8469, -0.5375, -3.5919, -1.3615,  1.0079], grad_fn=<SliceBackward0>)
  [Layer 47] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 47] Residual connection sample values: tensor([ -3.3564,   0.9868, -24.6840,  -8.7534,   8.7787],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 48/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1086.2847], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0303], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0533,  0.0146, -0.3578, -0.1309,  0.1239], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2260, -2.1739, -0.6323,  0.1464, -0.9920], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2260, -2.1739, -0.6323,  0.1464, -0.9920], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4479, -0.4345,  0.5673,  0.5534,  0.1138], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.5445,  0.4730,  2.2598,  3.4992, -0.2585], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0000, -0.8173,  0.4479,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0633, -0.0428,  0.0794,  0.1217, -0.0180], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0684,  0.1772, -0.0065,  0.0554, -0.0204], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0330,  0.0964, -0.0032,  0.0285, -0.0101], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0330,  0.0964, -0.0032,  0.0285, -0.0101], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0376, -0.0083,  0.0507, -0.0203, -0.0811], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0902, -0.1543, -0.1180, -0.2333, -0.0494], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-54.8118, -78.5143, -47.2508,  -2.3308,  -4.2266],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0526, 0.0141, 0.0383, 0.0356, 0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.0559, 0.3302, 0.1640, 0.9203, 0.9757], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0330,  0.0964, -0.0032,  0.0285, -0.0101], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-6.5379e-05,  1.4440e-05, -8.8235e-05,  3.5338e-05,  1.4109e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.6884e-05, -3.0466e-06, -1.1247e-04,  5.6357e-05,  1.3963e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.1323e-04,  1.0311e-03,  2.3738e-05,  3.5874e-04, -1.1627e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0265,  0.0778, -0.0026,  0.0230, -0.0082], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0265,  0.0778, -0.0026,  0.0230, -0.0082], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0027, -0.0173,  0.0006,  0.0018,  0.0022], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0077], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([11.3606], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0692, -0.3681,  0.0124,  0.0457,  0.0616], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0692, -0.3681,  0.0124,  0.0457,  0.0616], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([  2.2315,   7.6592, -10.2997,   5.3566,  -4.3028],
       grad_fn=<SliceBackward0>)
  [Layer 48] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 48] Output sample values after mixer: tensor([  2.2315,   7.6592, -10.2997,   5.3566,  -4.3028],
       grad_fn=<SliceBackward0>)
  [Layer 48] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 48] Residual connection sample values: tensor([ -1.1248,   8.6460, -34.9836,  -3.3969,   4.4759],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1514.2035], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0257], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0161,  0.1369, -0.5101, -0.0505,  0.0635], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Final backbone norm output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Final backbone norm output sample values: tensor([-0.0161,  0.1369, -0.5101, -0.0505,  0.0635], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Logits shape: torch.Size([1, 1, 50288])
[Mamba2LMHeadModel] Logits sample values: tensor([ 7.9573, -4.5017,  9.7012, 10.9768, 10.3393], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Forward pass input_ids shape: torch.Size([1, 1])
[Mamba2LMHeadModel] input_ids sample values: tensor([310])
[Mamba2LMHeadModel] Embedding output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Embedding sample values: tensor([-0.0385, -0.1256, -0.0894,  0.0913, -0.1537], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 1/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0165], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([7.7785], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0531, -0.1960, -0.1274,  0.1300, -0.2151], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4834, -0.5036, -0.5187, -0.0426,  1.2741], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4834, -0.5036, -0.5187, -0.0426,  1.2741], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5844, -0.6217,  1.1698, -0.1751, -1.4417], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.5368,  0.2496,  0.2991, -0.0574,  0.4492], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.0169,  0.3530,  0.5844,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0289, -0.1671, -0.1168, -0.1295,  0.1572], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2567,  0.0482,  0.1534, -0.0803, -0.0996], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1447,  0.0247,  0.0826, -0.0385, -0.0473], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1447,  0.0247,  0.0826, -0.0385, -0.0473], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3199, -0.0743, -0.2246, -0.2720,  0.0752], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2558,  0.2481, -0.2755, -0.1883, -0.0992], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6180, -2.5226, -3.0473, -3.3078, -3.9090], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0155, 0.0174, 0.0122, 0.0231, 0.0114], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9602, 0.9571, 0.9635, 0.9265, 0.9564], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1447,  0.0247,  0.0826, -0.0385, -0.0473], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0007, -0.0002, -0.0005, -0.0006,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0013,  0.0001, -0.0011, -0.0013,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0569,  0.0503,  0.0692,  0.0024, -0.0462], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1121,  0.0597,  0.1007, -0.0123, -0.0643], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1121,  0.0597,  0.1007, -0.0123, -0.0643], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0207, -0.0113, -0.0195,  0.0003, -0.0640], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([7.1820], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3731], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0077, -0.0046, -0.0062,  0.0002, -0.0243], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0077, -0.0046, -0.0062,  0.0002, -0.0243], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0324, -0.0483,  0.0408, -0.0915, -0.0209], grad_fn=<SliceBackward0>)
  [Layer 1] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 1] Output sample values after mixer: tensor([-0.0324, -0.0483,  0.0408, -0.0915, -0.0209], grad_fn=<SliceBackward0>)
  [Layer 1] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 1] Residual connection sample values: tensor([-0.0709, -0.1739, -0.0486, -0.0002, -0.1746], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 2/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0286], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([5.9136], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1513, -0.2932, -0.0956, -0.0005, -0.3517], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.5183, -0.5755, -0.8398,  0.2669, -1.8388], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.5183, -0.5755, -0.8398,  0.2669, -1.8388], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.7897,  0.7916, -0.6182,  4.1925,  0.3937], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3421, 0.5635, 0.8605, 1.9631, 3.7998], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.7522, -1.1875, -0.7897,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1703,  0.4882, -0.0331, -3.1715, -0.2140], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2002,  0.3337, -0.0437, -2.1178, -0.2272], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0901,  0.1944, -0.0214, -0.2274, -0.1007], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0901,  0.1944, -0.0214, -0.2274, -0.1007], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.2009, -0.0705, -0.0110, -0.2450,  0.2712], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1384,  0.0818, -0.0466,  0.5094, -0.2299], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-19.8515, -18.6852, -13.5640,  -2.4189,  -0.4662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0231, 0.0110, 0.0492, 0.0510, 0.5101], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6320, 0.8140, 0.5131, 0.8840, 0.7883], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0901,  0.1944, -0.0214, -0.2274, -0.1007], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.1840e-04,  1.4682e-04,  2.2850e-05,  5.1031e-04, -5.6494e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-4.3715e-04,  9.6101e-05,  8.0069e-05,  5.3069e-04, -5.2616e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0199, -0.0029, -0.0155,  0.1365, -0.0164], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0821,  0.1313, -0.0302, -0.0205, -0.0859], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0821,  0.1313, -0.0302, -0.0205, -0.0859], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0224, -0.0272,  0.0076, -0.0031,  0.0217], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([54.2854], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1357], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0039, -0.0022,  0.0014, -0.0002,  0.0040], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0039, -0.0022,  0.0014, -0.0002,  0.0040], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1660, -0.1111, -0.0454, -0.2529,  0.1586], grad_fn=<SliceBackward0>)
  [Layer 2] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 2] Output sample values after mixer: tensor([-0.1660, -0.1111, -0.0454, -0.2529,  0.1586], grad_fn=<SliceBackward0>)
  [Layer 2] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 2] Residual connection sample values: tensor([-0.2369, -0.2850, -0.0940, -0.2532, -0.0160], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 3/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0584], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([4.1370], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3883, -0.3653, -0.1380, -0.3825, -0.0260], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.5094, -1.3993,  1.9071, -0.6200, -1.3832], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.5094, -1.3993,  1.9071, -0.6200, -1.3832], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1400, -1.1944, -2.1703,  0.3938,  0.5181], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.8683, -0.2295,  1.1638,  2.4528, -0.2085], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  1.1963,  0.4664, -0.1400,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2055,  0.0957,  0.1941,  0.0740,  0.0047], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2071,  0.0764,  0.3178,  0.0617, -0.0116], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0929,  0.0396,  0.1839,  0.0318, -0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0929,  0.0396,  0.1839,  0.0318, -0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.5756, -0.0480, -0.1115, -0.0417,  0.1533], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.4426, -0.0540, -0.2037,  0.7278,  1.0541], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6506, -3.9939, -6.7806, -0.9419, -6.0308], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1382, 0.0162, 0.0430, 0.0737, 0.0176], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9140, 0.9372, 0.7472, 0.9329, 0.8991], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0929,  0.0396,  0.1839,  0.0318, -0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0074,  0.0006,  0.0014,  0.0005, -0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0079,  0.0007,  0.0012,  0.0008, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0501,  0.0186,  0.1773,  0.0326, -0.0094], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0924,  0.0367,  0.2610,  0.0471, -0.0121], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0924,  0.0367,  0.2610,  0.0471, -0.0121], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0294, -0.0102,  0.4334, -0.0102,  0.0033], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([61.8143], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1272], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0052, -0.0020,  0.0675, -0.0024,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0052, -0.0020,  0.0675, -0.0024,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0670, -0.1127,  0.1314,  0.0054,  0.1055], grad_fn=<SliceBackward0>)
  [Layer 3] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 3] Output sample values after mixer: tensor([ 0.0670, -0.1127,  0.1314,  0.0054,  0.1055], grad_fn=<SliceBackward0>)
  [Layer 3] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 3] Residual connection sample values: tensor([-0.1699, -0.3977,  0.0374, -0.2478,  0.0895], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 4/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0834], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([3.4632], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2746, -0.4869,  0.0534, -0.3660,  0.1452], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1733,  0.8438, -0.9734,  0.1999, -1.3513], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1733,  0.8438, -0.9734,  0.1999, -1.3513], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0140,  1.6211, -0.4245,  1.0611,  0.5487], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.6789,  2.9827,  2.5380,  0.0853, -0.8586], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0897, 0.6892, 0.0140, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-1.5141e-02,  4.2947e-01,  8.0937e-02, -1.3403e-04,  3.1224e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0889,  0.3943,  0.0327, -0.0160,  0.6052], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0425,  0.2355,  0.0166, -0.0079,  0.3915], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0425,  0.2355,  0.0166, -0.0079,  0.3915], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.5379,  0.5962,  1.1395,  0.0366, -0.1607], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.7382, -0.0481,  0.1808, -0.2248, -0.1346], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.7127,  -1.2862,  -1.4870, -27.0280,  -4.0727],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0325, 0.0465, 0.0240, 0.0035, 0.0162], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9459, 0.9419, 0.9650, 0.9090, 0.9360], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0425,  0.2355,  0.0166, -0.0079,  0.3915], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-7.4232e-04, -8.2267e-04, -1.5725e-03, -5.0439e-05,  2.2174e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-8.7463e-04, -1.2663e-03, -1.2226e-03,  3.9108e-05, -8.5159e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0079,  0.0238, -0.0054, -0.0047,  0.0867], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0318,  0.1564,  0.0040, -0.0091,  0.3070], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0318,  0.1564,  0.0040, -0.0091,  0.3070], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0030,  0.0923, -0.0011, -0.0010, -0.0853], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([29.2884], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1848], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0012,  0.0229, -0.0004, -0.0003, -0.0163], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0012,  0.0229, -0.0004, -0.0003, -0.0163], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1959, -0.0566, -0.2865,  0.1158,  0.0915], grad_fn=<SliceBackward0>)
  [Layer 4] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 4] Output sample values after mixer: tensor([-0.1959, -0.0566, -0.2865,  0.1158,  0.0915], grad_fn=<SliceBackward0>)
  [Layer 4] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 4] Residual connection sample values: tensor([-0.3658, -0.4542, -0.2490, -0.1319,  0.1810], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 5/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1150], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([2.9488], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.4869, -0.4997, -0.3096, -0.1682,  0.2487], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0023, -0.0985,  1.6382, -1.1853,  0.2955], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0023, -0.0985,  1.6382, -1.1853,  0.2955], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2659,  1.1388,  0.4707, -0.4958, -0.8063], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.5118,  1.4216,  1.2140, -0.2210,  0.4001], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -1.0174,  0.3543,  0.2659,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0325,  0.3841, -0.2639, -0.5033, -0.2426], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0840,  0.3468, -0.3334, -0.5295, -0.2485], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0403,  0.2032, -0.1392, -0.1962, -0.1089], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0403,  0.2032, -0.1392, -0.1962, -0.1089], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0205, -0.0536, -0.0524, -0.0296,  0.0748], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1522,  0.0974, -0.1395,  0.0509,  0.0559], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.5763,  -1.0444,  -0.8388,  -5.6765, -20.4018],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0470, 0.0489, 0.1362, 0.0112, 0.0051], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9287, 0.9502, 0.8920, 0.9387, 0.9015], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0403,  0.2032, -0.1392, -0.1962, -0.1089], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.8701e-05,  1.0121e-04,  9.9102e-05,  5.6026e-05, -1.4127e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.3683e-04,  2.6639e-04,  9.6665e-05,  8.8105e-05, -1.9253e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0007,  0.0092, -0.0104, -0.0115, -0.0101], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0223,  0.1184, -0.0852, -0.1169, -0.0687], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0223,  0.1184, -0.0852, -0.1169, -0.0687], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-2.5518e-05, -5.5476e-03, -1.1693e-01,  3.2450e-02, -1.1636e-02],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([8.4036], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3450], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-1.3840e-05, -3.0686e-03, -6.1607e-02,  1.7895e-02, -5.6877e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-1.3840e-05, -3.0686e-03, -6.1607e-02,  1.7895e-02, -5.6877e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1140, -0.0624,  0.1527,  0.1998, -0.0793], grad_fn=<SliceBackward0>)
  [Layer 5] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 5] Output sample values after mixer: tensor([ 0.1140, -0.0624,  0.1527,  0.1998, -0.0793], grad_fn=<SliceBackward0>)
  [Layer 5] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 5] Residual connection sample values: tensor([-0.2518, -0.5166, -0.0963,  0.0679,  0.1017], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 6/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2130], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([2.1669], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2404, -0.3818, -0.0816,  0.0595,  0.0985], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 2.0074, -0.9371, -0.0323,  0.7891, -0.1742], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 2.0074, -0.9371, -0.0323,  0.7891, -0.1742], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3284, -0.8687, -0.0360, -0.6303, -0.3786], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.9419, 2.3604, 0.9591, 0.8851, 2.1479], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.4182, -2.9153,  0.3284,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0334, -0.3336,  0.0998,  0.0284, -0.2007], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0678, -0.4059,  0.0376,  0.0905, -0.1310], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0350, -0.1623,  0.0192,  0.0473, -0.0612], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0350, -0.1623,  0.0192,  0.0473, -0.0612], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 1.0088,  0.0524, -0.2375, -0.0587,  0.2335], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2725,  0.0166, -0.2782,  0.3437,  0.5121], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9866, -8.7747, -3.3046, -2.9913, -3.3435], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3984, 0.1367, 0.2058, 0.1529, 0.2297], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6750, 0.3013, 0.5066, 0.6329, 0.4640], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0350, -0.1623,  0.0192,  0.0473, -0.0612], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0141,  0.0007, -0.0033, -0.0008,  0.0033], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0233, -0.0025, -0.0114, -0.0023,  0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.1257, -0.1385,  0.0050,  0.0291, -0.0835], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1333, -0.1737,  0.0092,  0.0394, -0.0968], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1333, -0.1737,  0.0092,  0.0394, -0.0968], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 2.3593e-01,  4.5819e-02, -1.4631e-04,  2.1361e-02,  7.6989e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([9.5839], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3230], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 1.4639e-01,  1.3319e-02, -4.0430e-05,  7.6751e-03,  1.9526e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 1.4639e-01,  1.3319e-02, -4.0430e-05,  7.6751e-03,  1.9526e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0984,  0.0070,  0.2915, -0.2211, -0.0154], grad_fn=<SliceBackward0>)
  [Layer 6] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 6] Output sample values after mixer: tensor([ 0.0984,  0.0070,  0.2915, -0.2211, -0.0154], grad_fn=<SliceBackward0>)
  [Layer 6] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 6] Residual connection sample values: tensor([-0.1534, -0.5097,  0.1952, -0.1532,  0.0863], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 7/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.4112], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.5594], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0920, -0.2540,  0.1086, -0.0842,  0.0519], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1703,  0.2185, -0.3601,  0.3558,  0.5547], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1703,  0.2185, -0.3601,  0.3558,  0.5547], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-2.4927, -0.0286,  0.5036, -0.4461,  1.0862], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.9384, 1.2033, 2.9433, 2.2204, 1.6153], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -1.3217, -3.4444, -2.4927,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0898, -0.3586,  0.4188, -0.2100,  0.0460], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1579, -0.3340,  0.4181, -0.2036,  0.0424], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0727, -0.1394,  0.2521, -0.0915,  0.0216], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0727, -0.1394,  0.2521, -0.0915,  0.0216], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0043,  0.0675, -0.0016, -0.0087,  0.2148], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.5083,  0.0248,  0.0100, -0.0982,  0.0774], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2959, -1.1836, -0.3113, -0.1314, -1.5015], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1154, 0.0198, 0.0469, 0.1304, 0.0054], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9664, 0.9768, 0.9855, 0.9830, 0.9919], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0727, -0.1394,  0.2521, -0.0915,  0.0216], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.6451e-05, -5.6657e-04,  1.3372e-05,  7.3330e-05, -1.8041e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0011,  0.0007, -0.0005,  0.0002, -0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0003, -0.0025,  0.0033,  0.0006,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0002, -0.0028,  0.0039,  0.0004,  0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0002, -0.0028,  0.0039,  0.0004,  0.0007], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.3284e-05, -3.3712e-04, -5.7593e-04,  8.4472e-05,  2.2940e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0360], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.2661], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-8.6964e-05, -1.2292e-03, -4.9551e-03,  5.1261e-04,  1.9005e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-8.6964e-05, -1.2292e-03, -4.9551e-03,  5.1261e-04,  1.9005e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0449, -0.0793,  0.0674,  0.1118,  0.2106], grad_fn=<SliceBackward0>)
  [Layer 7] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 7] Output sample values after mixer: tensor([-0.0449, -0.0793,  0.0674,  0.1118,  0.2106], grad_fn=<SliceBackward0>)
  [Layer 7] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 7] Residual connection sample values: tensor([-0.1983, -0.5890,  0.2626, -0.0414,  0.2969], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 8/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.5784], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.3148], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1344, -0.3125,  0.1659, -0.0260,  0.2003], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2046, -1.1784, -0.4626, -1.9746, -0.8003], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2046, -1.1784, -0.4626, -1.9746, -0.8003], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.1772,  0.0458,  0.7950, -0.8358, -1.2213], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.1415, 0.5265, 1.9965, 1.1716, 1.7912], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.7961, -1.7797,  0.1772,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1316, -0.3690, -0.0640, -0.0151, -0.2663], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.3313, -0.4000, -0.3787, -0.0667, -0.3224], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1928, -0.1605, -0.1539, -0.0322, -0.1354], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1928, -0.1605, -0.1539, -0.0322, -0.1354], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0303, -0.0135,  0.0078, -0.1247, -0.0415], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0231,  0.1313,  0.0562,  0.1818,  0.0589], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.6543, -0.9827, -0.5550, -3.9397, -1.8081], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0826, 0.0902, 0.0792, 0.0757, 0.0565], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7395, 0.9152, 0.9570, 0.7422, 0.9029], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1928, -0.1605, -0.1539, -0.0322, -0.1354], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0005, -0.0002,  0.0001, -0.0020, -0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.2683e-04, -2.4972e-04,  2.7013e-05, -2.0397e-03, -5.0112e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0438, -0.0347, -0.0338, -0.0069, -0.0286], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.2062, -0.1698, -0.1634, -0.0341, -0.1427], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.2062, -0.1698, -0.1634, -0.0341, -0.1427], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0189,  0.0471,  0.0292,  0.0082,  0.0354], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([2.5252], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6293], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0115,  0.0365,  0.0154,  0.0068,  0.0348], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0115,  0.0365,  0.0154,  0.0068,  0.0348], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1731, -0.1063, -0.2869,  0.2717, -0.2158], grad_fn=<SliceBackward0>)
  [Layer 8] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 8] Output sample values after mixer: tensor([-0.1731, -0.1063, -0.2869,  0.2717, -0.2158], grad_fn=<SliceBackward0>)
  [Layer 8] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 8] Residual connection sample values: tensor([-0.3714, -0.6953, -0.0243,  0.2304,  0.0811], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 9/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.8160], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.1070], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1953, -0.2988, -0.0117,  0.1070,  0.0421], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4724, -1.4164, -1.4802,  0.4413, -0.0615], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4724, -1.4164, -1.4802,  0.4413, -0.0615], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5863, -0.2264, -0.0510, -0.6487,  1.2222], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.9211, 2.3658, 3.8819, 0.7841, 2.6392], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  1.0604, -0.5307, -0.5863,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1203, -0.0364,  0.0161,  0.1867, -0.0891], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1277, -0.0618, -0.0706,  0.1128, -0.0640], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0679, -0.0299, -0.0340,  0.0596, -0.0310], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0679, -0.0299, -0.0340,  0.0596, -0.0310], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.5962, -0.1894,  0.2558,  0.1436, -0.1404], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2618, -0.2430, -0.2517,  0.4899, -0.1122], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-5.2345, -1.2161, -1.4888, -0.9523, -3.9667], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1727, 0.3412, 0.2100, 0.2605, 0.2004], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.4050, 0.6604, 0.7316, 0.7803, 0.4516], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0679, -0.0299, -0.0340,  0.0596, -0.0310], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0070, -0.0022,  0.0030,  0.0017, -0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0071, -0.0019,  0.0023,  0.0011, -0.0019], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0096, -0.0067, -0.0082,  0.0095, -0.0068], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1016, -0.0473, -0.0544,  0.0903, -0.0488], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1016, -0.0473, -0.0544,  0.0903, -0.0488], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0184,  0.0131,  0.0149,  0.0242,  0.0015], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([3.3034], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5502], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0105,  0.0111,  0.0085,  0.0109,  0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0105,  0.0111,  0.0085,  0.0109,  0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1040, -0.0913, -0.2449, -0.0347, -0.1178], grad_fn=<SliceBackward0>)
  [Layer 9] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 9] Output sample values after mixer: tensor([ 0.1040, -0.0913, -0.2449, -0.0347, -0.1178], grad_fn=<SliceBackward0>)
  [Layer 9] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 9] Residual connection sample values: tensor([-0.2674, -0.7866, -0.2692,  0.1957, -0.0367], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 10/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.3742], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8530], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0933, -0.2293, -0.0848,  0.0610, -0.0125], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0077, -0.2089,  0.3951, -0.0936, -0.0260], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0077, -0.2089,  0.3951, -0.0936, -0.0260], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4216,  0.9514,  0.5589, -0.0072,  1.3181], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.0261, 1.3797, 0.1110, 1.7816, 1.4399], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.8273, -0.9168,  0.4216,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0782, -0.3487,  0.1512,  0.0395,  0.3555], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0399, -0.4358,  0.0474, -0.0463,  0.2959], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0203, -0.1712,  0.0243, -0.0226,  0.1697], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0203, -0.1712,  0.0243, -0.0226,  0.1697], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-3.0093e-04,  4.8785e-01,  2.1404e-01,  2.2802e-03,  5.2434e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2599,  0.2334, -0.0860,  0.1458,  0.0449], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.7155, -1.4068, -0.3534, -2.0102, -0.4653], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0090, 0.0141, 0.1051, 0.0108, 0.0316], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9671, 0.9804, 0.9635, 0.9785, 0.9854], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0203, -0.1712,  0.0243, -0.0226,  0.1697], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-5.5139e-08,  8.9389e-05,  3.9219e-05,  4.1779e-07,  9.6075e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.7602e-07,  1.0830e-04,  4.1207e-05,  1.2251e-05,  1.4764e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0003, -0.0032,  0.0005, -0.0005,  0.0033], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0047, -0.0408,  0.0058, -0.0054,  0.0406], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0047, -0.0408,  0.0058, -0.0054,  0.0406], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 1.8303e-05,  3.8163e-03,  1.3757e-03,  2.4204e-04, -5.1997e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0117], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.2489], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0003,  0.0258,  0.0149,  0.0030, -0.0059], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0003,  0.0258,  0.0149,  0.0030, -0.0059], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.6181,  0.2541,  0.1059,  0.3245,  0.0895], grad_fn=<SliceBackward0>)
  [Layer 10] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 10] Output sample values after mixer: tensor([-0.6181,  0.2541,  0.1059,  0.3245,  0.0895], grad_fn=<SliceBackward0>)
  [Layer 10] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 10] Residual connection sample values: tensor([-0.8855, -0.5325, -0.1633,  0.5202,  0.0528], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 11/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.2825], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8830], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3595, -0.1759, -0.0592,  0.1840,  0.0205], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5379, -0.6176, -0.5116, -1.0838, -0.1004], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5379, -0.6176, -0.5116, -1.0838, -0.1004], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5201,  1.2710, -0.8083,  0.8164,  0.4551], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.7764, 3.9930, 2.5794, 2.8809, 3.3685], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 1.1212, 1.1446, 0.5201, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2256, -0.2718,  0.2659, -0.0699,  0.0541], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2398, -0.6294,  0.3625, -0.0577,  0.0773], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1056, -0.2188,  0.2137, -0.0280,  0.0401], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1056, -0.2188,  0.2137, -0.0280,  0.0401], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1121, -0.2677, -0.2536,  0.0298,  0.2181], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0444, -0.0920, -0.2782, -0.1013, -0.1090], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.3116, -0.0902, -1.5786, -0.2096, -0.6694], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.5738, 1.0053, 0.9859, 0.5760, 0.1967], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8363, 0.9134, 0.2109, 0.8863, 0.8766], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1056, -0.2188,  0.2137, -0.0280,  0.0401], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0068,  0.0162,  0.0154, -0.0018, -0.0132], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0376, -0.0220,  0.0454,  0.0092, -0.0518], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.1058, -0.1654,  0.2424, -0.0152, -0.0319], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1445, -0.2457,  0.3208, -0.0255, -0.0172], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1445, -0.2457,  0.3208, -0.0255, -0.0172], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0287,  0.0532, -0.0615,  0.0070,  0.0008], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([2.1402], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6835], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0241,  0.0437, -0.0359,  0.0133,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0241,  0.0437, -0.0359,  0.0133,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([0.7792, 0.1831, 0.2005, 0.1480, 0.1771], grad_fn=<SliceBackward0>)
  [Layer 11] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 11] Output sample values after mixer: tensor([0.7792, 0.1831, 0.2005, 0.1480, 0.1771], grad_fn=<SliceBackward0>)
  [Layer 11] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 11] Residual connection sample values: tensor([-0.1063, -0.3494,  0.0372,  0.6682,  0.2300], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 12/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.8588], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7335], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0322, -0.0879,  0.0098,  0.1757,  0.0668], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0198, -1.3677, -1.1946,  0.9202, -0.5805], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0198, -1.3677, -1.1946,  0.9202, -0.5805], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.6992,  0.1605,  0.9970, -0.0977,  0.4524], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.0695, 1.9020, 1.9940, 1.4985, 1.6398], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.2311,  0.6048, -1.6992,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2702, -0.0330,  0.7511,  0.0355,  0.1057], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3132, -0.0201,  0.7162,  0.0058,  0.1183], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1323, -0.0100,  0.4811,  0.0029,  0.0626], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1323, -0.0100,  0.4811,  0.0029,  0.0626], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3897, -0.1961,  1.1570, -0.1284,  0.0477], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2644, -0.2772, -0.1402, -0.2144, -0.0329], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2412, -0.7694, -1.9975, -1.2368, -1.0181], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2946, 0.3836, 0.1830, 0.3614, 0.3482], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6937, 0.7444, 0.6939, 0.6395, 0.7015], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1323, -0.0100,  0.4811,  0.0029,  0.0626], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0152,  0.0076, -0.0451,  0.0050, -0.0019], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0148,  0.0068, -0.0445,  0.0045, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0027,  0.0163,  0.0685, -0.0064, -0.0416], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0979,  0.0092,  0.4148, -0.0044,  0.0034], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0979,  0.0092,  0.4148, -0.0044,  0.0034], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0010, -0.0025, -0.1152, -0.0029, -0.0007], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.4609], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.4730], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0026, -0.0044, -0.1515, -0.0043, -0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0026, -0.0044, -0.1515, -0.0043, -0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.6529,  0.0206, -0.5224, -0.4699, -0.5292], grad_fn=<SliceBackward0>)
  [Layer 12] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 12] Output sample values after mixer: tensor([-0.6529,  0.0206, -0.5224, -0.4699, -0.5292], grad_fn=<SliceBackward0>)
  [Layer 12] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 12] Residual connection sample values: tensor([-0.7592, -0.3288, -0.4852,  0.1983, -0.2992], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 13/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3.2690], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5531], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1699, -0.0637, -0.1002,  0.0385, -0.0680], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.1642,  0.8574, -0.2815,  1.2533,  0.9978], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.1642,  0.8574, -0.2815,  1.2533,  0.9978], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-2.3017, -1.4893,  0.1823,  0.9239, -0.2047], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.0514, 2.9125, 2.4141, 2.2781, 2.6341], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.4691, -0.9624, -2.3017,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1688,  0.2009, -0.2202,  0.0844,  0.1942], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.4334,  0.0910, -0.2407,  0.0836,  0.1703], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1705,  0.0476, -0.1059,  0.0435,  0.0924], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1705,  0.0476, -0.1059,  0.0435,  0.0924], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0316, -0.2081,  0.1363,  0.5899,  0.0307], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0128,  0.1441, -0.1643,  0.4771, -0.2193], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3103, -1.7871, -0.8606, -1.8811, -0.5252], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1857, 0.1659, 0.3625, 0.3828, 0.2210], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7840, 0.7435, 0.7320, 0.4868, 0.8904], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1705,  0.0476, -0.1059,  0.0435,  0.0924], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0010,  0.0066, -0.0043, -0.0187, -0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0040,  0.0074, -0.0047, -0.0258, -0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0618,  0.0103, -0.0278,  0.0075,  0.0832], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0692,  0.0124, -0.0324,  0.0093,  0.0872], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0692,  0.0124, -0.0324,  0.0093,  0.0872], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0192, 0.0074, 0.0039, 0.0091, 0.0636], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1179], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([2.9121], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0757, 0.0097, 0.0210, 0.0554, 0.1476], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0757, 0.0097, 0.0210, 0.0554, 0.1476], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2032,  0.3700,  0.0144, -0.1506,  0.1981], grad_fn=<SliceBackward0>)
  [Layer 13] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 13] Output sample values after mixer: tensor([ 0.2032,  0.3700,  0.0144, -0.1506,  0.1981], grad_fn=<SliceBackward0>)
  [Layer 13] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 13] Residual connection sample values: tensor([-0.5560,  0.0412, -0.4708,  0.0476, -0.1011], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 14/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4.3348], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4803], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0932,  0.0061, -0.0731,  0.0070, -0.0166], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 2.0288, -0.9910, -0.2903, -0.0584,  0.1990], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 2.0288, -0.9910, -0.2903, -0.0584,  0.1990], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0388,  0.1390,  0.8997, -0.6733,  0.3696], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.4617, 1.6350, 1.3078, 1.0112, 1.6313], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.2845, -0.1825, -0.0388,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0127,  0.1437, -0.3306, -0.1596, -0.0594], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0522,  0.1024, -0.3915, -0.2224, -0.0229], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0254,  0.0538, -0.1579, -0.0989, -0.0113], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0254,  0.0538, -0.1579, -0.0989, -0.0113], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0426, -0.0128,  0.0154, -0.0005,  0.1363], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1048, -0.1589, -0.1834, -0.1513,  0.7712], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.3184, -0.7621, -2.6670, -5.1836, -2.8487], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0620, 0.0602, 0.2725, 0.0448, 0.0690], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7651, 0.9551, 0.4835, 0.7927, 0.8214], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0254,  0.0538, -0.1579, -0.0989, -0.0113], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 6.7195e-05,  2.0255e-05, -2.4258e-05,  8.5543e-07, -2.1496e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 7.4943e-05,  1.0286e-05, -1.6018e-05, -4.7568e-06, -2.3087e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0014,  0.0049, -0.0100, -0.0056, -0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0117,  0.0267, -0.0738, -0.0456, -0.0048], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0117,  0.0267, -0.0738, -0.0456, -0.0048], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0210, -0.0072,  0.0092,  0.0013, -0.0005], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0238], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.4783], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1483, -0.0294,  0.0547,  0.0108, -0.0051], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1483, -0.0294,  0.0547,  0.0108, -0.0051], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.7292,  0.0125,  0.1506,  0.4868, -0.4555], grad_fn=<SliceBackward0>)
  [Layer 14] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 14] Output sample values after mixer: tensor([ 0.7292,  0.0125,  0.1506,  0.4868, -0.4555], grad_fn=<SliceBackward0>)
  [Layer 14] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 14] Residual connection sample values: tensor([ 0.1731,  0.0537, -0.3202,  0.5345, -0.5567], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 15/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([5.9460], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4101], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0249,  0.0066, -0.0423,  0.0661, -0.0766], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.9125,  0.7156, -0.2991, -0.6810, -0.8009], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.9125,  0.7156, -0.2991, -0.6810, -0.8009], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5150, -0.0566, -0.0907,  0.5252, -0.1374], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.5629,  0.0272, -0.5530,  2.3118,  0.9868], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.4773, -1.2982, -0.5150,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2667,  0.0114,  0.0321,  0.0033, -0.0335], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3042,  0.0046,  0.0073, -0.0145, -0.0589], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1291,  0.0023,  0.0037, -0.0072, -0.0286], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1291,  0.0023,  0.0037, -0.0072, -0.0286], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0409,  0.0246,  0.0231, -0.0715, -0.0530], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 8.6900e-02, -9.5793e-05,  2.3527e-02,  9.5661e-02,  6.9819e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2782, -0.6808, -2.7209, -0.1126, -3.8484], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0034, 0.0163, 0.0087, 0.0563, 0.0609], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9991, 0.9890, 0.9765, 0.9937, 0.7909], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1291,  0.0023,  0.0037, -0.0072, -0.0286], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.7960e-05, -1.0779e-05, -1.0132e-05,  3.1349e-05,  2.3228e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.6372e-05, -1.1425e-05, -9.9488e-06,  3.2825e-05,  3.3423e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.4381e-05,  3.7953e-06, -4.8213e-06,  1.7628e-05, -1.1980e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0220,  0.0004,  0.0006, -0.0012, -0.0049], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0220,  0.0004,  0.0006, -0.0012, -0.0049], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-3.6715e-02,  1.8943e-04, -7.8637e-05,  2.7641e-04,  1.2109e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0017], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([24.4661], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.9299,  0.0063, -0.0020,  0.0082,  0.0264], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.9299,  0.0063, -0.0020,  0.0082,  0.0264], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2954,  0.1365, -0.7334,  0.3982, -0.2194], grad_fn=<SliceBackward0>)
  [Layer 15] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 15] Output sample values after mixer: tensor([-0.2954,  0.1365, -0.7334,  0.3982, -0.2194], grad_fn=<SliceBackward0>)
  [Layer 15] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 15] Residual connection sample values: tensor([-0.1223,  0.1902, -1.0536,  0.9326, -0.7761], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 16/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([6.8907], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3809], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0182,  0.0236, -0.1435,  0.1163, -0.1108], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.4957, -0.3317, -0.6691,  0.2160,  0.2734], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.4957, -0.3317, -0.6691,  0.2160,  0.2734], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2864, -0.5774, -0.6704, -0.1343, -0.9662], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3481, 2.3460, 1.6635, 1.3945, 2.0550], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.8404,  0.8465,  0.2864,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1228, -0.2315, -0.1590, -0.1585, -0.2438], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0867, -0.2726, -0.1721, -0.2509, -0.2858], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0452, -0.1178, -0.0787, -0.1098, -0.1226], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0452, -0.1178, -0.0787, -0.1098, -0.1226], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0422, -0.1524,  0.0467, -0.0130, -0.2010], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2740, -0.0796,  0.0189,  0.8989, -0.1471], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6906, -0.1348, -1.3129, -3.7740, -1.2635], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2040, 0.5500, 0.2341, 0.2680, 0.1692], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5776, 0.9285, 0.7354, 0.3637, 0.8076], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0452, -0.1178, -0.0787, -0.1098, -0.1226], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0004, -0.0014,  0.0004, -0.0001, -0.0019], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0010, -0.0028,  0.0004,  0.0004,  0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0060, -0.0416, -0.0159, -0.0420, -0.0307], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0351, -0.1174, -0.0665, -0.1127, -0.1096], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0351, -0.1174, -0.0665, -0.1127, -0.1096], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0096,  0.0163,  0.0151, -0.0135, -0.0170], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1024], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.1243], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0386,  0.0513,  0.0569, -0.0454, -0.0588], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0386,  0.0513,  0.0569, -0.0454, -0.0588], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.1312, -0.6319, -0.4609,  0.0696,  0.5448], grad_fn=<SliceBackward0>)
  [Layer 16] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 16] Output sample values after mixer: tensor([ 1.1312, -0.6319, -0.4609,  0.0696,  0.5448], grad_fn=<SliceBackward0>)
  [Layer 16] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 16] Residual connection sample values: tensor([ 1.0089, -0.4417, -1.5145,  1.0023, -0.2313], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 17/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([8.3107], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3469], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1353, -0.0498, -0.1810,  0.1108, -0.0299], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5495, -0.2825,  0.1176, -1.2854,  0.0644], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5495, -0.2825,  0.1176, -1.2854,  0.0644], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.1687, -0.3761,  0.4941, -1.7231,  0.2337], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.7778, -0.3502, -0.4607,  1.9190,  0.9748], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.8958, -0.6822,  0.1687,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0019,  0.0606, -0.1278,  0.1486, -0.0408], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0337,  0.0344, -0.1422,  0.1432, -0.0281], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0166,  0.0175, -0.0660,  0.0767, -0.0139], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0166,  0.0175, -0.0660,  0.0767, -0.0139], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0422, -0.0384, -0.1379,  0.1863,  0.0968], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0042, -0.1996, -0.1393,  0.6470,  0.0061], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.1571, -11.4668, -14.2150,  -0.1286, -14.2428],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0011, 0.0072, 0.0137, 0.1405, 0.0186], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9987, 0.9203, 0.8233, 0.9821, 0.7671], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0166,  0.0175, -0.0660,  0.0767, -0.0139], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-7.8200e-07,  7.1086e-07,  2.5556e-06, -3.4525e-06, -1.7937e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.0287e-05,  1.3065e-05,  4.2556e-05, -1.7536e-04, -6.5419e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.5317e-04, -5.2203e-05, -3.1134e-04,  1.6370e-04,  5.7100e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0110,  0.0112, -0.0429,  0.0496, -0.0089], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0110,  0.0112, -0.0429,  0.0496, -0.0089], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0022, -0.0014, -0.0027, -0.0138, -0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0323], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.5631], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0190, -0.0144, -0.0214, -0.1348, -0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0190, -0.0144, -0.0214, -0.1348, -0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.3120, -0.3684, -0.8411,  0.3650, -0.4398], grad_fn=<SliceBackward0>)
  [Layer 17] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 17] Output sample values after mixer: tensor([-0.3120, -0.3684, -0.8411,  0.3650, -0.4398], grad_fn=<SliceBackward0>)
  [Layer 17] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 17] Residual connection sample values: tensor([ 0.6969, -0.8101, -2.3556,  1.3672, -0.6711], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 18/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([10.0761], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3150], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0760, -0.0747, -0.2297,  0.1251, -0.0704], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4531, -1.2439, -0.3550, -1.0438, -0.1651], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4531, -1.2439, -0.3550, -1.0438, -0.1651], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5837,  0.0168,  0.4004, -0.6535,  0.0188], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3965, 1.6150, 1.2908, 1.9756, 1.9115], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.1965,  0.4484, -0.5837,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0158, -0.0015,  0.0928, -0.3820, -0.1473], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0258, -0.2669,  0.3726, -0.3958, -0.1894], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0127, -0.1157,  0.2206, -0.1592, -0.0858], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0127, -0.1157,  0.2206, -0.1592, -0.0858], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1276, -0.0578, -0.0648,  0.2511,  0.0726], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2773,  0.0539, -0.2623,  0.0503,  0.1971], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3011, -1.4686, -1.2083, -1.2129, -2.5875], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3405, 0.2484, 0.2446, 0.4414, 0.2593], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6421, 0.6943, 0.7441, 0.5854, 0.5113], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0127, -0.1157,  0.2206, -0.1592, -0.0858], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0006,  0.0003,  0.0003, -0.0011, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0006,  0.0002,  0.0011, -0.0011, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0048, -0.1330,  0.1588, -0.0470,  0.0579], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0073, -0.1554,  0.2014, -0.0777,  0.0413], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0073, -0.1554,  0.2014, -0.0777,  0.0413], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0013,  0.0432, -0.0295,  0.0211, -0.0031], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0337], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.4470], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0091,  0.1264, -0.1567,  0.1445, -0.0337], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0091,  0.1264, -0.1567,  0.1445, -0.0337], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1299,  0.3443, -0.1918,  0.5538, -0.0495], grad_fn=<SliceBackward0>)
  [Layer 18] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 18] Output sample values after mixer: tensor([-0.1299,  0.3443, -0.1918,  0.5538, -0.0495], grad_fn=<SliceBackward0>)
  [Layer 18] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 18] Residual connection sample values: tensor([ 0.5670, -0.4657, -2.5474,  1.9210, -0.7207], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 19/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([16.1706], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2487], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0481, -0.0341, -0.2017,  0.1401, -0.0610], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5210,  0.2720,  0.0629,  1.1645,  0.0747], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5210,  0.2720,  0.0629,  1.1645,  0.0747], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1395, -0.2058, -0.3274,  0.8154,  0.1755], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4925, 2.2219, 2.3848, 2.2397, 1.5183], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.2690, -0.9309, -0.1395,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1933, -0.0920, -0.1004,  0.2129, -0.0301], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2289, -0.1163, -0.1054,  0.1703, -0.0631], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1014, -0.0548, -0.0499,  0.0924, -0.0305], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1014, -0.0548, -0.0499,  0.0924, -0.0305], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1425, -0.1772, -0.0947,  0.1147,  0.0188], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1298, -0.0324, -0.0043,  0.1070, -0.1885], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9436, -1.8179, -2.0862, -1.0006, -0.9650], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2223, 0.2386, 0.2262, 0.4013, 0.2935], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6491, 0.6481, 0.6238, 0.6693, 0.7533], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1014, -0.0548, -0.0499,  0.0924, -0.0305], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0032,  0.0040,  0.0021, -0.0026, -0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.3260e-03,  6.1719e-03,  1.6236e-05, -4.6097e-03, -2.3557e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0114, -0.0068, -0.0033,  0.0135, -0.0034], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0228, -0.0130, -0.0089,  0.0239, -0.0068], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0228, -0.0130, -0.0089,  0.0239, -0.0068], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0044, -0.0020, -0.0003,  0.0212, -0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0018], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([23.5291], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1262, -0.0598, -0.0111,  0.5954, -0.0105], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1262, -0.0598, -0.0111,  0.5954, -0.0105], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.8516, -0.2959, -1.7036,  0.3809, -0.8233], grad_fn=<SliceBackward0>)
  [Layer 19] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 19] Output sample values after mixer: tensor([ 0.8516, -0.2959, -1.7036,  0.3809, -0.8233], grad_fn=<SliceBackward0>)
  [Layer 19] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 19] Residual connection sample values: tensor([ 1.4186, -0.7616, -4.2510,  2.3019, -1.5440], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 20/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([19.5862], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2260], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1239, -0.0570, -0.3407,  0.1707, -0.1307], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3966, -0.6235, -0.8585,  0.5121, -0.7068], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3966, -0.6235, -0.8585,  0.5121, -0.7068], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.2217,  0.2840, -0.1832, -0.5208,  0.6880], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3838, 1.8944, 2.4198, 1.0937, 1.3856], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.5822, -0.5412, -1.2217,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0906,  0.1801,  0.0119, -0.0187, -0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0521,  0.1886,  0.0784, -0.0375, -0.0300], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0267,  0.1032,  0.0407, -0.0184, -0.0148], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0267,  0.1032,  0.0407, -0.0184, -0.0148], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1095,  0.0037,  0.1725, -0.2119,  0.2270], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1790, -0.1955,  0.0169, -0.0050,  0.6946], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.6216, -5.0389, -1.2056, -1.6435, -1.3345], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1119, 0.0732, 0.0942, 0.1317, 0.1157], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8341, 0.6916, 0.8926, 0.8054, 0.8570], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0267,  0.1032,  0.0407, -0.0184, -0.0148], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.2770e-04,  1.0959e-05,  5.1627e-04, -6.3403e-04,  6.7922e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0018, -0.0002, -0.0023, -0.0005, -0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0075,  0.0057,  0.0070, -0.0104, -0.0094], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0073,  0.0065,  0.0073, -0.0106, -0.0095], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0073,  0.0065,  0.0073, -0.0106, -0.0095], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0012, -0.0014, -0.0019, -0.0034,  0.0022], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0055], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.4326], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0209, -0.0273, -0.0480, -0.0658,  0.0387], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0209, -0.0273, -0.0480, -0.0658,  0.0387], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1816, -1.4288,  0.1885,  0.9340, -0.5871], grad_fn=<SliceBackward0>)
  [Layer 20] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 20] Output sample values after mixer: tensor([ 0.1816, -1.4288,  0.1885,  0.9340, -0.5871], grad_fn=<SliceBackward0>)
  [Layer 20] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 20] Residual connection sample values: tensor([ 1.6002, -2.1904, -4.0625,  3.2359, -2.1311], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 21/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([26.7229], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1934], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0908, -0.1128, -0.1984,  0.1524, -0.1130], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4713, -0.3375, -0.4072,  0.1639, -1.0741], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4713, -0.3375, -0.4072,  0.1639, -1.0741], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.4314,  0.1311, -0.2925, -0.4351,  0.3954], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.6804, 2.0218, 1.2529, 1.3972, 1.1163], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.5341,  0.1242, -0.4314,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0678,  0.0651,  0.0439,  0.0755, -0.0557], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0365,  0.0350,  0.0587,  0.0704, -0.0278], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0186,  0.0178,  0.0302,  0.0365, -0.0137], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0186,  0.0178,  0.0302,  0.0365, -0.0137], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0625, -0.1337,  0.0330, -0.0239, -0.0249], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0163, -0.0894, -0.0475, -0.0077,  0.0086], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.2092, -0.0434, -3.8147, -6.6624, -0.0228], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1121, 0.0316, 0.1016, 0.0943, 0.0238], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6979, 0.9986, 0.6787, 0.5335, 0.9995], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0186,  0.0178,  0.0302,  0.0365, -0.0137], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.3026e-04, -2.7859e-04,  6.8847e-05, -4.9841e-05, -5.1801e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.4950e-04, -1.9721e-04,  6.6297e-05, -7.6711e-05,  1.5907e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0002,  0.0009,  0.0008,  0.0009, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0035,  0.0040,  0.0061,  0.0073, -0.0027], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0035,  0.0040,  0.0061,  0.0073, -0.0027], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0006, -0.0006, -0.0010,  0.0006,  0.0007], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([75.3763], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0602, -0.0495, -0.1164,  0.0632,  0.0651], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0602, -0.0495, -0.1164,  0.0632,  0.0651], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([1.0338, 0.3634, 0.9032, 0.7079, 0.3020], grad_fn=<SliceBackward0>)
  [Layer 21] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 21] Output sample values after mixer: tensor([1.0338, 0.3634, 0.9032, 0.7079, 0.3020], grad_fn=<SliceBackward0>)
  [Layer 21] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 21] Residual connection sample values: tensor([ 2.6340, -1.8270, -3.1594,  3.9438, -1.8291], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 22/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([31.7535], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1775], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2156, -0.1259, -0.2308,  0.2655, -0.1403], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1859,  0.2323,  0.0508, -0.1822,  0.0410], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1859,  0.2323,  0.0508, -0.1822,  0.0410], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0386,  0.9738, -1.0978, -0.6299,  0.0491], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.2424, 1.9756, 1.1509, 1.3692, 1.5263], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.8760, -0.9552, -0.0386,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.4292,  0.2258, -0.1630,  0.1204,  0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.4769,  0.1471,  0.1563,  0.0794, -0.0646], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1826,  0.0789,  0.0843,  0.0413, -0.0313], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1826,  0.0789,  0.0843,  0.0413, -0.0313], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0239,  0.0218, -0.0058,  0.0658, -0.0271], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0466, -0.0231, -0.0848, -0.0015, -0.0491], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.1489, -3.5006, -2.8321, -5.5396, -1.7186], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0335, 0.2610, 0.1850, 0.1697, 0.0131], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8702, 0.4011, 0.5921, 0.3905, 0.9778], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1826,  0.0789,  0.0843,  0.0413, -0.0313], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.4649e-04, -1.3367e-04,  3.5675e-05, -4.0280e-04,  1.6581e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.2585e-04, -1.4555e-04, -8.2574e-06, -2.8769e-04,  1.0208e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0027,  0.0011,  0.0019,  0.0008, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0469,  0.0203,  0.0223,  0.0108, -0.0081], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0469,  0.0203,  0.0223,  0.0108, -0.0081], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0048,  0.0026,  0.0006, -0.0009, -0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0017], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([23.8663], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0379,  0.0587,  0.0074, -0.0281, -0.0035], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0379,  0.0587,  0.0074, -0.0281, -0.0035], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3545, -0.2997, -1.9863, -1.4246,  0.6908], grad_fn=<SliceBackward0>)
  [Layer 22] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 22] Output sample values after mixer: tensor([ 0.3545, -0.2997, -1.9863, -1.4246,  0.6908], grad_fn=<SliceBackward0>)
  [Layer 22] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 22] Residual connection sample values: tensor([ 2.9885, -2.1267, -5.1456,  2.5192, -1.1384], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 23/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([37.3414], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1636], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1582, -0.0969, -0.2494,  0.1153, -0.0584], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1644,  0.0592,  0.2263,  0.9335, -0.3532], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1644,  0.0592,  0.2263,  0.9335, -0.3532], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.2822,  0.2310, -0.1462, -0.0115, -0.0105], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.9848, 0.4885, 1.7771, 1.9624, 1.9770], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.2347,  0.1229, -0.2822,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1114, -0.0351, -0.0568,  0.0161, -0.0506], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1338, -0.0682, -0.0681,  0.0140, -0.1000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0624, -0.0330, -0.0329,  0.0070, -0.0475], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0624, -0.0330, -0.0329,  0.0070, -0.0475], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0325, -0.0533,  0.0740, -0.0104, -0.0021], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0359, -0.0323,  0.1763, -0.0452,  0.0109], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0811, -3.7998, -0.0826, -0.4878, -1.4532], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0832, 0.0693, 0.0599, 0.0103, 0.0075], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9933, 0.7685, 0.9951, 0.9950, 0.9892], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0624, -0.0330, -0.0329,  0.0070, -0.0475], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.6862e-04,  2.7649e-04, -3.8443e-04,  5.4041e-05,  1.0898e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.7136e-04,  2.8083e-04, -3.9812e-04,  5.1862e-05, -6.6578e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.4376e-03,  7.0002e-05, -7.6557e-04, -2.4149e-04, -4.3375e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-1.0598e-04,  7.7301e-04, -6.3751e-05, -3.9141e-04,  5.7954e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-1.0598e-04,  7.7301e-04, -6.3751e-05, -3.9141e-04,  5.7954e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 7.9978e-06,  2.3538e-05, -8.0247e-06, -2.6228e-04, -8.4456e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([58.8511], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0021,  0.0008, -0.0005, -0.0246, -0.0232], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0021,  0.0008, -0.0005, -0.0246, -0.0232], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0223,  0.6791, -1.9083, -0.4705, -0.2578], grad_fn=<SliceBackward0>)
  [Layer 23] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 23] Output sample values after mixer: tensor([-0.0223,  0.6791, -1.9083, -0.4705, -0.2578], grad_fn=<SliceBackward0>)
  [Layer 23] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 23] Residual connection sample values: tensor([ 2.9662, -1.4476, -7.0539,  2.0487, -1.3961], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 24/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([46.7013], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1463], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1155, -0.0538, -0.2533,  0.0710, -0.0527], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3530, -0.3176,  0.4049,  0.2228, -0.0869], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3530, -0.3176,  0.4049,  0.2228, -0.0869], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.2937e-01,  2.4059e-01, -3.1590e-05,  1.8660e-02,  2.4709e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0847, 1.2064, 1.1677, 2.5764, 1.9354], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.4722,  0.7547, -0.1294,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0461, -0.0663,  0.0082,  0.0191,  0.1199], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0428, -0.0663,  0.0043,  0.0175,  0.1151], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0218, -0.0321,  0.0021,  0.0088,  0.0609], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0218, -0.0321,  0.0021,  0.0088,  0.0609], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0134, -0.0354,  0.1081, -0.0232, -0.0208], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0209, -0.1298, -0.2631, -0.2014,  0.4711], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0742, -3.4497, -3.2885, -0.1609, -2.6945], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0162, 0.0940, 0.1401, 0.0587, 0.1408], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9988, 0.7230, 0.6309, 0.9906, 0.6842], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0218, -0.0321,  0.0021,  0.0088,  0.0609], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.7386e-06, -1.2535e-05,  3.8256e-05, -8.2155e-06, -7.3667e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-8.4227e-05,  3.5487e-04,  1.7295e-04,  3.0294e-05,  2.6747e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0013, -0.0004, -0.0004, -0.0007, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0014, -0.0003, -0.0004, -0.0007, -0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0014, -0.0003, -0.0004, -0.0007, -0.0009], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-2.9688e-04,  3.4809e-05, -9.8354e-05, -9.1705e-05,  3.5964e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0001], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([85.4939], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0240,  0.0040, -0.0102, -0.0346,  0.0080], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0240,  0.0040, -0.0102, -0.0346,  0.0080], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.5547, -0.5258, -0.4578, -0.4928, -0.9916], grad_fn=<SliceBackward0>)
  [Layer 24] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 24] Output sample values after mixer: tensor([ 0.5547, -0.5258, -0.4578, -0.4928, -0.9916], grad_fn=<SliceBackward0>)
  [Layer 24] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 24] Residual connection sample values: tensor([ 3.5209, -1.9734, -7.5117,  1.5559, -2.3878], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 25/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([60.5288], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1285], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1349, -0.0691, -0.2718,  0.0526, -0.0905], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0653, -0.6429,  1.0866,  0.3422, -0.1702], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0653, -0.6429,  1.0866,  0.3422, -0.1702], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3083,  0.1800, -0.7194,  0.0353, -0.4112], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.9757, 0.0291, 2.8736, 2.9824, 1.5729], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.6639,  0.2826,  0.3083,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0258, -0.0102,  0.0985, -0.0462,  0.1863], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0284, -0.0384,  0.0871,  0.0146,  0.1805], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0140, -0.0188,  0.0455,  0.0074,  0.0984], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0140, -0.0188,  0.0455,  0.0074,  0.0984], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0390, -0.1139,  0.0694,  0.0065,  0.0402], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1288,  0.0425,  0.1478,  0.0661, -0.0080], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -0.3702,  -1.5045,  -5.7210,  -0.8176, -14.6662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.7229, 0.0066, 0.3852, 0.1305, 0.1483], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7652, 0.9902, 0.1104, 0.8988, 0.1136], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0140, -0.0188,  0.0455,  0.0074,  0.0984], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.9509e-04,  1.1527e-03, -7.0174e-04, -6.6155e-05, -4.0679e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.1338e-04,  1.1928e-03, -1.7960e-03,  4.4102e-04, -4.5661e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0026, -0.0031,  0.0068,  0.0007,  0.0145], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0028, -0.0033,  0.0073,  0.0008,  0.0155], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0028, -0.0033,  0.0073,  0.0008,  0.0155], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 8.7452e-05,  7.3211e-04,  5.9263e-03,  1.6298e-04, -1.2064e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([70.6174], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0074,  0.0423,  0.5525,  0.0091, -0.1469], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0074,  0.0423,  0.5525,  0.0091, -0.1469], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.9404, -0.1274, -2.4801,  0.4869, -1.6695], grad_fn=<SliceBackward0>)
  [Layer 25] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 25] Output sample values after mixer: tensor([-0.9404, -0.1274, -2.4801,  0.4869, -1.6695], grad_fn=<SliceBackward0>)
  [Layer 25] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 25] Residual connection sample values: tensor([ 2.5805, -2.1008, -9.9918,  2.0428, -4.0573], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 26/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([79.4305], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1122], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1117, -0.0841, -0.4029,  0.0808, -0.1717], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1983,  0.4259, -0.8889, -0.3101,  0.0464], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1983,  0.4259, -0.8889, -0.3101,  0.0464], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5564, -0.5066,  0.2741,  0.4958, -1.0500], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.9146, 2.0827, 0.9099, 0.9223, 3.4771], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.4492,  0.8614, -0.5564,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.5272,  0.3100, -0.0203, -0.0836,  0.2919], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.6157,  0.2540,  0.0438, -0.1106,  0.3000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.2160,  0.1430,  0.0224, -0.0522,  0.1724], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.2160,  0.1430,  0.0224, -0.0522,  0.1724], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0315,  0.0725,  0.0809, -0.0097,  0.0450], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2259, -0.0432,  0.0863,  0.0162, -0.0740], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9595, -0.3945, -0.8420, -1.4275, -0.1466], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3339, 0.6561, 0.1487, 0.2512, 0.3051], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7259, 0.7720, 0.8823, 0.6987, 0.9563], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.2160,  0.1430,  0.0224, -0.0522,  0.1724], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0023, -0.0052, -0.0058,  0.0007, -0.0032], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0023, -0.0052, -0.0059,  0.0007, -0.0033], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0140,  0.0114,  0.0023, -0.0032,  0.0143], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0416,  0.0297,  0.0052, -0.0098,  0.0363], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0416,  0.0297,  0.0052, -0.0098,  0.0363], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0037,  0.0076, -0.0013,  0.0013,  0.0009], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0008], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([35.6969], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0663,  0.3029, -0.0452,  0.0662,  0.0386], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0663,  0.3029, -0.0452,  0.0662,  0.0386], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.3479, -1.4131, -0.8430, -0.0228, -0.1140], grad_fn=<SliceBackward0>)
  [Layer 26] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 26] Output sample values after mixer: tensor([-0.3479, -1.4131, -0.8430, -0.0228, -0.1140], grad_fn=<SliceBackward0>)
  [Layer 26] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 26] Residual connection sample values: tensor([  2.2326,  -3.5139, -10.8348,   2.0200,  -4.1714],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 27/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([87.6771], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1068], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0998, -0.1433, -0.4740,  0.0812, -0.1939], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0349, -0.6725, -0.2102,  0.3837, -0.0668], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0349, -0.6725, -0.2102,  0.3837, -0.0668], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2306, -0.9458, -0.2548,  1.6645,  0.0983], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.8430, 1.1612, 1.5320, 2.2598, 2.0136], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.7173, -0.1709,  0.2306,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0244,  0.1081,  0.0008, -0.0537,  0.2220], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0016,  0.0716, -0.0092, -0.2556,  0.1922], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0008,  0.0371, -0.0046, -0.1115,  0.1053], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0008,  0.0371, -0.0046, -0.1115,  0.1053], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0644, -0.0050,  0.0190,  0.0006,  0.0086], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0334, -0.2267, -0.1404, -0.2380, -0.2338], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3662, -1.3799, -1.8268, -2.0409, -2.3490], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2411, 0.1431, 0.2077, 0.1499, 0.2968], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7194, 0.8208, 0.6843, 0.7365, 0.4980], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0008,  0.0371, -0.0046, -0.1115,  0.1053], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.2149e-05,  9.4028e-07, -3.5851e-06, -1.1827e-07, -1.6307e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 3.3747e-04, -1.6387e-04,  1.1089e-03,  6.3582e-05,  7.5930e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0035,  0.0011, -0.0096, -0.0150,  0.0053], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0034,  0.0048, -0.0100, -0.0263,  0.0160], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0034,  0.0048, -0.0100, -0.0263,  0.0160], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-5.8133e-05, -1.0958e-03,  9.4401e-04, -6.0015e-03, -5.1505e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0047], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([14.5491], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0014, -0.0196,  0.0292, -0.1670, -0.0088], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0014, -0.0196,  0.0292, -0.1670, -0.0088], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.7509,  0.2400, -0.0609,  0.9285,  0.0589], grad_fn=<SliceBackward0>)
  [Layer 27] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 27] Output sample values after mixer: tensor([ 0.7509,  0.2400, -0.0609,  0.9285,  0.0589], grad_fn=<SliceBackward0>)
  [Layer 27] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 27] Residual connection sample values: tensor([  2.9835,  -3.2739, -10.8957,   2.9485,  -4.1125],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 28/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([99.8259], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1001], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1212, -0.1245, -0.4185,  0.1101, -0.1654], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3594,  1.5042,  0.8451,  1.1041, -0.2341], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3594,  1.5042,  0.8451,  1.1041, -0.2341], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6864, -2.5336,  0.2344, -0.8917, -0.5260], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4198, 0.5911, 1.2034, 1.5696, 1.9637], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.5642, -1.2131, -0.6864,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0539,  0.5109,  0.0717, -0.1708,  0.0697], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0038,  0.4996,  0.0581, -0.1822,  0.1743], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0019,  0.3109,  0.0299, -0.0828,  0.0947], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0019,  0.3109,  0.0299, -0.0828,  0.0947], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0670,  0.0111, -0.1395,  0.0876,  0.4040], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0636, -0.1343,  0.4556, -0.1273,  0.5132], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2728, -3.9978, -2.5177, -2.1714, -2.8655], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0415, 0.0781, 0.1329, 0.0797, 0.1039], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9486, 0.7318, 0.7156, 0.8410, 0.7425], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0019,  0.3109,  0.0299, -0.0828,  0.0947], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-5.3369e-06, -8.8134e-07,  1.1112e-05, -6.9761e-06, -3.2178e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 3.3339e-05, -2.0085e-04, -2.1222e-05,  3.9405e-04,  2.0496e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0004,  0.0068,  0.0010, -0.0024,  0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 1.8956e-05,  7.4173e-02,  7.4551e-03, -2.0362e-02,  2.3464e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 1.8956e-05,  7.4173e-02,  7.4551e-03, -2.0362e-02,  2.3464e-02],
       grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-2.8007e-06,  9.1286e-02,  4.4070e-03, -1.6884e-02, -2.4266e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0014], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([27.0908], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-1.5708e-04,  3.3931e+00,  1.5518e-01, -6.8655e-01, -9.5719e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-1.5708e-04,  3.3931e+00,  1.5518e-01, -6.8655e-01, -9.5719e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1598, -1.4754, -3.6092,  2.4462, -1.6055], grad_fn=<SliceBackward0>)
  [Layer 28] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 28] Output sample values after mixer: tensor([ 0.1598, -1.4754, -3.6092,  2.4462, -1.6055], grad_fn=<SliceBackward0>)
  [Layer 28] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 28] Residual connection sample values: tensor([  3.1432,  -4.7493, -14.5049,   5.3947,  -5.7180],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 29/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([123.4366], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0900], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1093, -0.1580, -0.4832,  0.1731, -0.1978], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3071, -0.7980,  0.3807, -0.5070,  0.1768], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3071, -0.7980,  0.3807, -0.5070,  0.1768], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.8003,  0.1719,  0.6837, -1.1741, -0.8644], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.4689, 1.3236, 1.5211, 2.9145, 1.7368], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.6059, 0.7516, 0.8003, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0489, -0.0372, -0.1213,  0.2312, -0.0845], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0623, -0.0717, -0.1185,  0.1708, -0.1976], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0302, -0.0346, -0.0557,  0.0927, -0.0891], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0302, -0.0346, -0.0557,  0.0927, -0.0891], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0390, -0.0167, -0.0240, -0.0316,  0.0224], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2450, -0.2761, -0.2119, -0.2742, -0.2729], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8072, -2.1170, -1.9257, -0.2904, -2.0499], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2258, 0.1743, 0.2629, 0.0286, 0.3134], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6649, 0.6915, 0.6027, 0.9917, 0.5260], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0302, -0.0346, -0.0557,  0.0927, -0.0891], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0003,  0.0001,  0.0002,  0.0002, -0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0003,  0.0001,  0.0002,  0.0003, -0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0043, -0.0047, -0.0080,  0.0132, -0.0128], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0352, -0.0400, -0.0650,  0.1079, -0.1039], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0352, -0.0400, -0.0650,  0.1079, -0.1039], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0062,  0.0099, -0.0147, -0.0206, -0.0100], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0147], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.2572], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0562,  0.0843, -0.1981, -0.2484, -0.1071], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0562,  0.0843, -0.1981, -0.2484, -0.1071], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.4030,  0.5272, -2.5585, -1.9143, -0.1489], grad_fn=<SliceBackward0>)
  [Layer 29] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 29] Output sample values after mixer: tensor([-2.4030,  0.5272, -2.5585, -1.9143, -0.1489], grad_fn=<SliceBackward0>)
  [Layer 29] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 29] Residual connection sample values: tensor([  0.7402,  -4.2221, -17.0633,   3.4804,  -5.8668],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 30/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([157.2648], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0797], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0251, -0.1410, -0.5661,  0.1089, -0.2047], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.9620, -0.2204, -1.2325,  0.2803,  0.1174], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.9620, -0.2204, -1.2325,  0.2803,  0.1174], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.6974, -0.6956, -0.8761, -0.0417, -0.3826], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.6464, 2.6563, 1.8557, 2.3757, 2.2897], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 1.0781, 0.1552, 0.6974, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1111, -0.0957, -0.3620,  0.0167,  0.1113], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0879, -0.0820, -0.3288, -0.0014,  0.0839], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0459, -0.0393, -0.1376, -0.0007,  0.0437], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0459, -0.0393, -0.1376, -0.0007,  0.0437], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1032, -0.0846, -0.0151,  0.2519, -0.0100], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2619, -0.2693, -0.2269, -0.1221,  0.2676], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0150, -0.4675, -0.4280, -0.7895, -0.4175], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0205, 0.9416, 0.9981, 0.4795, 0.7323], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9794, 0.6439, 0.6523, 0.6848, 0.7366], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0459, -0.0393, -0.1376, -0.0007,  0.0437], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 9.7061e-05, -7.9533e-05, -1.4196e-05,  2.3680e-04, -9.3823e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.3245e-04, -8.1442e-05, -7.8848e-05,  4.9466e-04, -3.8193e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 5.6285e-04, -4.9793e-04, -1.2433e-03,  5.1105e-05,  8.8877e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0571, -0.0489, -0.1708, -0.0008,  0.0548], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0571, -0.0489, -0.1708, -0.0008,  0.0548], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0152,  0.0048,  0.0475, -0.0001,  0.0034], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0136], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.5680], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1869,  0.0600,  0.3606, -0.0013,  0.0309], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1869,  0.0600,  0.3606, -0.0013,  0.0309], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0418,  0.5388, -3.6971, -2.4117, -0.1575], grad_fn=<SliceBackward0>)
  [Layer 30] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 30] Output sample values after mixer: tensor([ 0.0418,  0.5388, -3.6971, -2.4117, -0.1575], grad_fn=<SliceBackward0>)
  [Layer 30] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 30] Residual connection sample values: tensor([  0.7820,  -3.6833, -20.7604,   1.0687,  -6.0244],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 31/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([181.5350], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0742], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0248, -0.1145, -0.6470,  0.0324, -0.1928], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3594,  0.5159, -2.0328,  0.5459,  0.0077], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3594,  0.5159, -2.0328,  0.5459,  0.0077], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.1248, -0.7623,  0.8037, -0.4311, -0.6283], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3652, 2.1122, 2.3954, 1.2159, 1.6570], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.5427, -0.3020,  1.1248,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([0.1980, 0.1089, 0.0445, 0.0775, 0.1007], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([0.1975, 0.0986, 0.0455, 0.0756, 0.0954], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([0.1085, 0.0517, 0.0233, 0.0392, 0.0500], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([0.1085, 0.0517, 0.0233, 0.0392, 0.0500], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.4094,  0.1836,  0.0726, -0.2763, -0.0788], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0736, -0.1738, -0.1900, -0.1299, -0.1121], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.9478, -3.5384, -4.7060, -2.4630, -0.9027], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1235, 0.1739, 0.1609, 0.1888, 0.2008], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6949, 0.5405, 0.4689, 0.6282, 0.8342], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([0.1085, 0.0517, 0.0233, 0.0392, 0.0500], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0055,  0.0025,  0.0010, -0.0037, -0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0052,  0.0026,  0.0007, -0.0039, -0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([0.0112, 0.0056, 0.0015, 0.0068, 0.0145], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([0.0858, 0.0412, 0.0175, 0.0338, 0.0489], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([0.0858, 0.0412, 0.0175, 0.0338, 0.0489], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0127,  0.0133, -0.0041,  0.0117,  0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0144], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.3316], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2080,  0.1907, -0.0526,  0.1589,  0.0030], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2080,  0.1907, -0.0526,  0.1589,  0.0030], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.6009, -2.5035, -1.5857, -0.2399,  0.7096], grad_fn=<SliceBackward0>)
  [Layer 31] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 31] Output sample values after mixer: tensor([-0.6009, -2.5035, -1.5857, -0.2399,  0.7096], grad_fn=<SliceBackward0>)
  [Layer 31] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 31] Residual connection sample values: tensor([  0.1812,  -6.1868, -22.3462,   0.8288,  -5.3148],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 32/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([218.9084], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0676], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0056, -0.1906, -0.6866,  0.0239, -0.1695], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1442,  0.0276, -1.4150, -2.0372, -0.6697], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1442,  0.0276, -1.4150, -2.0372, -0.6697], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.9272, -0.0283,  0.7858, -0.0357,  0.5693], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.5474, 3.8990, 1.8876, 1.5222, 1.7110], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0430, -0.1956, -0.9272,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0470, -0.3115,  0.0213,  0.0152,  0.2118], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0841, -0.3636,  0.0054,  0.0277,  0.2049], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0438, -0.1491,  0.0027,  0.0140,  0.1129], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0438, -0.1491,  0.0027,  0.0140,  0.1129], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0028,  0.0527,  0.0182, -0.1035,  0.0302], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0784, -0.2507, -0.1959, -0.2784, -0.2311], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6971, -2.0893, -1.7967, -1.3894, -1.0395], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3235, 0.2385, 0.5910, 0.3960, 0.6691], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7981, 0.6076, 0.3458, 0.5769, 0.4988], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0438, -0.1491,  0.0027,  0.0140,  0.1129], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.9880e-05,  7.4731e-04,  2.5863e-04, -1.4684e-03,  4.2800e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 3.2170e-04,  1.1564e-03,  7.7911e-04, -1.5503e-03,  4.6823e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0088, -0.0202, -0.0017, -0.0061,  0.0098], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0193, -0.0560, -0.0010, -0.0028,  0.0369], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0193, -0.0560, -0.0010, -0.0028,  0.0369], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0015, -0.0008,  0.0003,  0.0007, -0.0084], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0166], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.7539], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0141, -0.0059,  0.0041,  0.0079, -0.0826], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0141, -0.0059,  0.0041,  0.0079, -0.0826], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1052, -2.1680, -0.3717, -2.4600,  2.8201], grad_fn=<SliceBackward0>)
  [Layer 32] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 32] Output sample values after mixer: tensor([ 0.1052, -2.1680, -0.3717, -2.4600,  2.8201], grad_fn=<SliceBackward0>)
  [Layer 32] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 32] Residual connection sample values: tensor([  0.2863,  -8.3548, -22.7179,  -1.6313,  -2.4947],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 33/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([336.4839], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0545], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0074, -0.2224, -0.5944, -0.0414, -0.0664], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7503,  0.1575, -0.9707,  0.2248,  0.3062], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7503,  0.1575, -0.9707,  0.2248,  0.3062], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.3028, -1.5782, -0.0956, -0.7930,  0.9016], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.9595,  2.6922,  2.8783,  2.3549, -0.6103], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.5178, -0.0701, -0.3028,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0408, -0.0758,  0.0359, -0.1259, -0.1545], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0539, -0.1252,  0.0627, -0.1272, -0.1557], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0262, -0.0587,  0.0324, -0.0595, -0.0718], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0262, -0.0587,  0.0324, -0.0595, -0.0718], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2342, -0.0579, -0.0094, -0.0216,  0.0108], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0048, -0.1210, -0.1734, -0.0976, -0.0265], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9791, -9.6938, -6.1678, -0.1135, -2.0903], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0045, 0.1382, 0.2085, 0.0825, 0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9911, 0.2620, 0.2763, 0.9907, 0.9967], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0262, -0.0587,  0.0324, -0.0595, -0.0718], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.7767e-05,  6.8690e-06,  1.1124e-06,  2.5635e-06, -1.2860e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.7954e-04, -1.1883e-05, -1.9510e-05, -1.1325e-06,  6.9543e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 6.0502e-05,  2.6161e-04,  4.2285e-04, -9.2120e-05, -5.1229e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0273, -0.0608,  0.0341, -0.0621, -0.0753], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0273, -0.0608,  0.0341, -0.0621, -0.0753], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0066, -0.0052, -0.0091, -0.0078, -0.0133], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0079], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([11.2792], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1114, -0.0523, -0.1160, -0.0967, -0.1871], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1114, -0.0523, -0.1160, -0.0967, -0.1871], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.4679, -0.3447, -1.2999, -1.6553, -0.9564], grad_fn=<SliceBackward0>)
  [Layer 33] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 33] Output sample values after mixer: tensor([ 2.4679, -0.3447, -1.2999, -1.6553, -0.9564], grad_fn=<SliceBackward0>)
  [Layer 33] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 33] Residual connection sample values: tensor([  2.7542,  -8.6995, -24.0178,  -3.2866,  -3.4511],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 34/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([349.5002], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0535], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0568, -0.1900, -0.4946, -0.0683, -0.0746], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.7766,  0.7286,  0.4954, -0.7633, -1.4691], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.7766,  0.7286,  0.4954, -0.7633, -1.4691], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3432, -0.3676, -0.6552, -0.6366,  0.4173], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.2048, 1.6475, 2.4522, 1.5478, 1.4383], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0410, 0.5418, 0.3432, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0928,  0.0573, -0.0907,  0.1625,  0.0884], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1247,  0.0833, -0.1026,  0.1230,  0.0799], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0585,  0.0434, -0.0487,  0.0653,  0.0415], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0585,  0.0434, -0.0487,  0.0653,  0.0415], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1362,  0.0126, -0.0129,  0.0855, -0.0350], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0422, -0.1989, -0.2687,  0.0118, -0.2596], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.5611, -2.4811, -2.8936, -0.0159, -0.0261], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1646, 0.1581, 0.1039, 0.0659, 0.0312], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6561, 0.6756, 0.7403, 0.9990, 0.9992], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0585,  0.0434, -0.0487,  0.0653,  0.0415], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0013, -0.0001,  0.0001, -0.0008,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.8364e-03,  8.0987e-05,  2.7012e-04, -1.1592e-03,  2.7828e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-3.1884e-03,  1.5161e-03, -8.9797e-05,  5.7272e-03,  3.8287e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0392,  0.0282, -0.0301,  0.0459,  0.0294], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0392,  0.0282, -0.0301,  0.0459,  0.0294], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0209,  0.0139, -0.0093, -0.0111, -0.0081], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0044], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([15.1300], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.6278,  0.4064, -0.3100, -0.4196, -0.2890], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.6278,  0.4064, -0.3100, -0.4196, -0.2890], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.0322,  0.4232, -2.1027,  2.2798,  0.3910], grad_fn=<SliceBackward0>)
  [Layer 34] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 34] Output sample values after mixer: tensor([ 2.0322,  0.4232, -2.1027,  2.2798,  0.3910], grad_fn=<SliceBackward0>)
  [Layer 34] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 34] Residual connection sample values: tensor([  4.7864,  -8.2764, -26.1204,  -1.0068,  -3.0602],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 35/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([543.1008], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0429], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1062, -0.1833, -0.5692, -0.0206, -0.0672], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-2.0851, -2.2525,  0.4166,  1.5731, -0.5128], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-2.0851, -2.2525,  0.4166,  1.5731, -0.5128], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.3878,  0.9774,  0.4450, -1.4414,  0.5679], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([4.2744, 2.7506, 2.3581, 2.1978, 2.0933], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.7415, -0.0892, -0.3878,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0626, -0.2356, -0.0682, -0.2816,  0.1067], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0934, -0.1945, -0.1044, -0.3266,  0.0652], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0445, -0.0878, -0.0495, -0.1369,  0.0337], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0445, -0.0878, -0.0495, -0.1369,  0.0337], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1982,  0.1088, -0.2617,  0.2529,  0.0273], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2771,  0.3950, -0.1718, -0.2234, -0.0479], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7098, -2.7746, -0.4453, -1.1391, -3.5906], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.5047, 0.2376, 1.0320, 0.4824, 0.1929], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6989, 0.5172, 0.6316, 0.5772, 0.5002], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0445, -0.0878, -0.0495, -0.1369,  0.0337], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0045, -0.0024,  0.0059, -0.0057, -0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.4718e-03, -6.0250e-03,  1.2111e-02, -1.2077e-02, -4.2659e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0180, -0.0163, -0.0129, -0.0163,  0.0076], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0481, -0.0757, -0.0464, -0.1089,  0.0303], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0481, -0.0757, -0.0464, -0.1089,  0.0303], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0111,  0.0162, -0.0116, -0.1419, -0.0058], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0244], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.3972], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.2317,  0.1803, -0.0914, -1.2877, -0.0710], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.2317,  0.1803, -0.0914, -1.2877, -0.0710], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.4404,  1.5610, -3.2796,  0.9426,  2.2004], grad_fn=<SliceBackward0>)
  [Layer 35] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 35] Output sample values after mixer: tensor([ 2.4404,  1.5610, -3.2796,  0.9426,  2.2004], grad_fn=<SliceBackward0>)
  [Layer 35] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 35] Residual connection sample values: tensor([  7.2268,  -6.7154, -29.4001,  -0.0642,  -0.8598],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 36/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([718.1270], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0373], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1323, -0.1245, -0.5346, -0.0012, -0.0161], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5490, -0.3737,  0.0140, -1.4789, -0.3900], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5490, -0.3737,  0.0140, -1.4789, -0.3900], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4619,  2.2626,  0.5858, -0.2212,  1.3923], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4068, 2.7813, 2.0246, 0.7609, 0.4012], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 0.0056, 0.0599, 0.4619, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0856,  0.3832,  0.0211, -0.0375, -0.2540], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1218,  0.3830, -0.0074, -0.0624, -0.2818], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0572,  0.2278, -0.0037, -0.0302, -0.1212], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0572,  0.2278, -0.0037, -0.0302, -0.1212], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1048,  0.3254,  0.0526, -0.1159, -0.0829], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1298, -0.2784, -0.2781, -0.0788, -0.0917], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6566, -1.1306, -1.6058, -2.4414, -2.8823], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1638, 0.0579, 0.1527, 0.0768, 0.0606], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6472, 0.9367, 0.7825, 0.8291, 0.8397], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0572,  0.2278, -0.0037, -0.0302, -0.1212], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0010, -0.0030, -0.0005,  0.0011,  0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0014, -0.0045, -0.0004,  0.0012,  0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0009,  0.0005, -0.0031,  0.0002, -0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0664,  0.2614, -0.0073, -0.0345, -0.1392], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0664,  0.2614, -0.0073, -0.0345, -0.1392], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 1.3351e-02, -3.9820e-02, -5.1767e-05,  9.4582e-03,  2.1925e-02],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0108], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.6348], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 1.8893e-01, -8.2203e-01, -7.2184e-04,  1.4844e-01,  2.9789e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 1.8893e-01, -8.2203e-01, -7.2184e-04,  1.4844e-01,  2.9789e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.3598,  2.3238, -1.3410, -4.3449, -2.3041], grad_fn=<SliceBackward0>)
  [Layer 36] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 36] Output sample values after mixer: tensor([-1.3598,  2.3238, -1.3410, -4.3449, -2.3041], grad_fn=<SliceBackward0>)
  [Layer 36] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 36] Residual connection sample values: tensor([  5.8670,  -4.3916, -30.7411,  -4.4091,  -3.1639],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 37/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([841.5490], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0345], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1153, -0.0883, -0.5971, -0.0839, -0.0627], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1023,  1.4374,  2.5239, -3.0028, -0.2957], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1023,  1.4374,  2.5239, -3.0028, -0.2957], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6888,  0.3173, -0.4880,  0.0292,  0.3579], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.0275, 1.0070, 3.0482, 2.9869, 2.2943], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.0595,  0.1299, -0.6888,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1382, -0.0457, -0.0155, -0.1615,  0.1057], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1259, -0.0741, -0.0105, -0.3124,  0.1204], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0669, -0.0357, -0.0052, -0.1320,  0.0638], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0669, -0.0357, -0.0052, -0.1320,  0.0638], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0192,  0.0727, -0.1400,  0.2881, -0.0557], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1670, -0.0740, -0.2256, -0.2401, -0.2784], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0606, -3.2470, -0.8191, -0.2453, -1.9752], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0692, 0.0265, 0.1812, 0.0245, 0.1101], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9958, 0.9176, 0.8620, 0.9940, 0.8046], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0669, -0.0357, -0.0052, -0.1320,  0.0638], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-8.8614e-05,  3.3644e-04, -6.4751e-04,  1.3325e-03, -2.5770e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0001, -0.0004, -0.0008,  0.0006, -0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0008, -0.0073, -0.0060,  0.0434,  0.0375], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0119, -0.0005, -0.0050,  0.0685,  0.0254], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0119, -0.0005, -0.0050,  0.0685,  0.0254], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0006, -0.0006, -0.0116, -0.0097, -0.0032], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0476], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.5808], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0048, -0.0041, -0.1534, -0.2382, -0.0175], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0048, -0.0041, -0.1534, -0.2382, -0.0175], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.0185, -0.1766, -4.2156,  0.2821, -0.2401], grad_fn=<SliceBackward0>)
  [Layer 37] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 37] Output sample values after mixer: tensor([ 1.0185, -0.1766, -4.2156,  0.2821, -0.2401], grad_fn=<SliceBackward0>)
  [Layer 37] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 37] Residual connection sample values: tensor([  6.8855,  -4.5683, -34.9567,  -4.1270,  -3.4039],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 38/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1016.5190], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0314], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1120, -0.0737, -0.5616, -0.0647, -0.0547], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2284,  0.3448,  0.8757, -0.6297, -1.2009], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2284,  0.3448,  0.8757, -0.6297, -1.2009], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.9851,  1.5084, -0.3268, -1.0992,  1.1871], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.8259, 2.1809, 1.5606, 1.0098, 1.9488], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.0800,  0.3686,  0.9851,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1726, -0.2835,  0.0383,  0.2279,  0.2267], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1445, -0.3206,  0.0126,  0.2163,  0.2055], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0670, -0.1348,  0.0063,  0.1198,  0.1133], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0670, -0.1348,  0.0063,  0.1198,  0.1133], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2409, -0.2340, -0.0207,  0.0049, -0.2341], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1494, -0.1766, -0.2065,  0.1314, -0.2722], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0881, -1.3536, -1.1764, -1.6451, -1.1941], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2859, 0.2386, 0.6262, 0.1116, 0.1512], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7326, 0.7240, 0.4787, 0.8323, 0.8349], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0670, -0.1348,  0.0063,  0.1198,  0.1133], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 4.6178e-03,  4.4844e-03,  3.9760e-04, -9.3907e-05,  4.4857e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([0.0049, 0.0049, 0.0006, 0.0005, 0.0047], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0077, -0.0186,  0.0055,  0.0216,  0.0137], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0619, -0.1278,  0.0107,  0.1186,  0.1054], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0619, -0.1278,  0.0107,  0.1186,  0.1054], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0063, -0.0258,  0.0066, -0.0260, -0.0293], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0122], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.0575], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1133, -0.4510,  0.1208, -0.4343, -0.4407], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1133, -0.4510,  0.1208, -0.4343, -0.4407], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.9961,  0.6041, -4.1658, -1.2063, -0.1574], grad_fn=<SliceBackward0>)
  [Layer 38] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 38] Output sample values after mixer: tensor([-0.9961,  0.6041, -4.1658, -1.2063, -0.1574], grad_fn=<SliceBackward0>)
  [Layer 38] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 38] Residual connection sample values: tensor([  5.8893,  -3.9641, -39.1225,  -5.3333,  -3.5614],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 39/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1250.5708], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0283], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0751, -0.0511, -0.4999, -0.0683, -0.0460], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.1664,  0.2364,  0.1189, -0.7443, -0.7476], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.1664,  0.2364,  0.1189, -0.7443, -0.7476], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5098,  0.4085,  0.3368, -0.3869, -0.4210], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.4328, 2.6103, 1.8484, 1.6321, 0.1935], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.6529, -0.1321,  0.5098,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0812, -0.0653,  0.0554, -0.0678, -0.0575], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0669,  0.0199,  0.0331, -0.0637, -0.0784], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0346,  0.0100,  0.0168, -0.0309, -0.0377], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0346,  0.0100,  0.0168, -0.0309, -0.0377], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0175,  0.0139,  0.0254, -0.0016,  0.1132], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0795,  0.0677, -0.0519, -0.0503, -0.2132], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6942, -0.9243, -1.3151, -3.1533, -2.1087], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1400, 0.0981, 0.0551, 0.1328, 0.0311], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9074, 0.9133, 0.9301, 0.6579, 0.9365], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0346,  0.0100,  0.0168, -0.0309, -0.0377], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 8.4477e-05,  6.7058e-05,  1.2264e-04, -7.9742e-06,  5.4743e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0003, -0.0001,  0.0001, -0.0001,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0018,  0.0008, -0.0011, -0.0022,  0.0019], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0315,  0.0094,  0.0133, -0.0286, -0.0304], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0315,  0.0094,  0.0133, -0.0286, -0.0304], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0280, 0.0012, 0.0008, 0.0069, 0.0073], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0057], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.2135], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.6957, 0.0330, 0.0229, 0.1516, 0.1836], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.6957, 0.0330, 0.0229, 0.1516, 0.1836], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.7366, -3.0171,  0.7122,  1.9232, -1.2753], grad_fn=<SliceBackward0>)
  [Layer 39] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 39] Output sample values after mixer: tensor([-1.7366, -3.0171,  0.7122,  1.9232, -1.2753], grad_fn=<SliceBackward0>)
  [Layer 39] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 39] Residual connection sample values: tensor([  4.1528,  -6.9812, -38.4103,  -3.4101,  -4.8367],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 40/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1581.4548], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0251], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0456, -0.0773, -0.4365, -0.0378, -0.0530], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0767, -0.6646, -0.4175,  0.5223, -0.1184], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0767, -0.6646, -0.4175,  0.5223, -0.1184], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5224, -0.7779, -0.3286,  0.1812, -0.4602], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.7438, 1.6829, 3.2239, 1.4531, 1.6818], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.0841, -0.0091, -0.5224,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1052,  0.1784, -0.0572, -0.0292, -0.0937], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1208,  0.1597, -0.0515, -0.0391, -0.0984], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0568,  0.0862, -0.0251, -0.0192, -0.0468], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0568,  0.0862, -0.0251, -0.0192, -0.0468], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0020, -0.2077, -0.0846,  0.0386, -0.0740], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1412, -0.1262, -0.0672,  0.0083, -0.0676], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9810, -1.4352, -0.7966, -1.6062, -1.8465], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1166, 0.0707, 0.1085, 0.1490, 0.2831], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7938, 0.9035, 0.9172, 0.7871, 0.5929], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0568,  0.0862, -0.0251, -0.0192, -0.0468], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.3541e-05,  1.3744e-03,  5.5981e-04, -2.5560e-04,  4.8970e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 4.1218e-05,  1.3568e-03,  6.0035e-04, -3.2281e-04,  5.4013e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.6611e-03,  4.7137e-03, -2.0412e-05, -6.0886e-04, -1.1027e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0480,  0.0751, -0.0205, -0.0163, -0.0393], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0480,  0.0751, -0.0205, -0.0163, -0.0393], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0019, -0.0170,  0.0034, -0.0053,  0.0022], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0038], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([16.1227], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0605, -0.5398,  0.1065, -0.1979,  0.0684], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0605, -0.5398,  0.1065, -0.1979,  0.0684], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.8301, -0.0401,  0.0508, -3.0132,  0.5814], grad_fn=<SliceBackward0>)
  [Layer 40] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 40] Output sample values after mixer: tensor([ 1.8301, -0.0401,  0.0508, -3.0132,  0.5814], grad_fn=<SliceBackward0>)
  [Layer 40] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 40] Residual connection sample values: tensor([  5.9829,  -7.0213, -38.3596,  -6.4233,  -4.2553],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 41/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1826.5239], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0234], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0624, -0.0739, -0.4089, -0.0670, -0.0446], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3076,  0.0612, -0.4713, -0.5564, -0.7367], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3076,  0.0612, -0.4713, -0.5564, -0.7367], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3003, -0.3950,  0.8358,  0.3332, -0.2391], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.8383, 0.9814, 2.4798, 1.2428, 2.2149], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.4675,  1.0878,  0.3003,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0762, -0.0828,  0.1462,  0.0555, -0.0647], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0895, -0.0968,  0.1483,  0.0488, -0.0803], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0428, -0.0461,  0.0796,  0.0250, -0.0385], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0428, -0.0461,  0.0796,  0.0250, -0.0385], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0198, -0.0862,  0.0067, -0.2583,  0.1560], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0393,  0.0191, -0.0572, -0.0197, -0.2356], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8259, -1.8637, -1.2829, -1.4543, -4.4079], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2143, 0.0817, 0.0828, 0.1364, 0.0570], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6762, 0.8588, 0.8992, 0.8201, 0.7778], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0428, -0.0461,  0.0796,  0.0250, -0.0385], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.8152e-04,  7.9005e-04, -6.1432e-05,  2.3681e-03, -1.4299e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0002,  0.0002, -0.0009,  0.0036, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0027, -0.0027,  0.0044,  0.0014, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0444, -0.0476,  0.0821,  0.0257, -0.0399], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0444, -0.0476,  0.0821,  0.0257, -0.0399], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0058, -0.0015, -0.0149, -0.0052,  0.0095], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0030], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([18.1126], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1815, -0.0471, -0.4582, -0.1688,  0.2399], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1815, -0.0471, -0.4582, -0.1688,  0.2399], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-4.3280, -0.7644,  0.0271, -2.0435, -2.7328], grad_fn=<SliceBackward0>)
  [Layer 41] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 41] Output sample values after mixer: tensor([-4.3280, -0.7644,  0.0271, -2.0435, -2.7328], grad_fn=<SliceBackward0>)
  [Layer 41] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 41] Residual connection sample values: tensor([  1.6549,  -7.7857, -38.3325,  -8.4669,  -6.9881],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 42/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2045.5065], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0221], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0174, -0.0833, -0.4062, -0.0882, -0.0730], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2528,  0.0513, -0.3700, -0.2494,  0.6211], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2528,  0.0513, -0.3700, -0.2494,  0.6211], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.2230, -0.3530,  0.1808,  0.3813, -0.6104], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.1224, 1.0744, 4.0317, 1.0927, 2.1741], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000,  0.4171, -0.0179, -0.2230,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0326,  0.0561,  0.0247,  0.0570, -0.0823], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0420,  0.0429,  0.0347,  0.0605, -0.1023], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0205,  0.0219,  0.0177,  0.0312, -0.0485], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0205,  0.0219,  0.0177,  0.0312, -0.0485], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0278,  0.0532,  0.0192, -0.0802,  0.3848], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0580, -0.0471, -0.0913, -0.2121, -0.2782], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0661, -1.4514, -0.7270, -1.9455, -0.6256], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1657, 0.4127, 0.1779, 0.0787, 0.0953], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8381, 0.5494, 0.8787, 0.8581, 0.9421], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0205,  0.0219,  0.0177,  0.0312, -0.0485], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-9.4771e-05, -1.8116e-04, -6.5210e-05,  2.7320e-04, -1.3102e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-9.6019e-05, -1.6806e-04, -3.2012e-05,  3.1527e-04, -1.2939e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0003,  0.0008,  0.0001,  0.0005, -0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0210,  0.0228,  0.0179,  0.0318, -0.0505], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0210,  0.0228,  0.0179,  0.0318, -0.0505], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0023,  0.0006, -0.0027, -0.0035, -0.0204], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0033], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([17.2678], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0830,  0.0211, -0.0967, -0.1029, -0.6629], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0830,  0.0211, -0.0967, -0.1029, -0.6629], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 3.0563, -1.4490, -2.7650,  6.6263, -1.8149], grad_fn=<SliceBackward0>)
  [Layer 42] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 42] Output sample values after mixer: tensor([ 3.0563, -1.4490, -2.7650,  6.6263, -1.8149], grad_fn=<SliceBackward0>)
  [Layer 42] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 42] Residual connection sample values: tensor([  4.7112,  -9.2347, -41.0975,  -1.8405,  -8.8029],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 43/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2252.8621], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0211], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0469, -0.0965, -0.4107, -0.0187, -0.0870], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4094, -1.2981,  0.6232,  1.1878,  1.4753], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4094, -1.2981,  0.6232,  1.1878,  1.4753], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5738,  0.5597, -0.7280,  0.4805, -0.6244], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.8921, 0.8678, 1.6545, 1.7844, 0.8777], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.1363,  0.5834,  0.5738,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0873,  0.0521, -0.2000, -0.0867,  0.0972], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0837,  0.0064, -0.1876, -0.0808,  0.0884], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0436,  0.0032, -0.0850, -0.0388,  0.0462], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0436,  0.0032, -0.0850, -0.0388,  0.0462], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0193, -0.1268,  0.8867, -0.0401,  0.0291], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0903, -0.0535, -0.2760, -0.2253, -0.1057], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9762, -1.4783, -1.0589, -1.0815, -5.9141], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0706, 0.0351, 0.0420, 0.0404, 0.1242], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9334, 0.9494, 0.9565, 0.9572, 0.4796], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0436,  0.0032, -0.0850, -0.0388,  0.0462], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.9452e-05, -3.9010e-04,  2.7280e-03, -1.2347e-04,  8.9438e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.7102e-04, -6.2277e-04,  6.1379e-03,  5.8014e-05, -2.9124e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0015, -0.0021, -0.0057, -0.0004, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0394,  0.0007, -0.0796, -0.0341,  0.0396], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0394,  0.0007, -0.0796, -0.0341,  0.0396], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0064, -0.0002, -0.0323, -0.0311,  0.0476], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0037], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([16.3338], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2769, -0.0063, -0.9994, -1.0600,  1.8723], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2769, -0.0063, -0.9994, -1.0600,  1.8723], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.8202, -0.4777, -0.7414, -0.1575,  6.6947], grad_fn=<SliceBackward0>)
  [Layer 43] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 43] Output sample values after mixer: tensor([ 0.8202, -0.4777, -0.7414, -0.1575,  6.6947], grad_fn=<SliceBackward0>)
  [Layer 43] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 43] Residual connection sample values: tensor([  5.5314,  -9.7125, -41.8389,  -1.9980,  -2.1082],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 44/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2439.7429], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0202], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0526, -0.0960, -0.4016, -0.0189, -0.0200], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7997, -2.4294, -0.6496, -0.3546, -0.1764], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7997, -2.4294, -0.6496, -0.3546, -0.1764], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.2159, -0.0948,  0.4099, -0.9364, -1.1030], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.6835, 2.5234, 1.8059, 2.4258, 2.2084], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.4055,  0.4141, -0.2159,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0290,  0.0128,  0.0527, -0.1525,  0.1287], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0351,  0.0732,  0.0343, -0.1590,  0.0762], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0173,  0.0379,  0.0174, -0.0732,  0.0395], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0173,  0.0379,  0.0174, -0.0732,  0.0395], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2783, -0.0982,  0.0295,  0.0529,  0.0856], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2769, -0.0892, -0.0397,  0.1715, -0.0681], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7482, -0.6439, -1.1771, -1.3506, -1.0269], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1126, 0.1734, 0.0659, 0.1063, 0.2957], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9192, 0.8943, 0.9253, 0.8662, 0.7381], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0173,  0.0379,  0.0174, -0.0732,  0.0395], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.4073e-04,  1.9083e-04, -5.7329e-05, -1.0269e-04, -1.6640e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.3412e-04,  4.0603e-04, -3.4898e-05, -1.2643e-04, -1.6309e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.3635e-04,  2.2936e-04,  8.6903e-05, -4.4086e-04,  1.7973e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0163,  0.0359,  0.0165, -0.0692,  0.0373], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0163,  0.0359,  0.0165, -0.0692,  0.0373], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0041, -0.0071, -0.0037,  0.0101, -0.0030], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0029], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([18.3893], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1390, -0.1932, -0.1355,  0.3244, -0.1047], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1390, -0.1932, -0.1355,  0.3244, -0.1047], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-7.7089, -1.9644, -2.9015,  0.9674, -0.3500], grad_fn=<SliceBackward0>)
  [Layer 44] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 44] Output sample values after mixer: tensor([-7.7089, -1.9644, -2.9015,  0.9674, -0.3500], grad_fn=<SliceBackward0>)
  [Layer 44] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 44] Residual connection sample values: tensor([ -2.1775, -11.6769, -44.7404,  -1.0306,  -2.4582],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 45/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2639.6492], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0195], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0203, -0.1120, -0.4195, -0.0095, -0.0228], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5327, -0.2082,  0.1584,  0.0430,  0.0904], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5327, -0.2082,  0.1584,  0.0430,  0.0904], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1349,  0.5370, -0.7737, -0.2335, -1.6420], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.4978, 1.7009, 1.3702, 1.5357, 3.3148], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -1.1707, -0.6203, -0.1349,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0320, -0.0991, -0.1270, -0.0264,  0.3035], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0366, -0.0469, -0.1294, -0.0330,  0.3010], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0180, -0.0229, -0.0605, -0.0162,  0.1730], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0180, -0.0229, -0.0605, -0.0162,  0.1730], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0344, -0.0043,  0.0101, -0.1834, -0.0209], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0049, -0.0496,  0.0587,  0.0589,  0.1163], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.2502, -4.1815, -1.0937, -2.6774, -2.3149], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0842, 0.1179, 0.0744, 0.0573, 0.1425], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8274, 0.6108, 0.9219, 0.8579, 0.7191], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0180, -0.0229, -0.0605, -0.0162,  0.1730], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-5.2023e-05,  6.5562e-06, -1.5242e-05,  2.7739e-04,  3.1584e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0004, -0.0001, -0.0002,  0.0011,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0020, -0.0009, -0.0032,  0.0011,  0.0099], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0221, -0.0266, -0.0711, -0.0172,  0.2039], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0221, -0.0266, -0.0711, -0.0172,  0.2039], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0044,  0.0025, -0.0061, -0.0004,  0.0096], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0044], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([14.9850], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1525,  0.0631, -0.1957, -0.0111,  0.3044], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1525,  0.0631, -0.1957, -0.0111,  0.3044], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.2676,  2.7661, -3.8000,  4.5555,  5.6729], grad_fn=<SliceBackward0>)
  [Layer 45] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 45] Output sample values after mixer: tensor([ 1.2676,  2.7661, -3.8000,  4.5555,  5.6729], grad_fn=<SliceBackward0>)
  [Layer 45] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 45] Residual connection sample values: tensor([ -0.9099,  -8.9107, -48.5404,   3.5249,   3.2147],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 46/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2936.5310], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0185], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0097, -0.0990, -0.5270,  0.0380,  0.0340], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0320, -0.8703, -0.0592,  2.2204, -0.7933], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0320, -0.8703, -0.0592,  2.2204, -0.7933], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2624, -0.9908, -0.2103, -1.4521, -1.0863], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.1809, 2.4667, 1.3943, 1.1841, 1.0549], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0000, 1.1878, 0.0893, 0.2624, 0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0504, -0.1376, -0.0365,  0.2132,  0.1765], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0535, -0.1414, -0.0576,  0.1973,  0.1968], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0260, -0.0657, -0.0280,  0.1084,  0.1081], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0260, -0.0657, -0.0280,  0.1084,  0.1081], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0470, -0.2784,  0.1109,  0.0156,  0.0668], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0219, -0.2688,  0.0389,  0.2067,  0.3733], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8673, -0.9793, -1.6584, -0.9408, -0.4381], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0264, 0.0650, 0.0253, 0.0334, 0.0251], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9518, 0.9384, 0.9589, 0.9691, 0.9891], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0260, -0.0657, -0.0280,  0.1084,  0.1081], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.2352e-05,  1.9160e-04, -7.6334e-05, -1.0711e-05, -4.5960e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-7.5229e-05,  4.7059e-04, -4.4981e-05,  3.8930e-05, -1.5469e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.6914e-04, -2.7919e-04, -9.5865e-05,  6.6060e-04,  5.9727e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0211, -0.0528, -0.0224,  0.0872,  0.0869], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0211, -0.0528, -0.0224,  0.0872,  0.0869], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0003,  0.0136,  0.0006,  0.1746, -0.0215], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0056], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.3058], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0106,  0.4009,  0.0172,  4.3183, -0.6483], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0106,  0.4009,  0.0172,  4.3183, -0.6483], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-3.7224,  7.4745,  2.9829, -4.8271,  1.2825], grad_fn=<SliceBackward0>)
  [Layer 46] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 46] Output sample values after mixer: tensor([-3.7224,  7.4745,  2.9829, -4.8271,  1.2825], grad_fn=<SliceBackward0>)
  [Layer 46] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 46] Residual connection sample values: tensor([ -4.6323,  -1.4363, -45.5575,  -1.3022,   4.4972],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 47/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3199.6333], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0177], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0420, -0.0132, -0.4009, -0.0116,  0.0382], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0928,  0.3459, -0.7559, -0.1486,  0.4541], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0928,  0.3459, -0.7559, -0.1486,  0.4541], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0268,  1.6559,  0.4599,  0.0224, -0.3835], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.3417, -0.7119,  1.6401,  1.7138,  2.6445], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -1.2364, -1.6534, -0.0268,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0016, -0.0413,  0.0438, -0.0364, -0.0504], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0187, -0.0662, -0.1757, -0.0398, -0.0452], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0094, -0.0320, -0.0801, -0.0195, -0.0221], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0094, -0.0320, -0.0801, -0.0195, -0.0221], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2195,  0.0020, -0.2591, -0.2690,  0.0913], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.6626, -0.0448,  0.0059, -0.2566, -0.1326], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -3.5522, -11.2450,  -2.6866,  -3.1935,  -3.1998],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0830, 0.0075, 0.0133, 0.0201, 0.1523], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7447, 0.9193, 0.9650, 0.9377, 0.6142], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0094, -0.0320, -0.0801, -0.0195, -0.0221], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.7162e-04,  1.5796e-06, -2.0261e-04, -2.1031e-04,  7.1388e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0011, -0.0003, -0.0016, -0.0016,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0020, -0.0010, -0.0034, -0.0019, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0153, -0.0463, -0.1167, -0.0294, -0.0315], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0153, -0.0463, -0.1167, -0.0294, -0.0315], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0007, -0.0094,  0.0282,  0.0020, -0.0087], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0051], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([14.0189], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0203, -0.1687,  0.8305,  0.0624, -0.2581], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0203, -0.1687,  0.8305,  0.0624, -0.2581], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-18.5962,  20.1905,  11.2271,  -0.1384,  -1.4215],
       grad_fn=<SliceBackward0>)
  [Layer 47] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 47] Output sample values after mixer: tensor([-18.5962,  20.1905,  11.2271,  -0.1384,  -1.4215],
       grad_fn=<SliceBackward0>)
  [Layer 47] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 47] Residual connection sample values: tensor([-23.2285,  18.7542, -34.3303,  -1.4406,   3.0757],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 48/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3945.6382], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0159], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1936,  0.1459, -0.2611, -0.0113,  0.0228], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5148, -2.1903,  1.8731,  0.1550, -0.1040], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5148, -2.1903,  1.8731,  0.1550, -0.1040], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7011, -0.0385,  0.6086, -0.2485,  0.8159], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.1998, 1.4053, 2.4958, 1.4459, 0.6457], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0000, -0.8173,  0.4479,  0.7011,  0.0000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1185, -0.0011,  0.0859, -0.0239, -0.1239], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-1.2369e-01,  2.1886e-01,  6.5111e-05, -9.0195e-02, -1.2632e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-5.8025e-02,  1.2136e-01,  3.2556e-05, -4.3065e-02, -5.9175e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-5.8025e-02,  1.2136e-01,  3.2556e-05, -4.3065e-02, -5.9175e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0083,  0.0474,  0.0263, -0.0071, -0.0522], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0252, -0.1504, -0.1130, -0.1529,  0.0309], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-54.8118, -78.5143, -47.2508,  -2.3308,  -4.2266],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0990, 0.0355, 0.0482, 0.0046, 0.0143], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.0044, 0.0617, 0.1025, 0.9892, 0.9414], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-5.8025e-02,  1.2136e-01,  3.2556e-05, -4.3065e-02, -5.9175e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 4.7919e-05, -2.7219e-04, -1.5104e-04,  4.0728e-05,  2.9988e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 4.7669e-05, -2.7221e-04, -1.5154e-04,  4.0977e-05,  3.0050e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.0968e-03,  2.2952e-03,  6.3112e-07, -8.1272e-04, -1.1182e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-4.7298e-02,  9.8922e-02,  2.6553e-05, -3.5102e-02, -4.8235e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-4.7298e-02,  9.8922e-02,  2.6553e-05, -3.5102e-02, -4.8235e-02],
       grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 9.1082e-03, -2.1803e-02,  4.3113e-05, -2.9300e-03,  2.3785e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0027], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([19.0518], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.3972, -0.7792,  0.0016, -0.1242,  0.1122], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.3972, -0.7792,  0.0016, -0.1242,  0.1122], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-24.7753,  52.3488,  29.8075, -18.6751,  -8.0810],
       grad_fn=<SliceBackward0>)
  [Layer 48] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 48] Output sample values after mixer: tensor([-24.7753,  52.3488,  29.8075, -18.6751,  -8.0810],
       grad_fn=<SliceBackward0>)
  [Layer 48] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 48] Residual connection sample values: tensor([-48.0038,  71.1030,  -4.5228, -20.1157,  -5.0053],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([5031.2280], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0141], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3770,  0.6177, -0.0362, -0.1641, -0.0389], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Final backbone norm output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Final backbone norm output sample values: tensor([-0.3770,  0.6177, -0.0362, -0.1641, -0.0389], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Logits shape: torch.Size([1, 1, 50288])
[Mamba2LMHeadModel] Logits sample values: tensor([-37.3946, -61.2066, -34.9391, -36.0354, -38.5207],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Forward pass input_ids shape: torch.Size([1, 1])
[Mamba2LMHeadModel] input_ids sample values: tensor([427])
[Mamba2LMHeadModel] Embedding output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Embedding sample values: tensor([-0.0950, -0.2773,  0.0922, -0.1621, -0.1055], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 1/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0242], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([6.4241], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1081, -0.3573,  0.1085, -0.1907, -0.1220], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.7052, -0.9588, -0.9607, -0.1609, -0.1111], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.7052, -0.9588, -0.9607, -0.1609, -0.1111], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.2065, -0.2824, -0.1450,  0.9620, -1.4596], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.3260,  0.1457,  0.1141, -0.1304,  0.1416], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0169,  0.3530,  0.5844, -0.2065, -0.1016], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1077,  0.0778,  0.2177, -0.0514, -0.3232], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.3355,  0.2931,  0.4880, -0.0022, -0.5800], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1956,  0.1679,  0.3024, -0.0011, -0.2082], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1956,  0.1679,  0.3024, -0.0011, -0.2082], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1262,  0.0319, -0.2734, -0.2758,  0.0424], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2630,  0.1123, -0.2745,  0.0615,  0.0284], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6180, -2.5226, -3.0473, -3.3078, -3.9090], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0126, 0.0157, 0.0102, 0.0215, 0.0084], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9676, 0.9612, 0.9695, 0.9314, 0.9677], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1956,  0.1679,  0.3024, -0.0011, -0.2082], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.1056e-04,  7.8619e-05, -6.7301e-04, -6.7874e-04,  1.0437e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0016,  0.0002, -0.0017, -0.0019,  0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0477,  0.0406,  0.0589,  0.0011, -0.0395], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1223,  0.1046,  0.1742,  0.0007, -0.1189], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1223,  0.1046,  0.1742,  0.0007, -0.1189], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 1.7646e-01, -2.7800e-02, -4.6324e-02, -5.3858e-05,  6.2364e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.5917], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7926], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 1.4000e-01, -2.3757e-02, -3.1357e-02, -7.0537e-05,  5.0397e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 1.4000e-01, -2.3757e-02, -3.1357e-02, -7.0537e-05,  5.0397e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0824,  0.1901, -0.1310,  0.0063, -0.0924], grad_fn=<SliceBackward0>)
  [Layer 1] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 1] Output sample values after mixer: tensor([ 0.0824,  0.1901, -0.1310,  0.0063, -0.0924], grad_fn=<SliceBackward0>)
  [Layer 1] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 1] Residual connection sample values: tensor([-0.0126, -0.0872, -0.0387, -0.1558, -0.1979], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 2/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0646], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([3.9330], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0179, -0.0978, -0.0507, -0.2136, -0.2651], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3319, -0.8834, -1.4301,  0.2509, -1.1963], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3319, -0.8834, -1.4301,  0.2509, -1.1963], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.8205,  0.4378,  1.0186,  5.7092,  1.5280], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3993, 0.9554, 0.9753, 1.0253, 2.3132], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.7522, -1.1875, -0.7897, -0.8205, -1.8367], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1097,  0.4575,  0.1272, -2.7717, -0.0231], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1396,  0.3029,  0.1167, -1.7180, -0.0362], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0649,  0.1742,  0.0618, -0.2614, -0.0178], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0649,  0.1742,  0.0618, -0.2614, -0.0178], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1172, -0.0704,  0.0126, -0.2079,  0.5559], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1184, -0.1086,  0.0950, -0.0154, -0.2784], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-19.8515, -18.6852, -13.5640,  -2.4189,  -0.4662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0245, 0.0163, 0.0550, 0.0203, 0.1402], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6153, 0.7380, 0.4741, 0.9522, 0.9367], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0649,  0.1742,  0.0618, -0.2614, -0.0178], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.8604e-04,  1.1186e-04, -2.0011e-05,  3.3008e-04, -8.8274e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-8.2944e-05,  1.7099e-04,  2.9257e-05,  6.5663e-04, -1.2065e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0295,  0.0517,  0.0022, -0.0333, -0.0202], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0743,  0.1720,  0.0449, -0.2137, -0.0324], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0743,  0.1720,  0.0449, -0.2137, -0.0324], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0144, -0.0444, -0.0124, -0.0302,  0.0090], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([92.0889], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1042], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0019, -0.0028, -0.0017, -0.0017,  0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0019, -0.0028, -0.0017, -0.0017,  0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0520, -0.0068, -0.1073, -0.1304,  0.0420], grad_fn=<SliceBackward0>)
  [Layer 2] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 2] Output sample values after mixer: tensor([ 0.0520, -0.0068, -0.1073, -0.1304,  0.0420], grad_fn=<SliceBackward0>)
  [Layer 2] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 2] Residual connection sample values: tensor([ 0.0394, -0.0940, -0.1460, -0.2862, -0.1559], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 3/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1158], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([2.9391], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0459, -0.0856, -0.1523, -0.3072, -0.1800], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2244,  0.0997, -2.2931, -0.9687,  0.2905], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2244,  0.0997, -2.2931, -0.9687,  0.2905], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 2.6809, -1.8550, -0.9678,  0.1200, -1.2261], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.8484, 0.8521, 1.7660, 2.2822, 1.8723], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.1963,  0.4664, -0.1400,  2.6809, -0.3184], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0165,  0.2422, -0.1244, -0.0618,  0.1447], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0180,  0.2229, -0.0008, -0.0741,  0.1284], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0089,  0.1238, -0.0004, -0.0357,  0.0683], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0089,  0.1238, -0.0004, -0.0357,  0.0683], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.5194, -0.0090,  0.0060,  0.1071,  0.2475], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.4893,  0.0095, -0.2444, -0.1515, -0.0551], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6506, -3.9939, -6.7806, -0.9419, -6.0308], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0521, 0.0472, 0.0772, 0.0625, 0.1333], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9667, 0.8283, 0.5926, 0.9428, 0.4477], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0089,  0.1238, -0.0004, -0.0357,  0.0683], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.4155e-04,  4.1838e-06, -2.8040e-06, -4.9832e-05, -1.1512e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0079,  0.0007,  0.0012,  0.0007, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0371,  0.0227,  0.0837,  0.0083,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0411,  0.0790,  0.0835, -0.0079,  0.0317], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0411,  0.0790,  0.0835, -0.0079,  0.0317], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0051,  0.0041, -0.0176,  0.0021,  0.0053], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([17.0978], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2418], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0017,  0.0015, -0.0052,  0.0010,  0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0017,  0.0015, -0.0052,  0.0010,  0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0783, -0.0548,  0.0493,  0.0415, -0.0471], grad_fn=<SliceBackward0>)
  [Layer 3] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 3] Output sample values after mixer: tensor([-0.0783, -0.0548,  0.0493,  0.0415, -0.0471], grad_fn=<SliceBackward0>)
  [Layer 3] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 3] Residual connection sample values: tensor([-0.0388, -0.1488, -0.0968, -0.2447, -0.2030], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 4/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1809], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([2.3510], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0426, -0.1237, -0.0938, -0.2454, -0.2235], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.7255,  1.0837, -0.9419, -0.2096,  0.1775], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.7255,  1.0837, -0.9419, -0.2096,  0.1775], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0051, -0.2364, -1.1375,  0.3240, -0.9646], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.5815, 3.0326, 2.7072, 1.7089, 1.5061], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0897,  0.6892,  0.0140,  0.0051, -0.0484], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0101, -0.1766,  0.1740,  0.1826, -0.0364], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0839, -0.2118,  0.1258,  0.1668,  0.2566], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0402, -0.0947,  0.0669,  0.0904,  0.1447], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0402, -0.0947,  0.0669,  0.0904,  0.1447], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([0.3800, 0.2925, 0.2654, 0.0104, 0.0752], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.7388, -0.2171, -0.2067, -0.2737,  0.1519], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.7127,  -1.2862,  -1.4870, -27.0280,  -4.0727],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0295, 0.0488, 0.0283, 0.0178, 0.1605], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9507, 0.9391, 0.9588, 0.6187, 0.5200], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0402, -0.0947,  0.0669,  0.0904,  0.1447], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.5051e-04, -3.4672e-04, -3.1462e-04, -1.2352e-05, -8.9152e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.2820e-03, -1.5506e-03, -1.4769e-03,  2.4829e-05, -1.7011e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0083,  0.0107,  0.0045,  0.0058,  0.0618], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0309, -0.0426,  0.0422,  0.0566,  0.1432], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0309, -0.0426,  0.0422,  0.0566,  0.1432], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0081, -0.0345, -0.0111, -0.0053,  0.0138], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([15.8493], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2512], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0042, -0.0116, -0.0058, -0.0023,  0.0036], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0042, -0.0116, -0.0058, -0.0023,  0.0036], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0704, -0.0405,  0.0537, -0.0905,  0.0377], grad_fn=<SliceBackward0>)
  [Layer 4] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 4] Output sample values after mixer: tensor([-0.0704, -0.0405,  0.0537, -0.0905,  0.0377], grad_fn=<SliceBackward0>)
  [Layer 4] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 4] Residual connection sample values: tensor([-0.1093, -0.1894, -0.0430, -0.3352, -0.1653], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 5/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2361], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([2.0580], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1015, -0.1454, -0.0373, -0.2983, -0.1585], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1809, -1.5684, -0.7870, -0.7596, -1.4286], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1809, -1.5684, -0.7870, -0.7596, -1.4286], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2771, -0.1345,  0.8285, -1.5105, -0.6138], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 3.1987,  1.9427,  1.2014,  0.7507, -0.0945], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.0174,  0.3543,  0.2659,  0.2771, -1.6878], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0181, -0.0397, -0.2267, -0.1057, -0.2308], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0697, -0.0770, -0.2963, -0.1319, -0.2366], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0336, -0.0370, -0.1263, -0.0616, -0.1044], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0336, -0.0370, -0.1263, -0.0616, -0.1044], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0341,  0.1006, -0.1199, -0.0348,  0.1330], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0076, -0.0372, -0.0794, -0.1291, -0.0806], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.5763,  -1.0444,  -0.8388,  -5.6765, -20.4018],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0912, 0.0811, 0.1346, 0.0292, 0.0031], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8660, 0.9188, 0.8932, 0.8472, 0.9387], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0336, -0.0370, -0.1263, -0.0616, -0.1044], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0001, -0.0003,  0.0004,  0.0001, -0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.2328e-04, -7.8140e-05,  4.5162e-04,  1.8295e-04, -5.7484e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0015,  0.0083, -0.0112, -0.0117, -0.0097], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0196, -0.0116, -0.0791, -0.0448, -0.0658], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0196, -0.0116, -0.0791, -0.0448, -0.0658], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0016, 0.0031, 0.0195, 0.0108, 0.0182], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([5.3885], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4308], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0011, 0.0022, 0.0128, 0.0075, 0.0111], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0011, 0.0022, 0.0128, 0.0075, 0.0111], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1216, -0.0979,  0.0586,  0.0011, -0.1460], grad_fn=<SliceBackward0>)
  [Layer 5] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 5] Output sample values after mixer: tensor([ 0.1216, -0.0979,  0.0586,  0.0011, -0.1460], grad_fn=<SliceBackward0>)
  [Layer 5] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 5] Residual connection sample values: tensor([ 0.0123, -0.2873,  0.0156, -0.3341, -0.3113], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 6/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.3086], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.8000], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0098, -0.1764,  0.0110, -0.2432, -0.2505], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.6288, -0.4484,  0.4157,  0.4166, -0.7359], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.6288, -0.4484,  0.4157,  0.4166, -0.7359], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.3809, -1.1710,  0.1630,  0.9299, -0.5677], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.6872, 2.5229, 1.8791, 1.7954, 1.6100], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.4182, -2.9153,  0.3284, -0.3809, -0.3348], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0188, -0.4030,  0.0755, -0.0433, -0.3628], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0532, -0.4754,  0.0133,  0.0188, -0.2931], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0273, -0.1822,  0.0067,  0.0095, -0.1252], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0273, -0.1822,  0.0067,  0.0095, -0.1252], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0877,  0.0571, -0.2531, -0.1573,  0.2220], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2452, -0.0650, -0.2781,  0.1463,  0.3233], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9866, -8.7747, -3.3046, -2.9913, -3.3435], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0501, 0.1590, 0.4531, 0.3440, 0.1404], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9518, 0.2478, 0.2237, 0.3574, 0.6253], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0273, -0.1822,  0.0067,  0.0095, -0.1252], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.1986e-04,  7.8113e-05, -3.4594e-04, -2.1503e-04,  3.0350e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0223, -0.0023, -0.0112, -0.0024,  0.0027], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0946, -0.1456,  0.0097,  0.0317, -0.0783], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1005, -0.1851,  0.0111,  0.0338, -0.1055], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1005, -0.1851,  0.0111,  0.0338, -0.1055], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.1369, 0.0323, 0.0028, 0.0085, 0.0251], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([6.1006], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4049], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.1065, 0.0118, 0.0010, 0.0038, 0.0080], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.1065, 0.0118, 0.0010, 0.0038, 0.0080], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2053,  0.1034,  0.1060, -0.0523,  0.1238], grad_fn=<SliceBackward0>)
  [Layer 6] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 6] Output sample values after mixer: tensor([ 0.2053,  0.1034,  0.1060, -0.0523,  0.1238], grad_fn=<SliceBackward0>)
  [Layer 6] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 6] Residual connection sample values: tensor([ 0.2176, -0.1839,  0.1216, -0.3865, -0.1875], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 7/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.4754], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.4503], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1214, -0.0852,  0.0629, -0.1975, -0.1050], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.6581, -1.1101, -0.2853, -0.8716,  0.0273], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.6581, -1.1101, -0.2853, -0.8716,  0.0273], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.8322, -1.0546, -0.2012,  0.2500,  0.1553], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.6009, 1.4045, 1.9202, 1.5141, 1.3458], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.3217, -3.4444, -2.4927, -1.8322,  0.5518], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0919,  0.2670, -0.0597, -0.1231, -0.1886], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1600,  0.2917, -0.0604, -0.1167, -0.1922], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0736,  0.1670, -0.0293, -0.0549, -0.0869], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0736,  0.1670, -0.0293, -0.0549, -0.0869], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.2815,  0.0251, -0.0013, -0.0983,  0.1225], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0933, -0.0484,  0.0016, -0.0219, -0.0067], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2959, -1.1836, -0.3113, -0.1314, -1.5015], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0837, 0.0242, 0.0171, 0.0665, 0.0041], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9755, 0.9717, 0.9947, 0.9913, 0.9938], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0736,  0.1670, -0.0293, -0.0549, -0.0869], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.7351e-03, -1.5465e-04,  8.2355e-06,  6.0591e-04, -7.5510e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0006,  0.0005, -0.0005,  0.0008, -0.0032], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0025, -0.0019,  0.0062, -0.0025, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0027, -0.0015,  0.0062, -0.0026, -0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0027, -0.0015,  0.0062, -0.0026, -0.0007], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.1713e-03,  4.0476e-04, -7.5487e-04,  6.7860e-04, -9.1947e-06],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0340], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.4190], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-7.8908e-03,  1.5187e-03, -6.6832e-03,  4.2376e-03, -7.8389e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-7.8908e-03,  1.5187e-03, -6.6832e-03,  4.2376e-03, -7.8389e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0964, -0.0311,  0.1123,  0.1850, -0.0023], grad_fn=<SliceBackward0>)
  [Layer 7] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 7] Output sample values after mixer: tensor([-0.0964, -0.0311,  0.1123,  0.1850, -0.0023], grad_fn=<SliceBackward0>)
  [Layer 7] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 7] Residual connection sample values: tensor([ 0.1212, -0.2150,  0.2338, -0.2014, -0.1898], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 8/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.5981], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.2930], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0808, -0.1122,  0.1453, -0.1245, -0.1260], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7222, -1.6318, -0.7386, -1.6736, -0.8424], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7222, -1.6318, -0.7386, -1.6736, -0.8424], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.3310,  0.7061, -1.5254,  0.1865,  0.2840], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0784, 0.8600, 1.4389, 1.5246, 0.6661], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.7961, -1.7797,  0.1772, -0.3310, -1.7793], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0611, -0.4085,  0.1813, -0.1635,  0.1044], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.4018, -0.4395, -0.1334, -0.2151,  0.0483], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.2407, -0.1722, -0.0623, -0.0960,  0.0247], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.2407, -0.1722, -0.0623, -0.0960,  0.0247], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([0.0056, 0.0215, 0.0827, 0.1575, 0.0138], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0708, -0.0280,  0.0190, -0.0315, -0.0442], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.6543, -0.9827, -0.5550, -3.9397, -1.8081], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0293, 0.1238, 0.0461, 0.1061, 0.0187], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8984, 0.8855, 0.9747, 0.6585, 0.9668], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.2407, -0.1722, -0.0623, -0.0960,  0.0247], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([3.9545e-05, 1.5133e-04, 5.8340e-04, 1.1112e-03, 9.7145e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-4.3378e-04, -7.3034e-05,  6.0767e-04, -7.2133e-04, -3.5309e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0403, -0.0299, -0.0242, -0.0088, -0.0160], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.2429, -0.1749, -0.0766, -0.0897,  0.0048], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.2429, -0.1749, -0.0766, -0.0897,  0.0048], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0573,  0.0467,  0.0183,  0.0237, -0.0012], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([2.2852], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6615], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0366,  0.0380,  0.0101,  0.0205, -0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0366,  0.0380,  0.0101,  0.0205, -0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2095,  0.0991,  0.0703,  0.0146,  0.0815], grad_fn=<SliceBackward0>)
  [Layer 8] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 8] Output sample values after mixer: tensor([-0.2095,  0.0991,  0.0703,  0.0146,  0.0815], grad_fn=<SliceBackward0>)
  [Layer 8] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 8] Residual connection sample values: tensor([-0.0883, -0.1159,  0.3042, -0.1868, -0.1084], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 9/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.9163], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.0447], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0438, -0.0470,  0.1388, -0.0819, -0.0531], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.5579, -0.6745,  0.1975, -0.9625, -1.4896], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.5579, -0.6745,  0.1975, -0.9625, -1.4896], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0120,  0.6061,  0.3797, -0.6187,  0.6687], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.2315, 2.5083, 3.0388, 2.8705, 2.4541], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.0604, -0.5307, -0.5863,  0.0120,  0.1938], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([0.1276, 0.0925, 0.0094, 0.2055, 0.2007], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1349,  0.0672, -0.0772,  0.1316,  0.2257], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0720,  0.0347, -0.0371,  0.0701,  0.1255], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0720,  0.0347, -0.0371,  0.0701,  0.1255], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1106, -0.2610,  0.4295,  0.4998, -0.1266], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2675, -0.2503, -0.2161, -0.2782, -0.1410], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-5.2345, -1.2161, -1.4888, -0.9523, -3.9667], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2288, 0.3845, 0.0958, 1.2230, 0.1693], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.3019, 0.6265, 0.8671, 0.3120, 0.5110], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0720,  0.0347, -0.0371,  0.0701,  0.1255], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0018, -0.0043,  0.0071,  0.0082, -0.0021], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0003, -0.0049,  0.0078,  0.0086, -0.0027], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0263,  0.0104, -0.0141,  0.0256,  0.0410], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1239,  0.0574, -0.0644,  0.1206,  0.2111], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1239,  0.0574, -0.0644,  0.1206,  0.2111], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0336, -0.0131, -0.0070, -0.0321, -0.0579], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([3.0346], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5740], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0200, -0.0116, -0.0041, -0.0150, -0.0394], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0200, -0.0116, -0.0041, -0.0150, -0.0394], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1768, -0.2778,  0.0909, -0.3204, -0.0348], grad_fn=<SliceBackward0>)
  [Layer 9] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 9] Output sample values after mixer: tensor([ 0.1768, -0.2778,  0.0909, -0.3204, -0.0348], grad_fn=<SliceBackward0>)
  [Layer 9] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 9] Residual connection sample values: tensor([ 0.0885, -0.3937,  0.3950, -0.5073, -0.1431], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 10/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.1167], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9463], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0342, -0.1273,  0.1380, -0.1754, -0.0541], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1162, -0.8609,  0.3997, -0.8616, -0.3371], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1162, -0.8609,  0.3997, -0.8616, -0.3371], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.1810, -0.4587,  1.9811,  0.1462,  0.8493], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.8309, 0.3853, 0.9884, 0.7781, 1.0868], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.8273, -0.9168,  0.4216,  0.1810,  0.3770], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0381, -0.0214,  0.3140, -0.0235,  0.2387], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0003, -0.1085,  0.2102, -0.1093,  0.1791], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0001, -0.0513,  0.1161, -0.0517,  0.0976], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0001, -0.0513,  0.1161, -0.0517,  0.0976], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0199, -0.1151,  0.1527,  0.2365,  0.0648], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2565, -0.0805, -0.0921,  0.0438, -0.1086], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.7155, -1.4068, -0.3534, -2.0102, -0.4653], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0010, 0.0052, 0.2363, 0.0040, 0.0223], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9963, 0.9927, 0.9199, 0.9920, 0.9897], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0001, -0.0513,  0.1161, -0.0517,  0.0976], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.6231e-09,  1.5136e-08, -2.0085e-08, -3.1111e-08, -8.5220e-09],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.7124e-07,  1.0791e-04,  4.1033e-05,  1.2174e-05,  1.4701e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0002, -0.0025,  0.0005, -0.0004,  0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0001, -0.0138,  0.0260, -0.0117,  0.0242], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0001, -0.0138,  0.0260, -0.0117,  0.0242], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-7.3353e-06,  3.5372e-03,  6.2234e-03,  3.0059e-03, -3.3979e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0156], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.0140], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-8.8120e-05,  2.0707e-02,  5.8544e-02,  3.2182e-02, -3.3666e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-8.8120e-05,  2.0707e-02,  5.8544e-02,  3.2182e-02, -3.3666e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2959,  0.0287, -0.0902,  0.0362, -0.0454], grad_fn=<SliceBackward0>)
  [Layer 10] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 10] Output sample values after mixer: tensor([-0.2959,  0.0287, -0.0902,  0.0362, -0.0454], grad_fn=<SliceBackward0>)
  [Layer 10] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 10] Residual connection sample values: tensor([-0.2075, -0.3651,  0.3048, -0.4711, -0.1885], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 11/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.4395], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8335], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0795, -0.1138,  0.1043, -0.1573, -0.0690], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0774, -0.6284,  0.5701, -0.7949,  0.2420], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0774, -0.6284,  0.5701, -0.7949,  0.2420], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.3343,  0.2540, -0.0478, -0.1319, -0.7101], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.8958, 2.1974, 2.6210, 3.8158, 2.5071], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.1212,  1.1446,  0.5201, -0.3343,  0.3120], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0456, -0.1512,  0.0472, -0.0027, -0.1477], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0314, -0.5088,  0.1438,  0.0095, -0.1246], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0159, -0.1910,  0.0770,  0.0048, -0.0584], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0159, -0.1910,  0.0770,  0.0048, -0.0584], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2405, -0.2711, -0.2515,  0.0499,  0.0745], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0266, -0.0988, -0.2784, -0.1586,  0.0499], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.3116, -0.0902, -1.5786, -0.2096, -0.6694], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1117, 0.2528, 1.0122, 1.0932, 0.0879], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9658, 0.9775, 0.2023, 0.7952, 0.9429], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0159, -0.1910,  0.0770,  0.0048, -0.0584], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.2806e-04, -4.8259e-04, -4.4763e-04,  8.8758e-05,  1.3262e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0358, -0.0217,  0.0434,  0.0090, -0.0498], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0622, -0.1173,  0.1528, -0.0072, -0.0284], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0564, -0.1874,  0.1811, -0.0055, -0.0499], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0564, -0.1874,  0.1811, -0.0055, -0.0499], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0023,  0.0410,  0.0660,  0.0014, -0.0068], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.6801], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7715], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0021,  0.0381,  0.0435,  0.0029, -0.0048], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0021,  0.0381,  0.0435,  0.0029, -0.0048], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3972,  0.5706, -0.0518, -0.0672, -0.0672], grad_fn=<SliceBackward0>)
  [Layer 11] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 11] Output sample values after mixer: tensor([ 0.3972,  0.5706, -0.0518, -0.0672, -0.0672], grad_fn=<SliceBackward0>)
  [Layer 11] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 11] Residual connection sample values: tensor([ 0.1897,  0.2056,  0.2530, -0.5383, -0.2556], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 12/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.0412], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6999], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0549,  0.0493,  0.0639, -0.1350, -0.0708], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.6899, -0.8918, -0.0969,  0.2771, -0.4299], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.6899, -0.8918, -0.0969,  0.2771, -0.4299], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2006,  0.1601, -0.1165, -0.7052, -0.1258], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.7036, 2.6393, 2.5117, 1.6977, 2.5695], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2311,  0.6048, -1.6992,  0.2006, -0.2467], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0135, -0.0445,  0.2654, -0.0545, -0.0048], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0295, -0.0316,  0.2305, -0.0842,  0.0078], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0145, -0.0155,  0.1285, -0.0403,  0.0039], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0145, -0.0155,  0.1285, -0.0403,  0.0039], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0611, -0.2221, -0.0276, -0.0875, -0.0581], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2695, -0.2639, -0.1001, -0.0655, -0.1323], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2412, -0.7694, -1.9975, -1.2368, -1.0181], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.4983, 0.6818, 0.2904, 0.4261, 0.7204], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5388, 0.5918, 0.5599, 0.5903, 0.4802], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0145, -0.0155,  0.1285, -0.0403,  0.0039], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0004,  0.0016,  0.0002,  0.0006,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0084,  0.0053, -0.0238,  0.0031, -0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0035, -0.0003,  0.0146, -0.0106, -0.0094], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0070, -0.0115,  0.1071, -0.0396, -0.0066], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0070, -0.0115,  0.1071, -0.0396, -0.0066], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0032,  0.0030, -0.0049, -0.0062,  0.0011], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.3362], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.7246], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0099,  0.0061, -0.0076, -0.0110,  0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0099,  0.0061, -0.0076, -0.0110,  0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.3141, -0.1260,  0.0293, -0.0606,  0.0457], grad_fn=<SliceBackward0>)
  [Layer 12] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 12] Output sample values after mixer: tensor([-0.3141, -0.1260,  0.0293, -0.0606,  0.0457], grad_fn=<SliceBackward0>)
  [Layer 12] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 12] Residual connection sample values: tensor([-0.1243,  0.0796,  0.2823, -0.5989, -0.2100], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 13/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.4327], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6411], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0322,  0.0179,  0.0676, -0.1349, -0.0553], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([0.4539, 0.1619, 0.3601, 0.2422, 0.2980], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([0.4539, 0.1619, 0.3601, 0.2422, 0.2980], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5842,  0.1061, -0.5092,  0.3485,  0.8638], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.6210, 2.3747, 2.9334, 1.7858, 2.9589], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.4691, -0.9624, -2.3017,  0.5842, -2.0080], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.4737,  0.7016, -0.0383, -0.1050,  0.1967], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.7384,  0.5917, -0.0588, -0.1058,  0.1727], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.2388,  0.3809, -0.0285, -0.0501,  0.0938], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.2388,  0.3809, -0.0285, -0.0501,  0.0938], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0137,  0.3451, -0.1006,  0.5046, -0.0604], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0547,  0.1016, -0.0913,  0.4209, -0.1473], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3103, -1.7871, -0.8606, -1.8811, -0.5252], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1246, 0.1002, 0.5506, 0.2508, 0.2943], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8494, 0.8361, 0.6226, 0.6239, 0.8568], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.2388,  0.3809, -0.0285, -0.0501,  0.0938], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0004, -0.0103,  0.0030, -0.0150,  0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0030, -0.0040, -0.0010, -0.0369,  0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0643,  0.0692, -0.0166, -0.0052,  0.0499], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0746,  0.0856, -0.0179, -0.0074,  0.0540], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0746,  0.0856, -0.0179, -0.0074,  0.0540], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0207,  0.0075, -0.0038, -0.0010,  0.0092], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1080], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.0428], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0855,  0.0102, -0.0212, -0.0064,  0.0224], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0855,  0.0102, -0.0212, -0.0064,  0.0224], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0071,  0.0805,  0.2435,  0.0715, -0.0285], grad_fn=<SliceBackward0>)
  [Layer 13] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 13] Output sample values after mixer: tensor([ 0.0071,  0.0805,  0.2435,  0.0715, -0.0285], grad_fn=<SliceBackward0>)
  [Layer 13] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 13] Residual connection sample values: tensor([-0.1172,  0.1601,  0.5258, -0.5275, -0.2385], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 14/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.5875], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6217], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0254,  0.0305,  0.1057, -0.0997, -0.0505], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([0.4913, 0.2067, 0.0375, 0.1193, 0.5709], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([0.4913, 0.2067, 0.0375, 0.1193, 0.5709], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5885, -0.6542, -0.2961,  0.3938,  1.1032], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.7723, 2.4034, 1.4290, 0.9900, 2.2068], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2845, -0.1825, -0.0388, -0.5885, -1.8295], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1323,  0.2100, -0.1268,  0.0529, -0.1652], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1718,  0.1687, -0.1877, -0.0099, -0.1287], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0786,  0.0915, -0.0851, -0.0049, -0.0602], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0786,  0.0915, -0.0851, -0.0049, -0.0602], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0241,  0.0115, -0.0422, -0.0832, -0.0404], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1494,  0.0011, -0.0866, -0.1175,  0.0776], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.3184, -0.7621, -2.6670, -5.1836, -2.8487], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2129, 0.1257, 0.3027, 0.0439, 0.1196], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.3988, 0.9087, 0.4460, 0.7965, 0.7112], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0786,  0.0915, -0.0851, -0.0049, -0.0602], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0004, -0.0002,  0.0007,  0.0014,  0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0004, -0.0002,  0.0007,  0.0014,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0212,  0.0257, -0.0246, -0.0022, -0.0160], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0529,  0.0627, -0.0590, -0.0042, -0.0403], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0529,  0.0627, -0.0590, -0.0042, -0.0403], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0161,  0.0071, -0.0011, -0.0003, -0.0147], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0540], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.3032], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0756,  0.0195, -0.0045, -0.0015, -0.0949], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0756,  0.0195, -0.0045, -0.0015, -0.0949], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3611,  0.2171,  0.4391, -0.0287, -0.3745], grad_fn=<SliceBackward0>)
  [Layer 14] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 14] Output sample values after mixer: tensor([ 0.3611,  0.2171,  0.4391, -0.0287, -0.3745], grad_fn=<SliceBackward0>)
  [Layer 14] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 14] Residual connection sample values: tensor([ 0.2439,  0.3772,  0.9649, -0.5562, -0.6130], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 15/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3.3162], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5491], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0469,  0.0617,  0.1706, -0.0921, -0.1130], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0089,  0.2244, -0.1274, -1.7344, -1.0560], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0089,  0.2244, -0.1274, -1.7344, -1.0560], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6377, -0.4223, -0.1298,  0.6785, -0.4684], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.1816, 1.8234, 3.4312, 1.0898, 1.9025], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.4773, -1.2982, -0.5150, -0.6377, -0.1675], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0904,  0.0926,  0.0329, -0.1078,  0.0225], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1279,  0.0857,  0.0081, -0.1255, -0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0598,  0.0447,  0.0041, -0.0588, -0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0598,  0.0447,  0.0041, -0.0588, -0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([0.1049, 0.0046, 0.0334, 0.0694, 0.0629], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0144, -0.0030, -0.0245,  0.0363, -0.0170], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2782, -0.6808, -2.7209, -0.1126, -3.8484], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0063, 0.0943, 0.3861, 0.0169, 0.1458], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9982, 0.9378, 0.3497, 0.9981, 0.5705], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0598,  0.0447,  0.0041, -0.0588, -0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.9525e-05, -1.7272e-06, -1.2585e-05, -2.6146e-05, -2.3722e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.5868e-05, -1.3132e-05, -2.2516e-05,  6.6219e-06,  9.6430e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.9331e-05,  1.8244e-05, -2.9460e-06, -6.6066e-06, -3.2916e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0102,  0.0076,  0.0007, -0.0100, -0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0102,  0.0076,  0.0007, -0.0100, -0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-4.5830e-05,  9.5205e-04, -4.1333e-05,  2.6107e-03,  6.5682e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0036], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([16.5577], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0008,  0.0213, -0.0007,  0.0524,  0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0008,  0.0213, -0.0007,  0.0524,  0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3355, -0.0397, -0.2377, -0.1194,  0.5463], grad_fn=<SliceBackward0>)
  [Layer 15] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 15] Output sample values after mixer: tensor([ 0.3355, -0.0397, -0.2377, -0.1194,  0.5463], grad_fn=<SliceBackward0>)
  [Layer 15] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 15] Residual connection sample values: tensor([ 0.5794,  0.3376,  0.7272, -0.6756, -0.0667], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 16/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([5.2367], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4370], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0988,  0.0481,  0.1136, -0.0967, -0.0109], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3530,  0.0875, -0.4568, -0.2856, -0.3988], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3530,  0.0875, -0.4568, -0.2856, -0.3988], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0093, -0.8986,  0.0839, -0.3261,  0.1554], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.0651, 3.6572, 2.5681, 1.6444, 2.5870], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.8404,  0.8465,  0.2864,  0.0093, -0.5851], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0319, -0.2360, -0.0006, -0.1126, -0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0042, -0.2771, -0.0138, -0.2050, -0.0448], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0021, -0.1195, -0.0068, -0.0920, -0.0219], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0021, -0.1195, -0.0068, -0.0920, -0.0219], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1596, -0.0265,  0.2017, -0.0469, -0.2785], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2432,  0.0265, -0.0812,  0.9408, -0.1761], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6906, -0.1348, -1.3129, -3.7740, -1.2635], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3809, 1.3140, 0.5019, 0.3326, 0.2729], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.3589, 0.8377, 0.5174, 0.2850, 0.7084], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0021, -0.1195, -0.0068, -0.0920, -0.0219], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.2849e-04,  2.1302e-05, -1.6230e-04,  3.7754e-05,  2.2412e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 4.9615e-04, -9.8633e-04, -3.3749e-06,  1.7131e-04,  6.6011e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0007, -0.0599, -0.0063, -0.0484, -0.0157], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0006, -0.1368, -0.0107, -0.1076, -0.0298], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0006, -0.1368, -0.0107, -0.1076, -0.0298], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 9.3941e-05, -6.2450e-03,  1.9031e-03,  1.3187e-02,  4.7677e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1200], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([2.8871], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0003, -0.0182,  0.0066,  0.0410,  0.0152], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0003, -0.0182,  0.0066,  0.0410,  0.0152], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.4522,  0.5029, -0.0142, -0.2627,  0.2373], grad_fn=<SliceBackward0>)
  [Layer 16] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 16] Output sample values after mixer: tensor([ 0.4522,  0.5029, -0.0142, -0.2627,  0.2373], grad_fn=<SliceBackward0>)
  [Layer 16] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 16] Residual connection sample values: tensor([ 1.0316,  0.8404,  0.7130, -0.9383,  0.1706], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 17/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([6.1253], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4041], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1612,  0.1103,  0.0992, -0.1208,  0.0257], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2071, -0.4847, -0.0584, -0.3547,  0.2678], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2071, -0.4847, -0.0584, -0.3547,  0.2678], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6557, -0.4453,  0.7358, -0.6937, -0.1398], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.7918, 1.6513, 1.3445, 2.4365, 2.0756], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.8958, -0.6822,  0.1687, -0.6557,  0.4550], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1261,  0.0775, -0.1753, -0.0476,  0.0258], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1579,  0.0513, -0.1897, -0.0530,  0.0384], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0727,  0.0263, -0.0859, -0.0258,  0.0196], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0727,  0.0263, -0.0859, -0.0258,  0.0196], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3097, -0.1914, -0.1587,  0.2808, -0.0522], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-9.8166e-02, -3.0166e-02,  2.5595e-04,  3.8369e-01, -9.6288e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.1571, -11.4668, -14.2150,  -0.1286, -14.2428],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0031, 0.0524, 0.0804, 0.2256, 0.0550], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9964, 0.5485, 0.3187, 0.9714, 0.4571], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0727,  0.0263, -0.0859, -0.0258,  0.0196], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-6.9300e-05,  4.2842e-05,  3.5523e-05, -6.2841e-05,  1.1689e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.9049e-05,  5.5861e-05,  7.7927e-05, -2.3758e-04,  5.1701e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.7687e-04, -6.7893e-06, -2.1636e-04,  6.6664e-05,  4.1042e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0471,  0.0169, -0.0556, -0.0166,  0.0127], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0471,  0.0169, -0.0556, -0.0166,  0.0127], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0044, -0.0031,  0.0016,  0.0024,  0.0019], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0396], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.0231], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0341, -0.0298,  0.0114,  0.0214,  0.0170], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0341, -0.0298,  0.0114,  0.0214,  0.0170], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1635,  0.9135, -0.1844, -0.1661, -0.7034], grad_fn=<SliceBackward0>)
  [Layer 17] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 17] Output sample values after mixer: tensor([ 0.1635,  0.9135, -0.1844, -0.1661, -0.7034], grad_fn=<SliceBackward0>)
  [Layer 17] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 17] Residual connection sample values: tensor([ 1.1952,  1.7539,  0.5286, -1.1044, -0.5328], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 18/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([9.5429], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3237], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1339,  0.1662,  0.0530, -0.1039, -0.0574], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2468, -0.7568, -0.4270, -0.1368,  0.3383], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2468, -0.7568, -0.4270, -0.1368,  0.3383], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.3766,  0.8191,  0.1954, -0.2330, -0.6195], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.6728, 1.9658, 1.4066, 2.1900, 2.5163], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1965,  0.4484, -0.5837, -0.3766,  0.9587], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1758, -0.4832,  0.0555, -0.2418, -0.2366], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1858, -0.7486,  0.3353, -0.2556, -0.2787], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0843, -0.2404,  0.1955, -0.1116, -0.1201], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0843, -0.2404,  0.1955, -0.1116, -0.1201], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0295, -0.1089, -0.1222,  0.0189,  0.0775], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2753,  0.1053, -0.1469, -0.0894,  0.0900], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3011, -1.4686, -1.2083, -1.2129, -2.5875], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.4284, 0.3368, 0.2709, 0.5233, 0.4330], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5727, 0.6098, 0.7209, 0.5301, 0.3261], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0843, -0.2404,  0.1955, -0.1116, -0.1201], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0011,  0.0039,  0.0044, -0.0007, -0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0014,  0.0040,  0.0050, -0.0013, -0.0031], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0239, -0.1110,  0.1147, -0.0535, -0.0155], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0402, -0.1574,  0.1525, -0.0751, -0.0387], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0402, -0.1574,  0.1525, -0.0751, -0.0387], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0056,  0.0381, -0.0257,  0.0048, -0.0077], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0262], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.1793], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0449,  0.1262, -0.1550,  0.0371, -0.0935], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0449,  0.1262, -0.1550,  0.0371, -0.0935], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.4932,  1.1577,  0.3610, -0.2600, -0.2112], grad_fn=<SliceBackward0>)
  [Layer 18] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 18] Output sample values after mixer: tensor([ 0.4932,  1.1577,  0.3610, -0.2600, -0.2112], grad_fn=<SliceBackward0>)
  [Layer 18] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 18] Residual connection sample values: tensor([ 1.6883,  2.9116,  0.8895, -1.3643, -0.7440], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 19/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([10.9967], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3016], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1736,  0.2585,  0.0854, -0.1206, -0.0764], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0558, -0.1360, -0.0825,  0.5890,  0.4689], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0558, -0.1360, -0.0825,  0.5890,  0.4689], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7602, -0.3483, -0.4778, -0.3714,  0.2324], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.9050, 2.4070, 2.2864, 1.9047, 1.8008], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.2690, -0.9309, -0.1395,  0.7602, -0.3797], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0477, -0.0912, -0.1106,  0.0263, -0.0490], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0120, -0.1155, -0.1156, -0.0163, -0.0820], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0060, -0.0544, -0.0544, -0.0081, -0.0393], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0060, -0.0544, -0.0544, -0.0081, -0.0393], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0861, -0.1271, -0.1623,  0.0518,  0.0337], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1671, -0.0111,  0.0277, -0.1805, -0.1976], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9436, -1.8179, -2.0862, -1.0006, -0.9650], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3193, 0.2809, 0.2071, 0.3025, 0.3733], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5377, 0.6002, 0.6492, 0.7388, 0.6975], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0060, -0.0544, -0.0544, -0.0081, -0.0393], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.6621e-04, -2.4531e-04, -3.1324e-04,  9.9943e-05,  6.4960e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.6220e-03,  3.0730e-03, -3.0451e-04, -2.3785e-03, -6.1695e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0037, -0.0076, -0.0066,  0.0039, -0.0049], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0030, -0.0137, -0.0128,  0.0030, -0.0093], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0030, -0.0137, -0.0128,  0.0030, -0.0093], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-8.6480e-05,  8.6751e-04,  5.0474e-04,  1.1233e-03, -2.6896e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0021], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([21.5638], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0023,  0.0238,  0.0177,  0.0289, -0.0984], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0023,  0.0238,  0.0177,  0.0289, -0.0984], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1704,  0.2532, -0.9305, -0.6208,  0.4039], grad_fn=<SliceBackward0>)
  [Layer 19] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 19] Output sample values after mixer: tensor([ 0.1704,  0.2532, -0.9305, -0.6208,  0.4039], grad_fn=<SliceBackward0>)
  [Layer 19] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 19] Residual connection sample values: tensor([ 1.8588,  3.1648, -0.0409, -1.9851, -0.3401], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 20/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([12.8402], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2791], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2005,  0.2926, -0.0041, -0.1818, -0.0356], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6184,  0.3245, -1.2018, -0.0184, -0.0652], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6184,  0.3245, -1.2018, -0.0184, -0.0652], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1798,  0.9004, -0.5055,  0.5243,  0.1627], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.9815, 2.1068, 2.6276, 2.1148, 1.9390], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5822, -0.5412, -1.2217, -0.1798, -0.3463], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2628,  0.1232, -0.0198,  0.1506,  0.1787], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([0.2243, 0.1317, 0.0467, 0.1318, 0.1512], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([0.1247, 0.0702, 0.0239, 0.0702, 0.0813], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([0.1247, 0.0702, 0.0239, 0.0702, 0.0813], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1435, -0.1047,  0.2515,  0.1948,  0.1370], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1112, -0.2088,  0.0461,  0.0218,  0.7026], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.6216, -5.0389, -1.2056, -1.6435, -1.3345], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1949, 0.0897, 0.1148, 0.3298, 0.1933], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7290, 0.6363, 0.8708, 0.5816, 0.7726], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([0.1247, 0.0702, 0.0239, 0.0702, 0.0813], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0035, -0.0025,  0.0061,  0.0047,  0.0033], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0048, -0.0027,  0.0044,  0.0044,  0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([6.4779e-03, 9.0700e-03, 6.1698e-03, 2.2589e-05, 1.6973e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([0.0075, 0.0096, 0.0064, 0.0006, 0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([0.0075, 0.0096, 0.0064, 0.0006, 0.0023], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.6178e-03,  1.8134e-03, -1.7669e-03, -5.2926e-06, -7.3926e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0081], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([11.0901], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-2.3882e-02,  2.8674e-02, -3.7507e-02, -8.5005e-05, -1.0608e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-2.3882e-02,  2.8674e-02, -3.7507e-02, -8.5005e-05, -1.0608e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3032, -0.3818,  0.2837,  0.4800, -0.2120], grad_fn=<SliceBackward0>)
  [Layer 20] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 20] Output sample values after mixer: tensor([ 0.3032, -0.3818,  0.2837,  0.4800, -0.2120], grad_fn=<SliceBackward0>)
  [Layer 20] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 20] Residual connection sample values: tensor([ 2.1620,  2.7829,  0.2427, -1.5051, -0.5520], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 21/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([14.5753], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2619], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1660,  0.1940,  0.0160, -0.0960, -0.0396], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7010,  0.0058, -0.2445, -0.5068, -0.5736], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7010,  0.0058, -0.2445, -0.5068, -0.5736], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5403,  0.4850, -0.1975,  0.0024,  0.0399], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.6800, 3.0151, 1.2144, 1.5899, 2.4939], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5341,  0.1242, -0.4314, -0.5403,  0.4050], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0757,  0.1160,  0.0305,  0.0109, -0.0128], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([0.0444, 0.0859, 0.0454, 0.0058, 0.0151], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([0.0227, 0.0448, 0.0232, 0.0029, 0.0076], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([0.0227, 0.0448, 0.0232, 0.0029, 0.0076], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0256, -0.1015, -0.0087, -0.0182,  0.0076], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0010, -0.0205, -0.0590,  0.0017, -0.0091], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.2092, -0.0434, -3.8147, -6.6624, -0.0228], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2793, 0.0831, 0.0980, 0.1132, 0.0911], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.4080, 0.9964, 0.6882, 0.4703, 0.9979], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([0.0227, 0.0448, 0.0232, 0.0029, 0.0076], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.6247e-04, -6.4384e-04, -5.5434e-05, -1.1511e-04,  4.8164e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.2348e-04, -7.2431e-04, -2.8381e-05, -1.4641e-04,  5.4655e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([6.0134e-04, 1.1163e-03, 6.8970e-04, 2.7477e-04, 9.0072e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([0.0046, 0.0090, 0.0048, 0.0008, 0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([0.0046, 0.0090, 0.0048, 0.0008, 0.0014], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.0662e-03,  2.6089e-05, -5.1157e-04, -1.4983e-04, -2.9404e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([58.1186], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0785,  0.0018, -0.0460, -0.0114, -0.0200], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0785,  0.0018, -0.0460, -0.0114, -0.0200], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2431,  0.4651,  0.1943, -0.1748, -0.2221], grad_fn=<SliceBackward0>)
  [Layer 21] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 21] Output sample values after mixer: tensor([-0.2431,  0.4651,  0.1943, -0.1748, -0.2221], grad_fn=<SliceBackward0>)
  [Layer 21] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 21] Residual connection sample values: tensor([ 1.9189,  3.2481,  0.4370, -1.6799, -0.7741], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 22/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([16.9523], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2429], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2149,  0.3064,  0.0437, -0.1548, -0.0813], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0212, -0.9233, -0.0898,  0.2560, -0.5144], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0212, -0.9233, -0.0898,  0.2560, -0.5144], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.7527,  0.7318, -1.2307,  0.3781,  0.1687], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.0095, 1.9259, 1.8030, 1.8681, 2.2073], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.8760, -0.9552, -0.0386, -0.7527,  0.7301], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0378,  0.2195, -0.1898, -0.0434,  0.0499], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0098,  0.1407,  0.1296, -0.0843, -0.0158], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0049,  0.0753,  0.0690, -0.0404, -0.0078], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0049,  0.0753,  0.0690, -0.0404, -0.0078], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0600, -0.0890, -0.0336, -0.0996, -0.0045], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1764, -0.0701, -0.0039,  0.0007, -0.0762], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.1489, -3.5006, -2.8321, -5.5396, -1.7186], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0266, 0.2498, 0.3294, 0.2659, 0.0257], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8953, 0.4171, 0.3934, 0.2292, 0.9568], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0049,  0.0753,  0.0690, -0.0404, -0.0078], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-7.8207e-06,  1.1601e-05,  4.3740e-06,  1.2986e-05,  5.8520e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.0485e-04, -1.1871e-04, -3.0191e-06, -2.4459e-04,  9.1978e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0021,  0.0013,  0.0019,  0.0002, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0033,  0.0196,  0.0186, -0.0095, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0033,  0.0196,  0.0186, -0.0095, -0.0023], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-3.4945e-05, -5.1415e-03, -7.9908e-04, -1.3766e-03,  4.5211e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0035], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([16.7636], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0002, -0.0808, -0.0072, -0.0304,  0.0065], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0002, -0.0808, -0.0072, -0.0304,  0.0065], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2907,  0.3300, -1.1714,  0.1316, -0.5105], grad_fn=<SliceBackward0>)
  [Layer 22] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 22] Output sample values after mixer: tensor([ 0.2907,  0.3300, -1.1714,  0.1316, -0.5105], grad_fn=<SliceBackward0>)
  [Layer 22] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 22] Residual connection sample values: tensor([ 2.2096,  3.5781, -0.7343, -1.5484, -1.2845], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 23/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([19.5885], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2259], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1615,  0.2250, -0.0491, -0.0979, -0.0910], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0611,  0.1635, -0.4054,  0.1693, -0.2454], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0611,  0.1635, -0.4054,  0.1693, -0.2454], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.3046, -0.0472, -0.2988,  0.5105, -0.4208], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9679, 0.9048, 1.2611, 0.3896, 1.5426], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.2347,  0.1229, -0.2822, -0.3046, -0.4408], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1110, -0.0363, -0.0929,  0.1189,  0.1310], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1334, -0.0694, -0.1043,  0.1167,  0.0816], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0623, -0.0335, -0.0494,  0.0618,  0.0425], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0623, -0.0335, -0.0494,  0.0618,  0.0425], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0516, -0.0424,  0.1115, -0.0370,  0.0120], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0152, -0.0163,  0.0745, -0.0117,  0.0044], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0811, -3.7998, -0.0826, -0.4878, -1.4532], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0309, 0.1033, 0.0362, 0.0021, 0.0048], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9975, 0.6754, 0.9970, 0.9990, 0.9930], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0623, -0.0335, -0.0494,  0.0618,  0.0425], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 9.9228e-05,  8.1500e-05, -2.1453e-04,  7.1092e-05, -2.3023e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.7016e-04,  3.6162e-04, -6.1165e-04,  1.2282e-04, -8.9434e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.2776e-03,  6.0548e-05, -7.6716e-04,  7.8721e-05,  1.0120e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 5.0752e-05,  7.7489e-04,  2.8736e-04, -1.2387e-03, -8.0493e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 5.0752e-05,  7.7489e-04,  2.8736e-04, -1.2387e-03, -8.0493e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.5029e-06,  6.8537e-05, -4.6597e-05, -1.1375e-04,  8.6698e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0005], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([43.3137], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0003,  0.0017, -0.0020, -0.0078,  0.0175], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0003,  0.0017, -0.0020, -0.0078,  0.0175], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.4674,  1.1125, -0.8309,  0.6543,  0.2569], grad_fn=<SliceBackward0>)
  [Layer 23] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 23] Output sample values after mixer: tensor([-0.4674,  1.1125, -0.8309,  0.6543,  0.2569], grad_fn=<SliceBackward0>)
  [Layer 23] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 23] Residual connection sample values: tensor([ 1.7422,  4.6906, -1.5653, -0.8941, -1.0276], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 24/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([25.1588], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1994], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0924,  0.2374, -0.0766, -0.0422, -0.0529], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.8377,  0.1054,  1.2171, -0.3101, -0.1648], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.8377,  0.1054,  1.2171, -0.3101, -0.1648], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.7061,  0.5487,  0.1106,  0.1271, -0.3041], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.3511, 1.1592, 0.4229, 1.3178, 1.4386], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4722,  0.7547, -0.1294, -0.7061,  0.3786], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1524, -0.0309,  0.0186,  0.0332, -0.1389], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1491, -0.0309,  0.0146,  0.0316, -0.1437], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0801, -0.0152,  0.0074,  0.0161, -0.0667], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0801, -0.0152,  0.0074,  0.0161, -0.0667], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0595,  0.0544, -0.0161,  0.0149,  0.0852], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1209, -0.1270, -0.2710, -0.1328,  0.0863], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0742, -3.4497, -3.2885, -0.1609, -2.6945], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0563, 0.0899, 0.0690, 0.0170, 0.0880], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9958, 0.7335, 0.7971, 0.9973, 0.7888], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0801, -0.0152,  0.0074,  0.0161, -0.0667], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.6831e-04,  2.4534e-04, -7.2539e-05,  6.7222e-05,  3.8453e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([1.8443e-04, 5.9873e-04, 9.9695e-05, 9.7389e-05, 6.5089e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0008, -0.0004, -0.0002, -0.0006, -0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0012, -0.0003, -0.0003, -0.0007, -0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0012, -0.0003, -0.0003, -0.0007, -0.0012], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-7.1797e-04, -1.7662e-05, -2.6309e-04,  9.6258e-05,  9.4102e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([73.7521], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0501, -0.0017, -0.0235,  0.0313,  0.0181], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0501, -0.0017, -0.0235,  0.0313,  0.0181], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.9415, -0.0300,  0.7720,  0.2816,  0.3517], grad_fn=<SliceBackward0>)
  [Layer 24] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 24] Output sample values after mixer: tensor([ 0.9415, -0.0300,  0.7720,  0.2816,  0.3517], grad_fn=<SliceBackward0>)
  [Layer 24] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 24] Residual connection sample values: tensor([ 2.6836,  4.6606, -0.7933, -0.6125, -0.6760], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 25/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([33.5607], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1726], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1381,  0.2192, -0.0385, -0.0278, -0.0344], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0619,  0.0223,  0.7004,  0.2214, -0.3022], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0619,  0.0223,  0.7004,  0.2214, -0.3022], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.8191, -0.1146, -0.2902,  0.4650, -0.1042], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.9249, 0.2430, 2.0167, 2.0354, 1.8681], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6639,  0.2826,  0.3083, -0.8191,  0.2783], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0803,  0.0726,  0.1110, -0.0404,  0.1621], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0828,  0.0444,  0.0996,  0.0204,  0.1563], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0397,  0.0227,  0.0523,  0.0103,  0.0843], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0397,  0.0227,  0.0523,  0.0103,  0.0843], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0124,  0.1039,  0.0645, -0.0526,  0.0179], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0192,  0.0541, -0.1093, -0.0638, -0.0790], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -0.3702,  -1.5045,  -5.7210,  -0.8176, -14.6662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.6971, 0.0081, 0.1819, 0.0526, 0.1946], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7725, 0.9878, 0.3533, 0.9579, 0.0576], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0397,  0.0227,  0.0523,  0.0103,  0.0843], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0003, -0.0029, -0.0018,  0.0015, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0001, -0.0020, -0.0032,  0.0018, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-4.3035e-03,  4.5014e-05,  6.4310e-03,  8.4804e-04,  1.1557e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0047,  0.0003,  0.0070,  0.0010,  0.0124], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0047,  0.0003,  0.0070,  0.0010,  0.0124], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.5046e-04,  3.1864e-06,  3.2658e-03,  1.1748e-04, -1.5974e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([57.7621], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-1.0405e-02,  1.5053e-04,  2.4906e-01,  5.3446e-03, -1.5912e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-1.0405e-02,  1.5053e-04,  2.4906e-01,  5.3446e-03, -1.5912e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3447,  0.0778, -0.4444, -0.0708, -0.6080], grad_fn=<SliceBackward0>)
  [Layer 25] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 25] Output sample values after mixer: tensor([ 0.3447,  0.0778, -0.4444, -0.0708, -0.6080], grad_fn=<SliceBackward0>)
  [Layer 25] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 25] Residual connection sample values: tensor([ 3.0283,  4.7384, -1.2378, -0.6832, -1.2840], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 26/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([41.1130], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1560], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1822,  0.2638, -0.0694, -0.0376, -0.0755], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2374, -0.3787,  0.0142, -0.3900, -0.8782], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2374, -0.3787,  0.0142, -0.3900, -0.8782], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3083, -0.3545, -0.1205, -0.1452,  0.2332], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.9422, 1.8878, 1.5429, 2.2536, 3.0186], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4492,  0.8614, -0.5564,  0.3083, -0.1835], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2131,  0.1939, -0.0092,  0.0020,  0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1246,  0.1379,  0.0550, -0.0249,  0.0089], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0662,  0.0737,  0.0282, -0.0123,  0.0045], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0662,  0.0737,  0.0282, -0.0123,  0.0045], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0484,  0.0751,  0.0082,  0.0655,  0.0551], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1604, -0.0388, -0.0145,  0.0027, -0.0414], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9595, -0.3945, -0.8420, -1.4275, -0.1466], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3418, 0.5670, 0.2639, 0.7328, 0.2034], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7204, 0.7996, 0.8008, 0.3513, 0.9706], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0662,  0.0737,  0.0282, -0.0123,  0.0045], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0011,  0.0017,  0.0002,  0.0015,  0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0005, -0.0020, -0.0041,  0.0020, -0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0049,  0.0094,  0.0022, -0.0022,  0.0081], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0036,  0.0187,  0.0058, -0.0038,  0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0036,  0.0187,  0.0058, -0.0038,  0.0087], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-3.7427e-04, -2.8838e-03,  4.1355e-05,  5.9070e-04, -2.2415e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0012], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([29.2005], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0055, -0.0935,  0.0011,  0.0248, -0.0822], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0055, -0.0935,  0.0011,  0.0248, -0.0822], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.8226,  0.2589, -1.1800, -0.6682, -0.4676], grad_fn=<SliceBackward0>)
  [Layer 26] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 26] Output sample values after mixer: tensor([ 0.8226,  0.2589, -1.1800, -0.6682, -0.4676], grad_fn=<SliceBackward0>)
  [Layer 26] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 26] Residual connection sample values: tensor([ 3.8509,  4.9973, -2.4177, -1.3514, -1.7516], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 27/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([48.9346], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1430], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2304,  0.2728, -0.1416, -0.0727, -0.1090], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4766, -0.5649,  0.3578, -0.2289,  0.6271], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4766, -0.5649,  0.3578, -0.2289,  0.6271], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([0.3896, 0.2959, 0.3040, 0.8095, 0.1861], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.9152, 1.7046, 1.6175, 2.1778, 2.4298], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.7173, -0.1709,  0.2306,  0.3896,  0.0301], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0810,  0.2306,  0.1349, -0.5220,  0.0109], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0550,  0.1941,  0.1249, -0.7239, -0.0188], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0283,  0.1065,  0.0664, -0.2364, -0.0093], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0283,  0.1065,  0.0664, -0.2364, -0.0093], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0598, -0.0008,  0.1629, -0.1328,  0.0305], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0053, -0.2522, -0.0472, -0.0861, -0.0981], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3662, -1.3799, -1.8268, -2.0409, -2.3490], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2570, 0.2349, 0.2243, 0.1388, 0.4213], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7039, 0.7231, 0.6638, 0.7533, 0.3717], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0283,  0.1065,  0.0664, -0.2364, -0.0093], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.3464e-04, -6.0920e-06,  1.1832e-03, -9.6485e-04,  2.2130e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0002, -0.0001,  0.0020, -0.0009,  0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0045,  0.0118,  0.0028, -0.0318,  0.0015], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0074,  0.0226,  0.0095, -0.0557,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0074,  0.0226,  0.0095, -0.0557,  0.0005], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0013, -0.0046,  0.0020,  0.0056,  0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0060], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.8625], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0293, -0.0732,  0.0546,  0.1389,  0.0032], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0293, -0.0732,  0.0546,  0.1389,  0.0032], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.5879, -0.0448, -1.5483, -0.6843, -1.8303], grad_fn=<SliceBackward0>)
  [Layer 27] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 27] Output sample values after mixer: tensor([-0.5879, -0.0448, -1.5483, -0.6843, -1.8303], grad_fn=<SliceBackward0>)
  [Layer 27] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 27] Residual connection sample values: tensor([ 3.2630,  4.9524, -3.9660, -2.0357, -3.5819], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 28/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([57.1945], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1322], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1752,  0.2488, -0.2013, -0.1004, -0.1903], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8248,  0.5723, -0.5674, -0.1267,  0.0194], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8248,  0.5723, -0.5674, -0.1267,  0.0194], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5632, -0.7451, -0.2017, -1.1507, -0.9161], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.2345, 1.7190, 2.3000, 1.9059, 1.8893], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5642, -1.2131, -0.6864, -0.5632, -0.7533], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0398,  0.3504, -0.0207, -0.2118,  0.1255], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0179,  0.3390, -0.0343, -0.2232,  0.2302], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0089,  0.1980, -0.0169, -0.0992,  0.1283], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0089,  0.1980, -0.0169, -0.0992,  0.1283], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0764, -0.0504, -0.1301,  0.0244,  0.2356], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0693, -0.1361,  0.4676, -0.0078,  0.3520], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2728, -3.9978, -2.5177, -2.1714, -2.8655], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0346, 0.2239, 0.3546, 0.1099, 0.0968], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9570, 0.4086, 0.4095, 0.7877, 0.7578], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0089,  0.1980, -0.0169, -0.0992,  0.1283], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.3479e-05,  1.5483e-05,  3.9972e-05, -7.4983e-06, -7.2362e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 8.4245e-06, -1.7672e-04,  1.9664e-05,  3.6959e-04,  1.2377e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0003,  0.0058,  0.0005, -0.0022,  0.0027], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0016,  0.0487, -0.0031, -0.0237,  0.0305], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0016,  0.0487, -0.0031, -0.0237,  0.0305], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0004, 0.0178, 0.0006, 0.0014, 0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0016], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([24.8774], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0212, 0.6080, 0.0208, 0.0526, 0.0108], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0212, 0.6080, 0.0208, 0.0526, 0.0108], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1808,  1.4478, -2.9445,  2.4272, -0.9028], grad_fn=<SliceBackward0>)
  [Layer 28] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 28] Output sample values after mixer: tensor([-0.1808,  1.4478, -2.9445,  2.4272, -0.9028], grad_fn=<SliceBackward0>)
  [Layer 28] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 28] Residual connection sample values: tensor([ 3.0823,  6.4002, -6.9105,  0.3915, -4.4847], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 29/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([68.6372], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1207], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1438,  0.2856, -0.3087,  0.0168, -0.2080], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5055,  0.1743,  0.3536, -0.1900,  0.0957], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5055,  0.1743,  0.3536, -0.1900,  0.0957], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7649,  0.5887,  0.5918, -0.9320,  0.2638], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0795, 1.0070, 0.8309, 1.3512, 0.8217], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.6059,  0.7516,  0.8003,  0.7649, -0.3100], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0622, -0.1698, -0.1058,  0.2011,  0.0144], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0756, -0.2043, -0.1029,  0.1406, -0.0987], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0364, -0.0918, -0.0488,  0.0753, -0.0469], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0364, -0.0918, -0.0488,  0.0753, -0.0469], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0083,  0.0294, -0.0479,  0.0946, -0.0235], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1383, -0.1525, -0.2087, -0.2778, -0.2756], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8072, -2.1170, -1.9257, -0.2904, -2.0499], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0612, 0.1299, 0.1405, 0.0061, 0.1375], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8952, 0.7596, 0.7630, 0.9982, 0.7544], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0364, -0.0918, -0.0488,  0.0753, -0.0469], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.8422e-05, -6.5384e-05,  1.0674e-04, -2.1066e-04,  5.2284e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.2713e-04,  6.3898e-05,  2.6508e-04,  3.0692e-05, -1.3317e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0060, -0.0085, -0.0106,  0.0170, -0.0156], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0432, -0.1023, -0.0605,  0.0940, -0.0636], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0432, -0.1023, -0.0605,  0.0940, -0.0636], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0082, -0.0097, -0.0126, -0.0081, -0.0032], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0193], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.1880], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0646, -0.0717, -0.1473, -0.0850, -0.0297], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0646, -0.0717, -0.1473, -0.0850, -0.0297], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.5650,  1.3474,  0.1070, -0.4373, -0.4089], grad_fn=<SliceBackward0>)
  [Layer 29] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 29] Output sample values after mixer: tensor([-0.5650,  1.3474,  0.1070, -0.4373, -0.4089], grad_fn=<SliceBackward0>)
  [Layer 29] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 29] Residual connection sample values: tensor([ 2.5173,  7.7476, -6.8035, -0.0458, -4.8936], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 30/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([89.2449], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1059], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1135,  0.3436, -0.2996, -0.0019, -0.2266], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6814, -0.1412, -1.5066,  0.3702, -0.1956], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6814, -0.1412, -1.5066,  0.3702, -0.1956], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.1255, -0.6204, -0.1589,  0.0835,  0.5794], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.1716, 2.2128, 2.2957, 2.6699, 2.1994], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.0781,  0.1552,  0.6974,  1.1255, -0.5649], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1810, -0.0851, -0.0678, -0.0136, -0.0898], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1577, -0.0714, -0.0346, -0.0317, -0.1171], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0851, -0.0344, -0.0170, -0.0156, -0.0551], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0851, -0.0344, -0.0170, -0.0156, -0.0551], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3240, -0.0404,  0.0153,  0.1256, -0.0272], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2706, -0.2377, -0.2448, -0.1024, -0.1616], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0150, -0.4675, -0.4280, -0.7895, -0.4175], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0128, 0.6951, 1.2974, 0.6020, 0.6864], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9871, 0.7225, 0.5739, 0.6217, 0.7508], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0851, -0.0344, -0.0170, -0.0156, -0.0551], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.5278e-04, -4.3997e-05,  1.6616e-05,  1.3677e-04, -2.9584e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 4.8352e-04, -1.2439e-04, -6.1214e-05,  6.2505e-04, -6.7284e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 5.2740e-04, -3.8185e-04, -8.2954e-04, -8.0780e-06,  4.4270e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1053, -0.0428, -0.0218, -0.0192, -0.0675], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1053, -0.0428, -0.0218, -0.0192, -0.0675], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0241,  0.0028,  0.0060, -0.0042,  0.0060], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0134], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.6364], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2993,  0.0354,  0.0456, -0.0434,  0.0546], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2993,  0.0354,  0.0456, -0.0434,  0.0546], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.4904,  0.8563, -1.6843,  5.5485,  0.3261], grad_fn=<SliceBackward0>)
  [Layer 30] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 30] Output sample values after mixer: tensor([-2.4904,  0.8563, -1.6843,  5.5485,  0.3261], grad_fn=<SliceBackward0>)
  [Layer 30] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 30] Residual connection sample values: tensor([ 0.0268,  8.6039, -8.4877,  5.5027, -4.5675], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 31/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([112.0968], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0945], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0011,  0.3403, -0.3366,  0.2124, -0.1860], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8552, -0.0767,  0.4113,  0.4041, -0.7597], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8552, -0.0767,  0.4113,  0.4041, -0.7597], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0763,  0.3346,  0.6344,  1.0027, -0.2971], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.2687, 2.1083, 1.4609, 0.3621, 1.6106], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5427, -0.3020,  1.1248,  0.0763, -0.4215], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0151, -0.0450,  0.1316, -0.1682,  0.0363], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0146, -0.0553,  0.1327, -0.1701,  0.0310], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0073, -0.0269,  0.0707, -0.0779,  0.0158], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0073, -0.0269,  0.0707, -0.0779,  0.0158], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-1.3608e-02, -5.0023e-02,  2.0253e-05, -2.6778e-01, -3.5801e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.2251, -0.0260, -0.1550, -0.0405,  0.0387], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.9478, -3.5384, -4.7060, -2.4630, -0.9027], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2810, 0.1733, 0.0663, 0.0848, 0.1926], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.4368, 0.5417, 0.7319, 0.8115, 0.8404], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0073, -0.0269,  0.0707, -0.0779,  0.0158], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.8046e-05, -1.0310e-04,  4.1742e-08, -5.5191e-04, -7.3787e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0023,  0.0010,  0.0003, -0.0022, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0056, -0.0029,  0.0136, -0.0116,  0.0093], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0106, -0.0214,  0.0623, -0.0652,  0.0201], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0106, -0.0214,  0.0623, -0.0652,  0.0201], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0027,  0.0008,  0.0154, -0.0158, -0.0049], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0165], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.7719], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0414,  0.0105,  0.1834, -0.2001, -0.0732], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0414,  0.0105,  0.1834, -0.2001, -0.0732], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.6017,  0.1564, -1.1264, -0.6606, -1.0895], grad_fn=<SliceBackward0>)
  [Layer 31] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 31] Output sample values after mixer: tensor([ 0.6017,  0.1564, -1.1264, -0.6606, -1.0895], grad_fn=<SliceBackward0>)
  [Layer 31] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 31] Residual connection sample values: tensor([ 0.6285,  8.7603, -9.6142,  4.8420, -5.6569], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 32/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([134.7076], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0862], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0246,  0.3440, -0.3766,  0.1776, -0.2300], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4542, -0.6787, -1.2467, -1.0541, -0.4395], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4542, -0.6787, -1.2467, -1.0541, -0.4395], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4916, -0.1814,  0.6073,  0.9462,  0.7807], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3000, 2.3254, 1.6373, 2.3870, 2.3728], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0430, -0.1956, -0.9272,  0.4916,  0.2318], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2643,  0.0079, -0.0663, -0.1792, -0.0122], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.3015, -0.0441, -0.0821, -0.1667, -0.0191], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1733, -0.0216, -0.0394, -0.0764, -0.0095], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1733, -0.0216, -0.0394, -0.0764, -0.0095], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0643,  0.0794,  0.0151, -0.0914, -0.0519], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2760, -0.1938, -0.0633, -0.2777, -0.2013], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6971, -2.0893, -1.7967, -1.3894, -1.0395], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2610, 0.0543, 0.4870, 0.7671, 1.0459], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8336, 0.8927, 0.4169, 0.3444, 0.3371], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1733, -0.0216, -0.0394, -0.0764, -0.0095], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0029,  0.0036,  0.0007, -0.0041, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0032,  0.0046,  0.0013, -0.0054, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0242, -0.0200, -0.0056, -0.0119,  0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0658, -0.0251, -0.0151, -0.0303,  0.0035], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0658, -0.0251, -0.0151, -0.0303,  0.0035], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0116,  0.0057,  0.0042,  0.0082, -0.0006], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0164], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.8068], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1102,  0.0439,  0.0621,  0.1001, -0.0060], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1102,  0.0439,  0.0621,  0.1001, -0.0060], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.8771,  0.6950, -1.2401,  0.5248, -3.8035], grad_fn=<SliceBackward0>)
  [Layer 32] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 32] Output sample values after mixer: tensor([-1.8771,  0.6950, -1.2401,  0.5248, -3.8035], grad_fn=<SliceBackward0>)
  [Layer 32] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 32] Residual connection sample values: tensor([ -1.2486,   9.4553, -10.8543,   5.3668,  -9.4604],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 33/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([157.9849], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0796], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0468,  0.3673, -0.4145,  0.1990, -0.3673], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1398,  0.5406, -1.7534,  0.9387,  0.1827], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1398,  0.5406, -1.7534,  0.9387,  0.1827], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.0278, -0.0071,  0.9949, -1.4221,  0.7594], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.1758,  0.6570,  1.2302,  2.0532, -0.8981], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5178, -0.0701, -0.3028, -1.0278,  1.0434], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1522, -0.1938, -0.1813, -0.2500, -0.1379], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1654, -0.2432, -0.1545, -0.2512, -0.1391], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0759, -0.1069, -0.0713, -0.1099, -0.0647], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0759, -0.1069, -0.0713, -0.1099, -0.0647], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0297, -0.0852,  0.0571,  0.0371, -0.0097], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0038, -0.0959, -0.1536, -0.0264, -0.0324], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9791, -9.6938, -6.1678, -0.1135, -2.0903], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0099, 0.0192, 0.0437, 0.0616, 0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9807, 0.8304, 0.7640, 0.9930, 0.9976], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0759, -0.1069, -0.0713, -0.1099, -0.0647], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.2239e-05,  6.3778e-05, -4.2738e-05, -2.7801e-05,  7.2891e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.5383e-04,  5.2125e-05, -6.1871e-05, -2.8912e-05,  7.5487e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.8728e-04, -2.5421e-04,  8.0881e-05, -6.3448e-04, -8.2722e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0793, -0.1115, -0.0742, -0.1151, -0.0682], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0793, -0.1115, -0.0742, -0.1151, -0.0682], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0052, -0.0381,  0.0192, -0.0776, -0.0068], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0148], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.2155], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0638, -0.2810,  0.1783, -0.7046, -0.0698], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0638, -0.2810,  0.1783, -0.7046, -0.0698], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 3.1295,  1.6997, -0.7990,  0.8232, -1.2768], grad_fn=<SliceBackward0>)
  [Layer 33] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 33] Output sample values after mixer: tensor([ 3.1295,  1.6997, -0.7990,  0.8232, -1.2768], grad_fn=<SliceBackward0>)
  [Layer 33] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 33] Residual connection sample values: tensor([  1.8808,  11.1550, -11.6533,   6.1900, -10.7372],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 34/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([201.9052], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0704], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0510,  0.3205, -0.3158,  0.1692, -0.3053], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2267,  0.3115, -0.6189, -0.3443, -1.0279], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2267,  0.3115, -0.6189, -0.3443, -1.0279], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5366, -0.2337, -0.7452, -0.6894, -0.0753], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.1124,  0.4591,  1.8457, -1.3013, -1.2893], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0410, 0.5418, 0.3432, 0.5366, 0.0739], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1347,  0.0440, -0.1325,  0.1689, -0.0150], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1666,  0.0701, -0.1444,  0.1294, -0.0235], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0764,  0.0363, -0.0670,  0.0689, -0.0116], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0764,  0.0363, -0.0670,  0.0689, -0.0116], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0562,  0.0047, -0.0354,  0.0633, -0.0355], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0210, -0.2115, -0.2425, -0.0694, -0.1924], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.5611, -2.4811, -2.8936, -0.0159, -0.0261], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1511, 0.0509, 0.0580, 0.0039, 0.0021], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6791, 0.8814, 0.8455, 0.9999, 0.9999], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0764,  0.0363, -0.0670,  0.0689, -0.0116], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-6.4898e-04, -5.4271e-05,  4.0900e-04, -7.3017e-04,  4.0931e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.2543e-03,  7.2857e-07,  5.9244e-04, -1.5174e-03,  5.9830e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0030,  0.0013, -0.0008,  0.0048,  0.0022], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0500,  0.0236, -0.0420,  0.0473, -0.0049], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0500,  0.0236, -0.0420,  0.0473, -0.0049], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0050,  0.0042,  0.0091, -0.0067,  0.0013], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0058], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.1737], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1319,  0.1083,  0.2655, -0.2212,  0.0416], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1319,  0.1083,  0.2655, -0.2212,  0.0416], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.4451, -2.6243, -3.0755,  1.7115, -0.6710], grad_fn=<SliceBackward0>)
  [Layer 34] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 34] Output sample values after mixer: tensor([ 2.4451, -2.6243, -3.0755,  1.7115, -0.6710], grad_fn=<SliceBackward0>)
  [Layer 34] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 34] Residual connection sample values: tensor([  4.3259,   8.5307, -14.7288,   7.9015, -11.4083],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 35/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([296.3966], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0581], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1299,  0.2557, -0.4344,  0.2186, -0.3391], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.5110, -0.3414,  0.5476,  0.5718,  0.8491], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.5110, -0.3414,  0.5476,  0.5718,  0.8491], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.6980,  0.5344, -0.3842, -0.9529,  0.1065], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.2698, 0.7367, 1.8537, 1.6804, 0.5325], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.7415, -0.0892, -0.3878, -1.6980,  0.1216], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2846, -0.1414,  0.0518, -0.2223,  0.0404], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1286, -0.1002,  0.0156, -0.2673, -0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0684, -0.0476,  0.0078, -0.1159, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0684, -0.0476,  0.0078, -0.1159, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0451,  0.2710, -0.2780,  0.1876, -0.0325], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2240,  0.3565, -0.1460, -0.2421, -0.1769], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7098, -2.7746, -0.4453, -1.1391, -3.5906], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0847, 0.0352, 0.7377, 0.3145, 0.0437], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9416, 0.9070, 0.7200, 0.6989, 0.8547], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0684, -0.0476,  0.0078, -0.1159, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0003,  0.0016, -0.0016,  0.0011, -0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0054, -0.0041,  0.0098, -0.0103, -0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0081, -0.0146, -0.0085, -0.0202,  0.0053], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0382, -0.0468, -0.0032, -0.0986,  0.0050], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0382, -0.0468, -0.0032, -0.0986,  0.0050], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0104,  0.0066, -0.0011, -0.0360,  0.0030], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0235], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.5154], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2221,  0.0751, -0.0088, -0.3332,  0.0367], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2221,  0.0751, -0.0088, -0.3332,  0.0367], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.0567,  6.8862, -2.8010,  2.5568, -3.5577], grad_fn=<SliceBackward0>)
  [Layer 35] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 35] Output sample values after mixer: tensor([-1.0567,  6.8862, -2.8010,  2.5568, -3.5577], grad_fn=<SliceBackward0>)
  [Layer 35] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 35] Residual connection sample values: tensor([  3.2692,  15.4169, -17.5298,  10.4583, -14.9659],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 36/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([425.2092], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0485], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0778,  0.3714, -0.4143,  0.2455, -0.3647], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8205, -0.7093,  0.1303, -1.6749, -0.3335], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8205, -0.7093,  0.1303, -1.6749, -0.3335], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5441,  1.0578, -0.0916, -0.3781,  0.1374], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.4950, 3.2158, 0.6215, 3.6513, 1.4757], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0056,  0.0599,  0.4619, -0.5441, -0.3173], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0681,  0.1981,  0.0157, -0.0687, -0.0471], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0319,  0.1980, -0.0128, -0.0936, -0.0750], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0162,  0.1087, -0.0063, -0.0446, -0.0361], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0162,  0.1087, -0.0063, -0.0446, -0.0361], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0804,  0.3257, -0.0026, -0.1143, -0.0790], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.7626, -0.2785, -0.2724, -0.1218, -0.1553], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6566, -1.1306, -1.6058, -2.4414, -2.8823], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0691, 0.0880, 0.0398, 0.8906, 0.1681], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8323, 0.9053, 0.9381, 0.1137, 0.6161], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0162,  0.1087, -0.0063, -0.0446, -0.0361], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 8.9871e-05,  3.6426e-04, -2.8796e-06, -1.2779e-04, -8.8363e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0011, -0.0033, -0.0003,  0.0009,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0021,  0.0054, -0.0059, -0.0012, -0.0032], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0164,  0.1300, -0.0132, -0.0523, -0.0445], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0164,  0.1300, -0.0132, -0.0523, -0.0445], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0041, -0.0304, -0.0009,  0.0138,  0.0062], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0140], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.4352], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0511, -0.5496, -0.0111,  0.1900,  0.0737], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0511, -0.5496, -0.0111,  0.1900,  0.0737], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 3.2540,  3.4448, -6.5266,  0.8556, -2.3532], grad_fn=<SliceBackward0>)
  [Layer 36] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 36] Output sample values after mixer: tensor([ 3.2540,  3.4448, -6.5266,  0.8556, -2.3532], grad_fn=<SliceBackward0>)
  [Layer 36] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 36] Residual connection sample values: tensor([  6.5232,  18.8617, -24.0564,  11.3139, -17.3191],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 37/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([561.7933], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0422], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1570,  0.4643, -0.5719,  0.2634, -0.4199], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2067,  1.5669,  1.4559, -2.8305, -0.2669], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2067,  1.5669,  1.4559, -2.8305, -0.2669], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0773, -0.0613,  1.4291,  0.2917,  0.3171], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.3882, -0.4715,  1.0408,  2.7083,  0.6051], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0595,  0.1299, -0.6888, -0.0773, -0.2778], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0241,  0.0262,  0.1398,  0.0989,  0.0698], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0365, -0.0023,  0.1448, -0.0520,  0.0845], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0179, -0.0011,  0.0777, -0.0253,  0.0440], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0179, -0.0011,  0.0777, -0.0253,  0.0440], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1058,  0.1878, -0.1212, -0.0145, -0.0801], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1270,  0.0685, -0.1775, -0.0824, -0.2312], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0606, -3.2470, -0.8191, -0.2453, -1.9752], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0371, 0.0061, 0.0263, 0.0186, 0.0213], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9978, 0.9804, 0.9787, 0.9954, 0.9589], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0179, -0.0011,  0.0777, -0.0253,  0.0440], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-7.0194e-05, -1.2462e-04,  8.0424e-05,  9.6080e-06,  5.3158e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 6.0217e-05, -5.4332e-04, -7.2990e-04,  6.5137e-04, -3.1967e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0030, -0.0083, -0.0069,  0.0700,  0.0467], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0005, -0.0081, -0.0216,  0.0749,  0.0384], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0005, -0.0081, -0.0216,  0.0749,  0.0384], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 5.1814e-05, -1.0470e-02, -2.5558e-02, -1.1802e-02, -4.4383e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0441], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.7638], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0004, -0.0732, -0.3522, -0.3005, -0.0253], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0004, -0.0732, -0.3522, -0.3005, -0.0253], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.2537,  0.4100, -6.2624,  5.9590, -2.8882], grad_fn=<SliceBackward0>)
  [Layer 37] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 37] Output sample values after mixer: tensor([ 2.2537,  0.4100, -6.2624,  5.9590, -2.8882], grad_fn=<SliceBackward0>)
  [Layer 37] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 37] Residual connection sample values: tensor([  8.7769,  19.2716, -30.3187,  17.2728, -20.2074],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 38/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([687.6669], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0381], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1736,  0.3782, -0.5922,  0.3292, -0.3947], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3962, -1.8168, -1.1709, -1.3578, -2.0331], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3962, -1.8168, -1.1709, -1.3578, -2.0331], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.0855,  0.0792,  0.0298, -2.0312,  0.2860], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4805, 0.6469, 3.0008, 0.9998, 0.7870], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0800,  0.3686,  0.9851,  1.0855, -0.2691], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2062, -0.0826,  0.0101,  0.4136,  0.0739], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1781, -0.1198, -0.0157,  0.4020,  0.0526], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0811, -0.0563, -0.0078,  0.2409,  0.0270], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0811, -0.0563, -0.0078,  0.2409,  0.0270], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2065, -0.2746, -0.0215, -0.0336, -0.2690], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1415, -0.2275, -0.2591,  0.1643, -0.2768], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0881, -1.3536, -1.1764, -1.6451, -1.1941], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2105, 0.0565, 1.5422, 0.1105, 0.0498], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7953, 0.9264, 0.1630, 0.8337, 0.9423], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0811, -0.0563, -0.0078,  0.2409,  0.0270], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([0.0035, 0.0047, 0.0004, 0.0006, 0.0046], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([0.0074, 0.0086, 0.0008, 0.0010, 0.0084], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0119, -0.0162,  0.0026,  0.0362,  0.0077], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0776, -0.0618, -0.0037,  0.2313,  0.0296], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0776, -0.0618, -0.0037,  0.2313,  0.0296], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0184,  0.0157,  0.0010, -0.0642, -0.0070], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0105], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.7738], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.3586,  0.2960,  0.0202, -1.1603, -0.1133], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.3586,  0.2960,  0.0202, -1.1603, -0.1133], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.5083, -2.5770, -1.9280,  5.2491,  0.0470], grad_fn=<SliceBackward0>)
  [Layer 38] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 38] Output sample values after mixer: tensor([ 1.5083, -2.5770, -1.9280,  5.2491,  0.0470], grad_fn=<SliceBackward0>)
  [Layer 38] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 38] Residual connection sample values: tensor([ 10.2852,  16.6946, -32.2467,  22.5219, -20.1603],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 39/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([913.3524], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0331], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1535,  0.2518, -0.4822,  0.3373, -0.3046], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3816, -0.0255, -0.6330, -0.1033,  0.0440], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3816, -0.0255, -0.6330, -0.1033,  0.0440], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1945,  0.0454, -0.0624, -0.5539, -0.2494], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.1000,  2.4241,  1.5085, -0.5609, -1.0416], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.6529, -0.1321,  0.5098, -0.1945,  0.7972], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0182, -0.0059, -0.0105, -0.1204, -0.0456], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0325,  0.0793, -0.0329, -0.1164, -0.0665], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0160,  0.0412, -0.0162, -0.0548, -0.0322], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0160,  0.0412, -0.0162, -0.0548, -0.0322], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0092,  0.0753, -0.0121, -0.0639,  0.0371], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.3837, -0.0485,  0.1174,  0.0608, -0.1163], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6942, -0.9243, -1.3151, -3.1533, -2.1087], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0145, 0.0821, 0.0396, 0.0157, 0.0091], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9900, 0.9269, 0.9493, 0.9516, 0.9809], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0160,  0.0412, -0.0162, -0.0548, -0.0322], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.1308e-06, -1.7423e-05,  2.8062e-06,  1.4786e-05, -8.5885e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.5356e-04, -1.2654e-04,  1.1615e-04, -9.4229e-05,  3.9731e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0010,  0.0011, -0.0020, -0.0020,  0.0036], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0127,  0.0364, -0.0159, -0.0490, -0.0240], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0127,  0.0364, -0.0159, -0.0490, -0.0240], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0029, -0.0005,  0.0035,  0.0024, -0.0005], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0050], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([14.1131], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0767, -0.0131,  0.1016,  0.0566, -0.0145], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0767, -0.0131,  0.1016,  0.0566, -0.0145], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.3346, -3.0120, -1.6387, -0.6744,  0.1488], grad_fn=<SliceBackward0>)
  [Layer 39] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 39] Output sample values after mixer: tensor([ 2.3346, -3.0120, -1.6387, -0.6744,  0.1488], grad_fn=<SliceBackward0>)
  [Layer 39] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 39] Residual connection sample values: tensor([ 12.6198,  13.6826, -33.8854,  21.8475, -20.0115],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 40/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1154.3934], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0294], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1622,  0.1773, -0.4507,  0.2835, -0.2565], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0251,  1.0765,  0.5407,  0.5689,  0.5738], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0251,  1.0765,  0.5407,  0.5689,  0.5738], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.3031, -0.2435,  0.6196, -1.1839, -0.2451], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.2705,  0.2441,  1.8533,  0.4021,  0.4282], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0841, -0.0091, -0.5224, -0.3031, -1.2376], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0747,  0.0816,  0.1188,  0.2046, -0.0594], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0904,  0.0630,  0.1246,  0.1947, -0.0642], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0431,  0.0325,  0.0662,  0.1068, -0.0311], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0431,  0.0325,  0.0662,  0.1068, -0.0311], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1256, -0.1502, -0.0111,  0.0034, -0.0017], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2314,  0.0453, -0.0310,  0.1566,  0.0248], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9810, -1.4352, -0.7966, -1.6062, -1.8465], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0439, 0.0172, 0.0287, 0.0547, 0.0893], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9168, 0.9756, 0.9774, 0.9159, 0.8480], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0431,  0.0325,  0.0662,  0.1068, -0.0311], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.3783e-04,  2.8439e-04,  2.1070e-05, -6.4772e-06,  3.1397e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0003,  0.0015,  0.0006, -0.0003,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0023,  0.0079,  0.0022,  0.0015, -0.0015], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0375,  0.0345,  0.0562,  0.0887, -0.0268], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0375,  0.0345,  0.0562,  0.0887, -0.0268], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0005,  0.0277,  0.0192,  0.0322, -0.0099], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0039], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([15.9610], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0146,  0.8720,  0.5962,  1.1838, -0.3045], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0146,  0.8720,  0.5962,  1.1838, -0.3045], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.3951,  0.2080, -5.9711, -3.3854,  3.2293], grad_fn=<SliceBackward0>)
  [Layer 40] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 40] Output sample values after mixer: tensor([-2.3951,  0.2080, -5.9711, -3.3854,  3.2293], grad_fn=<SliceBackward0>)
  [Layer 40] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 40] Residual connection sample values: tensor([ 10.2247,  13.8906, -39.8565,  18.4621, -16.7822],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 41/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1336.5597], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0274], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1247,  0.1709, -0.4967,  0.2253, -0.2058], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1374, -0.2849, -1.1272,  0.3413, -0.3165], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1374, -0.2849, -1.1272,  0.3413, -0.3165], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.7251,  0.9139,  0.2173,  0.1231,  0.3805], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.1324, 0.5775, 2.3029, 0.0440, 1.0223], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.4675,  1.0878,  0.3003, -0.7251,  0.1662], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([0.1077, 0.1127, 0.0607, 0.0348, 0.1166], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([0.0943, 0.0987, 0.0628, 0.0281, 0.1011], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([0.0494, 0.0518, 0.0324, 0.0142, 0.0531], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([0.0494, 0.0518, 0.0324, 0.0142, 0.0531], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1250,  0.0632, -0.0845, -0.2522,  0.0049], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0501,  0.1018,  0.0031, -0.0203, -0.1285], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8259, -1.8637, -1.2829, -1.4543, -4.4079], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1115, 0.0553, 0.0698, 0.0431, 0.0176], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8158, 0.9021, 0.9143, 0.9392, 0.9252], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([0.0494, 0.0518, 0.0324, 0.0142, 0.0531], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-6.8827e-04,  3.4792e-04, -4.6554e-04, -1.3890e-03,  2.7046e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0009,  0.0005, -0.0012,  0.0016, -0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-6.6483e-04,  3.6911e-05,  4.0719e-03,  1.3182e-03,  4.9948e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([0.0475, 0.0505, 0.0356, 0.0152, 0.0522], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([0.0475, 0.0505, 0.0356, 0.0152, 0.0522], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0030, -0.0062, -0.0098,  0.0030, -0.0070], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0027], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([19.1550], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1007, -0.2047, -0.3203,  0.1038, -0.1860], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1007, -0.2047, -0.3203,  0.1038, -0.1860], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.7697, -6.0839, -1.3039,  2.8408,  5.1569], grad_fn=<SliceBackward0>)
  [Layer 41] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 41] Output sample values after mixer: tensor([-0.7697, -6.0839, -1.3039,  2.8408,  5.1569], grad_fn=<SliceBackward0>)
  [Layer 41] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 41] Residual connection sample values: tensor([  9.4550,   7.8067, -41.1605,  21.3029, -11.6253],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 42/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1560.3911], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0253], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1135,  0.0956, -0.4994,  0.2540, -0.1390], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.1302,  0.1881, -1.1645,  2.1935, -1.1559], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.1302,  0.1881, -1.1645,  2.1935, -1.1559], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.6473, -0.5871,  0.9497,  0.2767,  0.5683], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.4169,  1.8399,  1.1822, -0.4424,  1.2521], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4171, -0.0179, -0.2230,  0.6473, -0.8272], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0964,  0.0919,  0.1388, -0.0560,  0.0893], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0871,  0.0787,  0.1489, -0.0524,  0.0694], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0454,  0.0409,  0.0800, -0.0255,  0.0359], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0454,  0.0409,  0.0800, -0.0255,  0.0359], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1043,  0.1452, -0.0788,  0.0262,  0.3996], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1081,  0.0794, -0.1838, -0.0430, -0.2766], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0661, -1.4514, -0.7270, -1.9455, -0.6256], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0853, 0.7411, 0.0112, 0.0175, 0.0390], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9131, 0.3411, 0.9919, 0.9666, 0.9759], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0454,  0.0409,  0.0800, -0.0255,  0.0359], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0004,  0.0006, -0.0003,  0.0001,  0.0015], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0005,  0.0004, -0.0003,  0.0004,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0010,  0.0011,  0.0028, -0.0001,  0.0022], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0466,  0.0421,  0.0831, -0.0258,  0.0382], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0466,  0.0421,  0.0831, -0.0258,  0.0382], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0129,  0.0043, -0.0230, -0.0508, -0.0106], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0029], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([18.5863], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.4956,  0.1643, -0.8872, -1.6216, -0.3702], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.4956,  0.1643, -0.8872, -1.6216, -0.3702], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.9619, -1.9604, -1.9467,  2.5314,  0.1036], grad_fn=<SliceBackward0>)
  [Layer 42] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 42] Output sample values after mixer: tensor([-1.9619, -1.9604, -1.9467,  2.5314,  0.1036], grad_fn=<SliceBackward0>)
  [Layer 42] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 42] Residual connection sample values: tensor([  7.4931,   5.8463, -43.1071,  23.8344, -11.5217],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 43/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1802.5222], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0236], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0835,  0.0683, -0.4816,  0.2700, -0.1273], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.4978, -1.4742, -0.5900, -0.7061, -1.3148], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.4978, -1.4742, -0.5900, -0.7061, -1.3148], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.1240, -0.3701,  1.3273,  1.1796,  0.2496], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.4998, 0.4663, 1.0439, 0.8561, 0.3504], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1363,  0.5834,  0.5738,  0.1240, -0.7891], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0296,  0.0628,  0.1932, -0.2214, -0.0359], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0260,  0.0171,  0.2057, -0.2155, -0.0447], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0132,  0.0086,  0.1134, -0.0962, -0.0219], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0132,  0.0086,  0.1134, -0.0962, -0.0219], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0581, -0.0516,  0.9099, -0.0984,  0.0153], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2315, -0.0245, -0.2715, -0.1478, -0.0820], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9762, -1.4783, -1.0589, -1.0815, -5.9141], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0067, 0.0236, 0.0230, 0.0162, 0.0752], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9935, 0.9657, 0.9759, 0.9827, 0.6411], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0132,  0.0086,  0.1134, -0.0962, -0.0219], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.1054e-06, -4.5363e-06,  7.9972e-05, -8.6461e-06,  1.3423e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.7502e-04, -6.2327e-04,  6.1781e-03,  4.8992e-05, -2.7593e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0016, -0.0027, -0.0063, -0.0008, -0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0131,  0.0048,  0.0921, -0.0843, -0.0201], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0131,  0.0048,  0.0921, -0.0843, -0.0201], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0036, -0.0013, -0.0194,  0.0197,  0.0056], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0026], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([19.4067], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1826, -0.0515, -0.7133,  0.7979,  0.2616], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1826, -0.0515, -0.7133,  0.7979,  0.2616], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-6.6358, -4.9936, -2.2756,  1.1065, -0.7496], grad_fn=<SliceBackward0>)
  [Layer 43] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 43] Output sample values after mixer: tensor([-6.6358, -4.9936, -2.2756,  1.1065, -0.7496], grad_fn=<SliceBackward0>)
  [Layer 43] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 43] Residual connection sample values: tensor([  0.8573,   0.8527, -45.3827,  24.9409, -12.2713],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 44/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1960.3517], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0226], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0091,  0.0094, -0.4860,  0.2632, -0.1301], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5546, -1.2359,  0.1375, -0.2496, -1.0210], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5546, -1.2359,  0.1375, -0.2496, -1.0210], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3055,  0.5316,  0.1918, -0.0728, -0.7710], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.2747, 1.6081, 1.4132, 1.4391, 0.7749], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.4055,  0.4141, -0.2159,  0.3055, -0.1717], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0478, -0.0667,  0.0346, -0.0809,  0.0906], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0417, -0.0063,  0.0161, -0.0875,  0.0382], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0213, -0.0031,  0.0081, -0.0418,  0.0194], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0213, -0.0031,  0.0081, -0.0418,  0.0194], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2731, -0.1617,  0.0758,  0.0328, -0.0446], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2734, -0.0712,  0.0389, -0.1323, -0.1052], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7482, -0.6439, -1.1771, -1.3506, -1.0269], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0762, 0.0731, 0.0450, 0.0410, 0.0789], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9446, 0.9540, 0.9484, 0.9462, 0.9222], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0213, -0.0031,  0.0081, -0.0418,  0.0194], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.4335e-04, -2.6253e-04,  1.2304e-04,  5.3216e-05, -7.2419e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.2220e-04,  1.2100e-04,  9.0077e-05, -6.6210e-05, -2.2647e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0009,  0.0009, -0.0001, -0.0027,  0.0017], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0209, -0.0021,  0.0075, -0.0420,  0.0200], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0209, -0.0021,  0.0075, -0.0420,  0.0200], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0042,  0.0006,  0.0006,  0.0046, -0.0054], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0021], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([21.5809], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1704,  0.0186,  0.0240,  0.1725, -0.2212], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1704,  0.0186,  0.0240,  0.1725, -0.2212], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.5643,  0.8216, -0.2634,  6.7823,  2.6817], grad_fn=<SliceBackward0>)
  [Layer 44] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 44] Output sample values after mixer: tensor([ 1.5643,  0.8216, -0.2634,  6.7823,  2.6817], grad_fn=<SliceBackward0>)
  [Layer 44] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 44] Residual connection sample values: tensor([  2.4215,   1.6743, -45.6461,  31.7232,  -9.5896],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 45/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2126.5149], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0217], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0252,  0.0179, -0.4768,  0.3246, -0.0993], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1933,  0.0576, -0.1438, -0.3824,  0.6719], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1933,  0.0576, -0.1438, -0.3824,  0.6719], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.3775,  0.1731, -0.5856,  0.1217, -0.4715], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.1665,  0.4534, -1.2566,  0.5199,  2.4238], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.1707, -0.6203, -0.1349, -0.3775, -0.8449], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0600, -0.0400, -0.0999,  0.0209,  0.1152], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0646,  0.0122, -0.1023,  0.0143,  0.1127], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0313,  0.0061, -0.0485,  0.0072,  0.0595], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0313,  0.0061, -0.0485,  0.0072,  0.0595], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1264,  0.0521, -0.0193, -0.2657, -0.0318], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0026, -0.1116, -0.2160, -0.1621,  0.0487], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.2502, -4.1815, -1.0937, -2.6774, -2.3149], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0229, 0.0353, 0.0056, 0.0211, 0.0609], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9497, 0.8627, 0.9939, 0.9450, 0.8685], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0313,  0.0061, -0.0485,  0.0072,  0.0595], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-9.0656e-05, -3.7325e-05,  1.3837e-05,  1.9052e-04,  2.2770e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0003, -0.0001, -0.0001,  0.0013,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0011, -0.0002, -0.0016,  0.0007,  0.0042], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0362,  0.0067, -0.0561,  0.0089,  0.0710], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0362,  0.0067, -0.0561,  0.0089,  0.0710], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0032,  0.0002,  0.0037, -0.0014,  0.0316], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0030], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([18.3068], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1353,  0.0061,  0.1471, -0.0494,  1.2197], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1353,  0.0061,  0.1471, -0.0494,  1.2197], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.0919,  3.2668,  1.1742,  3.0259, -1.7008], grad_fn=<SliceBackward0>)
  [Layer 45] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 45] Output sample values after mixer: tensor([ 2.0919,  3.2668,  1.1742,  3.0259, -1.7008], grad_fn=<SliceBackward0>)
  [Layer 45] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 45] Residual connection sample values: tensor([  4.5135,   4.9411, -44.4718,  34.7491, -11.2904],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 46/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2334.8289], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0207], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0540,  0.0616, -0.5415,  0.4200, -0.1341], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8884,  0.1573,  0.0487,  0.4013, -0.2430], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8884,  0.1573,  0.0487,  0.4013, -0.2430], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3332,  0.7100, -1.7199, -0.8024,  1.5982], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.4751,  2.0445,  0.3068, -0.6547,  0.1716], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.1878,  0.0893,  0.2624,  0.3332, -1.5029], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0612,  0.0859, -0.2892,  0.1042, -0.2592], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0644,  0.0821, -0.3103,  0.0884, -0.2389], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0311,  0.0428, -0.1313,  0.0461, -0.1052], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0311,  0.0428, -0.1313,  0.0461, -0.1052], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0608, -0.2784,  0.0228,  0.1420, -0.0037], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0755, -0.2656, -0.1183,  0.0025,  0.3819], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8673, -0.9793, -1.6584, -0.9408, -0.4381], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0049, 0.0431, 0.0086, 0.0054, 0.0105], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9910, 0.9587, 0.9858, 0.9949, 0.9954], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0311,  0.0428, -0.1313,  0.0461, -0.1052], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 9.1927e-06,  4.2079e-05, -3.4400e-06, -2.1456e-05,  5.6036e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-6.5357e-05,  5.0842e-04, -4.8015e-05,  1.7123e-05, -1.4769e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-4.5184e-04,  4.1819e-04,  7.3738e-05,  2.4041e-04, -1.2466e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0253,  0.0346, -0.1047,  0.0371, -0.0842], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0253,  0.0346, -0.1047,  0.0371, -0.0842], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0066,  0.0029, -0.0026,  0.0089,  0.0090], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0031], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([17.9440], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.2738,  0.1169, -0.0940,  0.2972,  0.3660], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.2738,  0.1169, -0.0940,  0.2972,  0.3660], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 10.0470,  -2.7329, -10.1491,  -3.0738,  -9.0593],
       grad_fn=<SliceBackward0>)
  [Layer 46] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 46] Output sample values after mixer: tensor([ 10.0470,  -2.7329, -10.1491,  -3.0738,  -9.0593],
       grad_fn=<SliceBackward0>)
  [Layer 46] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 46] Residual connection sample values: tensor([ 14.5604,   2.2082, -54.6209,  31.6752, -20.3497],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 47/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2534.3159], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0199], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1484,  0.0227, -0.5401,  0.3171, -0.1940], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3316,  0.7144, -1.0865, -0.5479,  0.4034], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3316,  0.7144, -1.0865, -0.5479,  0.4034], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2278,  0.9386,  0.5179, -0.6029, -0.6690], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3865, 0.1212, 2.4517, 0.2993, 2.7338], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.2364, -1.6534, -0.0268,  0.2278,  0.0030], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0339, -0.1566,  0.0488,  0.0814, -0.0892], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0168, -0.1815, -0.1707,  0.0780, -0.0840], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0083, -0.0825, -0.0781,  0.0405, -0.0402], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0083, -0.0825, -0.0781,  0.0405, -0.0402], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1495,  0.1332,  1.1225, -0.2576, -0.0719], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.6724, -0.0662,  0.0165, -0.2693, -0.2736], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -3.5522, -11.2450,  -2.6866,  -3.1935,  -3.1998],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0866, 0.0171, 0.0296, 0.0049, 0.1654], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7351, 0.8248, 0.9236, 0.9844, 0.5890], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0083, -0.0825, -0.0781,  0.0405, -0.0402], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.0780e-04, -9.6011e-05, -8.0935e-04,  1.8576e-04,  5.1873e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0007, -0.0003, -0.0020, -0.0010,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0008, -0.0016, -0.0025, -0.0002, -0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0109, -0.1183, -0.1129,  0.0571, -0.0576], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0109, -0.1183, -0.1129,  0.0571, -0.0576], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0021, -0.0567,  0.0309, -0.0115, -0.0139], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0031], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([17.8113], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0806, -1.2974,  1.1581, -0.4482, -0.5221], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0806, -1.2974,  1.1581, -0.4482, -0.5221], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ -0.5122,   1.7264, -12.5839,  11.4896,   9.9012],
       grad_fn=<SliceBackward0>)
  [Layer 47] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 47] Output sample values after mixer: tensor([ -0.5122,   1.7264, -12.5839,  11.4896,   9.9012],
       grad_fn=<SliceBackward0>)
  [Layer 47] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 47] Residual connection sample values: tensor([ 14.0482,   3.9346, -67.2049,  43.1649, -10.4485],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 48/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3192.1399], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0177], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1302,  0.0340, -0.5683,  0.3766, -0.0860], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.7048, -2.8057, -1.4674, -0.1049,  0.4593], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.7048, -2.8057, -1.4674, -0.1049,  0.4593], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0366, -1.3049, -1.0995, -0.5953,  0.2812], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.6324,  1.7323,  1.2006,  0.6144, -0.3626], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.8173,  0.4479,  0.7011,  0.0366, -0.9233], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0164, -0.1436, -0.1566, -0.1044, -0.0469], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0216,  0.0764, -0.2425, -0.1707, -0.0494], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0107,  0.0396, -0.1066, -0.0781, -0.0241], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0107,  0.0396, -0.1066, -0.0781, -0.0241], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0252, -0.0682,  0.0251,  0.0514, -0.0345], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0807, -0.2459,  0.0237, -0.2441,  0.0808], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-54.8118, -78.5143, -47.2508,  -2.3308,  -4.2266],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1487, 0.0489, 0.0134, 0.0020, 0.0052], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([2.8845e-04, 2.1571e-02, 5.3008e-01, 9.9530e-01, 9.7811e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0107,  0.0396, -0.1066, -0.0781, -0.0241], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.9916e-05,  1.0813e-04, -3.9770e-05, -8.1431e-05,  5.4682e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 3.9930e-05,  1.0805e-04, -3.9813e-05, -8.1419e-05,  5.4768e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0003,  0.0012, -0.0034, -0.0025, -0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0088,  0.0328, -0.0883, -0.0646, -0.0199], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0088,  0.0328, -0.0883, -0.0646, -0.0199], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0023, -0.0052,  0.0243,  0.0032, -0.0056], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0019], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([23.0832], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1223, -0.2273,  1.0872,  0.1650, -0.3206], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1223, -0.2273,  1.0872,  0.1650, -0.3206], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ -9.9268, -10.3885, -23.0858,  24.5753, -15.1300],
       grad_fn=<SliceBackward0>)
  [Layer 48] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 48] Output sample values after mixer: tensor([ -9.9268, -10.3885, -23.0858,  24.5753, -15.1300],
       grad_fn=<SliceBackward0>)
  [Layer 48] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 48] Residual connection sample values: tensor([  4.1214,  -6.4539, -90.2906,  67.7402, -25.5785],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3794.7273], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0162], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0373, -0.0646, -0.8316,  0.6363, -0.2291], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Final backbone norm output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Final backbone norm output sample values: tensor([ 0.0373, -0.0646, -0.8316,  0.6363, -0.2291], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Logits shape: torch.Size([1, 1, 50288])
[Mamba2LMHeadModel] Logits sample values: tensor([14.9543,  3.9466, 19.8297, 15.2382, 16.1089], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Forward pass input_ids shape: torch.Size([1, 1])
[Mamba2LMHeadModel] input_ids sample values: tensor([30766])
[Mamba2LMHeadModel] Embedding output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Embedding sample values: tensor([0.0007, 0.1445, 0.1323, 0.0240, 0.2135], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 1/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0382], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([5.1137], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.0007, 0.1482, 0.1239, 0.0225, 0.1964], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1367,  0.1036, -1.2775,  0.2334,  0.0974], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1367,  0.1036, -1.2775,  0.2334,  0.0974], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.8398,  0.0364, -0.8801, -0.1869,  0.5023], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.3391,  0.1398, -0.3260,  0.1765,  0.3584], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.3530,  0.5844, -0.2065, -0.8398,  0.7994], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0081,  0.0537,  0.0110,  0.1662, -0.2851], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2359,  0.2690,  0.2813,  0.2154, -0.5419], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1318,  0.1525,  0.1603,  0.1193, -0.1993], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1318,  0.1525,  0.1603,  0.1193, -0.1993], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0789, -0.0172, -0.2783, -0.2714, -0.0148], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2595,  0.6209, -0.2486, -0.2783,  0.1367], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6180, -2.5226, -3.0473, -3.3078, -3.9090], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0127, 0.0156, 0.0065, 0.0291, 0.0104], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9672, 0.9614, 0.9802, 0.9083, 0.9601], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1318,  0.1525,  0.1603,  0.1193, -0.1993], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.3246e-04, -2.8942e-05, -4.6751e-04, -4.5583e-04, -2.4836e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0016,  0.0002, -0.0021, -0.0023,  0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0381,  0.0348,  0.0477,  0.0035, -0.0331], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0884,  0.0930,  0.1089,  0.0490, -0.1091], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0884,  0.0930,  0.1089,  0.0490, -0.1091], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0056,  0.0051, -0.0303,  0.0064, -0.0056], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0302], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.7490], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0324,  0.0314, -0.1488,  0.0606, -0.0327], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0324,  0.0314, -0.1488,  0.0606, -0.0327], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.7010,  0.2659, -0.1715,  0.7315, -0.3743], grad_fn=<SliceBackward0>)
  [Layer 1] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 1] Output sample values after mixer: tensor([-1.7010,  0.2659, -0.1715,  0.7315, -0.3743], grad_fn=<SliceBackward0>)
  [Layer 1] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 1] Residual connection sample values: tensor([-1.7003,  0.4104, -0.0391,  0.7555, -0.1608], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 2/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.8454], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.0876], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.6677,  0.1273, -0.0142,  0.2865, -0.0596], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.6267, -2.4734, -1.3361, -2.4189, -1.3464], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.6267, -2.4734, -1.3361, -2.4189, -1.3464], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.0774,  0.6795,  1.5657,  4.6849, -1.1344], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.3646, 0.6352, 0.3223, 0.5350, 0.7652], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.1875, -0.7897, -0.8205,  1.0774,  0.7720], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1578, -0.3725, -0.0900, -3.3391,  0.2995], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1876, -0.5270, -0.1005, -2.2854,  0.2864], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0850, -0.1956, -0.0477, -0.2110,  0.1635], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0850, -0.1956, -0.0477, -0.2110,  0.1635], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1424,  0.0374,  0.0314,  0.4279, -0.1274], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1754, -0.2758,  0.2225, -0.0411, -0.2771], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-19.8515, -18.6852, -13.5640,  -2.4189,  -0.4662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1628, 0.0118, 0.0290, 0.0125, 0.0315], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.0395, 0.8017, 0.6746, 0.9703, 0.9854], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0850, -0.1956, -0.0477, -0.2110,  0.1635], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0020, -0.0005, -0.0004, -0.0059,  0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0020, -0.0005, -0.0004, -0.0059,  0.0017], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0031,  0.0086,  0.0020,  0.0079, -0.0069], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0556, -0.1265, -0.0310, -0.1378,  0.1060], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0556, -0.1265, -0.0310, -0.1378,  0.1060], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0149,  0.0243,  0.0086,  0.0273, -0.0295], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([2.5959], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6207], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0117,  0.0091,  0.0072,  0.0092, -0.0249], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0117,  0.0091,  0.0072,  0.0092, -0.0249], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0505,  0.0442, -0.0481, -0.0171,  0.0404], grad_fn=<SliceBackward0>)
  [Layer 2] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 2] Output sample values after mixer: tensor([-0.0505,  0.0442, -0.0481, -0.0171,  0.0404], grad_fn=<SliceBackward0>)
  [Layer 2] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 2] Residual connection sample values: tensor([-1.7507,  0.4547, -0.0873,  0.7384, -0.1204], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 3/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.8682], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.0732], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.7445,  0.1512, -0.0332,  0.2895, -0.0508], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2692,  0.0514, -1.6950, -1.1256,  0.8789], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2692,  0.0514, -1.6950, -1.1256,  0.8789], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-2.0852, -3.9667,  0.9577,  1.8064,  0.9745], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.0374, -0.1671,  0.6378,  0.5700,  0.1592], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4664, -0.1400,  2.6809, -2.0852, -0.3912], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.5768,  0.4199, -0.2838,  0.1717,  0.0743], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.5783,  0.4006, -0.1601,  0.1594,  0.0580], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.2078,  0.2399, -0.0737,  0.0860,  0.0298], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.2078,  0.2399, -0.0737,  0.0860,  0.0298], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3637,  0.1285, -0.0824,  0.0373, -0.2069], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.4321, -0.1645, -0.2503, -0.2660,  0.2986], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6506, -3.9939, -6.7806, -0.9419, -6.0308], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0235, 0.0173, 0.0256, 0.0116, 0.0254], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9848, 0.9333, 0.8405, 0.9892, 0.8581], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.2078,  0.2399, -0.0737,  0.0860,  0.0298], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0018, -0.0006,  0.0004, -0.0002,  0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-9.5533e-03,  1.9593e-05,  1.5839e-03,  4.8999e-04, -1.2936e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0301,  0.0210,  0.0688,  0.0062,  0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1247,  0.1303,  0.0353,  0.0454,  0.0161], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1247,  0.1303,  0.0353,  0.0454,  0.0161], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0190,  0.0034, -0.0093, -0.0125,  0.0100], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([2.0601], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6967], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0185,  0.0036, -0.0079, -0.0164,  0.0075], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0185,  0.0036, -0.0079, -0.0164,  0.0075], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([0.1155, 0.2387, 0.3193, 0.1575, 0.0740], grad_fn=<SliceBackward0>)
  [Layer 3] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 3] Output sample values after mixer: tensor([0.1155, 0.2387, 0.3193, 0.1575, 0.0740], grad_fn=<SliceBackward0>)
  [Layer 3] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 3] Residual connection sample values: tensor([-1.6352,  0.6934,  0.2321,  0.8959, -0.0464], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 4/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.1150], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9470], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.7229,  0.2321,  0.0906,  0.3619, -0.0206], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.4567,  0.0613, -2.7231,  0.7532,  1.0217], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.4567,  0.0613, -2.7231,  0.7532,  1.0217], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.1195, -1.7536, -0.2224, -2.0914, -3.2473], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9747, 1.8255, 1.1226, 1.1703, 0.3268], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.6892,  0.0140,  0.0051,  1.1195, -2.3705], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1849, -0.0554, -0.0024,  0.1312,  0.1324], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1112, -0.0906, -0.0507,  0.1153,  0.4254], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0587, -0.0432, -0.0247,  0.0610,  0.2572], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0587, -0.0432, -0.0247,  0.0610,  0.2572], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.2211, -0.0471,  0.6418, -0.0755, -0.1439], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.7357, -0.2557, -0.0910, -0.2553,  0.0242], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.7127,  -1.2862,  -1.4870, -27.0280,  -4.0727],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0162, 0.0149, 0.0059, 0.0104, 0.0522], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9726, 0.9811, 0.9913, 0.7548, 0.8086], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0587, -0.0432, -0.0247,  0.0610,  0.2572], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.0998e-04, -4.4701e-05,  6.0954e-04, -7.1677e-05, -1.3669e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.0370e-03, -1.5529e-03, -8.2701e-04, -4.7527e-05, -3.0215e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0042,  0.0052,  0.0026,  0.0066,  0.0559], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0289, -0.0192, -0.0113,  0.0409,  0.2007], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0289, -0.0192, -0.0113,  0.0409,  0.2007], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0079, -0.0006,  0.0019,  0.0209,  0.1507], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([4.0055], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4997], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0083, -0.0004,  0.0019,  0.0181,  0.0778], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0083, -0.0004,  0.0019,  0.0181,  0.0778], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3944, -0.0996, -0.3531, -0.1186, -0.4849], grad_fn=<SliceBackward0>)
  [Layer 4] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 4] Output sample values after mixer: tensor([ 0.3944, -0.0996, -0.3531, -0.1186, -0.4849], grad_fn=<SliceBackward0>)
  [Layer 4] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 4] Residual connection sample values: tensor([-1.2408,  0.5938, -0.1211,  0.7773, -0.5313], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 5/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.4289], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8366], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.4686,  0.1853, -0.0427,  0.2812, -0.2070], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2840,  0.3900, -2.9079, -0.2996, -1.4795], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2840,  0.3900, -2.9079, -0.2996, -1.4795], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.4854, -1.6659,  2.5424, -1.7824, -0.1317], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.8227,  1.1300,  0.2295,  0.4690, -0.8590], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.3543,  0.2659,  0.2771, -0.4854, -1.7480], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0779, -0.0888, -0.4832,  0.2008, -0.1259], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1295, -0.1262, -0.5527,  0.1747, -0.1318], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0606, -0.0591, -0.2019,  0.0950, -0.0616], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0606, -0.0591, -0.2019,  0.0950, -0.0616], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0002,  0.0047, -0.0331, -0.0674, -0.1076], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2329, -0.1210, -0.0769, -0.1734, -0.0759], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.5763,  -1.0444,  -0.8388,  -5.6765, -20.4018],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0238, 0.0368, 0.0531, 0.0221, 0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9631, 0.9623, 0.9564, 0.8820, 0.9709], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0606, -0.0591, -0.2019,  0.0950, -0.0616], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.6593e-07, -6.7299e-06,  4.7804e-05,  9.7294e-05,  1.5541e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.1531e-04, -8.1987e-05,  4.8276e-04,  2.7350e-04, -3.9823e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0037,  0.0047, -0.0199, -0.0141, -0.0164], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0362, -0.0271, -0.1284,  0.0370, -0.0495], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0362, -0.0271, -0.1284,  0.0370, -0.0495], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0059, -0.0063,  0.0193, -0.0047,  0.0136], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.8604], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7332], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0068, -0.0074,  0.0217, -0.0055,  0.0141], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0068, -0.0074,  0.0217, -0.0055,  0.0141], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0146, -0.0064,  0.0470,  0.1149, -0.1511], grad_fn=<SliceBackward0>)
  [Layer 5] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 5] Output sample values after mixer: tensor([ 0.0146, -0.0064,  0.0470,  0.1149, -0.1511], grad_fn=<SliceBackward0>)
  [Layer 5] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 5] Residual connection sample values: tensor([-1.2262,  0.5874, -0.0740,  0.8922, -0.6824], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 6/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.6244], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7846], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.4240,  0.1572, -0.0227,  0.2830, -0.2394], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 2.1714, -0.6909, -1.5812, -1.6970, -1.3067], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 2.1714, -0.6909, -1.5812, -1.6970, -1.3067], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.9961,  0.2337, -4.0538,  0.5714, -1.9870], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.2991, 0.9103, 0.5633, 0.8149, 1.9022], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-2.9153,  0.3284, -0.3809, -0.9961, -1.9623], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1155, -0.2544, -1.3298, -0.0946, -0.8928], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1499, -0.3267, -1.3920, -0.0325, -0.8231], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0805, -0.1369, -0.2771, -0.0160, -0.2511], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0805, -0.1369, -0.2771, -0.0160, -0.2511], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.2228,  0.0641, -0.2049,  0.0217,  0.1396], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0641, -0.0386, -0.2711,  0.2129,  0.1468], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9866, -8.7747, -3.3046, -2.9913, -3.3435], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2290, 0.0338, 0.1430, 0.1432, 0.1839], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7977, 0.7435, 0.6233, 0.6515, 0.5406], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0805, -0.1369, -0.2771, -0.0160, -0.2511], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0041,  0.0012, -0.0038,  0.0004,  0.0026], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0219, -0.0006, -0.0127, -0.0015,  0.0047], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0825, -0.1531, -0.0566,  0.0234, -0.1220], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1000, -0.1828, -0.1166,  0.0200, -0.1763], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1000, -0.1828, -0.1166,  0.0200, -0.1763], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.1948,  0.0422,  0.0315, -0.0053,  0.0491], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([2.7028], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6083], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.2276,  0.0231,  0.0164, -0.0036,  0.0234], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.2276,  0.0231,  0.0164, -0.0036,  0.0234], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2452,  0.0587, -0.7414, -0.1221, -0.0432], grad_fn=<SliceBackward0>)
  [Layer 6] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 6] Output sample values after mixer: tensor([ 0.2452,  0.0587, -0.7414, -0.1221, -0.0432], grad_fn=<SliceBackward0>)
  [Layer 6] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 6] Residual connection sample values: tensor([-0.9810,  0.6461, -0.8154,  0.7700, -0.7256], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 7/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.9829], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7102], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2681,  0.1466, -0.2066,  0.1926, -0.1989], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.6268, -3.8675, -1.1259, -1.0697,  0.4526], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.6268, -3.8675, -1.1259, -1.0697,  0.4526], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-2.4475, -1.2238, -2.0117,  0.0025,  1.5681], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.0259,  0.9729,  1.3838,  0.9225, -0.1837], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-3.4444, -2.4927, -1.8322, -2.4475,  0.8299], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1057,  0.7786,  0.0624,  0.0328, -0.2153], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0376,  0.8032,  0.0617,  0.0392, -0.2188], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0192,  0.5547,  0.0318,  0.0200, -0.0975], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0192,  0.5547,  0.0318,  0.0200, -0.0975], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1039, -0.0590,  0.0060, -0.0394,  0.0204], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0161, -0.0553,  0.1466,  0.0545,  0.0459], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2959, -1.1836, -0.3113, -0.1314, -1.5015], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0480, 0.0158, 0.0100, 0.0373, 0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9859, 0.9815, 0.9969, 0.9951, 0.9987], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0192,  0.5547,  0.0318,  0.0200, -0.0975], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 9.5435e-05, -5.4218e-05,  5.5567e-06, -3.6188e-05,  1.8732e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0005,  0.0004, -0.0005,  0.0008, -0.0031], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0030, -0.0028,  0.0186, -0.0040,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0030, -0.0016,  0.0187, -0.0039,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0030, -0.0016,  0.0187, -0.0039,  0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-4.0576e-03,  1.2391e-04, -5.1616e-03,  1.0728e-03,  8.7130e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0236], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.5073], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0328,  0.0006, -0.0549,  0.0080,  0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0328,  0.0006, -0.0549,  0.0080,  0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.5738, -0.3403, -0.3106,  0.5021, -0.3499], grad_fn=<SliceBackward0>)
  [Layer 7] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 7] Output sample values after mixer: tensor([ 0.5738, -0.3403, -0.3106,  0.5021, -0.3499], grad_fn=<SliceBackward0>)
  [Layer 7] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 7] Residual connection sample values: tensor([-0.4073,  0.3058, -1.1261,  1.2721, -1.0756], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 8/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.4558], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6381], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1340,  0.0788, -0.3452,  0.3880, -0.3522], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5860, -1.2541, -1.5511, -2.4627, -0.0617], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5860, -1.2541, -1.5511, -2.4627, -0.0617], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3357,  0.5890,  0.4075, -1.9049, -0.7200], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.7695, -0.3056,  0.7157,  0.7006,  0.0658], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.7797,  0.1772, -0.3310,  0.3357, -1.8805], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0285, -0.0512, -0.0128,  0.0288, -0.1382], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.4344, -0.0822, -0.3275, -0.0228, -0.1943], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.2636, -0.0394, -0.1372, -0.0113, -0.0878], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.2636, -0.0394, -0.1372, -0.0113, -0.0878], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0412,  0.0808,  0.0306,  0.1258, -0.0309], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1501, -0.0053, -0.2784, -0.2570, -0.1557], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.6543, -0.9827, -0.5550, -3.9397, -1.8081], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0047, 0.0403, 0.0226, 0.0479, 0.0103], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9831, 0.9612, 0.9875, 0.8280, 0.9816], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.2636, -0.0394, -0.1372, -0.0113, -0.0878], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.0722e-05,  9.9598e-05,  3.7656e-05,  1.5498e-04, -3.8135e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.7572e-04,  2.7801e-05,  6.3503e-04, -5.5414e-04, -3.8524e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0473, -0.0355, -0.0298, -0.0101, -0.0211], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.2692, -0.0687, -0.1453, -0.0196, -0.0950], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.2692, -0.0687, -0.1453, -0.0196, -0.0950], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0564,  0.0191,  0.0394,  0.0038,  0.0028], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.5928], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7923], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0432,  0.0186,  0.0261,  0.0039,  0.0035], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0432,  0.0186,  0.0261,  0.0039,  0.0035], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1325,  0.7309,  0.6421,  0.6680, -0.0202], grad_fn=<SliceBackward0>)
  [Layer 8] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 8] Output sample values after mixer: tensor([ 0.1325,  0.7309,  0.6421,  0.6680, -0.0202], grad_fn=<SliceBackward0>)
  [Layer 8] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 8] Residual connection sample values: tensor([-0.2748,  1.0367, -0.4840,  1.9401, -1.0957], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 9/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3.4208], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5407], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0706,  0.2176, -0.1143,  0.4400, -0.2778], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-2.2588,  0.5871,  0.6114, -2.8327, -1.8948], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-2.2588,  0.5871,  0.6114, -2.8327, -1.8948], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0206, -0.9900, -1.8727,  0.9682, -1.3562], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.8704, 1.3306, 0.5893, 0.5713, 1.5484], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5307, -0.5863,  0.0120, -0.0206, -1.0925], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0040, -0.1396,  0.1415,  0.2560,  0.0522], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0114, -0.1649,  0.0549,  0.1821,  0.0773], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0057, -0.0757,  0.0282,  0.0993,  0.0401], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0057, -0.0757,  0.0282,  0.0993,  0.0401], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1276, -0.2674,  0.1559,  0.3120,  0.1523], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2579, -0.2758, -0.2784, -0.1669,  0.0942], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-5.2345, -1.2161, -1.4888, -0.9523, -3.9667], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0240, 0.1349, 0.0086, 0.2156, 0.0719], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8821, 0.8487, 0.9872, 0.8144, 0.7518], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0057, -0.0757,  0.0282,  0.0993,  0.0401], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.7508e-05, -3.6697e-05,  2.1398e-05,  4.2815e-05,  2.0902e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0003, -0.0043,  0.0069,  0.0076, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0191,  0.0032, -0.0094,  0.0207,  0.0248], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0269, -0.0994,  0.0288,  0.1553,  0.0792], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0269, -0.0994,  0.0288,  0.1553,  0.0792], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0057, -0.0375,  0.0114, -0.0245, -0.0196], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.7065], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7655], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0046, -0.0443,  0.0090, -0.0152, -0.0178], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0046, -0.0443,  0.0090, -0.0152, -0.0178], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1699,  0.3018,  0.3592,  0.0191, -0.1255], grad_fn=<SliceBackward0>)
  [Layer 9] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 9] Output sample values after mixer: tensor([ 0.1699,  0.3018,  0.3592,  0.0191, -0.1255], grad_fn=<SliceBackward0>)
  [Layer 9] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 9] Residual connection sample values: tensor([-0.1048,  1.3386, -0.1248,  1.9591, -1.2212], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 10/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4.0452], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4972], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0213,  0.2275, -0.0229,  0.3560, -0.2427], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6010,  1.1579,  0.0090, -2.3266, -0.4555], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6010,  1.1579,  0.0090, -2.3266, -0.4555], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([0.3957, 1.2418, 1.7739, 0.5202, 1.7301], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.8524, 0.1754, 0.5904, 0.9255, 1.0711], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.9168,  0.4216,  0.1810,  0.3957,  1.0273], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0660, -0.3194,  0.3597, -0.0900,  0.3862], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0276, -0.4065,  0.2559, -0.1759,  0.3266], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0140, -0.1625,  0.1442, -0.0802,  0.1897], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0140, -0.1625,  0.1442, -0.0802,  0.1897], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0376,  0.0946,  0.0794,  0.0245, -0.0940], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2783,  0.1352, -0.2200, -0.0785, -0.1878], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.7155, -1.4068, -0.3534, -2.0102, -0.4653], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0010, 0.0042, 0.1647, 0.0046, 0.0220], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9962, 0.9941, 0.9435, 0.9908, 0.9898], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0140, -0.1625,  0.1442, -0.0802,  0.1897], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-5.4197e-07,  1.3649e-06,  1.1458e-06,  3.5369e-07, -1.3562e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.1110e-06,  1.0886e-04,  4.2022e-05,  1.2481e-05,  1.3288e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0003, -0.0039,  0.0008, -0.0006,  0.0042], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0034, -0.0396,  0.0325, -0.0182,  0.0459], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0034, -0.0396,  0.0325, -0.0182,  0.0459], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0007, -0.0349,  0.0001,  0.0038, -0.0081], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0151], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.1445], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0088, -0.2078,  0.0014,  0.0410, -0.0817], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0088, -0.2078,  0.0014,  0.0410, -0.0817], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.3699,  0.1650, -0.1932,  0.0730,  0.1724], grad_fn=<SliceBackward0>)
  [Layer 10] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 10] Output sample values after mixer: tensor([-0.3699,  0.1650, -0.1932,  0.0730,  0.1724], grad_fn=<SliceBackward0>)
  [Layer 10] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 10] Residual connection sample values: tensor([-0.4747,  1.5036, -0.3180,  2.0322, -1.0488], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 11/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([5.3211], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4335], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0946,  0.2438, -0.0566,  0.3529, -0.1998], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.9638, -4.9191,  0.1261, -0.4998,  2.1172], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.9638, -4.9191,  0.1261, -0.4998,  2.1172], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.5171,  0.0086, -0.0745,  1.9151,  0.4519], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.0217, 4.3803, 0.7947, 0.8815, 1.9523], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.1446,  0.5201, -0.3343,  1.5171,  0.7978], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3816, -0.0236,  0.0215, -0.1788,  0.1004], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3958, -0.3812,  0.1181, -0.1666,  0.1236], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1592, -0.1547,  0.0625, -0.0764,  0.0656], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1592, -0.1547,  0.0625, -0.0764,  0.0656], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2575,  0.8801, -0.2782, -0.1185,  0.2291], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1024, -0.1578, -0.2740, -0.2160,  0.0555], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.3116, -0.0902, -1.5786, -0.2096, -0.6694], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3107, 1.2676, 0.2484, 0.1003, 0.0514], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9077, 0.8920, 0.6756, 0.9792, 0.9662], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1592, -0.1547,  0.0625, -0.0764,  0.0656], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0127, -0.0435,  0.0138,  0.0059, -0.0113], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0453, -0.0632,  0.0532,  0.0140, -0.0566], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.1034, -0.1677,  0.1834, -0.0244, -0.0127], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1619, -0.2245,  0.2064, -0.0524,  0.0114], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1619, -0.2245,  0.2064, -0.0524,  0.0114], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0391, 0.0080, 0.0138, 0.0099, 0.0215], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.8479], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.0860], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0522, 0.0105, 0.0128, 0.0299, 0.0214], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0522, 0.0105, 0.0128, 0.0299, 0.0214], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.4843, -0.2811, -1.2162,  0.8981, -0.1729], grad_fn=<SliceBackward0>)
  [Layer 11] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 11] Output sample values after mixer: tensor([ 0.4843, -0.2811, -1.2162,  0.8981, -0.1729], grad_fn=<SliceBackward0>)
  [Layer 11] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 11] Residual connection sample values: tensor([ 0.0096,  1.2225, -1.5342,  2.9302, -1.2217], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 12/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([7.0669], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3762], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0015,  0.1576, -0.2083,  0.3951, -0.1819], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7653, -0.9712, -2.9093,  1.0940,  0.0354], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7653, -0.9712, -2.9093,  1.0940,  0.0354], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1674,  1.2600,  2.5616, -0.9993, -1.0703], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.7210, 1.1240, 1.3532, 1.0415, 1.5751], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.6048, -1.6992,  0.2006, -0.1674, -0.3055], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0280, -0.3195,  0.1655, -0.0435, -0.1834], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0710, -0.3066,  0.1306, -0.0732, -0.1708], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0342, -0.1300,  0.0695, -0.0353, -0.0781], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0342, -0.1300,  0.0695, -0.0353, -0.0781], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0049, -0.1482,  0.0148, -0.0587, -0.0664], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2782, -0.1421, -0.0625, -0.2542, -0.1978], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2412, -0.7694, -1.9975, -1.2368, -1.0181], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2166, 0.1946, 0.1006, 0.2435, 0.3296], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7643, 0.8610, 0.8180, 0.7400, 0.7149], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0342, -0.1300,  0.0695, -0.0353, -0.0781], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.6011e-05,  1.0991e-03, -1.0948e-04,  4.3523e-04,  4.9266e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0064,  0.0051, -0.0183,  0.0028, -0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0010, -0.0170,  0.0070, -0.0125, -0.0148], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0236, -0.1106,  0.0571, -0.0379, -0.0710], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0236, -0.1106,  0.0571, -0.0379, -0.0710], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0057,  0.0295, -0.0086, -0.0310, -0.0013], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1757], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([2.3855], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0246,  0.0832, -0.0183, -0.0756, -0.0045], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0246,  0.0832, -0.0183, -0.0756, -0.0045], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0969,  0.1185,  0.1200,  0.8919,  1.0348], grad_fn=<SliceBackward0>)
  [Layer 12] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 12] Output sample values after mixer: tensor([-0.0969,  0.1185,  0.1200,  0.8919,  1.0348], grad_fn=<SliceBackward0>)
  [Layer 12] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 12] Residual connection sample values: tensor([-0.0874,  1.3410, -1.4142,  3.8222, -0.1869], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 13/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([8.3868], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3453], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0122,  0.1621, -0.1823,  0.4637, -0.0265], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5744, -1.0204, -0.3593,  0.2849,  0.0441], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5744, -1.0204, -0.3593,  0.2849,  0.0441], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.8053,  0.1351, -0.0758,  0.9225,  0.0088], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3552, 1.1130, 1.2131, 0.9331, 1.8097], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.9624, -2.3017,  0.5842,  0.8053, -0.4452], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0025,  0.1033,  0.1304, -0.0345,  0.2828], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2671, -0.0066,  0.1099, -0.0353,  0.2588], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1158, -0.0033,  0.0580, -0.0173,  0.1461], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1158, -0.0033,  0.0580, -0.0173,  0.1461], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1080,  0.3204,  0.0825,  0.5133, -0.0495], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1315,  0.1942, -0.0430,  0.4566,  0.0560], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3103, -1.7871, -0.8606, -1.8811, -0.5252], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0367, 0.0294, 0.1235, 0.1147, 0.1030], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9530, 0.9488, 0.8992, 0.8060, 0.9474], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1158, -0.0033,  0.0580, -0.0173,  0.1461], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0005, -0.0014, -0.0004, -0.0022,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0033, -0.0052, -0.0013, -0.0374,  0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0818,  0.0748, -0.0197, -0.0039,  0.0602], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0867,  0.0747, -0.0172, -0.0047,  0.0665], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0867,  0.0747, -0.0172, -0.0047,  0.0665], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0179, -0.0202,  0.0025, -0.0008,  0.0015], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0712], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.7472], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0913, -0.0339,  0.0175, -0.0060,  0.0045], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0913, -0.0339,  0.0175, -0.0060,  0.0045], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1848, -0.3921,  0.3268,  0.3685, -0.9137], grad_fn=<SliceBackward0>)
  [Layer 13] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 13] Output sample values after mixer: tensor([ 0.1848, -0.3921,  0.3268,  0.3685, -0.9137], grad_fn=<SliceBackward0>)
  [Layer 13] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 13] Residual connection sample values: tensor([ 0.0974,  0.9489, -1.0874,  4.1907, -1.1007], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 14/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([10.0264], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3158], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0107,  0.0919, -0.1110,  0.4023, -0.1185], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 2.5133, -1.1180, -0.4067,  0.5696,  0.6404], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 2.5133, -1.1180, -0.4067,  0.5696,  0.6404], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0466,  1.1026,  0.4297, -0.2318, -0.4703], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.4769,  1.7082,  1.1088,  0.7279,  0.7560], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1825, -0.0388, -0.5885, -0.0466, -0.1269], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0368, -0.1448, -0.0786, -0.0469,  0.0821], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0763, -0.1861, -0.1394, -0.1097,  0.1186], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0367, -0.0844, -0.0649, -0.0518,  0.0628], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0367, -0.0844, -0.0649, -0.0518,  0.0628], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0787,  0.0112, -0.0606, -0.1159,  0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1775,  0.0212, -0.2046, -0.1794, -0.1094], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.3184, -0.7621, -2.6670, -5.1836, -2.8487], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0247, 0.0647, 0.2285, 0.0340, 0.0294], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8988, 0.9519, 0.5437, 0.8386, 0.9198], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0367, -0.0844, -0.0649, -0.0518,  0.0628], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 7.1406e-05, -1.0140e-05,  5.4975e-05,  1.0513e-04, -9.6916e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0005, -0.0002,  0.0007,  0.0014,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0026,  0.0009, -0.0047, -0.0020,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0175, -0.0332, -0.0309, -0.0229,  0.0258], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0175, -0.0332, -0.0309, -0.0229,  0.0258], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0406,  0.0091,  0.0050, -0.0083,  0.0108], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0155], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.0265], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.3554,  0.0466,  0.0371, -0.0866,  0.1305], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.3554,  0.0466,  0.0371, -0.0866,  0.1305], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.5427,  0.1597,  0.4644,  0.4608, -0.4084], grad_fn=<SliceBackward0>)
  [Layer 14] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 14] Output sample values after mixer: tensor([ 1.5427,  0.1597,  0.4644,  0.4608, -0.4084], grad_fn=<SliceBackward0>)
  [Layer 14] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 14] Residual connection sample values: tensor([ 1.6401,  1.1086, -0.6230,  4.6515, -1.5091], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 15/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([13.0776], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2765], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1589,  0.0913, -0.0555,  0.3878, -0.1401], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3990,  0.9514, -0.7141, -0.1350,  0.2808], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3990,  0.9514, -0.7141, -0.1350,  0.2808], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.4717,  0.1164, -0.2565,  1.2166,  0.1228], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.5814, 0.8622, 1.5640, 1.2724, 0.0659], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.2982, -0.5150, -0.6377, -0.4717,  0.1388], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1194, -0.0221,  0.0565, -0.2258,  0.1051], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1568, -0.0289,  0.0317, -0.2435,  0.0797], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0723, -0.0143,  0.0161, -0.1070,  0.0414], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0723, -0.0143,  0.0161, -0.1070,  0.0414], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0377, -0.0011, -0.0103,  0.0375,  0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0677, -0.0191,  0.0715,  0.0717,  0.0732], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2782, -0.6808, -2.7209, -0.1126, -3.8484], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0035, 0.0371, 0.0703, 0.0203, 0.0247], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9990, 0.9750, 0.8259, 0.9977, 0.9093], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0723, -0.0143,  0.0161, -0.1070,  0.0414], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-9.4166e-06,  2.6659e-07,  2.5690e-06, -9.3699e-06, -7.1927e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-6.5231e-05, -1.2853e-05, -1.9925e-05, -2.7543e-06,  8.9144e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-7.2157e-05,  1.3849e-05,  2.9493e-06, -1.9703e-05, -1.3030e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0124, -0.0024,  0.0027, -0.0183,  0.0071], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0124, -0.0024,  0.0027, -0.0183,  0.0071], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0020, -0.0017, -0.0006,  0.0011,  0.0011], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0017], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([24.0398], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0494, -0.0539, -0.0162,  0.0335,  0.0241], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0494, -0.0539, -0.0162,  0.0335,  0.0241], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.9854, -0.5540,  0.8320,  0.4199,  0.7253], grad_fn=<SliceBackward0>)
  [Layer 15] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 15] Output sample values after mixer: tensor([-0.9854, -0.5540,  0.8320,  0.4199,  0.7253], grad_fn=<SliceBackward0>)
  [Layer 15] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 15] Residual connection sample values: tensor([ 0.6547,  0.5547,  0.2090,  5.0714, -0.7838], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 16/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([16.7771], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2441], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0624,  0.0442,  0.0182,  0.4054, -0.0717], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5362, -0.6145, -0.7644,  0.3756, -0.8088], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5362, -0.6145, -0.7644,  0.3756, -0.8088], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.9899, -1.3075, -0.1926, -0.4003, -1.0048], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.6193, 1.3181, 1.0653, 0.1829, 0.9238], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.8465,  0.2864,  0.0093,  0.9899, -1.1857], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2213, -0.3443, -0.0369, -0.1189, -0.2545], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1851, -0.3854, -0.0500, -0.2113, -0.2966], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1011, -0.1560, -0.0244, -0.0945, -0.1265], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1011, -0.1560, -0.0244, -0.0945, -0.1265], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1474,  0.4802,  0.1904,  0.0782,  0.6729], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2750, -0.0690, -0.2693,  0.8683, -0.1671], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6906, -0.1348, -1.3129, -3.7740, -1.2635], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1036, 0.2330, 0.1354, 0.0876, 0.0578], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7567, 0.9691, 0.8371, 0.7186, 0.9296], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1011, -0.1560, -0.0244, -0.0945, -0.1265], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0015,  0.0050,  0.0020,  0.0008,  0.0070], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0012,  0.0043,  0.0020,  0.0009,  0.0075], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0165, -0.0758, -0.0126, -0.0574, -0.0352], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0815, -0.1762, -0.0283, -0.1182, -0.1166], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0815, -0.1762, -0.0283, -0.1182, -0.1166], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0161,  0.0380,  0.0069, -0.0263,  0.0291], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0713], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.7451], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0776,  0.1436,  0.0311, -0.1062,  0.1204], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0776,  0.1436,  0.0311, -0.1062,  0.1204], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.5694,  1.4527, -0.1540,  0.2923, -0.5267], grad_fn=<SliceBackward0>)
  [Layer 16] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 16] Output sample values after mixer: tensor([-0.5694,  1.4527, -0.1540,  0.2923, -0.5267], grad_fn=<SliceBackward0>)
  [Layer 16] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 16] Residual connection sample values: tensor([ 0.0853,  2.0074,  0.0550,  5.3636, -1.3105], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 17/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([20.2348], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2223], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0073,  0.1450,  0.0042,  0.3799, -0.1084], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5560, -1.3414,  0.9316, -0.3020,  0.7216], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5560, -1.3414,  0.9316, -0.3020,  0.7216], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.9301,  0.3195,  1.3995,  0.4090, -1.2823], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.7572,  0.4129,  0.3192,  2.1520, -0.4760], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6822,  0.1687, -0.6557, -0.9301,  0.0095], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1841, -0.0453, -0.3295, -0.1006,  0.2222], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2159, -0.0715, -0.3439, -0.1060,  0.2348], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0963, -0.0345, -0.1427, -0.0502,  0.1311], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0963, -0.0345, -0.1427, -0.0502,  0.1311], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.2155, -0.2301, -0.2531,  0.0925,  0.0445], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1837,  0.0279,  0.0830, -0.0960, -0.2508], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.1571, -11.4668, -14.2150,  -0.1286, -14.2428],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0011, 0.0155, 0.0296, 0.1743, 0.0044], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9987, 0.8375, 0.6565, 0.9778, 0.9393], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0963, -0.0345, -0.1427, -0.0502,  0.1311], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.2719e-05,  2.4261e-05,  2.6685e-05, -9.7569e-06, -4.6903e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-8.1694e-05,  8.0051e-05,  1.0451e-04, -2.4703e-04,  4.7334e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.9312e-04, -4.8554e-05, -2.6058e-04,  2.0234e-04,  2.4745e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0623, -0.0223, -0.0923, -0.0322,  0.0846], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0623, -0.0223, -0.0923, -0.0322,  0.0846], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0126,  0.0062, -0.0617,  0.0041,  0.0411], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0202], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.0307], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1379,  0.0826, -0.6241,  0.0509,  0.5083], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1379,  0.0826, -0.6241,  0.0509,  0.5083], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1798, -0.8222, -0.1480, -0.5332,  0.8991], grad_fn=<SliceBackward0>)
  [Layer 17] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 17] Output sample values after mixer: tensor([-0.1798, -0.8222, -0.1480, -0.5332,  0.8991], grad_fn=<SliceBackward0>)
  [Layer 17] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 17] Residual connection sample values: tensor([-0.0945,  1.1851, -0.0931,  4.8305, -0.4114], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 18/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([24.7334], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2011], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0066,  0.0698, -0.0058,  0.2822, -0.0275], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0130,  0.0375, -0.7440, -0.0372, -0.1364], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0130,  0.0375, -0.7440, -0.0372, -0.1364], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5444, -0.9689,  0.2666, -0.5073,  0.3342], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.8189, 1.2707, 0.7690, 1.0242, 1.3812], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4484, -0.5837, -0.3766, -0.5444,  0.0785], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1701,  0.3922,  0.0361, -0.0707,  0.0683], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1802,  0.1268,  0.3159, -0.0845,  0.0262], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0820,  0.0674,  0.1827, -0.0405,  0.0133], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0820,  0.0674,  0.1827, -0.0405,  0.0133], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0445, -0.0719, -0.1408,  0.1716,  0.1937], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2592,  0.0562,  0.0160, -0.0387,  0.2451], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3011, -1.4686, -1.2083, -1.2129, -2.5875], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2051, 0.1822, 0.1522, 0.1942, 0.1606], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7658, 0.7652, 0.8320, 0.7902, 0.6600], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0820,  0.0674,  0.1827, -0.0405,  0.0133], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0007,  0.0012,  0.0024, -0.0029, -0.0033], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0018,  0.0043,  0.0062, -0.0039, -0.0056], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0462, -0.1059,  0.1411, -0.0606, -0.0295], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0620, -0.0929,  0.1764, -0.0684, -0.0269], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0620, -0.0929,  0.1764, -0.0684, -0.0269], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0004, -0.0018, -0.0423,  0.0012,  0.0017], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0182], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.4140], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0039, -0.0071, -0.3060,  0.0116,  0.0251], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0039, -0.0071, -0.3060,  0.0116,  0.0251], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.1263,  1.0187,  0.2872, -0.5675,  0.4903], grad_fn=<SliceBackward0>)
  [Layer 18] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 18] Output sample values after mixer: tensor([ 2.1263,  1.0187,  0.2872, -0.5675,  0.4903], grad_fn=<SliceBackward0>)
  [Layer 18] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 18] Residual connection sample values: tensor([2.0318, 2.2039, 0.1941, 4.2630, 0.0789], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 19/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([29.4752], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1842], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.1276, 0.1195, 0.0114, 0.2302, 0.0049], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6094, -0.9141, -0.6363,  0.0168, -0.6939], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6094, -0.9141, -0.6363,  0.0168, -0.6939], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.4180, -0.2743,  0.2818,  0.6706, -1.5091], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.2535, 1.4105, 1.3048, 1.0943, 1.3538], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.9309, -0.1395,  0.7602, -1.4180, -0.3608], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1099, -0.0949,  0.0420,  0.1040,  0.2994], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1455, -0.1192,  0.0370,  0.0614,  0.2664], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0675, -0.0561,  0.0188,  0.0316,  0.1509], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0675, -0.0561,  0.0188,  0.0316,  0.1509], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0127, -0.2591,  0.1158,  0.0054, -0.0447], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1200, -0.0395,  0.1148, -0.2515, -0.2473], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9436, -1.8179, -2.0862, -1.0006, -0.9650], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1790, 0.1131, 0.0827, 0.1459, 0.2542], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7061, 0.8142, 0.8416, 0.8642, 0.7825], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0675, -0.0561,  0.0188,  0.0316,  0.1509], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.5379e-04,  3.1293e-03, -1.3983e-03, -6.5472e-05,  5.3937e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0013,  0.0053, -0.0016, -0.0017,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0072, -0.0086, -0.0023,  0.0047,  0.0084], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0148, -0.0149, -0.0002,  0.0083,  0.0254], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0148, -0.0149, -0.0002,  0.0083,  0.0254], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 3.1746e-03,  3.9053e-03,  4.3758e-05,  7.0383e-05, -5.8737e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0013], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([27.3985], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1052,  0.1359,  0.0020,  0.0023, -0.2730], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1052,  0.1359,  0.0020,  0.0023, -0.2730], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.4489,  0.7909, -1.0027, -0.0609,  0.1709], grad_fn=<SliceBackward0>)
  [Layer 19] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 19] Output sample values after mixer: tensor([-0.4489,  0.7909, -1.0027, -0.0609,  0.1709], grad_fn=<SliceBackward0>)
  [Layer 19] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 19] Residual connection sample values: tensor([ 1.5829,  2.9948, -0.8086,  4.2021,  0.2498], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 20/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([37.7265], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1628], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0996,  0.1615, -0.0467,  0.2245,  0.0152], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2106, -0.2679, -1.7150, -1.7538,  1.5688], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2106, -0.2679, -1.7150, -1.7538,  1.5688], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.4117,  0.1886, -1.3416,  0.5551,  1.7115], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4611, 1.0020, 2.4725, 1.2890, 1.5024], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5412, -1.2217, -0.1798, -0.4117,  0.7648], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0735,  0.1594, -0.0734, -0.1164,  0.0486], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0350,  0.1680, -0.0069, -0.1352,  0.0212], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0178,  0.0910, -0.0034, -0.0630,  0.0107], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0178,  0.0910, -0.0034, -0.0630,  0.0107], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0465, -0.0243,  0.1890,  0.2154,  0.1601], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0282, -0.2601, -0.1759,  0.0813,  0.6725], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.6216, -5.0389, -1.2056, -1.6435, -1.3345], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1204, 0.0306, 0.0991, 0.1579, 0.1291], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8227, 0.8570, 0.8874, 0.7714, 0.8417], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0178,  0.0910, -0.0034, -0.0630,  0.0107], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 9.9813e-05, -5.2135e-05,  4.0555e-04,  4.6208e-04,  3.4343e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0038, -0.0023,  0.0040,  0.0041,  0.0022], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([0.0185, 0.0212, 0.0051, 0.0013, 0.0105], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([0.0186, 0.0219, 0.0051, 0.0008, 0.0106], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([0.0186, 0.0219, 0.0051, 0.0008, 0.0106], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0018, -0.0025, -0.0013, -0.0002,  0.0137], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0043], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([15.3070], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0357, -0.0556, -0.0387, -0.0045,  0.2714], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0357, -0.0556, -0.0387, -0.0045,  0.2714], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.4040, -0.8299,  0.5309, -0.0865,  1.1508], grad_fn=<SliceBackward0>)
  [Layer 20] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 20] Output sample values after mixer: tensor([ 0.4040, -0.8299,  0.5309, -0.0865,  1.1508], grad_fn=<SliceBackward0>)
  [Layer 20] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 20] Residual connection sample values: tensor([ 1.9869,  2.1649, -0.2777,  4.1156,  1.4006], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 21/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([40.2412], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1576], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0918,  0.0908, -0.0111,  0.1579,  0.0605], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6677, -1.2574, -0.1329, -1.0391, -0.5627], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6677, -1.2574, -0.1329, -1.0391, -0.5627], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.1052, -0.2656, -0.6959, -1.1507, -0.1739], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.1438, 1.9242, 1.2091, 0.9093, 2.5749], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.1242, -0.4314, -0.5403,  0.1052,  0.9806], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0287, -0.0180,  0.0935,  0.1988,  0.0184], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0599, -0.0481,  0.1084,  0.1937,  0.0463], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0291, -0.0235,  0.0571,  0.1062,  0.0237], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0291, -0.0235,  0.0571,  0.1062,  0.0237], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0195, -0.0328, -0.0412,  0.0002, -0.0124], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1039, -0.0480, -0.0411,  0.0527,  0.1401], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.2092, -0.0434, -3.8147, -6.6624, -0.0228], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1727, 0.0287, 0.0975, 0.0589, 0.0984], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5746, 0.9988, 0.6895, 0.6752, 0.9978], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0291, -0.0235,  0.0571,  0.1062,  0.0237], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 9.7943e-05,  1.6469e-04,  2.0660e-04, -8.2728e-07,  6.2301e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.0456e-05, -2.5146e-04,  1.9029e-04, -8.4946e-05,  9.3703e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0006, -0.0004,  0.0017,  0.0030,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0057, -0.0045,  0.0117,  0.0216,  0.0048], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0057, -0.0045,  0.0117,  0.0216,  0.0048], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0013,  0.0013, -0.0007, -0.0059, -0.0010], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([69.0345], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1130,  0.1012, -0.0776, -0.5279, -0.0792], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1130,  0.1012, -0.0776, -0.5279, -0.0792], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.8523,  0.3524,  0.3940, -0.2539,  2.0411], grad_fn=<SliceBackward0>)
  [Layer 21] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 21] Output sample values after mixer: tensor([-0.8523,  0.3524,  0.3940, -0.2539,  2.0411], grad_fn=<SliceBackward0>)
  [Layer 21] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 21] Residual connection sample values: tensor([1.1346, 2.5173, 0.1163, 3.8617, 3.4417], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 22/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([42.8238], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1528], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.0800, 0.1494, 0.0073, 0.2239, 0.2274], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.1203,  0.5657, -0.6378, -1.5065, -2.2049], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.1203,  0.5657, -0.6378, -1.5065, -2.2049], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0208, -0.0486,  2.0531, -1.8866, -1.3059], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.6038, 1.5400, 0.8551, 0.6385, 2.1362], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.9552, -0.0386, -0.7527, -0.0208, -0.0407], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3330,  0.0404,  0.3059,  0.3092, -0.3754], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3807, -0.0384,  0.6253,  0.2682, -0.4410], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1545, -0.0188,  0.4073,  0.1520, -0.1727], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1545, -0.0188,  0.4073,  0.1520, -0.1727], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0212, -0.1134,  0.0241, -0.0761,  0.0112], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1732,  0.0850, -0.1834,  0.0108,  0.2393], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.1489, -3.5006, -2.8321, -5.5396, -1.7186], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0066, 0.1764, 0.1408, 0.0853, 0.0240], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9730, 0.5393, 0.6711, 0.6233, 0.9597], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1545, -0.0188,  0.4073,  0.1520, -0.1727], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.1581e-05,  1.1564e-04, -2.4578e-05,  7.7616e-05, -1.1467e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 8.0438e-05,  1.3258e-07, -2.7516e-05, -1.6037e-04,  7.8027e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0027,  0.0014,  0.0028,  0.0007, -0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0401, -0.0032,  0.1014,  0.0375, -0.0427], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0401, -0.0032,  0.1014,  0.0375, -0.0427], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0339, -0.0012, -0.0224, -0.0102,  0.0093], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0028], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([18.9785], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2140, -0.0206, -0.2270, -0.2559,  0.1531], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2140, -0.0206, -0.2270, -0.2559,  0.1531], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.4677,  0.8537, -0.8427,  0.2775,  0.4313], grad_fn=<SliceBackward0>)
  [Layer 22] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 22] Output sample values after mixer: tensor([-0.4677,  0.8537, -0.8427,  0.2775,  0.4313], grad_fn=<SliceBackward0>)
  [Layer 22] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 22] Residual connection sample values: tensor([ 0.6669,  3.3710, -0.7263,  4.1392,  3.8730], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 23/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([50.2092], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1411], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0304,  0.1324, -0.0304,  0.1634,  0.1713], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0300, -0.4329, -0.4447,  0.0036, -0.2525], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0300, -0.4329, -0.4447,  0.0036, -0.2525], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.1897,  0.4468,  1.0288, -1.1617,  0.0492], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.7032,  1.1873,  1.7883, -0.0417,  1.8499], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.1229, -0.2822, -0.3046, -1.1897, -0.2457], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.4399, -0.2341,  0.3191, -0.2327, -0.0441], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.4622, -0.2672,  0.3078, -0.2349, -0.0935], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1786, -0.1159,  0.1774, -0.1037, -0.0446], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1786, -0.1159,  0.1774, -0.1037, -0.0446], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0222, -0.0302,  0.0760, -0.0002, -0.0859], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0309, -0.0634,  0.0751, -0.0603, -0.0112], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0811, -3.7998, -0.0826, -0.4878, -1.4532], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0238, 0.1348, 0.0605, 0.0014, 0.0066], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9981, 0.5992, 0.9950, 0.9993, 0.9905], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1786, -0.1159,  0.1774, -0.1037, -0.0446], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 9.4285e-05,  1.2835e-04, -3.2307e-04,  9.7606e-07,  3.6490e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0004,  0.0005, -0.0009,  0.0001,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0022, -0.0008,  0.0004, -0.0005, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0017,  0.0017, -0.0033,  0.0017,  0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0017,  0.0017, -0.0033,  0.0017,  0.0007], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 2.5173e-05, -2.8323e-04,  5.7988e-04,  3.0695e-06, -7.2779e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0005], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([46.3509], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0052, -0.0074,  0.0267,  0.0002, -0.0157], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0052, -0.0074,  0.0267,  0.0002, -0.0157], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.8682,  0.8194, -1.6153,  1.0395,  0.8051], grad_fn=<SliceBackward0>)
  [Layer 23] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 23] Output sample values after mixer: tensor([ 0.8682,  0.8194, -1.6153,  1.0395,  0.8051], grad_fn=<SliceBackward0>)
  [Layer 23] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 23] Residual connection sample values: tensor([ 1.5351,  4.1904, -2.3416,  5.1787,  4.6781], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 24/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([61.6121], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1274], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0520,  0.1355, -0.0732,  0.1562,  0.1538], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2467, -1.3406,  0.5351,  0.4825, -0.0917], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2467, -1.3406,  0.5351,  0.4825, -0.0917], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0015, -0.0016,  0.7888, -0.0521, -0.8202], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.9624, -0.0352, -0.1629,  2.7574,  0.8563], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.7547, -0.1294, -0.7061,  0.0015,  0.3210], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0091, -0.1187,  0.1102, -0.0094, -0.3905], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0125, -0.1187,  0.1063, -0.0110, -0.3952], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0062, -0.0559,  0.0560, -0.0055, -0.1591], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0062, -0.0559,  0.0560, -0.0055, -0.1591], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0025,  0.0771, -0.0459,  0.0932, -0.0629], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2423, -0.1863, -0.2783, -0.2458,  0.0920], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0742, -3.4497, -3.2885, -0.1609, -2.6945], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1015, 0.0281, 0.0390, 0.0699, 0.0501], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9925, 0.9077, 0.8797, 0.9888, 0.8736], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0062, -0.0559,  0.0560, -0.0055, -0.1591], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.5933e-06, -4.8530e-05,  2.8911e-05, -5.8727e-05,  3.9614e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([1.8146e-04, 5.4571e-04, 1.2786e-04, 3.7932e-05, 6.8562e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0005, -0.0015,  0.0004, -0.0004, -0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0004, -0.0012,  0.0001, -0.0004, -0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0004, -0.0012,  0.0001, -0.0004, -0.0020], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 4.7508e-05,  3.2958e-04,  4.8397e-05, -1.2487e-04,  8.8316e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0001], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([80.9798], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0036,  0.0358,  0.0047, -0.0446,  0.0187], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0036,  0.0358,  0.0047, -0.0446,  0.0187], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0289, -0.4117,  0.6626, -0.3579, -0.8431], grad_fn=<SliceBackward0>)
  [Layer 24] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 24] Output sample values after mixer: tensor([ 0.0289, -0.4117,  0.6626, -0.3579, -0.8431], grad_fn=<SliceBackward0>)
  [Layer 24] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 24] Residual connection sample values: tensor([ 1.5639,  3.7787, -1.6790,  4.8208,  3.8350], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 25/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([65.2719], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1238], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0577,  0.1274, -0.0585,  0.1570,  0.1400], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2911, -1.3915,  1.6032,  0.2571, -0.9482], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2911, -1.3915,  1.6032,  0.2571, -0.9482], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.5078, -0.1709, -1.2169,  0.3981, -0.5098], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.6581,  0.4393,  0.5879,  0.6679, -1.1559], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2826,  0.3083, -0.8191, -1.5078, -0.0771], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1216, -0.0153,  0.0088,  0.0770,  0.0473], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1191, -0.0436, -0.0026,  0.1378,  0.0415], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0631, -0.0213, -0.0013,  0.0737,  0.0212], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0631, -0.0213, -0.0013,  0.0737,  0.0212], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0322,  0.0472, -0.0245, -0.0851,  0.0227], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0078, -0.0430, -0.0770, -0.0788, -0.1587], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -0.3702,  -1.5045,  -5.7210,  -0.8176, -14.6662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2500, 0.0099, 0.0467, 0.0137, 0.0104], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9116, 0.9852, 0.7656, 0.9889, 0.8587], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0631, -0.0213, -0.0013,  0.0737,  0.0212], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0005,  0.0007, -0.0004, -0.0013,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0004, -0.0010, -0.0033,  0.0003, -0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0052, -0.0001,  0.0107,  0.0027,  0.0204], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0045, -0.0004,  0.0107,  0.0034,  0.0206], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0045, -0.0004,  0.0107,  0.0034,  0.0206], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0008,  0.0001,  0.0143,  0.0005, -0.0055], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([54.8832], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0495,  0.0046,  1.0382,  0.0216, -0.5171], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0495,  0.0046,  1.0382,  0.0216, -0.5171], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.5485, -1.2356, -1.0862,  1.7117,  0.6067], grad_fn=<SliceBackward0>)
  [Layer 25] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 25] Output sample values after mixer: tensor([ 1.5485, -1.2356, -1.0862,  1.7117,  0.6067], grad_fn=<SliceBackward0>)
  [Layer 25] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 25] Residual connection sample values: tensor([ 3.1124,  2.5431, -2.7652,  6.5325,  4.4417], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 26/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([85.2423], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1083], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1300,  0.0983, -0.1076,  0.2494,  0.1815], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.9915, -0.2771, -1.1948, -0.6371, -0.9871], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.9915, -0.2771, -1.1948, -0.6371, -0.9871], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.8974, -0.6818,  0.5194,  0.0029, -0.8181], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0867, 1.5278, 0.9664, 0.7631, 2.4138], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.8614, -0.5564,  0.3083,  0.8974, -1.5217], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([0.2264, 0.2499, 0.1001, 0.0031, 0.1448], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1379,  0.1938,  0.1642, -0.0239,  0.1529], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0737,  0.1063,  0.0888, -0.0118,  0.0823], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0737,  0.1063,  0.0888, -0.0118,  0.0823], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0334,  0.0116,  0.0249,  0.0160, -0.0043], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2092, -0.0284,  0.0828, -0.2013, -0.0047], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9595, -0.3945, -0.8420, -1.4275, -0.1466], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1598, 0.4268, 0.1567, 0.2179, 0.1162], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8579, 0.8450, 0.8764, 0.7326, 0.9831], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0737,  0.1063,  0.0888, -0.0118,  0.0823], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.9275e-04,  1.3608e-04,  2.9334e-04,  1.8856e-04, -5.0242e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 6.4709e-05, -1.6164e-03, -3.1943e-03,  1.9048e-03, -9.9208e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0040,  0.0096,  0.0029, -0.0022,  0.0082], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0053,  0.0232,  0.0142, -0.0037,  0.0187], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0053,  0.0232,  0.0142, -0.0037,  0.0187], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0039, -0.0028, -0.0039,  0.0008, -0.0050], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0010], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([31.4741], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0608, -0.0968, -0.1173,  0.0371, -0.1977], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0608, -0.0968, -0.1173,  0.0371, -0.1977], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.4287,  0.3764, -0.2947,  0.2685, -0.8864], grad_fn=<SliceBackward0>)
  [Layer 26] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 26] Output sample values after mixer: tensor([-1.4287,  0.3764, -0.2947,  0.2685, -0.8864], grad_fn=<SliceBackward0>)
  [Layer 26] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 26] Residual connection sample values: tensor([ 1.6838,  2.9195, -3.0598,  6.8010,  3.5552], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 27/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([97.7558], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1011], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0713,  0.1127, -0.1268,  0.2588,  0.1565], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1038, -1.1099, -0.5559, -0.2805,  0.8509], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1038, -1.1099, -0.5559, -0.2805,  0.8509], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.2518,  1.1541, -0.2663,  0.8463, -0.7505], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.7640, 0.6116, 0.3285, 1.6377, 1.1051], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1709,  0.2306,  0.3896, -1.2518, -0.0280], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1368, -0.2113, -0.0421, -0.3177,  0.1140], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1628, -0.2478, -0.0521, -0.5196,  0.0842], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0748, -0.1086, -0.0254, -0.1938,  0.0439], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0748, -0.1086, -0.0254, -0.1938,  0.0439], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.6265, -0.0632,  0.2045, -0.0232,  0.0273], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0398, -0.2783,  0.3023, -0.2229, -0.2681], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3662, -1.3799, -1.8268, -2.0409, -2.3490], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0886, 0.0851, 0.0670, 0.0832, 0.1304], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8860, 0.8893, 0.8848, 0.8438, 0.7361], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0748, -0.1086, -0.0254, -0.1938,  0.0439], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0042,  0.0004, -0.0014,  0.0002, -0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0043,  0.0003,  0.0004, -0.0007,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0018,  0.0136,  0.0085, -0.0637, -0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0057,  0.0026,  0.0059, -0.0833,  0.0038], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0057,  0.0026,  0.0059, -0.0833,  0.0038], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0003, -0.0007, -0.0012,  0.0101,  0.0022], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0071], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([11.8858], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0057, -0.0105, -0.0303,  0.2286,  0.0314], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0057, -0.0105, -0.0303,  0.2286,  0.0314], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.3504,  0.9300, -1.8571, -0.3318, -1.6720], grad_fn=<SliceBackward0>)
  [Layer 27] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 27] Output sample values after mixer: tensor([-1.3504,  0.9300, -1.8571, -0.3318, -1.6720], grad_fn=<SliceBackward0>)
  [Layer 27] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 27] Residual connection sample values: tensor([ 0.3333,  3.8495, -4.9169,  6.4692,  1.8832], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 28/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([112.1117], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0944], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0128,  0.1381, -0.1782,  0.2279,  0.0715], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.1662,  0.9556,  0.2243,  0.1833, -2.2622], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.1662,  0.9556,  0.2243,  0.1833, -2.2622], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0207, -1.8383, -0.1488, -0.7878, -1.0151], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.9119, -0.1715,  0.5380,  0.8508,  1.2493], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.2131, -0.6864, -0.5632, -0.0207, -1.6030], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0662,  0.4618, -0.0267, -0.1594,  0.1295], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1240,  0.4504, -0.0404, -0.1708,  0.2342], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0582,  0.2751, -0.0198, -0.0781,  0.1307], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0582,  0.2751, -0.0198, -0.0781,  0.1307], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0108, -0.0255, -0.0206,  0.0106,  0.2715], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1556, -0.0982,  0.2367, -0.1852,  0.4302], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2728, -3.9978, -2.5177, -2.1714, -2.8655], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0252, 0.0372, 0.0705, 0.0396, 0.0522], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9685, 0.8618, 0.8373, 0.9175, 0.8611], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0582,  0.2751, -0.0198, -0.0781,  0.1307], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.5726e-05,  3.7362e-05,  3.0185e-05, -1.5475e-05, -3.9708e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-7.5667e-06, -1.3379e-04,  4.9229e-05,  3.4247e-04, -2.7721e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 2.8913e-05,  1.1197e-02,  5.3629e-04, -4.2646e-03,  5.4286e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0126,  0.0708, -0.0038, -0.0212,  0.0338], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0126,  0.0708, -0.0038, -0.0212,  0.0338], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0035,  0.0489, -0.0005, -0.0021, -0.0072], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0020], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([22.2915], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1608,  1.4952, -0.0135, -0.0709, -0.2338], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1608,  1.4952, -0.0135, -0.0709, -0.2338], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.5927,  1.8164, -3.6759,  1.1947, -1.8855], grad_fn=<SliceBackward0>)
  [Layer 28] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 28] Output sample values after mixer: tensor([-1.5927,  1.8164, -3.6759,  1.1947, -1.8855], grad_fn=<SliceBackward0>)
  [Layer 28] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 28] Residual connection sample values: tensor([-1.2594e+00,  5.6660e+00, -8.5928e+00,  7.6639e+00, -2.2309e-03],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 29/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([132.4611], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0869], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-4.2291e-02,  1.8197e-01, -2.7633e-01,  2.3736e-01, -7.4486e-05],
       grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.9285, -1.1047, -1.6755, -0.2130,  0.3526], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.9285, -1.1047, -1.6755, -0.2130,  0.3526], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2188, -1.4940, -0.6243,  0.1141, -0.4157], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.3804,  0.2353, -0.4526,  3.7260,  0.9024], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.7516,  0.8003,  0.7649,  0.2188, -0.2900], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0936,  0.4087,  0.1025,  0.0061, -0.0418], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1070,  0.3742,  0.1053, -0.0543, -0.1549], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0506,  0.2217,  0.0554, -0.0264, -0.0715], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0506,  0.2217,  0.0554, -0.0264, -0.0715], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0921, -0.0590,  0.1130,  0.0017,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2741, -0.2781, -0.1724, -0.1412, -0.2764], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8072, -2.1170, -1.9257, -0.2904, -2.0499], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0819, 0.0621, 0.0409, 0.0634, 0.1482], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8625, 0.8767, 0.9242, 0.9818, 0.7380], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0506,  0.2217,  0.0554, -0.0264, -0.0715], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.8169e-04,  2.4478e-04, -4.6863e-04, -7.0905e-06, -1.0849e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.7758e-04,  2.9989e-04, -2.4001e-04,  1.9381e-05, -1.1594e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0065, -0.0039, -0.0083,  0.0146, -0.0149], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0583,  0.2228,  0.0484, -0.0124, -0.0880], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0583,  0.2228,  0.0484, -0.0124, -0.0880], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0388, -0.0613, -0.0128,  0.0012, -0.0182], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0167], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.7390], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.3284, -0.4879, -0.1612,  0.0134, -0.1831], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.3284, -0.4879, -0.1612,  0.0134, -0.1831], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.7207,  1.2033,  1.8427,  0.8788, -0.4013], grad_fn=<SliceBackward0>)
  [Layer 29] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 29] Output sample values after mixer: tensor([ 0.7207,  1.2033,  1.8427,  0.8788, -0.4013], grad_fn=<SliceBackward0>)
  [Layer 29] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 29] Residual connection sample values: tensor([-0.5387,  6.8693, -6.7500,  8.5427, -0.4036], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 30/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([158.3245], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0795], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0182,  0.2287, -0.2232,  0.2664, -0.0140], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.7102, -1.4404, -0.7752, -0.0588,  0.9745], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.7102, -1.4404, -0.7752, -0.0588,  0.9745], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.1604,  0.4017, -0.1933,  0.2272,  0.0488], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.2284, 1.1472, 0.5851, 1.0444, 1.1558], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.1552,  0.6974,  1.1255,  1.1604, -0.5248], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1874,  0.0557, -0.0857, -0.0419, -0.0111], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1642,  0.0694, -0.0525, -0.0601, -0.0385], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0888,  0.0359, -0.0256, -0.0291, -0.0189], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0888,  0.0359, -0.0256, -0.0291, -0.0189], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0830, -0.0225,  0.0745,  0.2458, -0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2322,  0.0791,  0.1440,  0.0743, -0.2088], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0150, -0.4675, -0.4280, -0.7895, -0.4175], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0135, 0.2970, 0.3926, 0.1506, 0.2982], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9863, 0.8703, 0.8453, 0.8879, 0.8829], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0888,  0.0359, -0.0256, -0.0291, -0.0189], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 9.9779e-05, -2.7087e-05,  8.9580e-05,  2.9563e-04, -1.6500e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 5.7670e-04, -1.4978e-04,  2.9202e-05,  9.1215e-04, -6.8015e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0017, -0.0002, -0.0005, -0.0005,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1111,  0.0440, -0.0320, -0.0364, -0.0231], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1111,  0.0440, -0.0320, -0.0364, -0.0231], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0529, -0.0121,  0.0078,  0.0010, -0.0164], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0169], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.6980], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.5853, -0.1363,  0.0533,  0.0095, -0.1336], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.5853, -0.1363,  0.0533,  0.0095, -0.1336], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.7552, -1.2809, -0.8162, -0.2610,  1.7387], grad_fn=<SliceBackward0>)
  [Layer 30] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 30] Output sample values after mixer: tensor([ 2.7552, -1.2809, -0.8162, -0.2610,  1.7387], grad_fn=<SliceBackward0>)
  [Layer 30] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 30] Residual connection sample values: tensor([ 2.2166,  5.5883, -7.5663,  8.2818,  1.3352], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 31/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([174.5206], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0757], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0716,  0.1771, -0.2405,  0.2562,  0.0436], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.9922,  0.5624, -0.4407,  1.4573,  1.2210], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.9922,  0.5624, -0.4407,  1.4573,  1.2210], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2619,  0.3753, -0.6760,  0.4894, -2.2158], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.3560,  1.0785,  1.6521, -0.0432,  1.2564], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.3020,  1.1248,  0.0763,  0.2619, -0.1925], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0408, -0.0572,  0.0299, -0.0937,  0.4112], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0404, -0.0676,  0.0309, -0.0956,  0.4059], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0206, -0.0326,  0.0157, -0.0455,  0.2436], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0206, -0.0326,  0.0157, -0.0455,  0.2436], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1094, -0.1428,  0.0153, -0.0522, -0.0173], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1318, -0.1748, -0.2093, -0.0843, -0.1657], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.9478, -3.5384, -4.7060, -2.4630, -0.9027], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1224, 0.0654, 0.0798, 0.0573, 0.1389], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6971, 0.7935, 0.6870, 0.8683, 0.8822], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0206, -0.0326,  0.0157, -0.0455,  0.2436], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.7565e-04, -3.5970e-04,  3.8494e-05, -1.3153e-04, -4.3546e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0018,  0.0004,  0.0002, -0.0017, -0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0062, -0.0076,  0.0187, -0.0204,  0.0273], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0204, -0.0301,  0.0295, -0.0518,  0.1949], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0204, -0.0301,  0.0295, -0.0518,  0.1949], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0055, -0.0108, -0.0051, -0.0612,  0.1838], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0182], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.4014], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0798, -0.1372, -0.0578, -0.7387,  2.6291], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0798, -0.1372, -0.0578, -0.7387,  2.6291], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.0675,  1.2974, -3.5198,  1.3080, -1.2833], grad_fn=<SliceBackward0>)
  [Layer 31] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 31] Output sample values after mixer: tensor([-2.0675,  1.2974, -3.5198,  1.3080, -1.2833], grad_fn=<SliceBackward0>)
  [Layer 31] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 31] Residual connection sample values: tensor([  0.1490,   6.8857, -11.0861,   9.5897,   0.0518],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 32/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([200.2488], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0707], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0048,  0.2218, -0.3561,  0.2885,  0.0017], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2653, -0.0348, -2.8268, -1.8729, -0.4183], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2653, -0.0348, -2.8268, -1.8729, -0.4183], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0590,  0.4398, -1.1832,  0.3298,  0.7498], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.2271, 1.6523, 0.4154, 0.4863, 0.2320], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1956, -0.9272,  0.4916,  0.0590,  0.9773], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0996,  0.1129,  0.1157, -0.1331, -0.1486], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0624,  0.0609,  0.0999, -0.1206, -0.1556], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0302,  0.0314,  0.0524, -0.0567, -0.0717], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0302,  0.0314,  0.0524, -0.0567, -0.0717], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0156, -0.0125,  0.0886, -0.0072, -0.0551], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2383,  0.2417,  0.3542, -0.2434, -0.1196], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6971, -2.0893, -1.7967, -1.3894, -1.0395], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2447, 0.0281, 0.1696, 0.1591, 0.1964], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8432, 0.9430, 0.7373, 0.8017, 0.8153], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0302,  0.0314,  0.0524, -0.0567, -0.0717], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.1525e-04,  9.2669e-05, -6.5524e-04,  5.3040e-05,  4.0789e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0026,  0.0039,  0.0005, -0.0045, -0.0015], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0600, -0.0232, -0.0131, -0.0341,  0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0528, -0.0157, -0.0005, -0.0476, -0.0158], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0528, -0.0157, -0.0005, -0.0476, -0.0158], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-6.0762e-03,  2.6810e-04,  7.4708e-05,  1.1887e-02,  2.6310e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0283], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.9404], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0439,  0.0016,  0.0008,  0.1098,  0.0199], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0439,  0.0016,  0.0008,  0.1098,  0.0199], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.3338, -0.8551,  0.9407,  1.7583, -3.1266], grad_fn=<SliceBackward0>)
  [Layer 32] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 32] Output sample values after mixer: tensor([ 1.3338, -0.8551,  0.9407,  1.7583, -3.1266], grad_fn=<SliceBackward0>)
  [Layer 32] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 32] Residual connection sample values: tensor([  1.4828,   6.0306, -10.1454,  11.3480,  -3.0747],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 33/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([264.9546], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0614], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0429,  0.1809, -0.2992,  0.3249, -0.0922], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.6231, -1.0491,  0.1490,  0.5630, -0.8033], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.6231, -1.0491,  0.1490,  0.5630, -0.8033], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.8269, -1.1368, -0.2071, -0.9626, -0.3257], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.6795,  1.9512,  1.9124,  1.9040, -0.4823], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0701, -0.3028, -1.0278, -0.8269,  0.3914], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1416, -0.1016,  0.0067, -0.1937,  0.0325], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1547, -0.1509,  0.0335, -0.1949,  0.0314], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0714, -0.0698,  0.0170, -0.0880,  0.0159], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0714, -0.0698,  0.0170, -0.0880,  0.0159], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.4488, -0.0449,  0.0322, -0.0233,  0.0237], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0082, -0.1855, -0.2400, -0.1874, -0.0391], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9791, -9.6938, -6.1678, -0.1135, -2.0903], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0060, 0.0682, 0.0846, 0.0533, 0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9882, 0.5161, 0.5935, 0.9940, 0.9963], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0714, -0.0698,  0.0170, -0.0880,  0.0159], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.9142e-04,  1.9172e-05, -1.3728e-05,  9.9190e-06, -1.0112e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.9405e-05,  7.0684e-05, -7.4871e-05, -1.8653e-05,  6.4487e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0004, -0.0003,  0.0003, -0.0006, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0747, -0.0729,  0.0180, -0.0922,  0.0161], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0747, -0.0729,  0.0180, -0.0922,  0.0161], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0200,  0.0199,  0.0014, -0.0331, -0.0040], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0119], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.1639], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.2757,  0.1633,  0.0150, -0.3348, -0.0459], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.2757,  0.1633,  0.0150, -0.3348, -0.0459], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.9708,  0.6559, -1.0806, -0.5541,  1.0351], grad_fn=<SliceBackward0>)
  [Layer 33] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 33] Output sample values after mixer: tensor([ 2.9708,  0.6559, -1.0806, -0.5541,  1.0351], grad_fn=<SliceBackward0>)
  [Layer 33] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 33] Residual connection sample values: tensor([  4.4536,   6.6865, -11.2261,  10.7939,  -2.0396],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 34/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([269.3067], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0609], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1046,  0.1663, -0.2634,  0.2555, -0.0502], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2780,  0.0696,  0.1377, -0.1849,  0.2638], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2780,  0.0696,  0.1377, -0.1849,  0.2638], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6617, -0.1941, -1.0543, -0.8208, -0.0286], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.8723, 1.2413, 3.7029, 2.9395, 2.6358], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5418,  0.3432,  0.5366, -0.6617, -0.1374], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1274,  0.0390, -0.1951,  0.2001, -0.0084], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0956,  0.0650, -0.2071,  0.1606, -0.0169], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0501,  0.0336, -0.0929,  0.0867, -0.0084], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0501,  0.0336, -0.0929,  0.0867, -0.0084], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.4731, -0.0049, -0.0223, -0.0065, -0.0482], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0010, -0.2695, -0.2666, -0.2345, -0.2753], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.5611, -2.4811, -2.8936, -0.0159, -0.0261], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2991, 0.1080, 0.3238, 0.2421, 0.0997], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.4648, 0.7649, 0.3918, 0.9962, 0.9974], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0501,  0.0336, -0.0929,  0.0867, -0.0084], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 7.0843e-03, -7.3944e-05, -3.3416e-04, -9.6742e-05, -7.2220e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 5.5717e-03, -7.3606e-05, -5.8788e-05, -8.0202e-04, -4.4411e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0014,  0.0027, -0.0059,  0.0074,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0323,  0.0233, -0.0631,  0.0609, -0.0045], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0323,  0.0233, -0.0631,  0.0609, -0.0045], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0039,  0.0008, -0.0046, -0.0051, -0.0007], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0054], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.5439], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1041,  0.0220, -0.1391, -0.1722, -0.0217], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1041,  0.0220, -0.1391, -0.1722, -0.0217], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.6040, -0.2092, -3.8211,  3.5125, -0.3899], grad_fn=<SliceBackward0>)
  [Layer 34] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 34] Output sample values after mixer: tensor([ 0.6040, -0.2092, -3.8211,  3.5125, -0.3899], grad_fn=<SliceBackward0>)
  [Layer 34] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 34] Residual connection sample values: tensor([  5.0576,   6.4774, -15.0471,  14.3064,  -2.4295],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 35/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([473.8556], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0459], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1201,  0.1536, -0.3510,  0.3130, -0.0571], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.5090, -0.9040,  0.3940,  0.4595, -2.0511], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.5090, -0.9040,  0.3940,  0.4595, -2.0511], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0469,  0.4509,  0.3494, -1.4220, -0.1166], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([4.3219, 1.3013, 0.8880, 1.0998, 1.5317], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0892, -0.3878, -1.6980, -0.0469,  0.4032], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0015, -0.1084, -0.0504, -0.3135, -0.0127], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1575, -0.0672, -0.0866, -0.3584, -0.0542], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0725, -0.0325, -0.0414, -0.1474, -0.0264], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0725, -0.0325, -0.0414, -0.1474, -0.0264], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0077,  0.1313, -0.2658,  0.2764, -0.0543], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2417,  0.4430, -0.2390, -0.1867, -0.0973], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7098, -2.7746, -0.4453, -1.1391, -3.5906], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.5238, 0.0611, 0.3474, 0.1880, 0.1145], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6895, 0.8441, 0.8567, 0.8073, 0.6628], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0725, -0.0325, -0.0414, -0.1474, -0.0264], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0003, -0.0050,  0.0101, -0.0105,  0.0021], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0040, -0.0078,  0.0169, -0.0176,  0.0019], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0300, -0.0232, -0.0210, -0.0623, -0.0024], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0791, -0.0452, -0.0490, -0.1621, -0.0202], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0791, -0.0452, -0.0490, -0.1621, -0.0202], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0216,  0.0118, -0.0115, -0.0456,  0.0047], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0251], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.3072], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.4451,  0.1290, -0.0892, -0.4085,  0.0568], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.4451,  0.1290, -0.0892, -0.4085,  0.0568], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 5.0211,  4.4209,  1.5853,  2.7325, -2.1381], grad_fn=<SliceBackward0>)
  [Layer 35] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 35] Output sample values after mixer: tensor([ 5.0211,  4.4209,  1.5853,  2.7325, -2.1381], grad_fn=<SliceBackward0>)
  [Layer 35] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 35] Residual connection sample values: tensor([ 10.0788,  10.8983, -13.4618,  17.0389,  -4.5676],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 36/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([685.4570], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0382], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1889,  0.2068, -0.2506,  0.3151, -0.0877], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1790, -0.9124,  0.2751, -0.7344, -0.5097], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1790, -0.9124,  0.2751, -0.7344, -0.5097], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.4721,  0.5466, -0.2147, -0.2698, -0.2683], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0122, 3.2003, 1.1066, 0.8529, 0.2883], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0599,  0.4619, -0.5441, -0.4721, -0.2265], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1047,  0.1039, -0.0386, -0.0572,  0.0437], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0685,  0.1038, -0.0670, -0.0821,  0.0158], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0354,  0.0546, -0.0324, -0.0394,  0.0080], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0354,  0.0546, -0.0324, -0.0394,  0.0080], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0513,  0.3364, -0.0394, -0.0363, -0.0957], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0731, -0.2715, -0.2597, -0.0958, -0.1347], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6566, -1.1306, -1.6058, -2.4414, -2.8823], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1133, 0.0867, 0.0638, 0.0839, 0.0543], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7401, 0.9066, 0.9026, 0.8148, 0.8551], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0354,  0.0546, -0.0324, -0.0394,  0.0080], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0002,  0.0013, -0.0002, -0.0001, -0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.7430e-04, -1.1280e-03, -3.7633e-04,  4.9735e-04,  7.4816e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0003,  0.0032, -0.0024, -0.0009, -0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0402,  0.0657, -0.0395, -0.0460,  0.0080], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0402,  0.0657, -0.0395, -0.0460,  0.0080], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0033, -0.0172, -0.0062,  0.0110, -0.0015], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0091], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.5057], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0506, -0.3866, -0.0940,  0.1875, -0.0225], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0506, -0.3866, -0.0940,  0.1875, -0.0225], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-6.6306,  4.9723,  4.6060, -4.9825,  0.8429], grad_fn=<SliceBackward0>)
  [Layer 36] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 36] Output sample values after mixer: tensor([-6.6306,  4.9723,  4.6060, -4.9825,  0.8429], grad_fn=<SliceBackward0>)
  [Layer 36] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 36] Residual connection sample values: tensor([ 3.4482, 15.8706, -8.8558, 12.0565, -3.7246], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 37/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([799.8793], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0354], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0695,  0.3274, -0.1764,  0.2352, -0.0757], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.0402,  2.4920,  6.5921, -2.8279, -0.0977], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.0402,  2.4920,  6.5921, -2.8279, -0.0977], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6521, -0.2254,  0.6003,  0.9761,  1.9785], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.6499, 0.9646, 2.8735, 1.3384, 0.9046], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.1299, -0.6888, -0.0773, -0.6521,  0.1745], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([0.1107, 0.0396, 0.0200, 0.3519, 0.2887], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([0.0984, 0.0112, 0.0250, 0.2010, 0.3035], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([0.0516, 0.0056, 0.0126, 0.1106, 0.1746], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([0.0516, 0.0056, 0.0126, 0.1106, 0.1746], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0067,  0.2691, -0.0474,  0.0618, -0.0274], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2020, -0.0255, -0.2342, -0.2758, -0.2779], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0606, -3.2470, -0.8191, -0.2453, -1.9752], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0479, 0.0254, 0.1543, 0.0048, 0.0286], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9971, 0.9208, 0.8813, 0.9988, 0.9451], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([0.0516, 0.0056, 0.0126, 0.1106, 0.1746], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.6517e-05,  6.6533e-04, -1.1722e-04,  1.5269e-04, -6.7758e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 4.3525e-05,  1.2358e-04, -8.4500e-04,  8.0217e-04, -3.8650e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0017, -0.0081, -0.0047,  0.0533,  0.0486], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0082, -0.0092, -0.0071,  0.0323,  0.0154], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0082, -0.0092, -0.0071,  0.0323,  0.0154], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0063, -0.0212, -0.0465, -0.0051, -0.0007], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0463], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.6465], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0472, -0.1444, -0.6249, -0.1265, -0.0040], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0472, -0.1444, -0.6249, -0.1265, -0.0040], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3394, -1.9783, -0.0306,  0.0639, -1.1544], grad_fn=<SliceBackward0>)
  [Layer 37] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 37] Output sample values after mixer: tensor([ 0.3394, -1.9783, -0.0306,  0.0639, -1.1544], grad_fn=<SliceBackward0>)
  [Layer 37] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 37] Residual connection sample values: tensor([ 3.7876, 13.8923, -8.8864, 12.1204, -4.8790], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 38/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([952.9026], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0324], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0636,  0.2316, -0.1475,  0.1962, -0.0810], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1773, -0.5995,  0.6554, -1.1954, -1.1023], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1773, -0.5995,  0.6554, -1.1954, -1.1023], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7721,  0.4787,  0.2373, -0.5450, -0.3412], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.8251, 2.0470, 0.1186, 1.2935, 1.4981], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.3686, 0.9851, 1.0855, 0.7721, 0.3605], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1573, -0.0685, -0.0423,  0.1752, -0.0485], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1292, -0.1056, -0.0680,  0.1636, -0.0697], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0604, -0.0500, -0.0329,  0.0885, -0.0337], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0604, -0.0500, -0.0329,  0.0885, -0.0337], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2067, -0.2705, -0.0519,  0.0120, -0.2691], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2037, -0.2194, -0.0624, -0.1393, -0.2782], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0881, -1.3536, -1.1764, -1.6451, -1.1941], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2857, 0.2116, 0.1872, 0.1456, 0.0989], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7328, 0.7509, 0.8024, 0.7870, 0.8886], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0604, -0.0500, -0.0329,  0.0885, -0.0337], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0036,  0.0047,  0.0009, -0.0002,  0.0046], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([0.0090, 0.0110, 0.0015, 0.0005, 0.0108], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0239, -0.0291, -0.0013,  0.0586,  0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0728, -0.0696, -0.0279,  0.1303, -0.0186], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0728, -0.0696, -0.0279,  0.1303, -0.0186], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0059,  0.0148, -0.0120, -0.0362,  0.0051], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0131], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.7363], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1026,  0.2494, -0.2129, -0.5839,  0.0741], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1026,  0.2494, -0.2129, -0.5839,  0.0741], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.6013, -2.4689, -3.3280,  1.2166,  0.2748], grad_fn=<SliceBackward0>)
  [Layer 38] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 38] Output sample values after mixer: tensor([ 1.6013, -2.4689, -3.3280,  1.2166,  0.2748], grad_fn=<SliceBackward0>)
  [Layer 38] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 38] Residual connection sample values: tensor([  5.3889,  11.4234, -12.2144,  13.3370,  -4.6042],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 39/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1152.2849], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0295], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0716,  0.1534, -0.1626,  0.1778, -0.0619], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2222, -0.1696,  0.5251, -0.9017, -0.2225], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2222, -0.1696,  0.5251, -0.9017, -0.2225], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0317, -1.5646,  0.9643, -1.1194, -0.3054], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 3.1005,  1.8670,  1.6441,  0.5852, -0.2605], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1321,  0.5098, -0.1945, -0.0317,  0.3731], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0027,  0.2532,  0.1687, -0.2293, -0.0603], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0170,  0.3384,  0.1464, -0.2252, -0.0813], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0084,  0.1976,  0.0785, -0.1000, -0.0390], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0084,  0.1976,  0.0785, -0.1000, -0.0390], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0434,  0.0169, -0.0006,  0.0898,  0.0082], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1146,  0.1815,  0.2752,  0.0730, -0.2481], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6942, -0.9243, -1.3151, -3.1533, -2.1087], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1024, 0.0478, 0.0452, 0.0486, 0.0199], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9314, 0.9567, 0.9423, 0.8578, 0.9590], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0084,  0.1976,  0.0785, -0.1000, -0.0390], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.7451e-05, -1.4571e-05,  5.0103e-07, -7.7538e-05, -7.1179e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0003, -0.0001,  0.0001, -0.0002,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 1.3922e-03,  5.0934e-03,  6.6288e-05, -4.3527e-03,  2.2326e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0058,  0.1744,  0.0674, -0.0900, -0.0312], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0058,  0.1744,  0.0674, -0.0900, -0.0312], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0007, -0.0135,  0.0222,  0.0234,  0.0031], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0050], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([14.1552], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0192, -0.3874,  0.6501,  0.5542,  0.0831], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0192, -0.3874,  0.6501,  0.5542,  0.0831], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.3358, -0.3323, -1.8551,  0.5551, -5.3320], grad_fn=<SliceBackward0>)
  [Layer 39] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 39] Output sample values after mixer: tensor([ 1.3358, -0.3323, -1.8551,  0.5551, -5.3320], grad_fn=<SliceBackward0>)
  [Layer 39] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 39] Residual connection sample values: tensor([  6.7246,  11.0910, -14.0696,  13.8921,  -9.9362],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 40/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1381.9120], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0269], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0790,  0.1313, -0.1710,  0.1648, -0.1164], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1165, -1.0321, -0.2882, -0.0999, -0.2657], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1165, -1.0321, -0.2882, -0.0999, -0.2657], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0295, -0.0222,  0.0937, -0.3862, -0.2506], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.4000, 1.6662, 2.6846, 0.4509, 0.7714], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0091, -0.5224, -0.3031,  0.0295, -0.8359], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0012,  0.0151,  0.0301,  0.0803, -0.0583], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0168, -0.0036,  0.0359,  0.0704, -0.0631], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0083, -0.0018,  0.0183,  0.0364, -0.0306], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0083, -0.0018,  0.0183,  0.0364, -0.0306], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0197,  0.0596, -0.0394, -0.0392,  0.0147], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2571,  0.0539,  0.0602,  0.9802,  0.1671], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9810, -1.4352, -0.7966, -1.6062, -1.8465], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0841, 0.0696, 0.0647, 0.0573, 0.1237], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8466, 0.9050, 0.9498, 0.9120, 0.7958], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0083, -0.0018,  0.0183,  0.0364, -0.0306], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.3834e-05, -4.1788e-05,  2.7664e-05,  2.7468e-05, -1.0342e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0002,  0.0013,  0.0005, -0.0002,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0004,  0.0023,  0.0044,  0.0049, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0072,  0.0008,  0.0193,  0.0347, -0.0252], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0072,  0.0008,  0.0193,  0.0347, -0.0252], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0004, -0.0002, -0.0024, -0.0016,  0.0029], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0055], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.4314], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0104, -0.0059, -0.0623, -0.0509,  0.0756], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0104, -0.0059, -0.0623, -0.0509,  0.0756], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-8.2617,  0.1406, -7.6037,  0.8804,  3.3316], grad_fn=<SliceBackward0>)
  [Layer 40] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 40] Output sample values after mixer: tensor([-8.2617,  0.1406, -7.6037,  0.8804,  3.3316], grad_fn=<SliceBackward0>)
  [Layer 40] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 40] Residual connection sample values: tensor([ -1.5371,  11.2317, -21.6733,  14.7725,  -6.6046],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 41/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1619.1842], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0249], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0170,  0.1255, -0.2454,  0.1638, -0.0736], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1112,  0.4261, -0.6806,  0.1296,  0.1189], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1112,  0.4261, -0.6806,  0.1296,  0.1189], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3270,  0.2788,  1.5712,  0.4611, -1.2298], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.8795, 1.4045, 2.0267, 0.4564, 2.4552], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.0878,  0.3003, -0.7251,  0.3270, -0.5384], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0408,  0.0821,  0.2787,  0.0814, -0.3844], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0542,  0.0681,  0.2808,  0.0747, -0.4000], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0264,  0.0352,  0.1600,  0.0387, -0.1605], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0264,  0.0352,  0.1600,  0.0387, -0.1605], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0648,  0.0946,  0.1255, -0.2776,  0.3694], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0312,  0.0736,  0.0332, -0.0221,  0.0672], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8259, -1.8637, -1.2829, -1.4543, -4.4079], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0877, 0.1222, 0.0534, 0.0644, 0.0720], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8521, 0.7964, 0.9338, 0.9105, 0.7282], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0264,  0.0352,  0.1600,  0.0387, -0.1605], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0001, -0.0002, -0.0003,  0.0006, -0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0006,  0.0002, -0.0013,  0.0020, -0.0024], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0011,  0.0019,  0.0077,  0.0020, -0.0056], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0268,  0.0362,  0.1637,  0.0397, -0.1621], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0268,  0.0362,  0.1637,  0.0397, -0.1621], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0016,  0.0093, -0.0374,  0.0027, -0.0102], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0033], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([17.3950], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0473,  0.2807, -1.1087,  0.0852, -0.2473], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0473,  0.2807, -1.1087,  0.0852, -0.2473], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 5.3490,  1.4266,  5.8360, -3.6525,  1.5254], grad_fn=<SliceBackward0>)
  [Layer 41] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 41] Output sample values after mixer: tensor([ 5.3490,  1.4266,  5.8360, -3.6525,  1.5254], grad_fn=<SliceBackward0>)
  [Layer 41] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 41] Residual connection sample values: tensor([  3.8119,  12.6583, -15.8373,  11.1200,  -5.0792],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 42/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1967.3956], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0225], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0408,  0.1380, -0.1711,  0.1181, -0.0541], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3305,  0.2972, -0.6148,  0.0480,  0.7225], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3305,  0.2972, -0.6148,  0.0480,  0.7225], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0857,  0.4673, -0.3856, -0.5459,  0.2142], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.8384, 0.7908, 2.2175, 0.0709, 2.8708], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0179, -0.2230,  0.6473,  0.0857,  0.3734], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0188, -0.0644, -0.0456,  0.0228,  0.0450], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0095, -0.0776, -0.0356,  0.0263,  0.0250], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0048, -0.0373, -0.0175,  0.0133,  0.0127], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0048, -0.0373, -0.0175,  0.0133,  0.0127], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0824, -0.0691, -0.0544, -0.0866,  0.3745], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0598,  0.0517,  0.0086, -0.1180, -0.2784], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0661, -1.4514, -0.7270, -1.9455, -0.6256], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1272, 0.3255, 0.0312, 0.0290, 0.1829], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8732, 0.6235, 0.9775, 0.9451, 0.8919], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0048, -0.0373, -0.0175,  0.0133,  0.0127], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 4.9843e-05, -4.1814e-05, -3.2932e-05, -5.2406e-05,  2.2657e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0004,  0.0003, -0.0003,  0.0003,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0010, -0.0015,  0.0013,  0.0006,  0.0044], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0057, -0.0389, -0.0163,  0.0140,  0.0171], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0057, -0.0389, -0.0163,  0.0140,  0.0171], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0008, -0.0066,  0.0035,  0.0003,  0.0083], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0029], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([18.5514], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0305, -0.2511,  0.1351,  0.0109,  0.2906], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0305, -0.2511,  0.1351,  0.0109,  0.2906], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 3.1479, -2.5143, -1.9779, -6.3766,  0.3138], grad_fn=<SliceBackward0>)
  [Layer 42] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 42] Output sample values after mixer: tensor([ 3.1479, -2.5143, -1.9779, -6.3766,  0.3138], grad_fn=<SliceBackward0>)
  [Layer 42] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 42] Residual connection sample values: tensor([  6.9597,  10.1440, -17.8152,   4.7434,  -4.7654],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 43/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2148.6572], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0216], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0710,  0.1085, -0.1823,  0.0492, -0.0482], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3131, -0.6311, -0.2751,  0.9326,  0.0653], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3131, -0.6311, -0.2751,  0.9326,  0.0653], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.9579,  0.0360, -0.1667,  1.5192, -0.6055], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.7294, 0.8963, 0.8703, 2.2312, 0.7377], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.5834, 0.5738, 0.1240, 0.9579, 0.2289], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1366, -0.0501,  0.0111, -0.2816,  0.0955], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1330, -0.0958,  0.0235, -0.2757,  0.0867], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0709, -0.0456,  0.0119, -0.1190,  0.0452], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0709, -0.0456,  0.0119, -0.1190,  0.0452], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0599, -0.1435,  0.8818,  0.0349, -0.0091], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1446, -0.0917, -0.2765, -0.1286,  0.1663], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9762, -1.4783, -1.0589, -1.0815, -5.9141], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0603, 0.0361, 0.0194, 0.0625, 0.1089], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9429, 0.9480, 0.9797, 0.9347, 0.5253], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0709, -0.0456,  0.0119, -0.1190,  0.0452], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.5611e-04, -6.1377e-04,  3.7710e-03,  1.4939e-04, -3.8795e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-9.1097e-05, -1.2014e-03,  9.5960e-03,  1.9559e-04, -6.4812e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0033, -0.0032, -0.0066, -0.0033,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0649, -0.0428,  0.0037, -0.1066,  0.0397], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0649, -0.0428,  0.0037, -0.1066,  0.0397], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0086,  0.0094, -0.0004, -0.0713,  0.0013], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0033], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([17.4061], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.3931,  0.3294, -0.0146, -2.5944,  0.0561], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.3931,  0.3294, -0.0146, -2.5944,  0.0561], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.6873,  2.9352, -0.5940,  2.3999,  6.9038], grad_fn=<SliceBackward0>)
  [Layer 43] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 43] Output sample values after mixer: tensor([ 1.6873,  2.9352, -0.5940,  2.3999,  6.9038], grad_fn=<SliceBackward0>)
  [Layer 43] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 43] Residual connection sample values: tensor([  8.6470,  13.0792, -18.4092,   7.1432,   2.1385],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 44/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2348.8274], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0206], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0838,  0.1318, -0.1801,  0.0689,  0.0207], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3017, -3.0573, -0.4098,  0.3692, -0.7817], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3017, -3.0573, -0.4098,  0.3692, -0.7817], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.9490,  1.2354,  0.3703, -1.0736, -1.8392], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.5953, 2.8216, 0.2717, 2.2131, 2.1051], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4141, -0.2159,  0.3055, -0.9490, -0.2487], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1541, -0.1576,  0.0635, -0.1561,  0.2160], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1602, -0.0971,  0.0451, -0.1627,  0.1636], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0737, -0.0462,  0.0230, -0.0747,  0.0884], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0737, -0.0462,  0.0230, -0.0747,  0.0884], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2777,  0.0844,  0.0625, -0.0235,  0.1430], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2727, -0.0592, -0.0088,  0.0737,  0.1218], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7482, -0.6439, -1.1771, -1.3506, -1.0269], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1036, 0.2273, 0.0146, 0.0868, 0.2702], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9254, 0.8639, 0.9830, 0.8894, 0.7577], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0737, -0.0462,  0.0230, -0.0747,  0.0884], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0021, -0.0006, -0.0005,  0.0002, -0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0019, -0.0005, -0.0004,  0.0001, -0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0021, -0.0010,  0.0004, -0.0038,  0.0038], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0713, -0.0444,  0.0220, -0.0740,  0.0869], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0713, -0.0444,  0.0220, -0.0740,  0.0869], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0091,  0.0061, -0.0036, -0.0161, -0.0213], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0025], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([19.8673], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.3389,  0.1802, -0.1437, -0.5593, -0.8032], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.3389,  0.1802, -0.1437, -0.5593, -0.8032], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.7287,  0.1364, -6.2443, -0.7473, -4.1280], grad_fn=<SliceBackward0>)
  [Layer 44] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 44] Output sample values after mixer: tensor([ 1.7287,  0.1364, -6.2443, -0.7473, -4.1280], grad_fn=<SliceBackward0>)
  [Layer 44] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 44] Residual connection sample values: tensor([ 10.3757,  13.2156, -24.6535,   6.3959,  -1.9895],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 45/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2514.4741], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0199], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0993,  0.1299, -0.2368,  0.0602, -0.0189], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6336, -0.0503,  0.1061, -0.3214, -0.3632], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6336, -0.0503,  0.1061, -0.3214, -0.3632], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.2258,  0.3872, -0.5153, -1.0364, -2.4788], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.9283, 1.8904, 0.4707, 1.3111, 2.4545], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6203, -0.1349, -0.3775, -0.2258,  0.5507], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0397, -0.0749, -0.0869, -0.1752,  0.4224], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0442, -0.0226, -0.0893, -0.1818,  0.4199], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0216, -0.0112, -0.0427, -0.0827,  0.2534], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0216, -0.0112, -0.0427, -0.0827,  0.2534], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1490, -0.0461, -0.0262, -0.1670, -0.0150], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0319,  0.0885, -0.0226, -0.1199,  0.1387], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.2502, -4.1815, -1.0937, -2.6774, -2.3149], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1268, 0.1408, 0.0309, 0.0460, 0.0628], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7518, 0.5549, 0.9668, 0.8841, 0.8648], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0216, -0.0112, -0.0427, -0.0827,  0.2534], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([4.0837e-04, 1.2646e-04, 7.1883e-05, 4.5785e-04, 4.1062e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 6.5107e-04,  1.4585e-05, -3.0506e-05,  1.4063e-03,  1.8705e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0031, -0.0014, -0.0054, -0.0044,  0.0241], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0273, -0.0139, -0.0533, -0.0971,  0.3084], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0273, -0.0139, -0.0533, -0.0971,  0.3084], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0060,  0.0003, -0.0030,  0.0131, -0.0459], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0038], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([16.1132], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.2263,  0.0093, -0.1030,  0.4159, -1.5616], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.2263,  0.0093, -0.1030,  0.4159, -1.5616], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([6.5238, 2.9165, 0.1289, 2.1266, 3.7363], grad_fn=<SliceBackward0>)
  [Layer 45] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 45] Output sample values after mixer: tensor([6.5238, 2.9165, 0.1289, 2.1266, 3.7363], grad_fn=<SliceBackward0>)
  [Layer 45] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 45] Residual connection sample values: tensor([ 16.8995,  16.1321, -24.5245,   8.5225,   1.7468],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 46/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2732.8535], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0191], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1867,  0.1858, -0.2760,  0.0952,  0.0192], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7731, -0.2140,  0.2112,  0.3145, -0.5728], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7731, -0.2140,  0.2112,  0.3145, -0.5728], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.1950,  0.0761,  0.3946, -0.9110, -0.1990], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.7066, 1.4575, 1.6385, 1.6470, 0.5160], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0893, 0.2624, 0.3332, 0.1950, 0.8736], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0415,  0.0268,  0.0701,  0.1260,  0.0310], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0447,  0.0230,  0.0490,  0.1102,  0.0513], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0218,  0.0116,  0.0251,  0.0581,  0.0263], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0218,  0.0116,  0.0251,  0.0581,  0.0263], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0299, -0.2704,  0.0133, -0.0190, -0.0031], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0362, -0.2753, -0.0801,  0.1732,  0.2618], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8673, -0.9793, -1.6584, -0.9408, -0.4381], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0165, 0.0242, 0.0322, 0.0526, 0.0147], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9696, 0.9766, 0.9480, 0.9518, 0.9936], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0218,  0.0116,  0.0251,  0.0581,  0.0263], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.0780e-05,  9.7614e-05, -4.7890e-06,  6.8573e-06,  1.1285e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.2591e-05,  5.9058e-04, -5.1344e-05,  2.3460e-05, -1.3192e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-4.7254e-04,  7.8506e-05, -3.2194e-05,  6.9164e-04,  3.0722e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0179,  0.0093,  0.0200,  0.0471,  0.0213], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0179,  0.0093,  0.0200,  0.0471,  0.0213], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0044, -0.0009,  0.0023,  0.0086, -0.0044], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0056], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.3060], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1355, -0.0264,  0.0624,  0.2118, -0.1329], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1355, -0.0264,  0.0624,  0.2118, -0.1329], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.9379,  2.6157, -1.2571,  0.6052,  2.6339], grad_fn=<SliceBackward0>)
  [Layer 46] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 46] Output sample values after mixer: tensor([-2.9379,  2.6157, -1.2571,  0.6052,  2.6339], grad_fn=<SliceBackward0>)
  [Layer 46] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 46] Residual connection sample values: tensor([ 13.9616,  18.7478, -25.7816,   9.1277,   4.3807],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 47/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2896.8647], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0186], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1331,  0.1805, -0.2385,  0.0855,  0.0391], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0473,  1.1791, -0.5222, -0.4215,  0.0768], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0473,  1.1791, -0.5222, -0.4215,  0.0768], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2285, -0.3934,  0.5601,  0.9942,  0.3630], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.2105, -0.7096,  2.1893,  1.1201,  1.4548], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.6534, -0.0268,  0.2278,  0.2285, -0.2784], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0320, -0.0693,  0.0527, -0.1350,  0.0488], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0149, -0.0942, -0.1668, -0.1384,  0.0540], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0074, -0.0449, -0.0765, -0.0644,  0.0277], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0074, -0.0449, -0.0765, -0.0644,  0.0277], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1527, -0.0681, -0.1458, -0.2775,  0.1461], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.6734,  0.0241, -0.0512, -0.2711, -0.1267], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -3.5522, -11.2450,  -2.6866,  -3.1935,  -3.1998],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0275, 0.0075, 0.0228, 0.0112, 0.0489], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9068, 0.9191, 0.9405, 0.9650, 0.8553], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0074, -0.0449, -0.0765, -0.0644,  0.0277], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.1164e-05,  1.3895e-05,  2.9752e-05,  5.6626e-05, -2.9815e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0006, -0.0002, -0.0018, -0.0008,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0008, -0.0027, -0.0050, -0.0019, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0097, -0.0661, -0.1131, -0.0930,  0.0389], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0097, -0.0661, -0.1131, -0.0930,  0.0389], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0002, -0.0596,  0.0220,  0.0155,  0.0016], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0054], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.6538], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0069, -1.0458,  0.6308,  0.4655,  0.0446], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0069, -1.0458,  0.6308,  0.4655,  0.0446], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-7.4644,  8.5180,  1.2686,  2.1785, -5.8582], grad_fn=<SliceBackward0>)
  [Layer 47] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 47] Output sample values after mixer: tensor([-7.4644,  8.5180,  1.2686,  2.1785, -5.8582], grad_fn=<SliceBackward0>)
  [Layer 47] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 47] Residual connection sample values: tensor([  6.4971,  27.2658, -24.5131,  11.3062,  -1.4775],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 48/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3191.8999], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0177], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0602,  0.2359, -0.2073,  0.0986, -0.0122], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2496, -2.2774, -0.9692,  0.1703, -0.7544], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2496, -2.2774, -0.9692,  0.1703, -0.7544], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3766,  0.2861, -0.3094, -1.0471, -0.1905], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.8376,  1.4227,  0.5163,  0.9365, -0.1076], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4479,  0.7011,  0.0366,  0.3766, -0.4345], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0661,  0.0395, -0.0420, -0.2037,  0.0266], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0713,  0.2594, -0.1279, -0.2700,  0.0242], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0344,  0.1465, -0.0598, -0.1169,  0.0122], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0344,  0.1465, -0.0598, -0.1169,  0.0122], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1048,  0.0450, -0.0430, -0.0493, -0.0686], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1387, -0.2673,  0.0409, -0.1597, -0.0159], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-54.8118, -78.5143, -47.2508,  -2.3308,  -4.2266],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0699, 0.0361, 0.0068, 0.0028, 0.0068], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.0217, 0.0588, 0.7252, 0.9935, 0.9719], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0344,  0.1465, -0.0598, -0.1169,  0.0122], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0003, -0.0001,  0.0001,  0.0001,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0003, -0.0001,  0.0001,  0.0001,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0007,  0.0028, -0.0012, -0.0022,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0280,  0.1194, -0.0489, -0.0953,  0.0100], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0280,  0.1194, -0.0489, -0.0953,  0.0100], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0039, -0.0253,  0.0130, -0.0088, -0.0024], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0040], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([15.8490], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1426, -0.7519,  0.4007, -0.3105, -0.0943], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1426, -0.7519,  0.4007, -0.3105, -0.0943], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-15.2885,   3.3557,   3.7794,  13.4104,  -7.3091],
       grad_fn=<SliceBackward0>)
  [Layer 48] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 48] Output sample values after mixer: tensor([-15.2885,   3.3557,   3.7794,  13.4104,  -7.3091],
       grad_fn=<SliceBackward0>)
  [Layer 48] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 48] Residual connection sample values: tensor([ -8.7914,  30.6215, -20.7337,  24.7166,  -8.7867],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3893.5112], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0160], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0785,  0.3024, -0.1885,  0.2292, -0.0777], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Final backbone norm output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Final backbone norm output sample values: tensor([-0.0785,  0.3024, -0.1885,  0.2292, -0.0777], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Logits shape: torch.Size([1, 1, 50288])
[Mamba2LMHeadModel] Logits sample values: tensor([  8.9093, -15.0754,   9.2121,  10.5829,   6.8713],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Forward pass input_ids shape: torch.Size([1, 1])
[Mamba2LMHeadModel] input_ids sample values: tensor([434])
[Mamba2LMHeadModel] Embedding output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Embedding sample values: tensor([-0.0077, -0.0777, -0.2100,  0.1125, -0.1132], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 1/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0260], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([6.2008], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0084, -0.0966, -0.2384,  0.1278, -0.1263], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3259, -0.6204, -0.4781,  0.2862, -0.2607], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3259, -0.6204, -0.4781,  0.2862, -0.2607], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0913, -0.2357,  0.4792,  0.8172, -1.3478], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.5489, -0.1818,  0.2176, -0.1411,  0.3038], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5844, -0.2065, -0.8398,  0.0913, -0.6217], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1450, -0.0182, -0.1794, -0.0475,  0.0576], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0828,  0.1971,  0.0908,  0.0017, -0.1992], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0431,  0.1082,  0.0475,  0.0008, -0.0897], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0431,  0.1082,  0.0475,  0.0008, -0.0897], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3974,  0.3635, -0.2782, -0.2760, -0.1453], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2696, -0.2497, -0.1693, -0.2684,  0.0547], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6180, -2.5226, -3.0473, -3.3078, -3.9090], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0157, 0.0113, 0.0113, 0.0213, 0.0099], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9597, 0.9718, 0.9663, 0.9321, 0.9622], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0431,  0.1082,  0.0475,  0.0008, -0.0897], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.6882e-04,  2.4594e-04, -1.8820e-04, -1.8671e-04, -9.8305e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0018,  0.0004, -0.0022, -0.0024,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0237,  0.0252,  0.0287,  0.0025, -0.0238], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0401,  0.0665,  0.0468,  0.0028, -0.0580], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0401,  0.0665,  0.0468,  0.0028, -0.0580], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0055, -0.0144, -0.0086,  0.0005,  0.0066], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.4101], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8421], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0046, -0.0131, -0.0062,  0.0006,  0.0057], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0046, -0.0131, -0.0062,  0.0006,  0.0057], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0104,  0.0480,  0.0638,  0.0466, -0.0893], grad_fn=<SliceBackward0>)
  [Layer 1] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 1] Output sample values after mixer: tensor([-0.0104,  0.0480,  0.0638,  0.0466, -0.0893], grad_fn=<SliceBackward0>)
  [Layer 1] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 1] Residual connection sample values: tensor([-0.0180, -0.0297, -0.1461,  0.1591, -0.2026], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 2/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0429], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([4.8248], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0314, -0.0408, -0.2346,  0.2676, -0.3328], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.4159, -0.4906,  0.0706,  0.0255, -1.0587], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.4159, -0.4906,  0.0706,  0.0255, -1.0587], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.1298,  0.9405, -0.7928,  3.8683,  0.4516], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.4628, 1.9697, 1.2751, 1.4425, 2.4135], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.7897, -0.8205,  1.0774,  0.1298,  0.7916], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1607, -0.2755, -0.2708, -3.1857, -0.1971], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1309, -0.4301, -0.2813, -2.1320, -0.2102], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0697, -0.1695, -0.1210, -0.2260, -0.0941], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0697, -0.1695, -0.1210, -0.2260, -0.0941], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.2453, -0.0267,  0.0530, -0.2579,  0.3658], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2456, -0.1986,  0.0414, -0.2025, -0.2467], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-19.8515, -18.6852, -13.5640,  -2.4189,  -0.4662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0693, 0.0442, 0.0736, 0.0306, 0.1539], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.2528, 0.4378, 0.3687, 0.9287, 0.9308], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0697, -0.1695, -0.1210, -0.2260, -0.0941], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0012, -0.0001,  0.0003, -0.0012,  0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0007, -0.0003,  0.0001, -0.0027,  0.0022], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0019, -0.0417, -0.0193, -0.0501,  0.0081], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0462, -0.1587, -0.1028, -0.2062, -0.0569], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0462, -0.1587, -0.1028, -0.2062, -0.0569], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0128,  0.0296, -0.0038, -0.0027,  0.0155], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([13.6888], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2703], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0044,  0.0048, -0.0014, -0.0004,  0.0057], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0044,  0.0048, -0.0014, -0.0004,  0.0057], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1946,  0.2735,  0.2113, -0.2579,  0.1440], grad_fn=<SliceBackward0>)
  [Layer 2] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 2] Output sample values after mixer: tensor([ 0.1946,  0.2735,  0.2113, -0.2579,  0.1440], grad_fn=<SliceBackward0>)
  [Layer 2] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 2] Residual connection sample values: tensor([ 0.1766,  0.2439,  0.0651, -0.0987, -0.0586], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 3/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0855], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([3.4206], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2393,  0.2585,  0.0791, -0.1234, -0.0787], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.1527,  0.5855,  1.2579, -0.9563, -1.4145], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.1527,  0.5855,  1.2579, -0.9563, -1.4145], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.9024, -0.4886, -2.4976,  1.3647, -0.5667], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.0302, 0.6363, 1.1280, 2.2869, 0.5894], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1400,  2.6809, -2.0852, -0.9024, -1.1944], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1325,  0.7491,  0.3551, -0.2264, -0.1641], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1310,  0.7298,  0.4787, -0.2388, -0.1804], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0698,  0.4924,  0.2956, -0.1052, -0.0821], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0698,  0.4924,  0.2956, -0.1052, -0.0821], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3155, -0.0788,  0.2648, -0.1048,  0.2126], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.4491,  0.0083, -0.0738,  0.1017,  0.2800], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6506, -3.9939, -6.7806, -0.9419, -6.0308], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1606, 0.0382, 0.0415, 0.0628, 0.0388], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9008, 0.8586, 0.7547, 0.9426, 0.7916], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0698,  0.4924,  0.2956, -0.1052, -0.0821], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0035, -0.0009,  0.0030, -0.0012,  0.0024], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0051, -0.0009,  0.0044, -0.0007,  0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0215,  0.0963,  0.1080,  0.0007,  0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0102,  0.3205,  0.2426, -0.0471, -0.0358], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0102,  0.3205,  0.2426, -0.0471, -0.0358], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0090, 0.1205, 0.2376, 0.0125, 0.0099], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([29.6738], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1836], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0023, 0.0336, 0.0534, 0.0043, 0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0023, 0.0336, 0.0534, 0.0043, 0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0142, -0.0860,  0.0686,  0.0886,  0.1106], grad_fn=<SliceBackward0>)
  [Layer 3] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 3] Output sample values after mixer: tensor([-0.0142, -0.0860,  0.0686,  0.0886,  0.1106], grad_fn=<SliceBackward0>)
  [Layer 3] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 3] Residual connection sample values: tensor([ 0.1623,  0.1579,  0.1337, -0.0101,  0.0520], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 4/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1228], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([2.8535], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2162,  0.1593,  0.1574, -0.0123,  0.0695], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.8587,  0.4519, -1.0289, -0.1929, -0.6151], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.8587,  0.4519, -1.0289, -0.1929, -0.6151], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.6362,  0.2179,  1.2142, -0.2178, -0.9602], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.4909,  3.2310,  3.0540,  0.9915, -0.7699], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0140, 0.0051, 1.1195, 0.6362, 1.6211], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0808,  0.2622, -0.2160, -0.3571,  0.4813], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0070,  0.2270, -0.2642, -0.3729,  0.7743], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0035,  0.1264, -0.1147, -0.1521,  0.5300], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0035,  0.1264, -0.1147, -0.1521,  0.5300], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.5038,  0.2059,  0.8471, -0.0268,  0.3525], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.7366, -0.2744,  0.0708, -0.2783, -0.0704], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.7127,  -1.2862,  -1.4870, -27.0280,  -4.0727],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0717, 0.0592, 0.0398, 0.0087, 0.0177], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8844, 0.9266, 0.9425, 0.7902, 0.9304], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0035,  0.1264, -0.1147, -0.1521,  0.5300], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.2777e-04,  5.2224e-05,  2.1485e-04, -6.8087e-06,  8.9403e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-7.8936e-04, -1.3212e-03, -5.1657e-04, -4.8842e-05, -1.7782e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0050,  0.0108, -0.0078, -0.0039,  0.1132], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0030,  0.0820, -0.0724, -0.0895,  0.4115], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0030,  0.0820, -0.0724, -0.0895,  0.4115], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0007,  0.0226,  0.0196,  0.0078, -0.0888], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([24.6672], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2013], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0003,  0.0061,  0.0081,  0.0027, -0.0185], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0003,  0.0061,  0.0081,  0.0027, -0.0185], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0668, -0.1258,  0.0925,  0.1358,  0.0825], grad_fn=<SliceBackward0>)
  [Layer 4] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 4] Output sample values after mixer: tensor([-0.0668, -0.1258,  0.0925,  0.1358,  0.0825], grad_fn=<SliceBackward0>)
  [Layer 4] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 4] Residual connection sample values: tensor([0.0955, 0.0321, 0.2262, 0.1256, 0.1345], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 5/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1618], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([2.4860], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.1072, 0.0297, 0.2371, 0.1350, 0.1557], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5400,  0.4284, -0.6268, -1.4609, -0.4940], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5400,  0.4284, -0.6268, -1.4609, -0.4940], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0204, -0.1759,  1.5059, -0.3591, -2.4786], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.3746,  2.2178,  1.1407, -1.1430, -0.2757], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2659,  0.2771, -0.4854, -0.0204,  1.1388], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0703,  0.2047, -0.4992,  0.3917, -0.3517], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0188,  0.1673, -0.5687,  0.3656, -0.3576], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0095,  0.0907, -0.2056,  0.2158, -0.1472], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0095,  0.0907, -0.2056,  0.2158, -0.1472], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1911, -0.0854, -0.0580, -0.1352, -0.0829], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0514, -0.0459, -0.2115,  0.0715,  0.0383], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.5763,  -1.0444,  -0.8388,  -5.6765, -20.4018],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0411, 0.1055, 0.1272, 0.0045, 0.0026], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9373, 0.8957, 0.8988, 0.9751, 0.9486], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0095,  0.0907, -0.2056,  0.2158, -0.1472], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-7.4288e-05, -3.3211e-05, -2.2565e-05, -5.2547e-05, -3.2219e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0003, -0.0001,  0.0004,  0.0002, -0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0072,  0.0017, -0.0334, -0.0149, -0.0276], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0021,  0.0504, -0.1439,  0.1011, -0.1067], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0021,  0.0504, -0.1439,  0.1011, -0.1067], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0004,  0.0131,  0.0314, -0.0278,  0.0200], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([9.5156], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3242], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0002,  0.0068,  0.0156, -0.0144,  0.0092], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0002,  0.0068,  0.0156, -0.0144,  0.0092], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0526, -0.2220,  0.1698,  0.0437,  0.0291], grad_fn=<SliceBackward0>)
  [Layer 5] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 5] Output sample values after mixer: tensor([-0.0526, -0.2220,  0.1698,  0.0437,  0.0291], grad_fn=<SliceBackward0>)
  [Layer 5] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 5] Residual connection sample values: tensor([ 0.0429, -0.1900,  0.3961,  0.1694,  0.1636], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 6/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2656], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.9403], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0367, -0.1257,  0.3006,  0.1329,  0.1419], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.2573,  0.2594, -0.2838, -0.3933, -1.2932], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.2573,  0.2594, -0.2838, -0.3933, -1.2932], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4546,  0.7236, -1.0693,  0.6267,  0.3256], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.8843,  2.6404, -0.1506,  0.0470,  1.7845], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.3284, -0.3809, -0.9961,  0.4546, -0.8687], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0282, -0.0195, -1.7747, -0.1125, -0.6540], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0061, -0.0918, -1.8369, -0.0504, -0.5843], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0031, -0.0438, -0.2524, -0.0246, -0.2092], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0031, -0.0438, -0.2524, -0.0246, -0.2092], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.6518, -0.0472, -0.1911,  0.1491,  0.1579], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2784,  0.0315, -0.2684, -0.1273,  0.1444], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9866, -8.7747, -3.3046, -2.9913, -3.3435], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1570, 0.1772, 0.0726, 0.0690, 0.1651], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8565, 0.2113, 0.7867, 0.8134, 0.5758], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0031, -0.0438, -0.2524, -0.0246, -0.2092], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.1538e-04, -2.2860e-05, -9.2460e-05,  7.2141e-05,  7.6405e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0191, -0.0006, -0.0110, -0.0012,  0.0041], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.1007, -0.1444, -0.1565,  0.0022, -0.1913], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1013, -0.1539, -0.2112, -0.0032, -0.2366], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1013, -0.1539, -0.2112, -0.0032, -0.2366], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0992, -0.0225,  0.0257,  0.0005,  0.0659], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([8.7923], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3372], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0643, -0.0068,  0.0074,  0.0002,  0.0174], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0643, -0.0068,  0.0074,  0.0002,  0.0174], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.4089,  0.2451, -0.0166, -0.0976,  0.2693], grad_fn=<SliceBackward0>)
  [Layer 6] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 6] Output sample values after mixer: tensor([ 0.4089,  0.2451, -0.0166, -0.0976,  0.2693], grad_fn=<SliceBackward0>)
  [Layer 6] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 6] Residual connection sample values: tensor([0.4518, 0.0551, 0.3795, 0.0718, 0.4329], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 7/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.5160], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.3922], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.2420, 0.0245, 0.1884, 0.0352, 0.2326], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.7849, -0.3921, -0.3646, -0.5576, -0.2885], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.7849, -0.3921, -0.3646, -0.5576, -0.2885], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.9762,  0.2975, -0.4970, -0.2489,  0.3668], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.9125, 1.1361, 2.5379, 2.2193, 1.8858], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-2.4927, -1.8322, -2.4475, -1.9762, -0.0286], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0365,  0.4666,  0.4114, -0.0208, -0.3955], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1047,  0.4912,  0.4106, -0.0143, -0.3991], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0496,  0.3048,  0.2469, -0.0071, -0.1602], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0496,  0.3048,  0.2469, -0.0071, -0.1602], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0118, -0.0592,  0.1458,  0.0741,  0.0550], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.2594,  0.0021,  0.0138,  0.0133, -0.0120], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2959, -1.1836, -0.3113, -0.1314, -1.5015], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1127, 0.0186, 0.0315, 0.1303, 0.0071], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9672, 0.9783, 0.9902, 0.9830, 0.9895], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0496,  0.3048,  0.2469, -0.0071, -0.1602], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-6.5739e-05,  3.3072e-04, -8.1439e-04, -4.1421e-04, -3.0753e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0006,  0.0007, -0.0013,  0.0003, -0.0033], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0011,  0.0028,  0.0038, -0.0007, -0.0017], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0013,  0.0035,  0.0044, -0.0007, -0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0013,  0.0035,  0.0044, -0.0007, -0.0020], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0007, -0.0005, -0.0007,  0.0001,  0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0408], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.9515], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0042, -0.0019, -0.0053,  0.0008,  0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0042, -0.0019, -0.0053,  0.0008,  0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1602,  0.1632,  0.0106,  0.1251, -0.1238], grad_fn=<SliceBackward0>)
  [Layer 7] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 7] Output sample values after mixer: tensor([-0.1602,  0.1632,  0.0106,  0.1251, -0.1238], grad_fn=<SliceBackward0>)
  [Layer 7] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 7] Residual connection sample values: tensor([0.2916, 0.2183, 0.3900, 0.1969, 0.3091], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 8/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.6518], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.2386], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.1862, 0.1091, 0.2321, 0.1166, 0.1965], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.1307, -1.3056, -0.4381, -0.0115, -1.0523], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.1307, -1.3056, -0.4381, -0.0115, -1.0523], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.8001, -0.8371,  0.5681, -0.8794,  0.3427], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0905, 0.7624, 1.5158, 1.3794, 0.8829], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.1772, -0.3310,  0.3357,  0.8001,  0.0458], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0499,  0.1617, -0.0745, -0.3573,  0.0972], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.5128,  0.1306, -0.3892, -0.4089,  0.0411], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.3208,  0.0696, -0.1572, -0.1632,  0.0209], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.3208,  0.0696, -0.1572, -0.1632,  0.0209], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1207,  0.2658, -0.1378, -0.2334,  0.0604], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0407, -0.0647,  0.1504, -0.0399, -0.1705], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.6543, -0.9827, -0.5550, -3.9397, -1.8081], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0297, 0.1129, 0.0497, 0.0924, 0.0232], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8973, 0.8950, 0.9728, 0.6950, 0.9590], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.3208,  0.0696, -0.1572, -0.1632,  0.0209], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0011,  0.0025, -0.0013, -0.0022,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0008,  0.0026, -0.0007, -0.0027,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0402, -0.0203, -0.0192, -0.0139, -0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.3102,  0.0383, -0.1515, -0.1513,  0.0118], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.3102,  0.0383, -0.1515, -0.1513,  0.0118], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0856, -0.0107,  0.0260,  0.0009, -0.0032], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([2.7140], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6070], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0502, -0.0080,  0.0132,  0.0007, -0.0031], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0502, -0.0080,  0.0132,  0.0007, -0.0031], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0894,  0.2403, -0.0936,  0.0891,  0.1069], grad_fn=<SliceBackward0>)
  [Layer 8] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 8] Output sample values after mixer: tensor([ 0.0894,  0.2403, -0.0936,  0.0891,  0.1069], grad_fn=<SliceBackward0>)
  [Layer 8] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 8] Residual connection sample values: tensor([0.3810, 0.4587, 0.2964, 0.2860, 0.4160], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 9/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.8546], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.0817], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.1958, 0.1926, 0.1400, 0.1298, 0.2110], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.4851, -0.9330,  0.0533, -1.1141, -1.0579], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.4851, -0.9330,  0.0533, -1.1141, -1.0579], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3292,  0.4805, -1.1206, -0.2791, -0.2248], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.8172,  1.1561,  4.1764, -0.1003,  1.2065], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5863,  0.0120, -0.0206,  0.3292, -0.2264], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0163,  0.0663, -0.0058, -0.0893, -0.2019], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0090,  0.0410, -0.0924, -0.1632, -0.1768], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0045,  0.0209, -0.0441, -0.0750, -0.0806], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0045,  0.0209, -0.0441, -0.0750, -0.0806], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.2357, -0.1410,  0.2710,  0.3270, -0.1944], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2785, -0.2232, -0.2557,  0.3444,  0.0374], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-5.2345, -1.2161, -1.4888, -0.9523, -3.9667], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0606, 0.1145, 0.2728, 0.1159, 0.0516], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7281, 0.8700, 0.6662, 0.8955, 0.8149], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0045,  0.0209, -0.0441, -0.0750, -0.0806], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-6.3970e-05,  3.8262e-05, -7.3556e-05, -8.8757e-05,  5.2773e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0001, -0.0031,  0.0049,  0.0055, -0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0242,  0.0072, -0.0120,  0.0273,  0.0409], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0181,  0.0355, -0.0717, -0.0744, -0.0684], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0181,  0.0355, -0.0717, -0.0744, -0.0684], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0050, -0.0094, -0.0020,  0.0205,  0.0186], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([3.6335], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5246], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0027, -0.0076, -0.0011,  0.0087,  0.0116], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0027, -0.0076, -0.0011,  0.0087,  0.0116], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0563, -0.0797, -0.1350,  0.0838,  0.3179], grad_fn=<SliceBackward0>)
  [Layer 9] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 9] Output sample values after mixer: tensor([-0.0563, -0.0797, -0.1350,  0.0838,  0.3179], grad_fn=<SliceBackward0>)
  [Layer 9] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 9] Residual connection sample values: tensor([0.3247, 0.3790, 0.1614, 0.3698, 0.7339], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 10/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.2909], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8801], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.1169, 0.1140, 0.0524, 0.1190, 0.2581], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3331,  0.7630, -0.0479, -0.9619, -1.0332], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3331,  0.7630, -0.0479, -0.9619, -1.0332], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5293,  1.1742, -0.7287,  0.1644, -0.4887], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.2597, 0.7833, 0.1654, 1.2764, 1.7875], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4216,  0.1810,  0.3957, -0.5293,  0.9514], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0916, -0.4114,  0.0125, -0.0495, -0.0206], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1300, -0.4985, -0.0913, -0.1353, -0.0801], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0608, -0.1884, -0.0436, -0.0631, -0.0385], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0608, -0.1884, -0.0436, -0.0631, -0.0385], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0590,  0.4834,  0.1306, -0.0606, -0.1332], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2714, -0.0419, -0.1571,  0.0104, -0.1253], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.7155, -1.4068, -0.3534, -2.0102, -0.4653], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0015, 0.0078, 0.1107, 0.0065, 0.0444], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9943, 0.9891, 0.9616, 0.9870, 0.9795], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0608, -0.1884, -0.0436, -0.0631, -0.0385], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.5439e-06, -4.5445e-05, -1.2283e-05,  5.7002e-06,  1.2522e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([4.4392e-06, 6.2793e-05, 2.9498e-05, 1.8110e-05, 2.5734e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 3.4396e-05, -2.1304e-03,  3.7492e-04, -4.4507e-04,  1.8865e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0133, -0.0435, -0.0092, -0.0143, -0.0066], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0133, -0.0435, -0.0092, -0.0143, -0.0066], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0019, -0.0226,  0.0002,  0.0038,  0.0018], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0203], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.0108], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0195, -0.1160,  0.0018,  0.0356,  0.0154], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0195, -0.1160,  0.0018,  0.0356,  0.0154], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0940, -0.4770,  0.0439, -0.0819,  0.2226], grad_fn=<SliceBackward0>)
  [Layer 10] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 10] Output sample values after mixer: tensor([-0.0940, -0.4770,  0.0439, -0.0819,  0.2226], grad_fn=<SliceBackward0>)
  [Layer 10] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 10] Residual connection sample values: tensor([ 0.2307, -0.0980,  0.2053,  0.2879,  0.9565], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 11/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.1753], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9224], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0978, -0.0338,  0.0778,  0.1064,  0.3877], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.5416, -2.8420, -0.8673, -0.4674,  0.4148], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.5416, -2.8420, -0.8673, -0.4674,  0.4148], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0825,  0.0161, -0.7532,  3.1093,  0.6352], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.8053, 3.4463, 2.3667, 2.0587, 2.8337], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5201, -0.3343,  1.5171, -0.0825,  1.2710], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0785,  0.0069,  0.1803, -0.3327,  0.1447], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0927, -0.3508,  0.2769, -0.3206,  0.1679], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0442, -0.1449,  0.1575, -0.1348,  0.0910], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0442, -0.1449,  0.1575, -0.1348,  0.0910], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2704,  0.0916, -0.2686, -0.0816,  0.1319], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0623, -0.1819, -0.2778, -0.0442, -0.0331], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.3116, -0.0902, -1.5786, -0.2096, -0.6694], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2573, 0.6946, 0.8579, 0.2944, 0.1199], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9229, 0.9393, 0.2581, 0.9402, 0.9229], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0442, -0.1449,  0.1575, -0.1348,  0.0910], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0031, -0.0010,  0.0031,  0.0009, -0.0015], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0449, -0.0594,  0.0521,  0.0139, -0.0537], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.1494, -0.2680,  0.2903, -0.0741,  0.0100], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1656, -0.3212,  0.3481, -0.1235,  0.0434], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1656, -0.3212,  0.3481, -0.1235,  0.0434], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0567,  0.0503, -0.0893,  0.0222,  0.0108], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([3.9519], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5030], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0350,  0.0305, -0.0384,  0.0311,  0.0050], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0350,  0.0305, -0.0384,  0.0311,  0.0050], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0104, -0.0105, -0.2974, -0.4904,  0.0273], grad_fn=<SliceBackward0>)
  [Layer 11] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 11] Output sample values after mixer: tensor([-0.0104, -0.0105, -0.2974, -0.4904,  0.0273], grad_fn=<SliceBackward0>)
  [Layer 11] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 11] Residual connection sample values: tensor([ 0.2203, -0.1084, -0.0921, -0.2025,  0.9838], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 12/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.7828], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7489], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0682, -0.0278, -0.0249, -0.0544,  0.2916], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3137, -0.0937, -2.0352,  0.6584, -1.2826], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3137, -0.0937, -2.0352,  0.6584, -1.2826], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.3650,  0.5146, -2.2579,  0.0399,  1.0909], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3871, 1.1416, 1.6603, 0.9572, 1.5184], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.6992,  0.2006, -0.1674, -0.3650,  0.1605], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0564, -0.1586,  0.3848,  0.1206,  0.2045], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0994, -0.1457,  0.3499,  0.0909,  0.2171], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0472, -0.0675,  0.2053,  0.0475,  0.1203], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0472, -0.0675,  0.2053,  0.0475,  0.1203], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0035, -0.1971,  0.6496, -0.0135,  0.1557], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2670, -0.0579,  0.0119, -0.1279, -0.1505], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2412, -0.7694, -1.9975, -1.2368, -1.0181], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1597, 0.1977, 0.1344, 0.2258, 0.3140], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8202, 0.8589, 0.7646, 0.7563, 0.7264], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0472, -0.0675,  0.2053,  0.0475,  0.1203], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.6527e-05,  1.4868e-03, -4.8998e-03,  1.0171e-04, -1.1746e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0053,  0.0057, -0.0199,  0.0024, -0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0151, -0.0524,  0.0764, -0.0392, -0.0532], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0491, -0.1011,  0.2241, -0.0050,  0.0334], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0491, -0.1011,  0.2241, -0.0050,  0.0334], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0089,  0.0045, -0.0527, -0.0022, -0.0093], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.5635], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.3321], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0213,  0.0071, -0.0627, -0.0029, -0.0182], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0213,  0.0071, -0.0627, -0.0029, -0.0182], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0067, -0.4922, -0.1098,  0.7509,  0.2843], grad_fn=<SliceBackward0>)
  [Layer 12] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 12] Output sample values after mixer: tensor([ 0.0067, -0.4922, -0.1098,  0.7509,  0.2843], grad_fn=<SliceBackward0>)
  [Layer 12] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 12] Residual connection sample values: tensor([ 0.2270, -0.6007, -0.2018,  0.5484,  1.2681], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 13/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.7284], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6054], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0556, -0.1273, -0.0456,  0.1166,  0.3153], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-2.9578,  0.6112,  1.0226,  1.9444,  0.1468], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-2.9578,  0.6112,  1.0226,  1.9444,  0.1468], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.2960, -0.6659, -0.9180,  0.7681, -0.0292], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.4137, 1.9257, 0.9848, 0.5628, 2.5109], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-2.3017,  0.5842,  0.8053, -0.2960, -1.4893], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1448, -0.1260,  0.0171, -0.0956,  0.0404], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1198, -0.2359, -0.0034, -0.0964,  0.0165], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0563, -0.1041, -0.0017, -0.0459,  0.0083], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0563, -0.1041, -0.0017, -0.0459,  0.0083], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0895,  0.0450,  0.2402,  0.5401,  0.0136], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0159,  0.4740, -0.0939,  0.4563, -0.0917], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3103, -1.7871, -0.8606, -1.8811, -0.5252], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1024, 0.0651, 0.0995, 0.0806, 0.1977], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8744, 0.8902, 0.9179, 0.8594, 0.9014], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0563, -0.1041, -0.0017, -0.0459,  0.0083], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.1657e-04, -2.5976e-04, -1.3863e-03, -3.1166e-03, -7.8558e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0024, -0.0048, -0.0026, -0.0358,  0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.1096,  0.0940, -0.0195, -0.0138,  0.0770], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1120,  0.0895, -0.0196, -0.0157,  0.0774], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1120,  0.0895, -0.0196, -0.0157,  0.0774], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0164,  0.0354, -0.0147, -0.0268,  0.0061], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2276], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([2.0963], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0465,  0.0333, -0.0567, -0.1173,  0.0102], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0465,  0.0333, -0.0567, -0.1173,  0.0102], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3431, -0.2592,  0.0652,  0.0338, -0.3125], grad_fn=<SliceBackward0>)
  [Layer 13] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 13] Output sample values after mixer: tensor([ 0.3431, -0.2592,  0.0652,  0.0338, -0.3125], grad_fn=<SliceBackward0>)
  [Layer 13] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 13] Residual connection sample values: tensor([ 0.5701, -0.8598, -0.1366,  0.5822,  0.9556], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 14/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3.7184], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5186], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1032, -0.1367, -0.0229,  0.0918,  0.1689], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 2.1740,  0.0420, -0.7093, -0.1339,  0.4063], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 2.1740,  0.0420, -0.7093, -0.1339,  0.4063], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.7872, -0.5360,  1.0139, -0.5387,  0.8048], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.1327,  1.3445,  1.0031,  1.5865,  1.0119], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0388, -0.5885, -0.0466, -0.7872,  0.1390], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1843, -0.0331, -0.2307, -0.1302, -0.1182], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2238, -0.0744, -0.2916, -0.1930, -0.0816], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0994, -0.0358, -0.1247, -0.0872, -0.0391], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0994, -0.0358, -0.1247, -0.0872, -0.0391], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0752,  0.0068, -0.0254, -0.0708,  0.0250], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1021, -0.0765, -0.1847, -0.1449, -0.1578], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.3184, -0.7621, -2.6670, -5.1836, -2.8487], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0347, 0.0454, 0.2078, 0.0783, 0.0378], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8608, 0.9660, 0.5746, 0.6662, 0.8980], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0994, -0.0358, -0.1247, -0.0872, -0.0391], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.5948e-04, -2.3321e-05,  8.7547e-05,  2.4428e-04, -8.6172e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0007, -0.0002,  0.0007,  0.0014,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0079,  0.0044, -0.0103, -0.0038, -0.0041], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0481, -0.0100, -0.0607, -0.0391, -0.0199], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0481, -0.0100, -0.0607, -0.0391, -0.0199], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0939, -0.0002,  0.0142,  0.0024, -0.0048], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0259], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.2084], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.6353, -0.0008,  0.0812,  0.0196, -0.0451], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.6353, -0.0008,  0.0812,  0.0196, -0.0451], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1577,  0.1259,  0.7904,  0.3113, -0.0822], grad_fn=<SliceBackward0>)
  [Layer 14] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 14] Output sample values after mixer: tensor([ 0.1577,  0.1259,  0.7904,  0.3113, -0.0822], grad_fn=<SliceBackward0>)
  [Layer 14] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 14] Residual connection sample values: tensor([ 0.7278, -0.7339,  0.6538,  0.8935,  0.8735], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 15/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4.9417], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4498], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1147, -0.0983,  0.0947,  0.1212,  0.1319], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4534,  1.0347, -0.3703, -0.9944, -0.4447], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4534,  1.0347, -0.3703, -0.9944, -0.4447], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([0.1967, 0.9233, 0.3900, 0.8499, 0.1675], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.0906,  0.4709,  0.3899,  3.2253, -0.1344], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5150, -0.6377, -0.4717,  0.1967, -0.0566], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1064, -0.2020, -0.0134, -0.2570, -0.0148], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1439, -0.2088, -0.0382, -0.2748, -0.0402], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0668, -0.0936, -0.0187, -0.1186, -0.0197], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0668, -0.0936, -0.0187, -0.1186, -0.0197], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0669, -0.0245,  0.0251,  0.0465,  0.0496], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0298, -0.0210,  0.0214,  0.0520,  0.0462], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2782, -0.6808, -2.7209, -0.1126, -3.8484], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0021, 0.0253, 0.0223, 0.1349, 0.0203], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9994, 0.9829, 0.9412, 0.9849, 0.9249], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0668, -0.0936, -0.0187, -0.1186, -0.0197], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-9.4708e-06,  3.4701e-06, -3.5558e-06, -6.5847e-06, -7.0172e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-7.4663e-05, -9.3754e-06, -2.3469e-05, -9.3374e-06,  1.8920e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-3.1755e-05, -6.3178e-06, -4.4493e-06, -3.4796e-05, -6.6084e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0114, -0.0160, -0.0032, -0.0203, -0.0034], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0114, -0.0160, -0.0032, -0.0203, -0.0034], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0020, -0.0122,  0.0005,  0.0054,  0.0006], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0025], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([19.8147], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0412, -0.3263,  0.0100,  0.1307,  0.0103], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0412, -0.3263,  0.0100,  0.1307,  0.0103], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0405, -0.0594,  0.1942,  0.0592,  0.7606], grad_fn=<SliceBackward0>)
  [Layer 15] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 15] Output sample values after mixer: tensor([-0.0405, -0.0594,  0.1942,  0.0592,  0.7606], grad_fn=<SliceBackward0>)
  [Layer 15] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 15] Residual connection sample values: tensor([ 0.6873, -0.7933,  0.8479,  0.9527,  1.6341], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 16/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([6.3152], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3979], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1067, -0.1030,  0.1206,  0.1241,  0.2437], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-2.0651, -0.8373, -0.2702,  0.0617, -0.3969], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-2.0651, -0.8373, -0.2702,  0.0617, -0.3969], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.8946,  0.5628,  0.4477,  0.9104, -0.8352], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9793, 2.2037, 0.8548, 1.1548, 1.0029], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2864,  0.0093,  0.9899,  0.8946, -0.5774], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2748, -0.0275,  0.0955,  0.0799, -0.2589], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2387, -0.0687,  0.0823, -0.0125, -0.3010], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1335, -0.0331,  0.0429, -0.0062, -0.1280], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1335, -0.0331,  0.0429, -0.0062, -0.1280], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0030, -0.0636, -0.0218, -0.1095,  0.2327], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2780,  0.2120, -0.0524,  0.9371, -0.1266], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6906, -0.1348, -1.3129, -3.7740, -1.2635], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1454, 0.4922, 0.1111, 0.2166, 0.0624], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6762, 0.9358, 0.8643, 0.4416, 0.9242], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1335, -0.0331,  0.0429, -0.0062, -0.1280], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-5.8188e-05, -1.2358e-03, -4.2420e-04, -2.1267e-03,  4.5173e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0008,  0.0017,  0.0009, -0.0015,  0.0096], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0318, -0.0674, -0.0010, -0.0473, -0.0450], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1177, -0.0887,  0.0266, -0.0513, -0.1274], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1177, -0.0887,  0.0266, -0.0513, -0.1274], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0273,  0.0224, -0.0031, -0.0016,  0.0203], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1347], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([2.7246], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0958,  0.0617, -0.0102, -0.0048,  0.0613], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0958,  0.0617, -0.0102, -0.0048,  0.0613], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.0269, -0.1055,  1.4018, -0.1887,  0.0405], grad_fn=<SliceBackward0>)
  [Layer 16] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 16] Output sample values after mixer: tensor([ 1.0269, -0.1055,  1.4018, -0.1887,  0.0405], grad_fn=<SliceBackward0>)
  [Layer 16] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 16] Residual connection sample values: tensor([ 1.7142, -0.8988,  2.2497,  0.7639,  1.6746], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 17/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([8.4150], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3447], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2285, -0.1007,  0.2672,  0.0839,  0.2148], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1248, -0.7926, -0.4226,  0.1012, -0.7368], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1248, -0.7926, -0.4226,  0.1012, -0.7368], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.2048, -0.3928,  0.6958,  0.4799, -0.4916], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.5075, -0.4736,  0.4822,  2.1010,  1.1198], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.1687, -0.6557, -0.9301, -1.2048, -0.3761], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2400,  0.0677, -0.1823, -0.0279,  0.0837], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2718,  0.0415, -0.1967, -0.0333,  0.0963], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1175,  0.0212, -0.0887, -0.0164,  0.0505], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1175,  0.0212, -0.0887, -0.0164,  0.0505], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0134, -0.0995, -0.0453,  0.0537, -0.0145], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1994, -0.0461, -0.1289,  0.1320, -0.2091], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.1571, -11.4668, -14.2150,  -0.1286, -14.2428],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0009, 0.0064, 0.0348, 0.1663, 0.0215], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9990, 0.9292, 0.6101, 0.9788, 0.7363], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1175,  0.0212, -0.0887, -0.0164,  0.0505], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.3394e-06,  9.9703e-06,  4.5426e-06, -5.3817e-06,  1.4536e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-8.0274e-05,  8.9943e-05,  1.0895e-04, -2.5217e-04,  1.9265e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-4.0910e-04, -1.4298e-05, -4.6122e-04,  7.7336e-05,  1.5443e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0762,  0.0136, -0.0577, -0.0105,  0.0327], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0762,  0.0136, -0.0577, -0.0105,  0.0327], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0045, -0.0034,  0.0096, -0.0006, -0.0078], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0317], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.6156], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0389, -0.0359,  0.0780, -0.0055, -0.0771], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0389, -0.0359,  0.0780, -0.0055, -0.0771], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2335, -0.2130, -1.5879,  1.6517, -0.3176], grad_fn=<SliceBackward0>)
  [Layer 17] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 17] Output sample values after mixer: tensor([-0.2335, -0.2130, -1.5879,  1.6517, -0.3176], grad_fn=<SliceBackward0>)
  [Layer 17] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 17] Residual connection sample values: tensor([ 1.4807, -1.1118,  0.6618,  2.4157,  1.3570], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 18/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([10.4645], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3091], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1585, -0.1006,  0.0633,  0.2170,  0.1396], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.5155, -1.5201, -0.2060, -0.4315,  0.1341], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.5155, -1.5201, -0.2060, -0.4315,  0.1341], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0838, -0.1164,  0.0709, -0.6703, -0.8706], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.6611, 0.5192, 1.0993, 0.6867, 1.0505], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5837, -0.3766, -0.5444,  0.0838,  0.0168], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0351,  0.3476,  0.0379, -0.1832, -0.2081], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0451,  0.0822,  0.3176, -0.1970, -0.2502], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0220,  0.0428,  0.1838, -0.0888, -0.1095], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0220,  0.0428,  0.1838, -0.0888, -0.1095], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0946,  0.0821, -0.0439,  0.2478,  0.3130], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2222,  0.0252, -0.0626,  0.0926, -0.0212], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3011, -1.4686, -1.2083, -1.2129, -2.5875], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1777, 0.0901, 0.2060, 0.1423, 0.1179], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7936, 0.8761, 0.7796, 0.8415, 0.7371], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0220,  0.0428,  0.1838, -0.0888, -0.1095], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0004, -0.0003,  0.0002, -0.0010, -0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0018,  0.0031,  0.0051, -0.0041, -0.0057], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0547, -0.0970,  0.1708, -0.0701, -0.0372], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0589, -0.0887,  0.2063, -0.0873, -0.0583], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0589, -0.0887,  0.2063, -0.0873, -0.0583], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0190,  0.0242, -0.0191,  0.0148, -0.0042], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0301], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.7673], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1433,  0.0749, -0.1074,  0.1074, -0.0476], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1433,  0.0749, -0.1074,  0.1074, -0.0476], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3809,  0.0726, -0.1076, -0.6776,  1.1054], grad_fn=<SliceBackward0>)
  [Layer 18] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 18] Output sample values after mixer: tensor([ 0.3809,  0.0726, -0.1076, -0.6776,  1.1054], grad_fn=<SliceBackward0>)
  [Layer 18] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 18] Residual connection sample values: tensor([ 1.8616, -1.0391,  0.5542,  1.7381,  2.4624], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 19/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([15.1523], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2569], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1631, -0.0786,  0.0453,  0.1309,  0.2153], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5815, -0.6932, -0.1712, -0.7718, -0.8826], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5815, -0.6932, -0.1712, -0.7718, -0.8826], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.0871, -0.6539,  0.2289,  0.2341, -0.9000], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.0580, 0.5927, 0.6857, 1.2633, 0.3207], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1395,  0.7602, -1.4180, -1.0871, -0.2058], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3761, -0.1430,  0.0676,  0.1209,  0.2031], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.4118, -0.1674,  0.0626,  0.0783,  0.1701], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1641, -0.0767,  0.0323,  0.0407,  0.0923], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1641, -0.0767,  0.0323,  0.0407,  0.0923], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1193,  1.7148, -0.1250, -0.0849,  0.0382], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1774, -0.0287,  0.1013, -0.1209, -0.0444], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9436, -1.8179, -2.0862, -1.0006, -0.9650], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0576, 0.0515, 0.0454, 0.1706, 0.0980], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8940, 0.9106, 0.9097, 0.8431, 0.9097], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1641, -0.0767,  0.0323,  0.0407,  0.0923], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0011, -0.0162,  0.0012,  0.0008, -0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.2896e-03, -1.1478e-02, -2.6065e-04, -7.5748e-04,  8.2341e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0096, -0.0123, -0.0043,  0.0056,  0.0096], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0280, -0.0210, -0.0007,  0.0102,  0.0200], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0280, -0.0210, -0.0007,  0.0102,  0.0200], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 5.8429e-03,  4.8439e-03,  5.2603e-05, -2.4873e-03, -5.1538e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0020], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([22.1264], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1563,  0.1362,  0.0019, -0.0656, -0.1934], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1563,  0.1362,  0.0019, -0.0656, -0.1934], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.4070,  0.3898, -2.7554, -0.7858, -1.1184], grad_fn=<SliceBackward0>)
  [Layer 19] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 19] Output sample values after mixer: tensor([ 0.4070,  0.3898, -2.7554, -0.7858, -1.1184], grad_fn=<SliceBackward0>)
  [Layer 19] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 19] Residual connection sample values: tensor([ 2.2686, -0.6494, -2.2012,  0.9523,  1.3440], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 20/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([18.0872], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2351], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2062, -0.0506, -0.1836,  0.0735,  0.1184], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0790, -1.2033, -0.7448, -0.0304,  1.4470], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0790, -1.2033, -0.7448, -0.0304,  1.4470], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.9065,  0.8972, -0.2458,  0.7132,  1.9453], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.8464, 1.4424, 2.1554, 0.3888, 0.5879], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.2217, -0.1798, -0.4117, -0.9065,  0.2840], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0954,  0.0867, -0.2775, -0.1446,  0.4124], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0570,  0.0952, -0.2110, -0.1634,  0.3850], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0293,  0.0499, -0.0944, -0.0750,  0.2291], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0293,  0.0499, -0.0944, -0.0750,  0.2291], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1540,  0.0269,  0.0046, -0.1449,  0.2161], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0277, -0.1545, -0.1648,  0.1536,  0.6553], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.6216, -5.0389, -1.2056, -1.6435, -1.3345], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0669, 0.0472, 0.0731, 0.0672, 0.0537], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8972, 0.7884, 0.9156, 0.8954, 0.9308], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0293,  0.0499, -0.0944, -0.0750,  0.2291], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.0173e-04,  5.2749e-05,  9.0525e-06, -2.8380e-04,  4.2322e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0037, -0.0020,  0.0036,  0.0034,  0.0024], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0217,  0.0246,  0.0010, -0.0009,  0.0239], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0220,  0.0250,  0.0003, -0.0015,  0.0258], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0220,  0.0250,  0.0003, -0.0015,  0.0258], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-8.3300e-04, -6.9528e-03, -6.8500e-05,  2.2113e-05,  3.0181e-02],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0068], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.0847], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-1.3399e-02, -1.1980e-01, -1.5845e-03,  3.8702e-04,  4.7193e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-1.3399e-02, -1.1980e-01, -1.5845e-03,  3.8702e-04,  4.7193e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2904, -2.0551, -0.4904, -1.2251,  2.0094], grad_fn=<SliceBackward0>)
  [Layer 20] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 20] Output sample values after mixer: tensor([ 0.2904, -2.0551, -0.4904, -1.2251,  2.0094], grad_fn=<SliceBackward0>)
  [Layer 20] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 20] Residual connection sample values: tensor([ 2.5590, -2.7044, -2.6915, -0.2729,  3.3534], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 21/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([23.9523], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2043], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1533, -0.1471, -0.1388, -0.0136,  0.1879], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6944, -0.8687, -0.4091, -0.4669,  0.0652], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6944, -0.8687, -0.4091, -0.4669,  0.0652], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.6582, -0.2593, -0.1442, -0.4624,  0.3243], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.1233, 1.4622, 0.5887, 0.8258, 0.2672], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.4314, -0.5403,  0.1052,  0.6582,  0.1311], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1038, -0.0472,  0.0265,  0.1140, -0.0454], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1351, -0.0773,  0.0413,  0.1089, -0.0176], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0630, -0.0372,  0.0211,  0.0574, -0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0630, -0.0372,  0.0211,  0.0574, -0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0992, -0.0481, -0.0362,  0.0515,  0.1192], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0341, -0.0513, -0.0240,  0.0249,  0.0261], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.2092, -0.0434, -3.8147, -6.6624, -0.0228], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0657, 0.0182, 0.0536, 0.0543, 0.0102], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8098, 0.9992, 0.8151, 0.6962, 0.9998], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0630, -0.0372,  0.0211,  0.0574, -0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0004,  0.0002,  0.0001, -0.0002, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-4.3551e-04, -4.6399e-06,  3.0409e-04, -2.8197e-04, -4.1767e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0008, -0.0003,  0.0011,  0.0020,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0119, -0.0068,  0.0048,  0.0121, -0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0119, -0.0068,  0.0048,  0.0121, -0.0013], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 2.7440e-03,  1.7524e-03, -7.8866e-04, -2.1682e-03, -4.3496e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([74.7924], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.2599,  0.1524, -0.0912, -0.2114, -0.0038], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.2599,  0.1524, -0.0912, -0.2114, -0.0038], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.0381,  0.4647,  0.7531,  0.2387,  1.4501], grad_fn=<SliceBackward0>)
  [Layer 21] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 21] Output sample values after mixer: tensor([-1.0381,  0.4647,  0.7531,  0.2387,  1.4501], grad_fn=<SliceBackward0>)
  [Layer 21] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 21] Residual connection sample values: tensor([ 1.5210, -2.2397, -1.9384, -0.0342,  4.8035], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 22/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([30.1276], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1822], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1278, -0.1585, -0.1454, -0.0024,  0.3784], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2079, -0.2940,  0.0081, -0.4853, -0.9933], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2079, -0.2940,  0.0081, -0.4853, -0.9933], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6229, -0.2144,  0.1129, -0.5647, -0.0943], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4964, 2.0197, 1.3194, 0.5108, 2.4881], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0386, -0.7527, -0.0208, -0.6229,  0.9738], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0273, -0.0217,  0.0241,  0.1383, -0.1163], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0204, -0.1004,  0.3434,  0.0973, -0.1820], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0101, -0.0477,  0.2009,  0.0510, -0.0827], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0101, -0.0477,  0.2009,  0.0510, -0.0827], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0219,  0.0821, -0.0612, -0.2324,  0.0503], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0851,  0.0765, -0.0853, -0.0054,  0.0664], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.1489, -3.5006, -2.8321, -5.5396, -1.7186], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0059, 0.2713, 0.2156, 0.0755, 0.0339], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9757, 0.3869, 0.5431, 0.6583, 0.9434], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0101, -0.0477,  0.2009,  0.0510, -0.0827], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.3106e-06, -4.9076e-06,  3.6581e-06,  1.3898e-05, -3.0065e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 7.7173e-05, -4.7783e-06, -2.3189e-05, -1.4257e-04,  7.3124e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0019,  0.0010,  0.0024,  0.0006, -0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0043, -0.0106,  0.0511,  0.0130, -0.0208], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0043, -0.0106,  0.0511,  0.0130, -0.0208], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0005,  0.0013,  0.0002, -0.0024,  0.0056], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0017], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([23.8388], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0040,  0.0297,  0.0026, -0.0754,  0.1150], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0040,  0.0297,  0.0026, -0.0754,  0.1150], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1939, -1.0200, -0.9603,  1.2445,  0.7980], grad_fn=<SliceBackward0>)
  [Layer 22] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 22] Output sample values after mixer: tensor([ 0.1939, -1.0200, -0.9603,  1.2445,  0.7980], grad_fn=<SliceBackward0>)
  [Layer 22] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 22] Residual connection sample values: tensor([ 1.7149, -3.2597, -2.8987,  1.2104,  5.6015], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 23/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([39.7286], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1587], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0880, -0.1439, -0.1362,  0.0537,  0.2786], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0297, -0.5099, -0.7141,  0.1775, -0.2217], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0297, -0.5099, -0.7141,  0.1775, -0.2217], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.7503,  0.2686,  0.6991, -0.6353, -0.1870], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.8291, 0.2589, 0.9525, 1.7306, 1.1404], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.2822, -0.3046, -1.1897, -0.7503,  0.2310], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2329, -0.2939,  0.2674, -0.1133,  0.0574], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2553, -0.3270,  0.2561, -0.1155,  0.0080], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1114, -0.1370,  0.1443, -0.0544,  0.0040], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1114, -0.1370,  0.1443, -0.0544,  0.0040], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0004, -0.0139,  0.1564,  0.0181, -0.0433], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0388, -0.0385,  0.1523, -0.0673, -0.0111], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0811, -3.7998, -0.0826, -0.4878, -1.4532], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0716, 0.0555, 0.0267, 0.0082, 0.0032], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9942, 0.8100, 0.9978, 0.9960, 0.9953], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1114, -0.1370,  0.1443, -0.0544,  0.0040], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.1924e-06,  1.1128e-04, -1.2479e-03, -1.4448e-04,  3.4521e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 3.5862e-04,  5.9772e-04, -2.1760e-03, -2.1630e-05,  6.1926e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0051, -0.0045,  0.0043, -0.0019, -0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0027, -0.0016,  0.0012, -0.0007, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0027, -0.0016,  0.0012, -0.0007, -0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 4.0144e-05,  3.0930e-04, -2.8254e-04, -7.1056e-05,  2.5238e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([55.8791], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0100,  0.0098, -0.0157, -0.0063,  0.0066], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0100,  0.0098, -0.0157, -0.0063,  0.0066], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.0217,  1.4581, -1.5123,  0.4470, -0.7041], grad_fn=<SliceBackward0>)
  [Layer 23] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 23] Output sample values after mixer: tensor([ 1.0217,  1.4581, -1.5123,  0.4470, -0.7041], grad_fn=<SliceBackward0>)
  [Layer 23] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 23] Residual connection sample values: tensor([ 2.7366, -1.8016, -4.4111,  1.6574,  4.8974], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 24/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([51.9176], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1388], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1011, -0.0635, -0.1502,  0.0544,  0.1754], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.5138, -1.1629,  0.8319, -0.1139, -0.2180], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.5138, -1.1629,  0.8319, -0.1139, -0.2180], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5737, -0.1712, -0.1471,  0.0578,  0.6882], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.0024,  0.3666,  0.1855,  1.6527,  1.1394], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1294, -0.7061,  0.0015, -0.5737,  0.2406], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1038, -0.0198, -0.0316,  0.0092,  0.3260], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1005, -0.0198, -0.0355,  0.0075,  0.3213], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0528, -0.0098, -0.0175,  0.0038,  0.1862], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0528, -0.0098, -0.0175,  0.0038,  0.1862], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1676,  0.0320, -0.0824, -0.0144, -0.0257], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0879, -0.1338, -0.2110, -0.2544,  0.2444], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0742, -3.4497, -3.2885, -0.1609, -2.6945], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0055, 0.0417, 0.0548, 0.0237, 0.0660], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9996, 0.8661, 0.8352, 0.9962, 0.8371], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0528, -0.0098, -0.0175,  0.0038,  0.1862], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.8569e-05,  9.2654e-06, -2.3870e-05, -4.1862e-06, -7.4413e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([1.3281e-04, 5.5475e-04, 1.0394e-04, 3.3731e-05, 6.7790e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0002, -0.0009, -0.0002, -0.0002, -0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-8.0744e-05, -8.9703e-04, -8.9788e-05, -2.6842e-04, -1.9360e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-8.0744e-05, -8.9703e-04, -8.9788e-05, -2.6842e-04, -1.9360e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-2.5958e-05,  2.4842e-04, -5.2047e-05,  1.4421e-05,  1.8812e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([9.4091e-05], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([98.0152], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0024,  0.0326, -0.0062,  0.0062,  0.0481], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0024,  0.0326, -0.0062,  0.0062,  0.0481], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.9924,  0.0756, -2.2740,  1.2752,  2.5627], grad_fn=<SliceBackward0>)
  [Layer 24] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 24] Output sample values after mixer: tensor([ 0.9924,  0.0756, -2.2740,  1.2752,  2.5627], grad_fn=<SliceBackward0>)
  [Layer 24] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 24] Residual connection sample values: tensor([ 3.7290, -1.7260, -6.6851,  2.9326,  7.4602], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 25/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([71.7332], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1181], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1312, -0.0555, -0.2222,  0.0911,  0.2598], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3938, -1.2059,  1.4536, -0.0650, -0.8899], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3938, -1.2059,  1.4536, -0.0650, -0.8899], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5971, -0.3637, -0.6931, -0.1277, -0.1510], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.0013, -0.3943,  0.7801,  1.9447, -0.8377], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.3083, -0.8191, -1.5078, -0.5971,  0.1800], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.3131, -0.0474,  0.1625,  0.1350,  0.1453], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.3106, -0.0756,  0.1511,  0.1959,  0.1395], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1792, -0.0364,  0.0813,  0.1075,  0.0746], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1792, -0.0364,  0.0813,  0.1075,  0.0746], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0920, -0.0708,  0.0202,  0.0205,  0.0217], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0770,  0.0038,  0.0639, -0.0515, -0.0896], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -0.3702,  -1.5045,  -5.7210,  -0.8176, -14.6662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3366, 0.0043, 0.0563, 0.0482, 0.0142], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8828, 0.9935, 0.7246, 0.9614, 0.8114], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1792, -0.0364,  0.0813,  0.1075,  0.0746], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0055, -0.0043,  0.0012,  0.0012,  0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0052, -0.0052, -0.0017,  0.0015,  0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0144,  0.0014,  0.0074, -0.0025,  0.0180], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0126,  0.0010,  0.0083, -0.0014,  0.0187], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0126,  0.0010,  0.0083, -0.0014,  0.0187], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-2.9547e-03, -2.7218e-04,  9.7525e-03,  4.4855e-05, -4.8538e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0001], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([86.6736], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.3066, -0.0193,  1.1160,  0.0031, -0.7255], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.3066, -0.0193,  1.1160,  0.0031, -0.7255], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.3756, -0.9895, -1.6229,  3.1318,  1.5898], grad_fn=<SliceBackward0>)
  [Layer 25] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 25] Output sample values after mixer: tensor([ 1.3756, -0.9895, -1.6229,  3.1318,  1.5898], grad_fn=<SliceBackward0>)
  [Layer 25] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 25] Residual connection sample values: tensor([ 5.1046, -2.7155, -8.3081,  6.0644,  9.0499], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 26/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([95.7914], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1022], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2012, -0.0990, -0.3051,  0.2184,  0.3488], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.1866,  0.3452, -0.6374,  0.2493, -0.9184], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.1866,  0.3452, -0.6374,  0.2493, -0.9184], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.1813, -0.0036,  0.0709,  0.4900, -1.4918], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9759, 1.5383, 0.7863, 0.8385, 3.1322], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5564,  0.3083,  0.8974,  1.1813, -0.5066], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0428,  0.1117,  0.0666, -0.0947,  0.3438], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0457,  0.0556,  0.1307, -0.1216,  0.3519], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0223,  0.0286,  0.0696, -0.0571,  0.2066], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0223,  0.0286,  0.0696, -0.0571,  0.2066], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0465, -0.0080,  0.0453, -0.0262,  0.0535], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2076,  0.1254,  0.0761, -0.1502,  0.1473], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9595, -0.3945, -0.8420, -1.4275, -0.1466], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1441, 0.4305, 0.1325, 0.2331, 0.2253], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8708, 0.8438, 0.8944, 0.7169, 0.9675], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0223,  0.0286,  0.0696, -0.0571,  0.2066], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.4960e-04,  2.5582e-05, -1.4566e-04,  8.4245e-05, -1.7206e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0002, -0.0014, -0.0029,  0.0017, -0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0106,  0.0168,  0.0058, -0.0055,  0.0175], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0134,  0.0205,  0.0146, -0.0128,  0.0438], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0134,  0.0205,  0.0146, -0.0128,  0.0438], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0122,  0.0041, -0.0032, -0.0018, -0.0115], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0009], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([33.6133], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2054,  0.1544, -0.1025, -0.0868, -0.4848], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2054,  0.1544, -0.1025, -0.0868, -0.4848], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.5454, -1.9319, -2.1031, -1.1640,  1.9742], grad_fn=<SliceBackward0>)
  [Layer 26] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 26] Output sample values after mixer: tensor([-1.5454, -1.9319, -2.1031, -1.1640,  1.9742], grad_fn=<SliceBackward0>)
  [Layer 26] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 26] Residual connection sample values: tensor([  3.5592,  -4.6474, -10.4112,   4.9004,  11.0241],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 27/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([105.9280], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0972], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1447, -0.1724, -0.4144,  0.1791,  0.4663], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0020, -0.2392, -0.6875, -0.0783,  1.3765], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0020, -0.2392, -0.6875, -0.0783,  1.3765], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.3850,  0.9142,  0.0513,  1.1509,  0.7397], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.2233, 0.7647, 0.5480, 1.9123, 1.0392], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2306,  0.3896, -1.2518, -1.3850, -0.9458], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3815, -0.4527,  0.0179, -0.2896, -0.2895], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.4075, -0.4892,  0.0079, -0.4915, -0.3193], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1628, -0.1859,  0.0040, -0.1866, -0.1344], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1628, -0.1859,  0.0040, -0.1866, -0.1344], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0446, -0.0645, -0.1007,  0.1507, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0766, -0.2773,  0.1755, -0.1665, -0.1837], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3662, -1.3799, -1.8268, -2.0409, -2.3490], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1369, 0.0985, 0.0828, 0.1081, 0.1226], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8294, 0.8730, 0.8597, 0.8019, 0.7498], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1628, -0.1859,  0.0040, -0.1866, -0.1344], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 9.9485e-04,  1.4376e-03,  2.2452e-03, -3.3585e-03,  6.7593e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0026,  0.0017,  0.0026, -0.0039,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0048,  0.0060,  0.0066, -0.0704, -0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0213, -0.0128,  0.0070, -0.0892, -0.0147], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0213, -0.0128,  0.0070, -0.0892, -0.0147], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-2.1600e-05,  1.3454e-03, -1.6035e-03,  3.3556e-03, -1.6183e-02],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0057], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.1965], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0005,  0.0218, -0.0450,  0.0847, -0.2511], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0005,  0.0218, -0.0450,  0.0847, -0.2511], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.6353,  1.3960, -2.8297,  0.8240,  1.3305], grad_fn=<SliceBackward0>)
  [Layer 27] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 27] Output sample values after mixer: tensor([ 0.6353,  1.3960, -2.8297,  0.8240,  1.3305], grad_fn=<SliceBackward0>)
  [Layer 27] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 27] Residual connection sample values: tensor([  4.1944,  -3.2514, -13.2409,   5.7244,  12.3546],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 28/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([131.0179], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0874], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1488, -0.1079, -0.4440,  0.1866,  0.4337], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0791, -1.2098,  0.0919, -0.4913, -0.9450], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0791, -1.2098,  0.0919, -0.4913, -0.9450], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.4833, -1.6980, -0.2292, -0.8049, -1.5065], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.8642, 0.5886, 0.7539, 1.1959, 0.8081], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6864, -0.5632, -0.0207, -1.4833, -2.5336], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2345,  0.4748, -0.0539, -0.1547,  0.1988], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1767,  0.4634, -0.0676, -0.1660,  0.3034], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0961,  0.2845, -0.0326, -0.0761,  0.1746], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0961,  0.2845, -0.0326, -0.0761,  0.1746], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0196, -0.0185, -0.0273, -0.0240,  0.2702], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0776,  0.0437,  0.2835, -0.1592,  0.4288], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2728, -3.9978, -2.5177, -2.1714, -2.8655], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0240, 0.0779, 0.0868, 0.0555, 0.0339], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9699, 0.7324, 0.8037, 0.8864, 0.9075], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0961,  0.2845, -0.0326, -0.0761,  0.1746], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.5158e-05, -4.2682e-05, -6.3045e-05, -5.5445e-05,  6.2331e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.2497e-05, -1.7245e-04, -1.5297e-05,  2.7672e-04,  3.5444e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0011,  0.0167,  0.0002, -0.0058,  0.0082], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0219,  0.0783, -0.0068, -0.0223,  0.0460], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0219,  0.0783, -0.0068, -0.0223,  0.0460], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0009, -0.0218, -0.0003,  0.0042, -0.0122], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0018], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([23.6417], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0441, -0.7062, -0.0101,  0.1475, -0.4188], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0441, -0.7062, -0.0101,  0.1475, -0.4188], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.4781,  1.1204, -6.0460,  0.1302,  1.9816], grad_fn=<SliceBackward0>)
  [Layer 28] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 28] Output sample values after mixer: tensor([ 0.4781,  1.1204, -6.0460,  0.1302,  1.9816], grad_fn=<SliceBackward0>)
  [Layer 28] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 28] Residual connection sample values: tensor([  4.6725,  -2.1311, -19.2869,   5.8547,  14.3362],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 29/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([155.0205], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0803], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1450, -0.0633, -0.5733,  0.1676,  0.4425], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4654, -1.1625, -1.6494, -1.1961,  0.3816], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4654, -1.1625, -1.6494, -1.1961,  0.3816], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.4078, -0.4371,  0.3447,  0.2934, -1.5488], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.5699, 1.2126, 0.6551, 0.8659, 1.7378], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.8003,  0.7649,  0.2188, -0.4078,  0.1719], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0691,  0.1637, -0.0482, -0.0478, -0.1702], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0825,  0.1292, -0.0453, -0.1082, -0.2833], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0395,  0.0688, -0.0221, -0.0512, -0.1217], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0395,  0.0688, -0.0221, -0.0512, -0.1217], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0954, -0.0531,  0.1416, -0.0311, -0.0297], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2777, -0.2753, -0.1169, -0.2371, -0.2648], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8072, -2.1170, -1.9257, -0.2904, -2.0499], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0981, 0.1573, 0.1191, 0.0037, 0.3136], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8375, 0.7167, 0.7950, 0.9989, 0.5257], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0395,  0.0688, -0.0221, -0.0512, -0.1217], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0004,  0.0002, -0.0005,  0.0001,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-8.5403e-04,  4.5734e-04, -7.5059e-04,  1.3708e-04,  1.8237e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0074,  0.0038, -0.0072,  0.0073, -0.0191], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0478,  0.0742, -0.0298, -0.0451, -0.1436], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0478,  0.0742, -0.0298, -0.0451, -0.1436], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0086, -0.0205,  0.0079,  0.0125, -0.0326], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0143], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.3562], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0785, -0.1767,  0.1079,  0.1530, -0.3530], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0785, -0.1767,  0.1079,  0.1530, -0.3530], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.5723,  2.4919,  0.8609, -0.1786,  2.1728], grad_fn=<SliceBackward0>)
  [Layer 29] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 29] Output sample values after mixer: tensor([ 1.5723,  2.4919,  0.8609, -0.1786,  2.1728], grad_fn=<SliceBackward0>)
  [Layer 29] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 29] Residual connection sample values: tensor([  6.2448,   0.3608, -18.4260,   5.6761,  16.5091],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 30/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([188.9056], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0728], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1935,  0.0110, -0.5577,  0.1620,  0.5255], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2824,  0.2598, -0.6679, -0.6657,  0.9204], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2824,  0.2598, -0.6679, -0.6657,  0.9204], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.0086, -0.6511, -0.5821,  0.2259,  0.2721], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4565, 1.3813, 0.7307, 1.4399, 1.2556], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.6974,  1.1255,  1.1604,  1.0086, -0.6956], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1601, -0.0890, -0.2421, -0.0463, -0.0598], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1368, -0.0753, -0.2090, -0.0645, -0.0871], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0731, -0.0362, -0.0936, -0.0312, -0.0417], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0731, -0.0362, -0.0936, -0.0312, -0.0417], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([0.0548, 0.1569, 0.0141, 0.3675, 0.0637], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2481, -0.2062,  0.0327,  0.0514, -0.2701], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0150, -0.4675, -0.4280, -0.7895, -0.4175], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0170, 0.3626, 0.4422, 0.2162, 0.3249], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9829, 0.8441, 0.8276, 0.8431, 0.8731], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0731, -0.0362, -0.0936, -0.0312, -0.0417], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([6.7972e-05, 1.9470e-04, 1.7502e-05, 4.5599e-04, 7.8989e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([6.3481e-04, 4.7488e-05, 4.6205e-05, 1.3525e-03, 1.2136e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 2.2537e-03, -3.8968e-04, -1.4807e-03, -6.5301e-04, -2.0180e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0922, -0.0450, -0.1168, -0.0391, -0.0513], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0922, -0.0450, -0.1168, -0.0391, -0.0513], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0112, -0.0066,  0.0264,  0.0088, -0.0338], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0146], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.2705], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1331, -0.0797,  0.1937,  0.0872, -0.2964], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1331, -0.0797,  0.1937,  0.0872, -0.2964], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.9866, -2.2509, -1.9573, -2.2797,  0.7651], grad_fn=<SliceBackward0>)
  [Layer 30] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 30] Output sample values after mixer: tensor([ 0.9866, -2.2509, -1.9573, -2.2797,  0.7651], grad_fn=<SliceBackward0>)
  [Layer 30] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 30] Residual connection sample values: tensor([  7.2314,  -1.8901, -20.3833,   3.3964,  17.2742],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 31/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([223.7681], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0668], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2063, -0.0529, -0.5722,  0.0928,  0.4979], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8482,  0.3834,  0.1801,  1.2779,  0.3642], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8482,  0.3834,  0.1801,  1.2779,  0.3642], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.6666, -0.9496, -0.1313,  0.3233, -0.9194], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.5921, 1.2740, 1.8552, 0.4088, 1.6983], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.1248,  0.0763,  0.2619,  0.6666, -0.7623], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1128,  0.1334, -0.1011, -0.0553,  0.1572], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1123,  0.1230, -0.1001, -0.0572,  0.1519], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0593,  0.0653, -0.0475, -0.0278,  0.0817], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0593,  0.0653, -0.0475, -0.0278,  0.0817], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0794, -0.0457,  0.1221, -0.2777,  0.0419], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1206, -0.1302, -0.1843, -0.1042, -0.1337], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.9478, -3.5384, -4.7060, -2.4630, -0.9027], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1526, 0.0789, 0.0969, 0.0887, 0.2085], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6377, 0.7563, 0.6339, 0.8038, 0.8284], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0593,  0.0653, -0.0475, -0.0278,  0.0817], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0007, -0.0004,  0.0011, -0.0025,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0019, -0.0002,  0.0013, -0.0036,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0108,  0.0049,  0.0027, -0.0126,  0.0232], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0516,  0.0499, -0.0300, -0.0317,  0.0794], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0516,  0.0499, -0.0300, -0.0317,  0.0794], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0131,  0.0114, -0.0029, -0.0317,  0.0171], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0129], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.7959], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2275,  0.1721, -0.0397, -0.4551,  0.2902], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2275,  0.1721, -0.0397, -0.4551,  0.2902], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.7917,  2.7682, -0.3904, -0.5060,  1.6296], grad_fn=<SliceBackward0>)
  [Layer 31] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 31] Output sample values after mixer: tensor([-1.7917,  2.7682, -0.3904, -0.5060,  1.6296], grad_fn=<SliceBackward0>)
  [Layer 31] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 31] Residual connection sample values: tensor([  5.4397,   0.8781, -20.7738,   2.8904,  18.9038],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 32/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([266.7561], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0612], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1512,  0.0245, -0.5782,  0.0754,  0.5462], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.9316, -0.2675, -2.0125, -1.3413, -0.1222], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.9316, -0.2675, -2.0125, -1.3413, -0.1222], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1990,  0.3346, -0.3224,  0.5170,  0.9510], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0266, 2.7842, 1.1606, 1.0997, 0.9961], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.9272,  0.4916,  0.0590, -0.1990, -0.0283], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0470, -0.1203,  0.0696, -0.1040, -0.1415], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0098, -0.1724,  0.0537, -0.0915, -0.1485], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0049, -0.0788,  0.0276, -0.0437, -0.0687], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0049, -0.0788,  0.0276, -0.0437, -0.0687], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0646, -0.0651, -0.0916, -0.0628, -0.0980], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1654,  0.4956,  0.4965, -0.2508, -0.2365], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6971, -2.0893, -1.7967, -1.3894, -1.0395], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2045, 0.0846, 0.3289, 0.2764, 0.3825], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8671, 0.8379, 0.5538, 0.6811, 0.6719], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0049, -0.0788,  0.0276, -0.0437, -0.0687], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-6.4760e-05,  6.5275e-05,  9.1782e-05,  6.2885e-05,  9.8177e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0022,  0.0035,  0.0005, -0.0039, -0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0437, -0.0367, -0.0009, -0.0336,  0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0426, -0.0556,  0.0057, -0.0441, -0.0153], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0426, -0.0556,  0.0057, -0.0441, -0.0153], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0112,  0.0065, -0.0013,  0.0123,  0.0009], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0213], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.8511], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0934,  0.0432, -0.0175,  0.1306,  0.0077], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0934,  0.0432, -0.0175,  0.1306,  0.0077], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3417, -3.1504, -0.7352,  1.1022,  2.2967], grad_fn=<SliceBackward0>)
  [Layer 32] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 32] Output sample values after mixer: tensor([ 0.3417, -3.1504, -0.7352,  1.1022,  2.2967], grad_fn=<SliceBackward0>)
  [Layer 32] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 32] Residual connection sample values: tensor([  5.7813,  -2.2722, -21.5090,   3.9925,  21.2005],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 33/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([431.7978], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0481], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1311, -0.0534, -0.4968,  0.0895,  0.4979], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.7766, -1.3097,  1.0464, -0.4425, -0.0748], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.7766, -1.3097,  1.0464, -0.4425, -0.0748], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7822, -2.0371,  0.2644, -0.9165,  0.9151], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-2.0616,  3.0082, -0.0199,  2.0470, -0.6711], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.3028, -1.0278, -0.8269,  0.7822, -1.5782], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0873, -0.3070, -0.0508, -0.1846, -0.1398], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0742, -0.3564, -0.0240, -0.1858, -0.1409], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0385, -0.1468, -0.0119, -0.0843, -0.0655], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0385, -0.1468, -0.0119, -0.0843, -0.0655], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.6083,  0.0036,  0.0448, -0.0100, -0.0207], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0591, -0.1172, -0.2182, -0.1643, -0.2347], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9791, -9.6938, -6.1678, -0.1135, -2.0903], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0015, 0.1850, 0.0127, 0.0613, 0.0015], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9970, 0.1664, 0.9247, 0.9931, 0.9969], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0385, -0.1468, -0.0119, -0.0843, -0.0655], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.5181e-05,  2.0787e-07,  2.5918e-06, -5.7865e-07, -1.1952e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-4.1065e-06,  7.0682e-05, -7.2057e-05, -1.9176e-05,  6.3100e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-8.3073e-05,  1.3300e-04,  3.2414e-04,  4.7784e-05, -2.4191e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0400, -0.1527, -0.0120, -0.0877, -0.0685], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0400, -0.1527, -0.0120, -0.0877, -0.0685], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0103,  0.0425, -0.0093,  0.0152,  0.0025], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0064], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.4600], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1928,  0.4753, -0.1311,  0.2090,  0.0384], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1928,  0.4753, -0.1311,  0.2090,  0.0384], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-3.9504,  1.1274,  0.9185, -1.5019,  1.8280], grad_fn=<SliceBackward0>)
  [Layer 33] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 33] Output sample values after mixer: tensor([-3.9504,  1.1274,  0.9185, -1.5019,  1.8280], grad_fn=<SliceBackward0>)
  [Layer 33] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 33] Residual connection sample values: tensor([  1.8309,  -1.1448, -20.5905,   2.4906,  23.0285],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 34/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([458.8659], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0467], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0329, -0.0218, -0.3701,  0.0452,  0.4344], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.5287, -0.1015,  0.6247, -1.2375, -1.6944], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.5287, -0.1015,  0.6247, -1.2375, -1.6944], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2582, -0.9480, -0.0056, -1.1737, -0.4281], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.1450, 1.2417, 3.3277, 1.7655, 1.7856], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.3432,  0.5366, -0.6617,  0.2582, -0.3676], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0444,  0.1511, -0.0424,  0.2869, -0.0863], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0763,  0.1771, -0.0543,  0.2473, -0.0949], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0367,  0.0964, -0.0264,  0.1389, -0.0452], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0367,  0.0964, -0.0264,  0.1389, -0.0452], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0167,  0.0214, -0.0293,  0.0173, -0.0551], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0263, -0.2642, -0.2751, -0.1598, -0.2763], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.5611, -2.4811, -2.8936, -0.0159, -0.0261], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3771, 0.1081, 0.2333, 0.0813, 0.0438], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.3807, 0.7648, 0.5091, 0.9987, 0.9989], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0367,  0.0964, -0.0264,  0.1389, -0.0452], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0002, -0.0003,  0.0004, -0.0002,  0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0019, -0.0003,  0.0004, -0.0005,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0021,  0.0066, -0.0027,  0.0102, -0.0026], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0247,  0.0659, -0.0190,  0.0958, -0.0304], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0247,  0.0659, -0.0190,  0.0958, -0.0304], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0082, -0.0032, -0.0077, -0.0266,  0.0080], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0040], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([15.7905], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2579, -0.0971, -0.2695, -1.0470,  0.2988], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2579, -0.0971, -0.2695, -1.0470,  0.2988], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.2689,  1.1385, -9.0522,  2.3128,  5.1123], grad_fn=<SliceBackward0>)
  [Layer 34] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 34] Output sample values after mixer: tensor([ 2.2689,  1.1385, -9.0522,  2.3128,  5.1123], grad_fn=<SliceBackward0>)
  [Layer 34] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 34] Residual connection sample values: tensor([ 4.0998e+00, -6.2861e-03, -2.9643e+01,  4.8034e+00,  2.8141e+01],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 35/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([690.6355], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0381], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 8.0669e-02, -1.2345e-04, -5.7279e-01,  8.7061e-02,  5.4795e-01],
       grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.3594, -0.6894,  0.3905, -0.7019, -1.4372], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.3594, -0.6894,  0.3905, -0.7019, -1.4372], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.8683,  1.2026,  1.4729, -1.2739, -0.7051], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.5235, 1.1300, 1.2356, 1.3896, 1.4635], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.3878, -1.6980, -0.0469,  0.8683,  0.9774], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1539, -0.2809, -0.2274, -0.2975, -0.1290], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3099, -0.2397, -0.2636, -0.3424, -0.1704], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1311, -0.1056, -0.1145, -0.1422, -0.0780], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1311, -0.1056, -0.1145, -0.1422, -0.0780], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0337,  0.1868, -0.2572,  0.1692,  0.0599], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2741,  0.3454, -0.2627,  0.1106, -0.0900], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7098, -2.7746, -0.4453, -1.1391, -3.5906], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2699, 0.0517, 0.4625, 0.2440, 0.1074], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8257, 0.8664, 0.8139, 0.7574, 0.6800], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1311, -0.1056, -0.1145, -0.1422, -0.0780], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0012, -0.0066,  0.0091, -0.0060, -0.0021], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0045, -0.0131,  0.0230, -0.0205, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0681, -0.0527, -0.0513, -0.1075, -0.0227], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1568, -0.1241, -0.1288, -0.2037, -0.0754], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1568, -0.1241, -0.1288, -0.2037, -0.0754], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0436,  0.0286, -0.0300,  0.0474,  0.0208], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0287], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.8993], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.8390,  0.2930, -0.2173,  0.3965,  0.2338], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.8390,  0.2930, -0.2173,  0.3965,  0.2338], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 4.0125,  5.0395, -5.0929, -3.1043,  3.7084], grad_fn=<SliceBackward0>)
  [Layer 35] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 35] Output sample values after mixer: tensor([ 4.0125,  5.0395, -5.0929, -3.1043,  3.7084], grad_fn=<SliceBackward0>)
  [Layer 35] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 35] Residual connection sample values: tensor([  8.1123,   5.0332, -34.7356,   1.6991,  31.8492],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 36/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([947.2021], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0325], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1293,  0.0813, -0.5500,  0.0267,  0.5200], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5299, -1.2723, -0.2741, -2.1295, -1.0286], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5299, -1.2723, -0.2741, -2.1295, -1.0286], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0341,  1.1827,  0.8557, -0.1493, -0.5466], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.0344,  1.3334,  0.2864, -0.1779, -0.2836], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4619, -0.5441, -0.4721,  0.0341,  2.2626], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0311,  0.2058,  0.1218, -0.0356,  0.1007], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0051,  0.2057,  0.0933, -0.0605,  0.0729], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0025,  0.1134,  0.0488, -0.0293,  0.0378], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0025,  0.1134,  0.0488, -0.0293,  0.0378], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0729,  0.3336,  0.0505, -0.1008,  0.0413], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.2815, -0.2781, -0.1962, -0.1475, -0.1693], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6566, -1.1306, -1.6058, -2.4414, -2.8823], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1157, 0.0139, 0.0286, 0.0307, 0.0310], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7354, 0.9844, 0.9551, 0.9277, 0.9145], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0025,  0.1134,  0.0488, -0.0293,  0.0378], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.1380e-05, -9.7866e-05, -1.4817e-05,  2.9587e-05, -1.2113e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-4.4372e-04, -9.2739e-04, -2.9157e-04,  3.9534e-04,  4.2907e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.4390e-05,  1.2982e-02, -1.2148e-03, -4.1577e-03,  5.5906e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0029,  0.1429,  0.0547, -0.0378,  0.0438], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0029,  0.1429,  0.0547, -0.0378,  0.0438], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0006, -0.0398, -0.0065,  0.0085, -0.0119], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0099], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.0237], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0085, -0.8544, -0.0940,  0.1396, -0.1678], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0085, -0.8544, -0.0940,  0.1396, -0.1678], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-5.8472, -1.3938, -0.2246, -0.4300,  0.3771], grad_fn=<SliceBackward0>)
  [Layer 36] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 36] Output sample values after mixer: tensor([-5.8472, -1.3938, -0.2246, -0.4300,  0.3771], grad_fn=<SliceBackward0>)
  [Layer 36] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 36] Residual connection sample values: tensor([  2.2651,   3.6394, -34.9602,   1.2691,  32.2263],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 37/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1156.9502], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0294], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0380,  0.0624, -0.5792,  0.0206,  0.5445], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.0773,  1.8705,  1.4904, -2.6577,  0.1458], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.0773,  1.8705,  1.4904, -2.6577,  0.1458], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.2521, -0.1742, -1.6905, -0.8235, -0.2788], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.6749, 0.1585, 1.2985, 4.7176, 1.4336], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6888, -0.0773, -0.6521, -0.2521,  0.3173], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0021,  0.0182, -0.1677, -0.5127,  0.0071], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0145, -0.0102, -0.1627, -0.6635,  0.0219], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0072, -0.0051, -0.0747, -0.2256,  0.0110], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0072, -0.0051, -0.0747, -0.2256,  0.0110], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0636,  0.2859,  0.0394, -0.1630, -0.0387], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0078, -0.0290, -0.1764, -0.2554, -0.2751], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0606, -3.2470, -0.8191, -0.2453, -1.9752], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3162, 0.0114, 0.0340, 0.1310, 0.0480], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9810, 0.9636, 0.9726, 0.9684, 0.9095], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0072, -0.0051, -0.0747, -0.2256,  0.0110], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.4454e-04, -6.5007e-04, -8.9683e-05,  3.7060e-04,  8.7894e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0001, -0.0005, -0.0009,  0.0012, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0018, -0.0116, -0.0288,  0.0175,  0.0639], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0004, -0.0106, -0.0146,  0.0605,  0.0618], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0004, -0.0106, -0.0146,  0.0605,  0.0618], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0004, -0.0172, -0.0178, -0.0105,  0.0048], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0350], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.3411], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0030, -0.1347, -0.2744, -0.3005,  0.0308], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0030, -0.1347, -0.2744, -0.3005,  0.0308], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.5245, -0.3949,  2.3879, -0.1918, -2.7551], grad_fn=<SliceBackward0>)
  [Layer 37] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 37] Output sample values after mixer: tensor([ 0.5245, -0.3949,  2.3879, -0.1918, -2.7551], grad_fn=<SliceBackward0>)
  [Layer 37] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 37] Residual connection sample values: tensor([  2.7897,   3.2446, -32.5723,   1.0773,  29.4712],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 38/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1468.1155], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0261], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0378,  0.0436, -0.4354,  0.0141,  0.3940], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1653, -0.1403, -0.0769, -1.6265, -0.7713], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1653, -0.1403, -0.0769, -1.6265, -0.7713], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.8204,  0.3171, -0.3280, -1.7336, -0.1572], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.1383, 2.1908, 0.3443, 1.3333, 1.1790], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.9851, 1.0855, 0.7721, 0.8204, 1.5084], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1561, -0.0680,  0.0363,  0.3382, -0.0349], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1280, -0.1052,  0.0106,  0.3266, -0.0561], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0599, -0.0498,  0.0053,  0.1897, -0.0273], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0599, -0.0498,  0.0053,  0.1897, -0.0273], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1752, -0.2762, -0.0539, -0.0510, -0.2408], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1896, -0.1620, -0.1728,  0.3316, -0.2596], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0881, -1.3536, -1.1764, -1.6451, -1.1941], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1539, 0.2407, 0.2295, 0.1511, 0.0729], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8458, 0.7219, 0.7634, 0.7799, 0.9167], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0599, -0.0498,  0.0053,  0.1897, -0.0273], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([0.0016, 0.0025, 0.0005, 0.0005, 0.0022], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([0.0092, 0.0118, 0.0018, 0.0009, 0.0113], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0257, -0.0291, -0.0008,  0.0648,  0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0742, -0.0695,  0.0035,  0.2185, -0.0203], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0742, -0.0695,  0.0035,  0.2185, -0.0203], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0066,  0.0045, -0.0001, -0.0584,  0.0050], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0088], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.6310], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1409,  0.0930, -0.0028, -1.1467,  0.0875], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1409,  0.0930, -0.0028, -1.1467,  0.0875], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 4.8594, -4.3912, -4.6365,  4.8108, -1.7834], grad_fn=<SliceBackward0>)
  [Layer 38] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 38] Output sample values after mixer: tensor([ 4.8594, -4.3912, -4.6365,  4.8108, -1.7834], grad_fn=<SliceBackward0>)
  [Layer 38] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 38] Residual connection sample values: tensor([  7.6491,  -1.1466, -37.2087,   5.8881,  27.6878],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 39/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1898.3473], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0230], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0792, -0.0120, -0.3859,  0.0612,  0.2901], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3749, -0.3702, -0.6126, -0.0467, -0.1910], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3749, -0.3702, -0.6126, -0.0467, -0.1910], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1963, -0.1756,  0.7835, -1.1489, -0.6862], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.5565, 0.9922, 0.7153, 1.4279, 0.0482], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5098, -0.1945, -0.0317, -0.1963,  0.4085], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0284,  0.0239,  0.1456, -0.2674, -0.1312], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0427,  0.1091,  0.1232, -0.2633, -0.1522], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0209,  0.0575,  0.0654, -0.1144, -0.0703], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0209,  0.0575,  0.0654, -0.1144, -0.0703], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0759, -0.0534,  0.0051,  0.0582,  0.0691], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1412,  0.2166,  0.2458,  0.2544, -0.0100], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6942, -0.9243, -1.3151, -3.1533, -2.1087], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0084, 0.0202, 0.0181, 0.1096, 0.0270], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9942, 0.9815, 0.9765, 0.7079, 0.9447], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0209,  0.0575,  0.0654, -0.1144, -0.0703], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.3367e-05,  9.4134e-06, -9.0500e-07, -1.0256e-05, -1.2163e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0003, -0.0001,  0.0001, -0.0002,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0015,  0.0082,  0.0006, -0.0067,  0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0164,  0.0575,  0.0567, -0.1047, -0.0574], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0164,  0.0575,  0.0567, -0.1047, -0.0574], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0025, -0.0087, -0.0122,  0.0024,  0.0050], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0036], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([16.7495], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0790, -0.2942, -0.4224,  0.0669,  0.1583], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0790, -0.2942, -0.4224,  0.0669,  0.1583], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ -5.7346, -10.1872,   0.9807,   1.3138,  -4.9068],
       grad_fn=<SliceBackward0>)
  [Layer 39] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 39] Output sample values after mixer: tensor([ -5.7346, -10.1872,   0.9807,   1.3138,  -4.9068],
       grad_fn=<SliceBackward0>)
  [Layer 39] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 39] Residual connection sample values: tensor([  1.9145, -11.3338, -36.2281,   7.2019,  22.7810],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 40/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2322.3765], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0208], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0174, -0.1035, -0.3397,  0.0659,  0.2059], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0736, -0.4557, -0.5131, -0.3095, -0.6953], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0736, -0.4557, -0.5131, -0.3095, -0.6953], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1661, -0.2266,  0.2477, -0.1740, -0.8521], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.3184, 1.2449, 2.0683, 1.3859, 1.1141], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5224, -0.3031,  0.0295, -0.1661, -0.7779], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0311,  0.0376,  0.0536,  0.0383, -0.1731], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0468,  0.0190,  0.0593,  0.0285, -0.1778], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0228,  0.0096,  0.0305,  0.0144, -0.0810], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0228,  0.0096,  0.0305,  0.0144, -0.0810], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0479, -0.1596, -0.0754, -0.0752, -0.0522], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1852, -0.0258,  0.0279,  0.2875, -0.0885], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9810, -1.4352, -0.7966, -1.6062, -1.8465], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0777, 0.0462, 0.0354, 0.1400, 0.1702], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8573, 0.9359, 0.9722, 0.7986, 0.7304], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0228,  0.0096,  0.0305,  0.0144, -0.0810], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([8.5113e-05, 2.8328e-04, 1.3394e-04, 1.3343e-04, 9.2744e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.9702e-04,  1.3567e-03,  5.7242e-04, -6.2525e-05,  4.4556e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0026,  0.0089,  0.0044,  0.0032, -0.0024], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0212,  0.0167,  0.0294,  0.0150, -0.0686], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0212,  0.0167,  0.0294,  0.0150, -0.0686], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0008, -0.0030, -0.0056, -0.0020,  0.0159], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0044], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([15.0120], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0222, -0.0876, -0.1646, -0.0678,  0.4616], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0222, -0.0876, -0.1646, -0.0678,  0.4616], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-7.4904, -0.2218, -7.3766,  0.9666,  2.7906], grad_fn=<SliceBackward0>)
  [Layer 40] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 40] Output sample values after mixer: tensor([-7.4904, -0.2218, -7.3766,  0.9666,  2.7906], grad_fn=<SliceBackward0>)
  [Layer 40] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 40] Residual connection sample values: tensor([ -5.5759, -11.5556, -43.6047,   8.1685,  25.5715],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 41/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2726.9285], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0191], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0476, -0.0995, -0.3804,  0.0698,  0.2195], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.7280,  0.2929, -0.5977, -0.1206, -0.2467], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.7280,  0.2929, -0.5977, -0.1206, -0.2467], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7986, -0.0464,  1.0423,  0.1872, -0.1898], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0577, 1.7809, 1.5142, 0.2446, 1.8489], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.3003, -0.7251,  0.3270,  0.7986, -0.3950], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1395,  0.0090,  0.2199,  0.0501, -0.0280], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1529, -0.0050,  0.2220,  0.0434, -0.0436], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0706, -0.0025,  0.1233,  0.0222, -0.0213], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0706, -0.0025,  0.1233,  0.0222, -0.0213], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0143, -0.0509, -0.0413, -0.2723,  0.3116], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0226, -0.0345, -0.1256, -0.0315, -0.0596], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8259, -1.8637, -1.2829, -1.4543, -4.4079], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1039, 0.1734, 0.0323, 0.0525, 0.0399], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8272, 0.7239, 0.9594, 0.9266, 0.8388], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0706, -0.0025,  0.1233,  0.0222, -0.0213], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0001,  0.0004,  0.0003,  0.0020, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0004,  0.0006, -0.0008,  0.0036, -0.0043], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0089,  0.0008,  0.0219,  0.0049, -0.0108], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0777, -0.0016,  0.1421,  0.0265, -0.0315], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0777, -0.0016,  0.1421,  0.0265, -0.0315], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0381, -0.0003, -0.0301, -0.0015,  0.0034], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0020], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([22.5053], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-1.4853, -0.0107, -1.1543, -0.0605,  0.1071], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-1.4853, -0.0107, -1.1543, -0.0605,  0.1071], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.7270,  4.3371, -1.2117,  0.9323, -8.6206], grad_fn=<SliceBackward0>)
  [Layer 41] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 41] Output sample values after mixer: tensor([ 2.7270,  4.3371, -1.2117,  0.9323, -8.6206], grad_fn=<SliceBackward0>)
  [Layer 41] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 41] Residual connection sample values: tensor([ -2.8488,  -7.2185, -44.8164,   9.1008,  16.9509],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 42/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3198.9211], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0177], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0239, -0.0617, -0.3797,  0.0758,  0.1415], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2076,  0.0209, -1.4601, -0.1536,  0.7240], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2076,  0.0209, -1.4601, -0.1536,  0.7240], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.2624,  0.1228, -1.3535, -1.0307, -0.7660], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.9142,  0.7691,  1.9338, -1.0713,  2.3317], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.2230,  0.6473,  0.0857, -0.2624, -0.3530], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0362, -0.0202, -0.1951,  0.1355, -0.1248], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0455, -0.0334, -0.1851,  0.1391, -0.1447], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0223, -0.0164, -0.0840,  0.0744, -0.0671], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0223, -0.0164, -0.0840,  0.0744, -0.0671], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0090,  0.0986, -0.0072, -0.1223,  0.3455], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0797,  0.0204,  0.0551, -0.1034, -0.2745], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0661, -1.4514, -0.7270, -1.9455, -0.6256], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1366, 0.3195, 0.0236, 0.0094, 0.1107], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8645, 0.6289, 0.9830, 0.9820, 0.9331], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0223, -0.0164, -0.0840,  0.0744, -0.0671], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.7348e-05, -2.9971e-04,  2.1943e-05,  3.7186e-04, -1.0502e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.5569e-04, -2.6947e-05, -2.5926e-04,  6.2056e-04, -5.7731e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0009, -0.0023, -0.0035,  0.0049, -0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0232, -0.0188, -0.0877,  0.0795, -0.0686], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0232, -0.0188, -0.0877,  0.0795, -0.0686], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0027, -0.0002,  0.0241, -0.0056, -0.0334], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0017], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([24.3679], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1343, -0.0098,  1.2203, -0.2358, -1.5338], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1343, -0.0098,  1.2203, -0.2358, -1.5338], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 5.3400, -4.8375, -1.0703, -3.2927,  6.0954], grad_fn=<SliceBackward0>)
  [Layer 42] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 42] Output sample values after mixer: tensor([ 5.3400, -4.8375, -1.0703, -3.2927,  6.0954], grad_fn=<SliceBackward0>)
  [Layer 42] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 42] Residual connection sample values: tensor([  2.4912, -12.0561, -45.8866,   5.8081,  23.0463],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 43/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3606.6702], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0167], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0196, -0.0995, -0.3624,  0.0465,  0.1800], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1306, -0.4521, -1.2798,  1.0298, -0.6448], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1306, -0.4521, -1.2798,  1.0298, -0.6448], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7815,  0.1337, -0.4886,  0.6067,  0.0853], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.1390, 1.6491, 0.1531, 1.2893, 0.3944], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.5738, 0.1240, 0.9579, 0.7815, 0.5597], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1240,  0.0106, -0.0850, -0.1236, -0.0088], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1204, -0.0351, -0.0725, -0.1177, -0.0176], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0638, -0.0172, -0.0349, -0.0554, -0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0638, -0.0172, -0.0349, -0.0554, -0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0703, -0.1604,  0.8253,  0.0053,  0.2702], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2460, -0.0588, -0.2740, -0.1419, -0.1404], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9762, -1.4783, -1.0589, -1.0815, -5.9141], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0126, 0.0752, 0.0095, 0.0248, 0.0784], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9878, 0.8948, 0.9900, 0.9735, 0.6288], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0638, -0.0172, -0.0349, -0.0554, -0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-5.6511e-05, -1.2888e-04,  6.6319e-04,  4.2194e-06,  2.1714e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0001, -0.0013,  0.0101,  0.0002,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0043, -0.0044, -0.0070, -0.0051,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0598, -0.0194, -0.0373, -0.0532, -0.0073], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0598, -0.0194, -0.0373, -0.0532, -0.0073], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0042,  0.0034,  0.0104, -0.0403,  0.0016], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0022], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([21.1700], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.2317,  0.1458,  0.4173, -1.7846,  0.0830], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.2317,  0.1458,  0.4173, -1.7846,  0.0830], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([4.2824, 6.3132, 4.8818, 8.3288, 5.2703], grad_fn=<SliceBackward0>)
  [Layer 43] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 43] Output sample values after mixer: tensor([4.2824, 6.3132, 4.8818, 8.3288, 5.2703], grad_fn=<SliceBackward0>)
  [Layer 43] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 43] Residual connection sample values: tensor([  6.7736,  -5.7428, -41.0048,  14.1369,  28.3166],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 44/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3970.0728], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0159], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0505, -0.0445, -0.3085,  0.1048,  0.2109], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1723, -2.5767, -1.1989,  0.5307, -0.9160], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1723, -2.5767, -1.1989,  0.5307, -0.9160], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.7425,  0.6795, -0.3842, -0.7554, -0.8289], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.1889, 1.6420, 1.7170, 2.3072, 1.9831], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.2159,  0.3055, -0.9490, -0.7425, -0.0948], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1403, -0.0898, -0.0521, -0.1808,  0.0997], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1464, -0.0293, -0.0706, -0.1874,  0.0472], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0679, -0.0144, -0.0340, -0.0849,  0.0241], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0679, -0.0144, -0.0340, -0.0849,  0.0241], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2776,  0.0491,  0.0020,  0.0175,  0.0102], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2618, -0.0129, -0.0446,  0.1490, -0.0912], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7482, -0.6439, -1.1771, -1.3506, -1.0269], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1803, 0.0755, 0.0605, 0.0950, 0.2427], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8738, 0.9525, 0.9313, 0.8796, 0.7794], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0679, -0.0144, -0.0340, -0.0849,  0.0241], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.3967e-03, -6.0055e-04, -2.4477e-05, -2.1458e-04, -1.2451e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0051, -0.0011, -0.0004, -0.0001, -0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0055, -0.0014, -0.0009, -0.0081,  0.0053], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0693, -0.0150, -0.0329, -0.0879,  0.0279], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0693, -0.0150, -0.0329, -0.0879,  0.0279], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0055,  0.0027,  0.0091, -0.0294, -0.0073], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0014], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([26.6669], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.2712,  0.1086,  0.4895, -1.3657, -0.3698], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.2712,  0.1086,  0.4895, -1.3657, -0.3698], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([  0.6683,   6.6607, -15.9325,   4.4378,  -5.9805],
       grad_fn=<SliceBackward0>)
  [Layer 44] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 44] Output sample values after mixer: tensor([  0.6683,   6.6607, -15.9325,   4.4378,  -5.9805],
       grad_fn=<SliceBackward0>)
  [Layer 44] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 44] Residual connection sample values: tensor([  7.4419,   0.9179, -56.9373,  18.5747,  22.3361],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 45/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4345.7695], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0152], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0542,  0.0069, -0.4160,  0.1330,  0.1617], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.5585, -0.8102, -0.1550,  0.3271,  0.2975], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.5585, -0.8102, -0.1550,  0.3271,  0.2975], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0393,  0.2427, -0.7088, -0.3760, -2.6913], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 3.5814,  2.3980, -0.5782,  1.1554,  2.5882], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1349, -0.3775, -0.2258,  0.0393,  0.5370], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0015, -0.0502, -0.1156, -0.0801,  0.4915], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0031,  0.0020, -0.1180, -0.0867,  0.4890], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0015,  0.0010, -0.0555, -0.0415,  0.3031], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0015,  0.0010, -0.0555, -0.0415,  0.3031], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0592,  0.1108, -0.0246, -0.2125, -0.0123], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0517,  0.1961,  0.0684, -0.1950, -0.1583], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.2502, -4.1815, -1.0937, -2.6774, -2.3149], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2309, 0.2241, 0.0109, 0.0395, 0.0714], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5948, 0.3917, 0.9881, 0.8997, 0.8476], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0015,  0.0010, -0.0555, -0.0415,  0.3031], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.0900e-05, -3.9096e-05,  8.6720e-06,  7.4965e-05,  4.3461e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 4.0817e-04, -3.0420e-05, -9.4734e-06,  9.1148e-04,  1.1561e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0018, -0.0005, -0.0104, -0.0077,  0.0538], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0036,  0.0006, -0.0727, -0.0542,  0.3938], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0036,  0.0006, -0.0727, -0.0542,  0.3938], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0013, -0.0001,  0.0052, -0.0103,  0.0672], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0019], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([22.9166], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0678, -0.0055,  0.2560, -0.4645,  3.2492], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0678, -0.0055,  0.2560, -0.4645,  3.2492], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 5.6920,  1.2224, -8.1099,  3.6282,  7.3179], grad_fn=<SliceBackward0>)
  [Layer 45] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 45] Output sample values after mixer: tensor([ 5.6920,  1.2224, -8.1099,  3.6282,  7.3179], grad_fn=<SliceBackward0>)
  [Layer 45] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 45] Residual connection sample values: tensor([ 13.1339,   2.1402, -65.0473,  22.2029,  29.6540],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 46/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4815.1094], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0144], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1093,  0.0186, -0.5515,  0.1869,  0.2452], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0147, -0.6297,  0.2347,  0.7540, -0.8063], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0147, -0.6297,  0.2347,  0.7540, -0.8063], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2820,  0.5911,  0.5946, -1.3155, -0.2558], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.2695,  1.7021,  0.4847,  1.6760, -0.0122], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2624,  0.3332,  0.1950,  0.2820, -0.9908], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0512,  0.0919,  0.0966,  0.1838,  0.0432], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0544,  0.0881,  0.0755,  0.1680,  0.0635], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0264,  0.0460,  0.0392,  0.0910,  0.0328], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0264,  0.0460,  0.0392,  0.0910,  0.0328], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0594, -0.2748, -0.0247,  0.0294,  0.0031], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0491, -0.2709,  0.1145,  0.1377,  0.3181], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8673, -0.9793, -1.6584, -0.9408, -0.4381], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0107, 0.0308, 0.0103, 0.0541, 0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9802, 0.9703, 0.9831, 0.9504, 0.9962], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0264,  0.0460,  0.0392,  0.0910,  0.0328], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.6832e-05,  7.7822e-05,  6.9844e-06, -8.3170e-06, -8.8149e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.4718e-05,  6.5671e-04, -4.3343e-05,  1.4678e-05, -1.3812e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0006,  0.0002,  0.0002,  0.0012,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0218,  0.0369,  0.0315,  0.0739,  0.0267], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0218,  0.0369,  0.0315,  0.0739,  0.0267], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0002, -0.0081,  0.0041,  0.0379, -0.0067], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0028], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([18.7594], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0070, -0.3372,  0.1555,  1.3205, -0.2832], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0070, -0.3372,  0.1555,  1.3205, -0.2832], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.4068,  7.2890, -1.7287, -5.6942, -6.2964], grad_fn=<SliceBackward0>)
  [Layer 46] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 46] Output sample values after mixer: tensor([ 0.4068,  7.2890, -1.7287, -5.6942, -6.2964], grad_fn=<SliceBackward0>)
  [Layer 46] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 46] Residual connection sample values: tensor([ 13.5408,   9.4293, -66.7759,  16.5088,  23.3575],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 47/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([5093.0698], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0140], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0974,  0.0685, -0.4658,  0.1166,  0.1571], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6560,  0.3968, -0.7062, -0.8891,  0.1937], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6560,  0.3968, -0.7062, -0.8891,  0.1937], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0890,  2.0191,  0.7299,  0.6730,  0.2180], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.3744, -0.3872,  2.2582,  0.9314,  2.0351], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0268,  0.2278,  0.2285, -0.0890,  1.6559], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0127, -0.0548,  0.0688, -0.1159,  0.0313], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0298, -0.0797, -0.1506, -0.1193,  0.0365], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0151, -0.0383, -0.0697, -0.0561,  0.0186], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0151, -0.0383, -0.0697, -0.0561,  0.0186], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1929, -0.0283, -0.2249, -0.2573,  0.0603], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.6727,  0.2398, -0.0268, -0.2368,  0.1070], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -3.5522, -11.2450,  -2.6866,  -3.1935,  -3.1998],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0856, 0.0103, 0.0245, 0.0093, 0.0857], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7377, 0.8903, 0.9364, 0.9709, 0.7602], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0151, -0.0383, -0.0697, -0.0561,  0.0186], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.4951e-04, -3.6590e-05, -2.9091e-04, -3.3294e-04,  7.8059e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0007, -0.0002, -0.0016, -0.0010,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0011, -0.0030, -0.0051, -0.0023,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0224, -0.0571, -0.1035, -0.0816,  0.0264], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0224, -0.0571, -0.1035, -0.0816,  0.0264], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0050, -0.0136,  0.0242,  0.0211,  0.0028], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0025], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([19.7666], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2130, -0.3440,  1.0037,  0.9171,  0.1166], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2130, -0.3440,  1.0037,  0.9171,  0.1166], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 6.6208,  8.1563, -3.0264,  7.1602, 12.1279], grad_fn=<SliceBackward0>)
  [Layer 47] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 47] Output sample values after mixer: tensor([ 6.6208,  8.1563, -3.0264,  7.1602, 12.1279], grad_fn=<SliceBackward0>)
  [Layer 47] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 47] Residual connection sample values: tensor([ 20.1616,  17.5856, -69.8023,  23.6689,  35.4855],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 48/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([5881.2588], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0130], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1376,  0.1121, -0.4349,  0.1521,  0.2152], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3836, -1.5551,  0.7901, -0.0129, -0.5505], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3836, -1.5551,  0.7901, -0.0129, -0.5505], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.0177,  1.0138, -0.4314, -0.3939, -0.4314], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.7198, 1.6694, 1.0263, 1.0749, 0.3952], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.7011,  0.0366,  0.3766,  1.0177, -0.0385], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1742,  0.1116, -0.0604, -0.1022,  0.0673], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1793,  0.3316, -0.1463, -0.1685,  0.0649], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0817,  0.1930, -0.0678, -0.0772,  0.0335], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0817,  0.1930, -0.0678, -0.0772,  0.0335], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1002, -0.0105, -0.0040, -0.0263, -0.1151], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1346, -0.2743,  0.0437, -0.2117, -0.0631], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-54.8118, -78.5143, -47.2508,  -2.3308,  -4.2266],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0624, 0.0460, 0.0113, 0.0032, 0.0111], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.0327, 0.0271, 0.5864, 0.9926, 0.9540], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0817,  0.1930, -0.0678, -0.0772,  0.0335], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([5.1045e-04, 5.3243e-05, 2.0451e-05, 1.3402e-04, 5.8611e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([5.1872e-04, 4.9779e-05, 2.3808e-05, 1.3784e-04, 5.9154e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0019,  0.0046, -0.0016, -0.0019,  0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0670,  0.1583, -0.0556, -0.0633,  0.0275], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0670,  0.1583, -0.0556, -0.0633,  0.0275], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0153, -0.0429, -0.0302,  0.0004, -0.0055], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0017], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([24.3980], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.8531, -1.9648, -1.4316,  0.0220, -0.3342], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.8531, -1.9648, -1.4316,  0.0220, -0.3342], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([  1.1033,  -7.2081, -21.8403,  15.1066,  19.0171],
       grad_fn=<SliceBackward0>)
  [Layer 48] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 48] Output sample values after mixer: tensor([  1.1033,  -7.2081, -21.8403,  15.1066,  19.0171],
       grad_fn=<SliceBackward0>)
  [Layer 48] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 48] Residual connection sample values: tensor([ 21.2649,  10.3775, -91.6427,  38.7755,  54.5025],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([6745.6450], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0122], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1442,  0.0779, -0.6331,  0.2732,  0.3661], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Final backbone norm output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Final backbone norm output sample values: tensor([ 0.1442,  0.0779, -0.6331,  0.2732,  0.3661], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Logits shape: torch.Size([1, 1, 50288])
[Mamba2LMHeadModel] Logits sample values: tensor([ 1.8121, -9.7499,  1.4388,  1.8303, -0.7135], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Forward pass input_ids shape: torch.Size([1, 1])
[Mamba2LMHeadModel] input_ids sample values: tensor([5962])
[Mamba2LMHeadModel] Embedding output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Embedding sample values: tensor([-0.2908, -0.0961, -0.2993,  0.0126, -0.3145], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 1/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0284], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([5.9360], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3059, -0.1144, -0.3253,  0.0137, -0.3359], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7498,  1.6029, -0.1193,  0.5636, -1.0024], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7498,  1.6029, -0.1193,  0.5636, -1.0024], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([0.5232, 0.8165, 0.1100, 0.2892, 0.2764], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.5486,  0.3116,  0.0323, -0.0148,  0.4251], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.2065, -0.8398,  0.0913,  0.5232, -0.2824], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0114,  0.0873,  0.0788,  0.1305, -0.2583], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2164,  0.3026,  0.3491,  0.1797, -0.5152], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1198,  0.1741,  0.2047,  0.0979, -0.1927], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1198,  0.1741,  0.2047,  0.0979, -0.1927], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.2171,  0.4307, -0.2775, -0.2770, -0.0164], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0492,  0.6245, -0.2652, -0.1648, -0.1085], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6180, -2.5226, -3.0473, -3.3078, -3.9090], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0157, 0.0185, 0.0094, 0.0241, 0.0111], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9597, 0.9544, 0.9719, 0.9234, 0.9574], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1198,  0.1741,  0.2047,  0.0979, -0.1927], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 4.0832e-04,  8.1003e-04, -5.2198e-04, -5.2101e-04, -3.0809e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0022,  0.0012, -0.0026, -0.0028,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0689,  0.0699,  0.0868,  0.0088, -0.0674], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1147,  0.1363,  0.1649,  0.0461, -0.1409], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1147,  0.1363,  0.1649,  0.0461, -0.1409], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0276,  0.1818, -0.0093,  0.0166,  0.0379], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.3084], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.8006], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0497,  0.3530, -0.0142,  0.0493,  0.0696], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0497,  0.3530, -0.0142,  0.0493,  0.0696], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.3614,  0.5235, -0.1460, -0.5957,  0.2582], grad_fn=<SliceBackward0>)
  [Layer 1] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 1] Output sample values after mixer: tensor([-0.3614,  0.5235, -0.1460, -0.5957,  0.2582], grad_fn=<SliceBackward0>)
  [Layer 1] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 1] Residual connection sample values: tensor([-0.6521,  0.4273, -0.4454, -0.5831, -0.0562], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 2/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2141], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([2.1609], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.5088,  0.2633, -0.3202, -0.4393, -0.0414], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.4347, -0.3890, -1.7394, -2.3141,  0.3551], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.4347, -0.3890, -1.7394, -2.3141,  0.3551], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3517,  0.2878, -0.6931,  4.2897, -0.2193], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9492, 1.5420, 0.8617, 1.2402, 2.5306], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.8205,  1.0774,  0.1298,  0.3517,  0.4378], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0176, -0.2280,  0.0834, -2.6717,  0.0769], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0122, -0.3826,  0.0728, -1.6180,  0.0638], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0060, -0.1551,  0.0377, -0.2677,  0.0329], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0060, -0.1551,  0.0377, -0.2677,  0.0329], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.2520, -0.0351,  0.0396, -0.2562,  0.2280], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.2330, -0.2375, -0.1434, -0.2464, -0.2598], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-19.8515, -18.6852, -13.5640,  -2.4189,  -0.4662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0157, 0.0290, 0.0493, 0.0251, 0.1715], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7327, 0.5812, 0.5126, 0.9412, 0.9232], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0060, -0.1551,  0.0377, -0.2677,  0.0329], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.3866e-05,  3.3242e-06, -3.7490e-06,  2.4270e-05, -2.1596e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0005, -0.0002,  0.0001, -0.0020,  0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0039, -0.0319, -0.0176, -0.0402, -0.0027], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0003, -0.1390,  0.0085, -0.2251,  0.0200], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0003, -0.1390,  0.0085, -0.2251,  0.0200], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 7.0446e-05,  2.1851e-02, -2.2055e-03,  4.6854e-02,  4.1848e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([7.6338], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3619], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 3.2369e-05,  4.7498e-03, -1.0734e-03,  9.2326e-03,  2.0649e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 3.2369e-05,  4.7498e-03, -1.0734e-03,  9.2326e-03,  2.0649e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0294,  0.0210, -0.0163, -0.0717,  0.1267], grad_fn=<SliceBackward0>)
  [Layer 2] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 2] Output sample values after mixer: tensor([-0.0294,  0.0210, -0.0163, -0.0717,  0.1267], grad_fn=<SliceBackward0>)
  [Layer 2] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 2] Residual connection sample values: tensor([-0.6816,  0.4484, -0.4617, -0.6549,  0.0705], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 3/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2477], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([2.0093], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.5426,  0.2791, -0.3293, -0.4806,  0.0556], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5920, -1.4523, -3.2946,  0.2803,  0.1749], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5920, -1.4523, -3.2946,  0.2803,  0.1749], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4298, -0.2453, -0.1981, -0.0230,  0.4697], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.5942, 0.9443, 1.4661, 2.2576, 0.9270], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 2.6809, -2.0852, -0.9024,  0.4298, -1.8550], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2347,  0.3155, -0.2069, -0.4067,  0.1023], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2332,  0.2962, -0.0832, -0.4191,  0.0860], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1301,  0.1698, -0.0399, -0.1663,  0.0448], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1301,  0.1698, -0.0399, -0.1663,  0.0448], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3486,  0.1562, -0.1701,  0.0078, -0.0348], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.4187, -0.1591,  1.1370, -0.0686,  0.6184], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6506, -3.9939, -6.7806, -0.9419, -6.0308], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0406, 0.0516, 0.0577, 0.0610, 0.0539], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9739, 0.8138, 0.6761, 0.9441, 0.7224], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1301,  0.1698, -0.0399, -0.1663,  0.0448], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.8427e-03,  8.2547e-04, -8.9920e-04,  4.1272e-05, -1.8379e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.0942e-03, -1.7658e-05,  3.3806e-03, -6.7243e-04,  1.0023e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0025,  0.1682,  0.1320, -0.0281, -0.0200], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0567,  0.2455,  0.1139, -0.1038,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0567,  0.2455,  0.1139, -0.1038,  0.0004], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.1962e-02, -6.7629e-02, -1.3413e-02, -1.6581e-02,  4.2524e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([10.1210], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3143], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-5.2397e-03, -3.2302e-02, -5.1633e-03, -9.7776e-03,  1.4450e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-5.2397e-03, -3.2302e-02, -5.1633e-03, -9.7776e-03,  1.4450e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0387, -0.0779,  0.0207,  0.0086, -0.0501], grad_fn=<SliceBackward0>)
  [Layer 3] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 3] Output sample values after mixer: tensor([ 0.0387, -0.0779,  0.0207,  0.0086, -0.0501], grad_fn=<SliceBackward0>)
  [Layer 3] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 3] Residual connection sample values: tensor([-0.6428,  0.3705, -0.4410, -0.6463,  0.0204], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 4/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2972], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.8344], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.5504,  0.2403, -0.3336, -0.5056,  0.0175], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.9284,  0.7336, -2.4357,  0.9230, -0.6303], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.9284,  0.7336, -2.4357,  0.9230, -0.6303], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0969,  1.8118, -0.2202,  0.6600, -0.8426], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9175, 2.7622, 1.6040, 1.6752, 0.1155], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0051,  1.1195,  0.6362, -0.0969, -0.2364], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0478,  0.1020,  0.0656, -0.0906,  0.2016], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1216,  0.0668,  0.0174, -0.1064,  0.4946], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0571,  0.0345,  0.0088, -0.0504,  0.3073], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0571,  0.0345,  0.0088, -0.0504,  0.3073], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.6331,  0.0385, -0.1072,  0.0331,  0.6901], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.7349, -0.2755, -0.0343, -0.2780,  0.1514], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.7127,  -1.2862,  -1.4870, -27.0280,  -4.0727],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0153, 0.0375, 0.0095, 0.0172, 0.0424], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9741, 0.9529, 0.9860, 0.6285, 0.8413], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0571,  0.0345,  0.0088, -0.0504,  0.3073], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-5.5297e-04, -3.3627e-05,  9.3628e-05, -2.8895e-05, -6.0268e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.3219e-03, -1.3207e-03, -4.0958e-04, -7.6474e-05, -7.7591e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0048,  0.0350, -0.0211, -0.0275,  0.1607], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0370,  0.0544, -0.0161, -0.0559,  0.3337], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0370,  0.0544, -0.0161, -0.0559,  0.3337], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0097,  0.0270,  0.0032, -0.0369, -0.0731], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([16.6174], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2453], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0050,  0.0089,  0.0016, -0.0157, -0.0185], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0050,  0.0089,  0.0016, -0.0157, -0.0185], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0341, -0.2432,  0.1569,  0.0281,  0.0579], grad_fn=<SliceBackward0>)
  [Layer 4] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 4] Output sample values after mixer: tensor([ 0.0341, -0.2432,  0.1569,  0.0281,  0.0579], grad_fn=<SliceBackward0>)
  [Layer 4] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 4] Residual connection sample values: tensor([-0.6087,  0.1273, -0.2842, -0.6182,  0.0784], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 5/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.4598], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.4747], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.4052,  0.0700, -0.1767, -0.3942,  0.0538], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.7324,  3.7010, -0.7307, -0.8017, -0.2118], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.7324,  3.7010, -0.7307, -0.8017, -0.2118], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.3398,  3.8007,  2.7477,  0.8532, -0.8450], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.0063,  1.0243,  0.9396, -0.3878,  0.6252], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2771, -0.4854, -0.0204, -0.3398, -0.1345], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0231,  0.3023, -0.6310,  0.2105, -0.4191], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0747,  0.2650, -0.7005,  0.1844, -0.4250], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0359,  0.1500, -0.2324,  0.1007, -0.1680], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0359,  0.1500, -0.2324,  0.1007, -0.1680], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0217,  0.0092, -0.1896, -0.0373,  0.0893], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0983,  0.0673,  0.0465,  1.4155,  0.1809], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.5763,  -1.0444,  -0.8388,  -5.6765, -20.4018],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0286, 0.0332, 0.1052, 0.0094, 0.0064], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9559, 0.9660, 0.9156, 0.9478, 0.8783], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0359,  0.1500, -0.2324,  0.1007, -0.1680], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.2320e-05, -9.4225e-06,  1.9476e-04,  3.8296e-05, -9.1719e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0002, -0.0001,  0.0006,  0.0002, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0040,  0.0018, -0.0201, -0.0030, -0.0153], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0233,  0.0824, -0.1450,  0.0511, -0.1056], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0233,  0.0824, -0.1450,  0.0511, -0.1056], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0061,  0.2975,  0.0344, -0.0127,  0.0100], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([5.1164], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4421], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0042,  0.2109,  0.0232, -0.0090,  0.0063], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0042,  0.2109,  0.0232, -0.0090,  0.0063], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3489, -0.0566, -0.0408, -0.0327,  0.1792], grad_fn=<SliceBackward0>)
  [Layer 5] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 5] Output sample values after mixer: tensor([ 0.3489, -0.0566, -0.0408, -0.0327,  0.1792], grad_fn=<SliceBackward0>)
  [Layer 5] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 5] Residual connection sample values: tensor([-0.2598,  0.0707, -0.3250, -0.6509,  0.2575], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 6/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.6450], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.2451], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1425,  0.0300, -0.1583, -0.3276,  0.1433], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 2.4529,  0.2748, -1.7075,  3.6835, -0.5031], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 2.4529,  0.2748, -1.7075,  3.6835, -0.5031], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0595,  0.2324, -2.3874,  1.1490,  0.1522], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.7275, 1.8059, 0.3598, 0.3238, 0.8971], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.3809, -0.9961,  0.4546,  0.0595, -1.1710], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0251,  0.0621, -1.6939, -0.1728, -0.0581], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0093, -0.0102, -1.7560, -0.1107,  0.0116], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0047, -0.0051, -0.2586, -0.0523,  0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0047, -0.0051, -0.2586, -0.0523,  0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0338,  0.0444, -0.2064, -0.0165,  0.2171], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2093, -0.0589, -0.2780,  0.4927,  0.3479], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9866, -8.7747, -3.3046, -2.9913, -3.3435], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0521, 0.0808, 0.1182, 0.0901, 0.0713], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9499, 0.4922, 0.6767, 0.7638, 0.7879], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0047, -0.0051, -0.2586, -0.0523,  0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 8.1930e-06,  1.0757e-05, -5.0035e-05, -3.9986e-06,  5.2626e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0181, -0.0005, -0.0105, -0.0012,  0.0040], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0775, -0.1399, -0.1660,  0.0033, -0.1841], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0785, -0.1410, -0.2220, -0.0081, -0.1828], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0785, -0.1410, -0.2220, -0.0081, -0.1828], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.1774, -0.0220,  0.0582, -0.0290,  0.0347], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([5.9756], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4091], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1394, -0.0081,  0.0204, -0.0132,  0.0111], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1394, -0.0081,  0.0204, -0.0132,  0.0111], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0704,  0.1154, -0.1948, -0.1482,  0.0928], grad_fn=<SliceBackward0>)
  [Layer 6] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 6] Output sample values after mixer: tensor([ 0.0704,  0.1154, -0.1948, -0.1482,  0.0928], grad_fn=<SliceBackward0>)
  [Layer 6] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 6] Residual connection sample values: tensor([-0.1894,  0.1861, -0.5198, -0.7991,  0.3503], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 7/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.7805], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.1319], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0825,  0.0673, -0.2099, -0.3186,  0.1530], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.1760,  0.0975, -1.2726, -0.7975, -1.8164], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.1760,  0.0975, -1.2726, -0.7975, -1.8164], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.7871,  0.1546, -0.0159, -1.2578,  0.0735], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0054, 0.4308, 1.5817, 0.9045, 1.8068], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.8322, -2.4475, -1.9762, -1.7871, -1.0546], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0161, -0.0491,  0.1375, -0.2268, -0.2000], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0842, -0.0245,  0.1367, -0.2204, -0.2036], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0403, -0.0121,  0.0730, -0.0981, -0.0915], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0403, -0.0121,  0.0730, -0.0981, -0.0915], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([0.1451, 0.0168, 0.0212, 0.0295, 0.0130], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1375, -0.0450, -0.0311, -0.1145,  0.0417], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2959, -1.1836, -0.3113, -0.1314, -1.5015], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0470, 0.0092, 0.0122, 0.0367, 0.0065], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9862, 0.9892, 0.9962, 0.9952, 0.9903], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0403, -0.0121,  0.0730, -0.0981, -0.0915], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.7512e-04, -3.1817e-05, -4.0263e-05, -5.5874e-05, -2.4626e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0008,  0.0007, -0.0013,  0.0003, -0.0033], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0005, -0.0019, -0.0008, -0.0008,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-5.5624e-04, -1.9620e-03, -6.1175e-04, -1.0315e-03, -3.3209e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-5.5624e-04, -1.9620e-03, -6.1175e-04, -1.0315e-03, -3.3209e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 1.5423e-04, -1.0026e-04,  1.7035e-04,  2.5547e-04,  8.4369e-06],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0355], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.3103], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 1.0182e-03, -3.6862e-04,  1.4779e-03,  1.5633e-03,  7.0485e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 1.0182e-03, -3.6862e-04,  1.4779e-03,  1.5633e-03,  7.0485e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3688,  0.0821, -0.1653,  0.3167,  0.0985], grad_fn=<SliceBackward0>)
  [Layer 7] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 7] Output sample values after mixer: tensor([ 0.3688,  0.0821, -0.1653,  0.3167,  0.0985], grad_fn=<SliceBackward0>)
  [Layer 7] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 7] Residual connection sample values: tensor([ 0.1794,  0.2682, -0.6851, -0.4823,  0.4488], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 8/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.9788], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.0108], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0935,  0.1094, -0.3327, -0.2331,  0.2328], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.9268, -2.7419, -1.0943, -1.8194, -0.1461], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.9268, -2.7419, -1.0943, -1.8194, -0.1461], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3661,  1.5789,  2.0784, -2.8814, -0.9781], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.1002,  0.4008,  1.2543, -0.5673, -0.0228], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.3310,  0.3357,  0.8001,  0.3661,  0.7061], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0728,  0.0693, -0.2793, -0.1908, -0.1900], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.5356,  0.0383, -0.5940, -0.2424, -0.2461], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.3379,  0.0195, -0.2113, -0.1066, -0.1080], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.3379,  0.0195, -0.2113, -0.1066, -0.1080], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0204,  0.1250,  0.0910, -0.0716, -0.1500], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0461, -0.1576,  0.1684, -0.0490, -0.1382], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.6543, -0.9827, -0.5550, -3.9397, -1.8081], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0299, 0.0800, 0.0385, 0.0137, 0.0094], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8964, 0.9244, 0.9789, 0.9474, 0.9831], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.3379,  0.0195, -0.2113, -0.1066, -0.1080], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0002,  0.0013,  0.0009, -0.0007, -0.0015], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0009,  0.0036,  0.0003, -0.0032, -0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0591, -0.0187, -0.0349, -0.0183, -0.0171], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.3435, -0.0023, -0.2128, -0.1080, -0.1081], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.3435, -0.0023, -0.2128, -0.1080, -0.1081], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0903,  0.0004,  0.0584,  0.0274,  0.0073], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([3.0558], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5721], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0499,  0.0003,  0.0279,  0.0205,  0.0065], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0499,  0.0003,  0.0279,  0.0205,  0.0065], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([0.1681, 0.2266, 0.0584, 0.0026, 0.0685], grad_fn=<SliceBackward0>)
  [Layer 8] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 8] Output sample values after mixer: tensor([0.1681, 0.2266, 0.0584, 0.0026, 0.0685], grad_fn=<SliceBackward0>)
  [Layer 8] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 8] Residual connection sample values: tensor([ 0.3475,  0.4948, -0.6267, -0.4798,  0.5173], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 9/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.0870], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9592], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1583,  0.1842, -0.2626, -0.1930,  0.2327], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.4336, -0.6821, -2.1760, -1.7524, -0.9865], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.4336, -0.6821, -2.1760, -1.7524, -0.9865], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7056,  0.4120,  0.5897, -0.0812, -0.8370], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0617, 0.6601, 2.9310, 0.4167, 0.8442], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0120, -0.0206,  0.3292,  0.7056,  0.6061], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1012,  0.0639, -0.2698, -0.0618, -0.1187], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0938,  0.0386, -0.3565, -0.1357, -0.0937], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0447,  0.0197, -0.1468, -0.0633, -0.0446], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0447,  0.0197, -0.1468, -0.0633, -0.0446], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0210, -0.2714,  0.1476,  0.2655, -0.1424], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1876, -0.2752, -0.2522, -0.2049, -0.2636], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-5.2345, -1.2161, -1.4888, -0.9523, -3.9667], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0289, 0.0713, 0.0864, 0.1874, 0.0362], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8594, 0.9170, 0.8793, 0.8365, 0.8662], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0447,  0.0197, -0.1468, -0.0633, -0.0446], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.7162e-05,  3.5116e-04, -1.9099e-04, -3.4350e-04,  1.8432e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0001, -0.0023,  0.0040,  0.0043, -0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0112,  0.0033, -0.0075,  0.0131,  0.0195], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0494,  0.0300, -0.2065, -0.0726, -0.0410], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0494,  0.0300, -0.2065, -0.0726, -0.0410], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0136, -0.0069,  0.0458,  0.0188,  0.0110], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([2.7232], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6060], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0086, -0.0064,  0.0286,  0.0093,  0.0079], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0086, -0.0064,  0.0286,  0.0093,  0.0079], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0977, -0.1262,  0.1945, -0.2395, -0.0893], grad_fn=<SliceBackward0>)
  [Layer 9] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 9] Output sample values after mixer: tensor([-0.0977, -0.1262,  0.1945, -0.2395, -0.0893], grad_fn=<SliceBackward0>)
  [Layer 9] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 9] Residual connection sample values: tensor([ 0.2498,  0.3686, -0.4322, -0.7193,  0.4280], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 10/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.4648], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8262], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0844,  0.1041, -0.1318, -0.2172,  0.1413], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1430,  1.1486, -0.5567, -0.8148, -1.8748], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1430,  1.1486, -0.5567, -0.8148, -1.8748], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.7617,  2.3397, -0.7235,  1.0838, -0.9310], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.2493, -0.0809,  0.4432, -0.3738,  1.2577], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.1810,  0.3957, -0.5293, -0.7617, -0.4587], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1259, -0.7317, -0.1250, -0.2055, -0.1581], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1642, -0.8187, -0.2288, -0.2913, -0.2177], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0754, -0.2506, -0.1014, -0.1246, -0.0970], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0754, -0.2506, -0.1014, -0.1246, -0.0970], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0852,  0.0961,  0.0555,  0.1052, -0.0661], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2759, -0.0950, -0.0910,  0.0433, -0.1517], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.7155, -1.4068, -0.3534, -2.0102, -0.4653], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0006, 0.0033, 0.1437, 0.0013, 0.0264], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9979, 0.9954, 0.9505, 0.9975, 0.9878], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0754, -0.2506, -0.1014, -0.1246, -0.0970], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.6174e-06, -4.0804e-06, -2.3591e-06, -4.4706e-06,  2.8081e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([8.0474e-06, 5.8581e-05, 2.7078e-05, 1.3602e-05, 2.8488e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-3.7185e-06, -2.2270e-03,  3.0801e-04, -4.6600e-04,  1.8866e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0166, -0.0573, -0.0220, -0.0278, -0.0194], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0166, -0.0573, -0.0220, -0.0278, -0.0194], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0011, -0.0500,  0.0045,  0.0070,  0.0048], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0228], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.6273], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0109, -0.2418,  0.0347,  0.0616,  0.0397], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0109, -0.2418,  0.0347,  0.0616,  0.0397], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0540, -0.3100, -0.5965,  0.0231,  0.1355], grad_fn=<SliceBackward0>)
  [Layer 10] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 10] Output sample values after mixer: tensor([-0.0540, -0.3100, -0.5965,  0.0231,  0.1355], grad_fn=<SliceBackward0>)
  [Layer 10] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 10] Residual connection sample values: tensor([ 0.1957,  0.0586, -1.0287, -0.6962,  0.5635], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 11/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.5827], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7949], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0715,  0.0174, -0.3358, -0.2217,  0.1968], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.6462,  0.2660, -0.7992, -0.6543,  0.5108], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.6462,  0.2660, -0.7992, -0.6543,  0.5108], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5254,  1.1324, -0.5393,  2.0061, -0.2317], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4805, 2.0784, 0.8757, 1.8822, 1.7909], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.3343,  1.5171, -0.0825,  0.5254,  0.2540], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1467, -0.1786,  0.1539, -0.2463, -0.0311], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1609, -0.5363,  0.2505, -0.2341, -0.0079], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0740, -0.1979,  0.1409, -0.1034, -0.0039], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0740, -0.1979,  0.1409, -0.1034, -0.0039], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2190, -0.1604, -0.2699, -0.0862, -0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0500, -0.1319, -0.2767, -0.2420,  0.0263], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.3116, -0.0902, -1.5786, -0.2096, -0.6694], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0751, 0.2274, 0.2668, 0.2522, 0.0439], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9769, 0.9797, 0.6563, 0.9485, 0.9710], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0740, -0.1979,  0.1409, -0.1034, -0.0039], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([1.2171e-03, 8.9191e-04, 1.5003e-03, 4.7945e-04, 9.0629e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0450, -0.0571,  0.0524,  0.0140, -0.0525], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.1077, -0.2000,  0.2046, -0.0661,  0.0133], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1348, -0.2726,  0.2563, -0.1041,  0.0118], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1348, -0.2726,  0.2563, -0.1041,  0.0118], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0572, -0.0410, -0.0635,  0.0233,  0.0038], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([2.6430], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6151], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0432, -0.0304, -0.0334,  0.0399,  0.0021], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0432, -0.0304, -0.0334,  0.0399,  0.0021], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0058,  0.6264, -0.2422,  0.1422,  0.3302], grad_fn=<SliceBackward0>)
  [Layer 11] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 11] Output sample values after mixer: tensor([-0.0058,  0.6264, -0.2422,  0.1422,  0.3302], grad_fn=<SliceBackward0>)
  [Layer 11] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 11] Residual connection sample values: tensor([ 0.1899,  0.6850, -1.2710, -0.5540,  0.8936], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 12/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.9899], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7089], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0556,  0.1665, -0.3251, -0.1408,  0.2507], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.0456, -1.5555, -1.5484, -0.5614, -0.8446], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.0456, -1.5555, -1.5484, -0.5614, -0.8446], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6304, -0.1774, -0.0602, -0.5738, -0.4216], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4938, 1.0200, 1.8998, 0.4751, 1.1764], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2006, -0.1674, -0.3650, -0.6304,  0.1601], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1076,  0.0331, -0.4545, -0.0251, -0.0766], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1506,  0.0460, -0.4893, -0.0548, -0.0640], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0696,  0.0235, -0.1860, -0.0266, -0.0310], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0696,  0.0235, -0.1860, -0.0266, -0.0310], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0543, -0.1538,  0.1563, -0.1304, -0.0401], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1741, -0.1306,  0.1099, -0.0617, -0.0343], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2412, -0.7694, -1.9975, -1.2368, -1.0181], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1762, 0.1770, 0.1678, 0.1454, 0.2327], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8036, 0.8727, 0.7152, 0.8355, 0.7890], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0696,  0.0235, -0.1860, -0.0266, -0.0310], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0007,  0.0019, -0.0019,  0.0016,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0036,  0.0065, -0.0179,  0.0035, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0218, -0.0345,  0.0808, -0.0151, -0.0104], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0719, -0.0175, -0.0530, -0.0343, -0.0327], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0719, -0.0175, -0.0530, -0.0343, -0.0327], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0557,  0.0048,  0.0144,  0.0070,  0.0083], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.5007], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.4132], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1411,  0.0079,  0.0182,  0.0101,  0.0172], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1411,  0.0079,  0.0182,  0.0101,  0.0172], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.1835, -0.0310,  1.0982, -0.3102,  0.9422], grad_fn=<SliceBackward0>)
  [Layer 12] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 12] Output sample values after mixer: tensor([-1.1835, -0.0310,  1.0982, -0.3102,  0.9422], grad_fn=<SliceBackward0>)
  [Layer 12] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 12] Residual connection sample values: tensor([-0.9936,  0.6541, -0.1728, -0.8642,  1.8358], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 13/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.8101], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5965], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2398,  0.1366, -0.0385, -0.1811,  0.4497], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-3.3810, -0.0097,  1.8775,  2.1459, -0.4664], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-3.3810, -0.0097,  1.8775,  2.1459, -0.4664], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.7110,  0.1081, -3.3634,  0.1007, -0.3752], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.1876, 1.3305, 1.1852, 0.3638, 2.4866], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5842,  0.8053, -0.2960, -1.7110,  0.1061], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0037,  0.2822,  0.1726, -0.1041, -0.0482], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2610,  0.1722,  0.1521, -0.1049, -0.0721], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1136,  0.0935,  0.0818, -0.0497, -0.0348], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1136,  0.0935,  0.0818, -0.0497, -0.0348], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0636,  0.1470, -0.1853,  0.5266,  0.1007], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.7291,  0.0096, -0.0105,  0.4282,  0.0097], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3103, -1.7871, -0.8606, -1.8811, -0.5252], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0825, 0.0364, 0.1203, 0.0665, 0.1934], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8975, 0.9370, 0.9017, 0.8824, 0.9034], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1136,  0.0935,  0.0818, -0.0497, -0.0348], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0006, -0.0014,  0.0017, -0.0049, -0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.5160e-03, -5.6773e-03, -5.5772e-04, -3.7057e-02, -2.5773e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0899,  0.0663, -0.0109, -0.0127,  0.0498], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0948,  0.0703, -0.0073, -0.0148,  0.0483], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0948,  0.0703, -0.0073, -0.0148,  0.0483], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0105, -0.0003, -0.0120, -0.0285, -0.0087], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1870], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([2.3126], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0331, -0.0004, -0.0508, -0.1376, -0.0160], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0331, -0.0004, -0.0508, -0.1376, -0.0160], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0398, -0.0230, -0.0556,  0.1564, -0.0028], grad_fn=<SliceBackward0>)
  [Layer 13] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 13] Output sample values after mixer: tensor([-0.0398, -0.0230, -0.0556,  0.1564, -0.0028], grad_fn=<SliceBackward0>)
  [Layer 13] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 13] Residual connection sample values: tensor([-1.0335,  0.6310, -0.2284, -0.7078,  1.8330], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 14/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3.7591], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5158], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1861,  0.0998, -0.0381, -0.1110,  0.3222], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.8832, -0.3132, -0.5038, -1.2255, -0.4050], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.8832, -0.3132, -0.5038, -1.2255, -0.4050], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.5263,  0.6927,  0.4241, -0.1535,  0.2838], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.4742, 0.9755, 1.0058, 0.8192, 1.2261], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5885, -0.0466, -0.7872, -1.5263, -0.6542], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3767, -0.1299, -0.2081, -0.0546, -0.0328], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.4163, -0.1711, -0.2689, -0.1174,  0.0038], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1654, -0.0783, -0.1165, -0.0553,  0.0019], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1654, -0.0783, -0.1165, -0.0553,  0.0019], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0872, -0.0671,  0.0728,  0.0083, -0.0046], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1859, -0.1353,  0.0812, -0.0224, -0.2056], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.3184, -0.7621, -2.6670, -5.1836, -2.8487], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0628, 0.0316, 0.2083, 0.0371, 0.0466], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7626, 0.9762, 0.5738, 0.8249, 0.8758], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1654, -0.0783, -0.1165, -0.0553,  0.0019], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 9.0500e-04,  6.9701e-04, -7.5610e-04, -8.5933e-05,  4.7869e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0014,  0.0006, -0.0002,  0.0010,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0165, -0.0006, -0.0146, -0.0055, -0.0033], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0834, -0.0322, -0.0617, -0.0278, -0.0026], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0834, -0.0322, -0.0617, -0.0278, -0.0026], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.1363,  0.0043,  0.0117,  0.0077,  0.0004], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0340], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.4221], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.8054,  0.0147,  0.0584,  0.0543,  0.0034], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.8054,  0.0147,  0.0584,  0.0543,  0.0034], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3819, -0.2767,  0.3009,  0.5625,  0.5650], grad_fn=<SliceBackward0>)
  [Layer 14] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 14] Output sample values after mixer: tensor([ 0.3819, -0.2767,  0.3009,  0.5625,  0.5650], grad_fn=<SliceBackward0>)
  [Layer 14] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 14] Residual connection sample values: tensor([-0.6515,  0.3543,  0.0725, -0.1453,  2.3980], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 15/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([5.4861], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4269], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0974,  0.0451,  0.0100, -0.0187,  0.3437], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0395,  1.2126, -0.2035, -0.6188, -0.8138], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0395,  1.2126, -0.2035, -0.6188, -0.8138], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6432, -1.2350, -0.2848,  1.5618,  0.3135], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.1949,  0.0166,  1.1430,  1.0441, -0.4023], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6377, -0.4717,  0.1967, -0.6432, -0.4223], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0650,  0.2623, -0.0213, -0.3250, -0.0352], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0275,  0.2555, -0.0460, -0.3428, -0.0605], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0139,  0.1440, -0.0225, -0.1423, -0.0293], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0139,  0.1440, -0.0225, -0.1423, -0.0293], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0472, -0.0152,  0.0330,  0.0627,  0.0498], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0760, -0.0420, -0.0192, -0.0022,  0.0210], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2782, -0.6808, -2.7209, -0.1126, -3.8484], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0016, 0.0161, 0.0467, 0.0162, 0.0155], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9996, 0.9891, 0.8807, 0.9982, 0.9419], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0139,  0.1440, -0.0225, -0.1423, -0.0293], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.0481e-06, -3.3815e-07,  7.3366e-07,  1.3927e-06,  1.1072e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-7.3582e-05, -9.7094e-06, -2.2725e-05, -7.9406e-06,  2.9983e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-5.8322e-06,  1.4842e-05, -4.6791e-06, -2.6663e-05, -4.2198e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0024,  0.0246, -0.0038, -0.0243, -0.0050], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0024,  0.0246, -0.0038, -0.0243, -0.0050], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-4.5857e-05,  2.2948e-02,  3.5088e-04,  5.2591e-03,  1.2510e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0029], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([18.5639], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0009,  0.5762,  0.0068,  0.1184,  0.0207], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0009,  0.5762,  0.0068,  0.1184,  0.0207], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1651,  1.2468,  0.7212,  0.2779,  0.8839], grad_fn=<SliceBackward0>)
  [Layer 15] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 15] Output sample values after mixer: tensor([-0.1651,  1.2468,  0.7212,  0.2779,  0.8839], grad_fn=<SliceBackward0>)
  [Layer 15] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 15] Residual connection sample values: tensor([-0.8166,  1.6011,  0.7936,  0.1326,  3.2819], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 16/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([6.6891], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3866], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1232,  0.2019,  0.1097,  0.0168,  0.4755], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.3017, -0.0860, -0.4422,  0.8328, -0.4826], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.3017, -0.0860, -0.4422,  0.8328, -0.4826], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.6345, -0.5997, -0.0350,  1.3553, -0.4714], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.6299, 1.5198, 1.3506, 1.3805, 1.3280], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0093,  0.9899,  0.8946,  1.6345, -0.8986], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.4395, -0.0661,  0.0066,  0.2766, -0.1617], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.4033, -0.1072, -0.0065,  0.1842, -0.2038], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.2418, -0.0507, -0.0033,  0.1006, -0.0916], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.2418, -0.0507, -0.0033,  0.1006, -0.0916], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1305, -0.1690,  0.0651, -0.0132,  0.0880], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2724,  0.1733, -0.1792,  0.9147, -0.1408], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6906, -0.1348, -1.3129, -3.7740, -1.2635], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1047, 0.2784, 0.1764, 0.2647, 0.0853], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7546, 0.9632, 0.7933, 0.3682, 0.8978], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.2418, -0.0507, -0.0033,  0.1006, -0.0916], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0033, -0.0043,  0.0016, -0.0003,  0.0022], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0039, -0.0030,  0.0023, -0.0015,  0.0095], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0370, -0.0370, -0.0020, -0.0123, -0.0281], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1926, -0.0697, -0.0041,  0.0525, -0.0871], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1926, -0.0697, -0.0041,  0.0525, -0.0871], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0536,  0.0029,  0.0007,  0.0305,  0.0160], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1042], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.0982], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2135,  0.0090,  0.0027,  0.1016,  0.0550], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2135,  0.0090,  0.0027,  0.1016,  0.0550], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.5318,  0.0236,  0.6866,  0.0315, -0.1377], grad_fn=<SliceBackward0>)
  [Layer 16] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 16] Output sample values after mixer: tensor([ 0.5318,  0.0236,  0.6866,  0.0315, -0.1377], grad_fn=<SliceBackward0>)
  [Layer 16] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 16] Residual connection sample values: tensor([-0.2848,  1.6247,  1.4803,  0.1642,  3.1442], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 17/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([8.9085], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3350], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0369,  0.1769,  0.1708,  0.0175,  0.3920], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1959, -0.6148, -0.1763, -1.3844, -0.8503], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1959, -0.6148, -0.1763, -1.3844, -0.8503], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.2433, -0.1995,  0.4821, -0.5668,  0.3040], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.6443, -0.0713,  1.4431,  1.5094,  0.8589], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6557, -0.9301, -1.2048, -1.2433, -0.4453], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2671,  0.0407, -0.1236,  0.0955, -0.0531], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2989,  0.0145, -0.1380,  0.0901, -0.0405], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1273,  0.0073, -0.0642,  0.0471, -0.0198], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1273,  0.0073, -0.0642,  0.0471, -0.0198], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1744,  0.1329,  0.2180,  0.1541, -0.2073], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1412,  0.0191,  0.0214,  0.2783,  0.1233], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.1571, -11.4668, -14.2150,  -0.1286, -14.2428],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0003, 0.0096, 0.0884, 0.0954, 0.0166], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9997, 0.8962, 0.2845, 0.9878, 0.7895], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1273,  0.0073, -0.0642,  0.0471, -0.0198], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.9852e-06, -4.5618e-06, -7.4814e-06, -5.2874e-06,  7.1116e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-7.4264e-05,  8.5353e-05,  1.0144e-04, -2.5738e-04,  9.0375e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.9151e-04, -7.4860e-06, -2.2325e-04,  3.4310e-05,  7.1464e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0823,  0.0047, -0.0417,  0.0304, -0.0127], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0823,  0.0047, -0.0417,  0.0304, -0.0127], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0088, -0.0010,  0.0033, -0.0084,  0.0032], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0403], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.9799], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0684, -0.0096,  0.0240, -0.0736,  0.0284], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0684, -0.0096,  0.0240, -0.0736,  0.0284], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.3554, -0.8684, -0.5723,  0.1314,  0.1922], grad_fn=<SliceBackward0>)
  [Layer 17] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 17] Output sample values after mixer: tensor([-0.3554, -0.8684, -0.5723,  0.1314,  0.1922], grad_fn=<SliceBackward0>)
  [Layer 17] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 17] Residual connection sample values: tensor([-0.6402,  0.7563,  0.9080,  0.2956,  3.3364], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 18/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([10.1171], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3144], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0697,  0.0696,  0.0884,  0.0270,  0.3490], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4125, -0.0764, -0.1284, -0.7879,  0.6038], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4125, -0.0764, -0.1284, -0.7879,  0.6038], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.9927,  0.2088, -0.2928, -0.7085, -0.8165], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9808, 1.1298, 0.6778, 1.2399, 1.9392], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.3766, -0.5444,  0.0838,  0.9927,  0.8191], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2325, -0.1061, -0.0139, -0.2628, -0.1465], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2225, -0.3715,  0.2659, -0.2766, -0.1886], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1236, -0.1516,  0.1505, -0.1193, -0.0854], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1236, -0.1516,  0.1505, -0.1193, -0.0854], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([0.2076, 0.1551, 0.2279, 0.1014, 0.2153], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2778, -0.0228, -0.0457,  0.1889,  0.0114], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3011, -1.4686, -1.2083, -1.2129, -2.5875], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2372, 0.1601, 0.1399, 0.2358, 0.2657], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7345, 0.7905, 0.8445, 0.7513, 0.5029], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1236, -0.1516,  0.1505, -0.1193, -0.0854], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([0.0061, 0.0045, 0.0067, 0.0030, 0.0063], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 4.7365e-03,  6.8144e-03,  1.0430e-02, -1.8623e-05,  2.1210e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0074, -0.0949,  0.1488, -0.0761, -0.0462], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0165, -0.1242,  0.1778, -0.0991, -0.0627], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0165, -0.1242,  0.1778, -0.0991, -0.0627], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0027,  0.0046, -0.0107,  0.0244, -0.0245], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0410], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.9406], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0175,  0.0121, -0.0515,  0.1515, -0.2389], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0175,  0.0121, -0.0515,  0.1515, -0.2389], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.3172,  0.4962,  0.8499,  0.0882, -0.8395], grad_fn=<SliceBackward0>)
  [Layer 18] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 18] Output sample values after mixer: tensor([-0.3172,  0.4962,  0.8499,  0.0882, -0.8395], grad_fn=<SliceBackward0>)
  [Layer 18] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 18] Residual connection sample values: tensor([-0.9575,  1.2525,  1.7578,  0.3838,  2.4969], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 19/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([13.0809], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2765], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0903,  0.1020,  0.1547,  0.0311,  0.2350], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.4577, -0.6439,  0.6719, -0.7895, -0.9028], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.4577, -0.6439,  0.6719, -0.7895, -0.9028], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6589, -0.6664,  0.2510, -0.4687, -0.2559], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.6940, 1.0949, 1.3050, 0.8789, 0.7552], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.7602, -1.4180, -1.0871, -0.6589, -0.3483], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3500, -0.1948,  0.0629, -0.0634,  0.0514], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3857, -0.2191,  0.0579, -0.1060,  0.0185], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1561, -0.0976,  0.0298, -0.0502,  0.0093], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1561, -0.0976,  0.0298, -0.0502,  0.0093], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0077,  0.9317, -0.0220, -0.0249, -0.0343], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2518, -0.0630, -0.0485, -0.1800, -0.1118], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9436, -1.8179, -2.0862, -1.0006, -0.9650], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1062, 0.0837, 0.0827, 0.1192, 0.1476], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8135, 0.8588, 0.8415, 0.8875, 0.8673], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1561, -0.0976,  0.0298, -0.0502,  0.0093], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0001, -0.0154,  0.0004,  0.0004,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0020, -0.0248,  0.0002, -0.0002,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0080, -0.0122, -0.0066,  0.0057,  0.0051], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-2.5576e-02, -2.3178e-02, -3.2466e-03,  2.5081e-05,  6.1213e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-2.5576e-02, -2.3178e-02, -3.2466e-03,  2.5081e-05,  6.1213e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 7.0395e-03,  5.1395e-03, -1.4439e-03, -6.1835e-06, -1.5942e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0028], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([18.9349], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 1.6115e-01,  1.2364e-01, -4.4562e-02, -1.3961e-04, -5.1204e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 1.6115e-01,  1.2364e-01, -4.4562e-02, -1.3961e-04, -5.1204e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.1227, -0.2840, -1.3767,  0.1781, -0.8496], grad_fn=<SliceBackward0>)
  [Layer 19] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 19] Output sample values after mixer: tensor([ 1.1227, -0.2840, -1.3767,  0.1781, -0.8496], grad_fn=<SliceBackward0>)
  [Layer 19] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 19] Residual connection sample values: tensor([0.1652, 0.9685, 0.3812, 0.5619, 1.6473], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 20/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([16.9823], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2427], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.0155, 0.0779, 0.0328, 0.0447, 0.1498], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1934, -0.9206, -0.8996,  0.5643,  0.9348], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1934, -0.9206, -0.8996,  0.5643,  0.9348], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.4845,  1.1289, -1.6290,  1.3919,  0.7303], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4020, 1.7526, 1.7439, 1.1152, 1.2821], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1798, -0.4117, -0.9065, -0.4845,  0.9004], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1983,  0.2486, -0.0152, -0.1479,  0.4950], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1598,  0.2571,  0.0513, -0.1667,  0.4676], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0863,  0.1450,  0.0263, -0.0764,  0.2875], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0863,  0.1450,  0.0263, -0.0764,  0.2875], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1318,  0.1635,  0.0180, -0.0130,  0.2105], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1120, -0.2091, -0.2014,  0.0072,  0.6441], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.6216, -5.0389, -1.2056, -1.6435, -1.3345], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1138, 0.0638, 0.0490, 0.1343, 0.1049], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8315, 0.7251, 0.9426, 0.8019, 0.8694], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0863,  0.1450,  0.0263, -0.0764,  0.2875], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0013,  0.0016,  0.0002, -0.0001,  0.0021], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-4.4068e-03, -3.6676e-05,  3.1975e-03,  2.6862e-03,  4.0829e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0175,  0.0286,  0.0022, -0.0132,  0.0447], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0182,  0.0298,  0.0024, -0.0138,  0.0470], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0182,  0.0298,  0.0024, -0.0138,  0.0470], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0019, -0.0078, -0.0006, -0.0050,  0.0315], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0078], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([11.3060], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0291, -0.1259, -0.0134, -0.0815,  0.4613], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0291, -0.1259, -0.0134, -0.0815,  0.4613], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.9376,  0.0178,  0.1663, -0.8246,  0.3619], grad_fn=<SliceBackward0>)
  [Layer 20] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 20] Output sample values after mixer: tensor([-0.9376,  0.0178,  0.1663, -0.8246,  0.3619], grad_fn=<SliceBackward0>)
  [Layer 20] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 20] Residual connection sample values: tensor([-0.7724,  0.9863,  0.5474, -0.2627,  2.0092], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 21/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([22.3822], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2114], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0479,  0.0555,  0.0292, -0.0135,  0.1164], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3073, -0.4031, -0.2958, -0.0740,  0.2831], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3073, -0.4031, -0.2958, -0.0740,  0.2831], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0838,  1.4521,  0.3883, -0.2106,  0.0786], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9114, 2.0221, 0.7488, 1.7731, 3.1596], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5403,  0.1052,  0.6582, -0.0838,  0.4850], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0257,  0.2610, -0.0478,  0.0578, -0.0172], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0056,  0.2309, -0.0330,  0.0527,  0.0107], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0028,  0.1287, -0.0162,  0.0271,  0.0054], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0028,  0.1287, -0.0162,  0.0271,  0.0054], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0515, -0.0417, -0.0335,  0.0265,  0.0359], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0127, -0.0528,  0.1117,  0.0529,  0.0592], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.2092, -0.0434, -3.8147, -6.6624, -0.0228], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1392, 0.0316, 0.0626, 0.1345, 0.1703], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6396, 0.9986, 0.7876, 0.4080, 0.9961], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0028,  0.1287, -0.0162,  0.0271,  0.0054], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.0039e-05,  1.6239e-05,  1.3042e-05, -1.0308e-05, -1.3962e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.9861e-04,  1.3271e-05,  2.0755e-04, -1.9067e-04, -2.8112e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-9.4034e-06,  1.4294e-03,  2.5606e-04,  6.5726e-04,  1.3095e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0005,  0.0240, -0.0026,  0.0054,  0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0005,  0.0240, -0.0026,  0.0054,  0.0011], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 6.5140e-05, -3.8796e-03,  3.2686e-04, -1.9281e-04,  1.7343e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([69.8084], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0058, -0.3150,  0.0353, -0.0175,  0.0142], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0058, -0.3150,  0.0353, -0.0175,  0.0142], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.5200,  0.1894,  0.8343,  0.2675,  0.6353], grad_fn=<SliceBackward0>)
  [Layer 21] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 21] Output sample values after mixer: tensor([-0.5200,  0.1894,  0.8343,  0.2675,  0.6353], grad_fn=<SliceBackward0>)
  [Layer 21] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 21] Residual connection sample values: tensor([-1.2924,  1.1756,  1.3817,  0.0048,  2.6445], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 22/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([26.5945], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1939], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1156,  0.0886,  0.1103,  0.0004,  0.2217], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3712, -0.6976,  0.5797, -0.2978, -0.3486], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3712, -0.6976,  0.5797, -0.2978, -0.3486], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0427, -0.3865, -0.3823,  0.0813, -1.2927], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3407, 1.4138, 1.3445, 0.7646, 2.2863], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.7527, -0.0208, -0.6229,  0.0427,  0.7318], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2789, -0.0849, -0.0564,  0.0170, -0.4185], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3266, -0.1637,  0.2629, -0.0240, -0.4842], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1369, -0.0751,  0.1486, -0.0119, -0.1846], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1369, -0.0751,  0.1486, -0.0119, -0.1846], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0669, -0.0535, -0.0485, -0.2457,  0.0078], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0413,  0.0215, -0.0767, -0.0501, -0.0943], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.1489, -3.5006, -2.8321, -5.5396, -1.7186], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0051, 0.1570, 0.2205, 0.0963, 0.0278], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9792, 0.5771, 0.5356, 0.5867, 0.9534], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1369, -0.0751,  0.1486, -0.0119, -0.1846], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.6475e-05,  3.7206e-05,  3.3673e-05,  1.7073e-04, -5.4087e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([2.9089e-05, 3.2527e-05, 1.0967e-05, 3.1135e-05, 6.6191e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0024,  0.0009,  0.0028,  0.0007, -0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0355, -0.0173,  0.0388, -0.0022, -0.0459], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0355, -0.0173,  0.0388, -0.0022, -0.0459], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0078,  0.0040,  0.0144,  0.0003,  0.0066], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0025], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([19.8691], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0516,  0.0747,  0.1532,  0.0073,  0.1135], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0516,  0.0747,  0.1532,  0.0073,  0.1135], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.8594, -0.6939,  0.2246, -1.2858,  0.8132], grad_fn=<SliceBackward0>)
  [Layer 22] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 22] Output sample values after mixer: tensor([-0.8594, -0.6939,  0.2246, -1.2858,  0.8132], grad_fn=<SliceBackward0>)
  [Layer 22] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 22] Residual connection sample values: tensor([-2.1518,  0.4817,  1.6063, -1.2810,  3.4577], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 23/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([34.2411], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1709], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1190,  0.0229,  0.0813, -0.0612,  0.1852], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0813, -0.3954, -0.1526,  0.4550, -0.0357], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0813, -0.3954, -0.1526,  0.4550, -0.0357], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.0936,  1.0027, -0.5728,  0.2611, -0.5401], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.0350,  1.0354,  1.6279, -0.2573,  0.6342], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.3046, -1.1897, -0.7503, -1.0936, -0.0472], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3723, -0.6508, -0.1802,  0.0673,  0.2039], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3947, -0.6839, -0.1916,  0.0651,  0.1545], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1589, -0.2294, -0.0866,  0.0336,  0.0832], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1589, -0.2294, -0.0866,  0.0336,  0.0832], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0366,  0.0147,  0.1998,  0.0218, -0.0316], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0397, -0.0668,  0.1498, -0.0481, -0.0353], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0811, -3.7998, -0.0826, -0.4878, -1.4532], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0330, 0.1169, 0.0518, 0.0011, 0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9973, 0.6414, 0.9957, 0.9995, 0.9972], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1589, -0.2294, -0.0866,  0.0336,  0.0832], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.9173e-04, -7.7163e-05, -1.0477e-03, -1.1442e-04,  1.6547e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0002,  0.0005, -0.0032, -0.0001,  0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0057, -0.0055,  0.0019, -0.0010,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0023, -0.0006,  0.0038, -0.0017, -0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0023, -0.0006,  0.0038, -0.0017, -0.0012], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 8.9296e-05,  1.0177e-04, -2.6430e-04, -4.7827e-04,  2.1218e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0004], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([47.7625], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0190,  0.0027, -0.0125, -0.0364,  0.0047], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0190,  0.0027, -0.0125, -0.0364,  0.0047], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.6428,  1.1700, -1.1381, -0.4081,  0.1931], grad_fn=<SliceBackward0>)
  [Layer 23] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 23] Output sample values after mixer: tensor([ 0.6428,  1.1700, -1.1381, -0.4081,  0.1931], grad_fn=<SliceBackward0>)
  [Layer 23] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 23] Residual connection sample values: tensor([-1.5090,  1.6518,  0.4682, -1.6891,  3.6508], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 24/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([42.6639], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1531], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0615,  0.0642,  0.0176, -0.0612,  0.1442], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.6314, -0.5980,  0.6198, -0.0406, -0.0828], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.6314, -0.5980,  0.6198, -0.0406, -0.0828], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0558,  0.0831,  0.1190, -0.4577, -0.2302], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.6935, 0.4147, 0.4596, 1.5550, 1.1323], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.7061,  0.0015, -0.5737, -0.0558,  0.5487], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0049,  0.0442,  0.0127, -0.0844, -0.0875], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0083,  0.0442,  0.0088, -0.0860, -0.0923], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0041,  0.0226,  0.0044, -0.0411, -0.0440], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0041,  0.0226,  0.0044, -0.0411, -0.0440], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0181,  0.0699,  0.0111, -0.0447, -0.0317], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2025, -0.2745, -0.1838, -0.0277,  0.2143], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0742, -3.4497, -3.2885, -0.1609, -2.6945], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0785, 0.0437, 0.0714, 0.0215, 0.0656], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9942, 0.8601, 0.7906, 0.9965, 0.8381], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0041,  0.0226,  0.0044, -0.0411, -0.0440], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-5.8602e-06, -2.2591e-05, -3.5775e-06,  1.4436e-05,  1.0231e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([1.2618e-04, 5.2894e-04, 9.9757e-05, 4.7971e-05, 6.8420e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0005, -0.0004,  0.0002, -0.0014, -0.0022], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0005, -0.0005,  0.0002, -0.0011, -0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0005, -0.0005,  0.0002, -0.0011, -0.0020], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.9310e-04,  1.0869e-04,  6.8942e-05,  2.2514e-05,  7.9865e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0001], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([81.6503], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0149,  0.0119,  0.0068,  0.0081,  0.0170], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0149,  0.0119,  0.0068,  0.0081,  0.0170], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.4492,  0.1977,  0.8761,  0.0111, -1.0215], grad_fn=<SliceBackward0>)
  [Layer 24] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 24] Output sample values after mixer: tensor([-0.4492,  0.1977,  0.8761,  0.0111, -1.0215], grad_fn=<SliceBackward0>)
  [Layer 24] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 24] Residual connection sample values: tensor([-1.9582,  1.8494,  1.3443, -1.6780,  2.6293], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 25/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([53.3848], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1369], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0799,  0.0690,  0.0518, -0.0604,  0.1061], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3646, -0.2782,  1.1049, -0.1097, -0.1278], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3646, -0.2782,  1.1049, -0.1097, -0.1278], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0611, -0.2249, -1.1926, -0.0769, -0.9308], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.1297, -1.2214,  1.0834,  1.3767,  0.0918], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.8191, -1.5078, -0.5971,  0.0611, -0.1146], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1786, -0.1404,  0.0761,  0.0109,  0.0348], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1761, -0.1686,  0.0647,  0.0718,  0.0290], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0958, -0.0772,  0.0334,  0.0372,  0.0147], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0958, -0.0772,  0.0334,  0.0372,  0.0147], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([0.0489, 0.0351, 0.0195, 0.0142, 0.0292], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0064,  0.0666,  0.0107, -0.0978, -0.1365], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -0.3702,  -1.5045,  -5.7210,  -0.8176, -14.6662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3751, 0.0019, 0.0755, 0.0276, 0.0357], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8704, 0.9972, 0.6492, 0.9777, 0.5923], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0958, -0.0772,  0.0334,  0.0372,  0.0147], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([0.0018, 0.0013, 0.0007, 0.0005, 0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0063, -0.0033, -0.0008,  0.0018,  0.0021], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0026, -0.0003,  0.0043,  0.0004,  0.0061], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0016, -0.0011,  0.0047,  0.0008,  0.0063], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0016, -0.0011,  0.0047,  0.0008,  0.0063], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-3.3576e-04,  1.3234e-04,  3.8937e-03, -4.2247e-05, -3.7585e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([76.7599], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0309,  0.0083,  0.3946, -0.0026, -0.0498], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0309,  0.0083,  0.3946, -0.0026, -0.0498], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1583, -0.7480, -1.0874,  1.6217, -0.2284], grad_fn=<SliceBackward0>)
  [Layer 25] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 25] Output sample values after mixer: tensor([-0.1583, -0.7480, -1.0874,  1.6217, -0.2284], grad_fn=<SliceBackward0>)
  [Layer 25] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 25] Residual connection sample values: tensor([-2.1165,  1.1014,  0.2569, -0.0563,  2.4010], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 26/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([68.0079], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1213], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0990,  0.0477,  0.0112, -0.0024,  0.1098], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.2781, -0.0463, -0.2101,  0.3880, -0.5011], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.2781, -0.0463, -0.2101,  0.3880, -0.5011], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.8584, -0.4517,  0.1567, -0.7069, -0.1333], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.2771, 1.1029, 1.2693, 1.1628, 2.2095], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.3083,  0.8974,  1.1813,  0.8584, -0.3545], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2249,  0.1298,  0.0477,  0.1056,  0.1054], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3134,  0.0737,  0.1119,  0.0787,  0.1135], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1324,  0.0382,  0.0591,  0.0409,  0.0600], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1324,  0.0382,  0.0591,  0.0409,  0.0600], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0463,  0.0107,  0.0333, -0.0006,  0.0679], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1808,  0.0150,  0.1308,  0.2578,  0.1496], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9595, -0.3945, -0.8420, -1.4275, -0.1466], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1903, 0.2987, 0.2068, 0.3098, 0.0957], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8332, 0.8888, 0.8402, 0.6426, 0.9861], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1324,  0.0382,  0.0591,  0.0409,  0.0600], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.1665e-03, -2.6955e-04, -8.3970e-04,  1.4467e-05, -1.7094e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0013, -0.0014, -0.0033,  0.0015, -0.0026], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0107,  0.0120,  0.0072, -0.0020,  0.0154], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0276,  0.0168,  0.0147,  0.0032,  0.0230], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0276,  0.0168,  0.0147,  0.0032,  0.0230], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0276, -0.0004, -0.0014,  0.0007, -0.0044], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0012], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([28.9090], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.3988, -0.0122, -0.0378,  0.0309, -0.1580], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.3988, -0.0122, -0.0378,  0.0309, -0.1580], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.6679, -0.1400,  0.8025,  1.6108,  1.4216], grad_fn=<SliceBackward0>)
  [Layer 26] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 26] Output sample values after mixer: tensor([-0.6679, -0.1400,  0.8025,  1.6108,  1.4216], grad_fn=<SliceBackward0>)
  [Layer 26] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 26] Residual connection sample values: tensor([-2.7844,  0.9615,  1.0594,  1.5545,  3.8225], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 27/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([80.9149], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1112], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1295,  0.0408,  0.0482,  0.0650,  0.1850], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6404, -0.2293, -0.3886, -0.1948,  1.4145], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6404, -0.2293, -0.3886, -0.1948,  1.4145], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.3111, -0.0791,  0.0057, -0.0495,  0.6838], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0650, 1.1164, 1.0471, 1.5373, 1.5864], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.3896, -1.2518, -1.3850, -0.3111,  0.2959], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2605, -0.2240,  0.0011, -0.2586,  0.0949], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2865, -0.2605, -0.0089, -0.4605,  0.0651], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1229, -0.1134, -0.0044, -0.1782,  0.0336], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1229, -0.1134, -0.0044, -0.1782,  0.0336], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0140, -0.0744, -0.1649, -0.0370, -0.0200], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0937, -0.2573, -0.1241,  0.1787, -0.2215], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3662, -1.3799, -1.8268, -2.0409, -2.3490], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1180, 0.1372, 0.1329, 0.0756, 0.2033], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8511, 0.8275, 0.7844, 0.8571, 0.6203], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1229, -0.1134, -0.0044, -0.1782,  0.0336], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([0.0002, 0.0011, 0.0024, 0.0005, 0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0020,  0.0025,  0.0046, -0.0028,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0183, -0.0154,  0.0011, -0.0539, -0.0041], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0307, -0.0269,  0.0007, -0.0719, -0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0307, -0.0269,  0.0007, -0.0719, -0.0007], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0068,  0.0027, -0.0001,  0.0063, -0.0008], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0057], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.2640], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1523,  0.0445, -0.0030,  0.1604, -0.0120], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1523,  0.0445, -0.0030,  0.1604, -0.0120], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.8998,  1.1390,  0.1226,  1.8637, -1.4115], grad_fn=<SliceBackward0>)
  [Layer 27] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 27] Output sample values after mixer: tensor([-0.8998,  1.1390,  0.1226,  1.8637, -1.4115], grad_fn=<SliceBackward0>)
  [Layer 27] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 27] Residual connection sample values: tensor([-3.6842,  2.1005,  1.1820,  3.4181,  2.4110], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 28/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([98.6154], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1007], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1506,  0.0804,  0.0457,  0.1284,  0.0976], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7042, -0.0803,  0.2088, -0.2501, -0.0684], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7042, -0.0803,  0.2088, -0.2501, -0.0684], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.1666, -1.2985, -0.4265, -0.8168, -0.1138], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3930, 0.7234, 1.4701, 1.6108, 1.8547], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5632, -0.0207, -1.4833, -1.1666, -0.7451], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0993,  0.3898, -0.1018, -0.1543, -0.0471], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0416,  0.3784, -0.1155, -0.1657,  0.0576], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0212,  0.2246, -0.0544, -0.0760,  0.0296], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0212,  0.2246, -0.0544, -0.0760,  0.0296], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0257, -0.0573, -0.0344, -0.0427,  0.1778], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2091, -0.1342,  0.3863, -0.1867,  0.3569], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2728, -3.9978, -2.5177, -2.1714, -2.8655], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0404, 0.0887, 0.1702, 0.0829, 0.0936], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9499, 0.7015, 0.6514, 0.8352, 0.7647], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0212,  0.2246, -0.0544, -0.0760,  0.0296], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.2049e-05, -4.9120e-05, -2.9440e-05, -3.6582e-05,  1.5233e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-7.1916e-05, -2.1293e-04, -4.3971e-05,  2.2628e-04,  4.8901e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0012,  0.0155, -0.0009, -0.0054,  0.0065], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0058,  0.0642, -0.0127, -0.0219,  0.0129], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0058,  0.0642, -0.0127, -0.0219,  0.0129], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0014, -0.0025, -0.0015,  0.0024, -0.0004], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0017], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([23.9454], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0675, -0.0813, -0.0457,  0.0860, -0.0148], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0675, -0.0813, -0.0457,  0.0860, -0.0148], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.4546, -2.1269, -0.5351,  3.1999,  1.4898], grad_fn=<SliceBackward0>)
  [Layer 28] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 28] Output sample values after mixer: tensor([ 2.4546, -2.1269, -0.5351,  3.1999,  1.4898], grad_fn=<SliceBackward0>)
  [Layer 28] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 28] Residual connection sample values: tensor([-1.2296, -0.0264,  0.6469,  6.6180,  3.9008], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 29/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([122.0605], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0905], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0430, -0.0009,  0.0217,  0.2135,  0.1357], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7590, -0.5196, -0.4186, -0.0045,  0.3653], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7590, -0.5196, -0.4186, -0.0045,  0.3653], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.7795, -0.1988,  0.9500, -1.0118, -1.6894], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.8906, 1.5537, 2.0543, 1.4444, 1.5483], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.7649,  0.2188, -0.4078, -1.7795,  0.5887], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0711,  0.0838, -0.1644,  0.1847, -0.2052], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0845,  0.0493, -0.1616,  0.1243, -0.3183], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0405,  0.0252, -0.0743,  0.0660, -0.1340], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0405,  0.0252, -0.0743,  0.0660, -0.1340], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0437, -0.0411,  0.0162, -0.0550, -0.0506], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2533, -0.2784, -0.0935, -0.2753, -0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8072, -2.1170, -1.9257, -0.2904, -2.0499], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1329, 0.2148, 0.4138, 0.0067, 0.2661], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7865, 0.6346, 0.4507, 0.9981, 0.5796], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0405,  0.0252, -0.0743,  0.0660, -0.1340], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.3465e-04,  2.2103e-04, -8.6888e-05,  2.9552e-04,  2.7206e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0009,  0.0006, -0.0007,  0.0004,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0088,  0.0038, -0.0123,  0.0111, -0.0262], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0502,  0.0296, -0.0882,  0.0786, -0.1633], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0502,  0.0296, -0.0882,  0.0786, -0.1633], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0122, -0.0057,  0.0147, -0.0002, -0.0352], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0159], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.9283], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1054, -0.0468,  0.1896, -0.0021, -0.3623], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1054, -0.0468,  0.1896, -0.0021, -0.3623], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.6002,  1.2671, -0.4016,  1.1058,  0.8879], grad_fn=<SliceBackward0>)
  [Layer 29] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 29] Output sample values after mixer: tensor([-0.6002,  1.2671, -0.4016,  1.1058,  0.8879], grad_fn=<SliceBackward0>)
  [Layer 29] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 29] Residual connection sample values: tensor([-1.8298,  1.2407,  0.2453,  7.7238,  4.7887], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 30/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([153.3849], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0807], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0629,  0.0420,  0.0082,  0.2447,  0.1692], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2011, -0.8222,  0.1447, -0.1871,  0.0413], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2011, -0.8222,  0.1447, -0.1871,  0.0413], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4021, -0.3885, -0.7761, -0.0084,  0.8946], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.5240, 1.8036, 1.4372, 1.8234, 1.6543], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.1255,  1.1604,  1.0086,  0.4021, -0.6204], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0596, -0.0534, -0.3215, -0.0035, -0.1929], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0363, -0.0397, -0.2883, -0.0217, -0.2202], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0185, -0.0195, -0.1235, -0.0107, -0.0980], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0185, -0.0195, -0.1235, -0.0107, -0.0980], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0996,  0.0557, -0.0383,  0.1679,  0.0066], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2769, -0.2395,  0.0669, -0.1114, -0.2783], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0150, -0.4675, -0.4280, -0.7895, -0.4175], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0182, 0.5109, 0.7548, 0.3032, 0.4524], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9817, 0.7875, 0.7239, 0.7871, 0.8279], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0185, -0.0195, -0.1235, -0.0107, -0.0980], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.3471e-05,  1.8703e-05, -1.2883e-05,  5.6400e-05,  2.2112e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([6.5669e-04, 6.5323e-05, 3.2478e-05, 1.3842e-03, 1.4126e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0019, -0.0008, -0.0027, -0.0006, -0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0247, -0.0248, -0.1549, -0.0137, -0.1216], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0247, -0.0248, -0.1549, -0.0137, -0.1216], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0022,  0.0062, -0.0120,  0.0012, -0.0026], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0155], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.0270], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0258,  0.0728, -0.0854,  0.0112, -0.0218], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0258,  0.0728, -0.0854,  0.0112, -0.0218], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.6494, -1.9382,  1.0695,  0.2112,  2.7200], grad_fn=<SliceBackward0>)
  [Layer 30] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 30] Output sample values after mixer: tensor([ 1.6494, -1.9382,  1.0695,  0.2112,  2.7200], grad_fn=<SliceBackward0>)
  [Layer 30] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 30] Residual connection sample values: tensor([-0.1804, -0.6975,  1.3147,  7.9350,  7.5087], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 31/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([175.4074], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0755], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0058, -0.0221,  0.0417,  0.2449,  0.2444], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.0720, -0.3010,  0.0546,  1.4673, -0.3385], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.0720, -0.3010,  0.0546,  1.4673, -0.3385], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.7322, -0.6999, -0.4864, -0.6526, -0.4884], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.8283, 1.7908, 1.6978, 0.8322, 1.1447], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0763,  0.2619,  0.6666, -0.7322,  0.3346], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1330,  0.1060, -0.0369,  0.1102,  0.0732], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1335,  0.0957, -0.0359,  0.1083,  0.0679], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0623,  0.0501, -0.0176,  0.0571,  0.0351], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0623,  0.0501, -0.0176,  0.0571,  0.0351], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0943, -0.0716,  0.0500, -0.2770, -0.0428], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0194, -0.1309, -0.1793, -0.0676, -0.1214], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.9478, -3.5384, -4.7060, -2.4630, -0.9027], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1897, 0.1290, 0.0833, 0.1324, 0.1251], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5717, 0.6335, 0.6756, 0.7217, 0.8932], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0623,  0.0501, -0.0176,  0.0571,  0.0351], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0011,  0.0008, -0.0006,  0.0033,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([0.0022, 0.0007, 0.0001, 0.0012, 0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0062,  0.0115, -0.0025,  0.0051,  0.0194], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0490,  0.0460, -0.0146,  0.0444,  0.0436], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0490,  0.0460, -0.0146,  0.0444,  0.0436], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0134, -0.0059, -0.0004,  0.0529, -0.0061], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0171], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.6470], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.2019, -0.0775, -0.0048,  0.6596, -0.0907], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.2019, -0.0775, -0.0048,  0.6596, -0.0907], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.0899,  2.5340, -1.8519, -3.2052,  1.3681], grad_fn=<SliceBackward0>)
  [Layer 31] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 31] Output sample values after mixer: tensor([ 1.0899,  2.5340, -1.8519, -3.2052,  1.3681], grad_fn=<SliceBackward0>)
  [Layer 31] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 31] Residual connection sample values: tensor([ 0.9095,  1.8364, -0.5371,  4.7298,  8.8769], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 32/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([210.6367], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0689], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0284,  0.0577, -0.0168,  0.1388,  0.2886], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.3308, -0.6973, -2.3050, -0.4112, -1.7371], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.3308, -0.6973, -2.3050, -0.4112, -1.7371], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([0.1698, 0.0171, 0.8388, 1.1512, 1.0728], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.6940, 2.8701, 1.5278, 1.5665, 1.4668], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4916,  0.0590, -0.1990,  0.1698, -0.1814], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0585, -0.1088, -0.3126, -0.2455, -0.1765], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0956, -0.1608, -0.3284, -0.2330, -0.1834], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0501, -0.0740, -0.1375, -0.1030, -0.0833], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0501, -0.0740, -0.1375, -0.1030, -0.0833], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0718, -0.0197, -0.0719, -0.1062, -0.1192], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2598,  0.1065,  0.0073, -0.2711, -0.2357], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6971, -2.0893, -1.7967, -1.3894, -1.0395], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1508, 0.0919, 0.4462, 0.4107, 0.5573], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9002, 0.8253, 0.4486, 0.5652, 0.5603], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0501, -0.0740, -0.1375, -0.1030, -0.0833], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0005, -0.0001, -0.0005, -0.0008, -0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.4838e-03,  2.9812e-03, -9.5632e-05, -4.2770e-03, -2.0142e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0276, -0.0514, -0.0035, -0.0374, -0.0167], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0396, -0.0691, -0.0365, -0.0621, -0.0366], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0396, -0.0691, -0.0365, -0.0621, -0.0366], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0110,  0.0160,  0.0076,  0.0102,  0.0095], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0271], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.0780], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0814,  0.0952,  0.0880,  0.0962,  0.0736], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0814,  0.0952,  0.0880,  0.0962,  0.0736], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2080, -0.5965,  1.1784, -0.8541,  2.0591], grad_fn=<SliceBackward0>)
  [Layer 32] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 32] Output sample values after mixer: tensor([-0.2080, -0.5965,  1.1784, -0.8541,  2.0591], grad_fn=<SliceBackward0>)
  [Layer 32] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 32] Residual connection sample values: tensor([ 0.7015,  1.2400,  0.6412,  3.8757, 10.9360], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 33/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([291.7345], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0585], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.0194, 0.0354, 0.0180, 0.1058, 0.3125], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([0.1726, 1.2079, 1.1613, 0.0800, 0.3435], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([0.1726, 1.2079, 1.1613, 0.0800, 0.3435], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4440, -2.9288,  0.3014, -1.7428,  0.3586], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-1.6959,  2.6768,  1.4767,  0.8975,  0.3052], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.0278, -0.8269,  0.7822,  0.4440, -0.0071], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0677, -0.4968, -0.0682, -0.3186, -0.0717], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0545, -0.5462, -0.0413, -0.3199, -0.0728], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0280, -0.2003, -0.0202, -0.1346, -0.0351], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0280, -0.2003, -0.0202, -0.1346, -0.0351], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1734,  0.0306, -0.0495,  0.0038, -0.0125], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0523, -0.0672, -0.0028,  0.0012, -0.2007], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9791, -9.6938, -6.1678, -0.1135, -2.0903], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0022, 0.1362, 0.0555, 0.0198, 0.0039], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9957, 0.2671, 0.7100, 0.9978, 0.9919], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0280, -0.2003, -0.0202, -0.1346, -0.0351], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.0522e-05,  1.8593e-06, -3.0038e-06,  2.3056e-07, -7.5676e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.4611e-05,  7.2239e-05, -7.4753e-05, -1.8864e-05,  6.2074e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 4.6774e-05,  1.0482e-04,  3.6521e-04,  2.0524e-07, -3.1334e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0292, -0.2085, -0.0207, -0.1401, -0.0369], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0292, -0.2085, -0.0207, -0.1401, -0.0369], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0027, -0.1939, -0.0183, -0.0058, -0.0074], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0098], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.0749], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0415, -1.7531, -0.2087, -0.0649, -0.0933], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0415, -1.7531, -0.2087, -0.0649, -0.0933], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 4.3373, -4.3980, -0.9899, -3.7288,  3.4470], grad_fn=<SliceBackward0>)
  [Layer 33] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 33] Output sample values after mixer: tensor([ 4.3373, -4.3980, -0.9899, -3.7288,  3.4470], grad_fn=<SliceBackward0>)
  [Layer 33] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 33] Residual connection sample values: tensor([ 5.0388, -3.1580, -0.3487,  0.1469, 14.3830], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 34/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([375.8796], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0516], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1001, -0.0665, -0.0069,  0.0029,  0.2998], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.9945,  0.6779,  1.3667, -0.3064, -0.1955], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.9945,  0.6779,  1.3667, -0.3064, -0.1955], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.7701, -1.1400,  0.6138, -1.2665, -0.3305], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.2525, 1.5767, 3.0720, 1.2323, 1.8110], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5366, -0.6617,  0.2582, -0.7701, -0.2337], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1683,  0.1948,  0.0830,  0.3116, -0.0695], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1364,  0.2208,  0.0711,  0.2721, -0.0781], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0728,  0.1225,  0.0368,  0.1545, -0.0375], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0728,  0.1225,  0.0368,  0.1545, -0.0375], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1421,  0.0417,  0.0324,  0.0597, -0.0295], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0407, -0.1412, -0.2732, -0.0628, -0.2300], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.5611, -2.4811, -2.8936, -0.0159, -0.0261], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.4121, 0.1480, 0.1852, 0.0485, 0.0449], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.3480, 0.6926, 0.5851, 0.9992, 0.9988], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0728,  0.1225,  0.0368,  0.1545, -0.0375], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0043,  0.0013,  0.0010,  0.0018, -0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0036,  0.0011,  0.0011,  0.0016, -0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0047,  0.0104,  0.0021,  0.0136, -0.0032], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0496,  0.0859,  0.0247,  0.1087, -0.0263], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0496,  0.0859,  0.0247,  0.1087, -0.0263], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0360,  0.0386,  0.0269, -0.0141,  0.0023], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0042], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([15.3228], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 1.0979,  1.1451,  0.9131, -0.5386,  0.0841], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 1.0979,  1.1451,  0.9131, -0.5386,  0.0841], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 3.2456, -2.1575, -0.6548, -1.4643,  2.6218], grad_fn=<SliceBackward0>)
  [Layer 34] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 34] Output sample values after mixer: tensor([ 3.2456, -2.1575, -0.6548, -1.4643,  2.6218], grad_fn=<SliceBackward0>)
  [Layer 34] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 34] Residual connection sample values: tensor([ 8.2844, -5.3155, -1.0034, -1.3174, 17.0048], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 35/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([624.4989], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0400], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1714, -0.1098, -0.0204, -0.0251,  0.3482], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2965, -0.7866,  1.0567, -1.2144, -0.9339], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2965, -0.7866,  1.0567, -1.2144, -0.9339], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.9649,  0.8360,  1.0299, -0.5383, -0.0097], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.2845, 0.4918, 1.1158, 1.5140, 1.8475], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.6980, -0.0469,  0.8683,  0.9649,  0.5344], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1617, -0.2134, -0.1785, -0.1484, -0.0263], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3177, -0.1723, -0.2147, -0.1933, -0.0678], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1338, -0.0787, -0.0959, -0.0874, -0.0327], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1338, -0.0787, -0.0959, -0.0874, -0.0327], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0125,  0.2342, -0.2755,  0.1753, -0.0639], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2599,  0.3572, -0.2271,  0.2316, -0.1231], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7098, -2.7746, -0.4453, -1.1391, -3.5906], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0859, 0.0276, 0.4198, 0.2723, 0.1540], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9408, 0.9262, 0.8295, 0.7334, 0.5753], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1338, -0.0787, -0.0959, -0.0874, -0.0327], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0001, -0.0027,  0.0032, -0.0020,  0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0041, -0.0150,  0.0248, -0.0213,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0798, -0.0607, -0.0608, -0.1172, -0.0260], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1704, -0.1139, -0.1257, -0.1763, -0.0481], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1704, -0.1139, -0.1257, -0.1763, -0.0481], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0215,  0.0280, -0.0986,  0.0490,  0.0127], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0273], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.0548], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.4259,  0.2949, -0.7325,  0.4211,  0.1462], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.4259,  0.2949, -0.7325,  0.4211,  0.1462], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.0277,  0.9852, -1.3770, -0.7085,  2.6365], grad_fn=<SliceBackward0>)
  [Layer 35] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 35] Output sample values after mixer: tensor([ 1.0277,  0.9852, -1.3770, -0.7085,  2.6365], grad_fn=<SliceBackward0>)
  [Layer 35] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 35] Residual connection sample values: tensor([ 9.3121, -4.3303, -2.3804, -2.0259, 19.6414], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 36/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([897.2181], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0334], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1526, -0.0718, -0.0387, -0.0327,  0.3295], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.2878,  0.6146, -1.2936, -1.1009, -0.8071], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.2878,  0.6146, -1.2936, -1.1009, -0.8071], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2234,  1.6855,  0.6235,  0.2029, -0.9586], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.2754,  0.6248,  1.5239,  0.9866, -0.1036], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5441, -0.4721,  0.0341,  0.2234,  1.0578], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0272,  0.2965,  0.1485,  0.0288,  0.1838], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0634,  0.2964,  0.1200,  0.0039,  0.1560], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0307,  0.1700,  0.0636,  0.0019,  0.0841], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0307,  0.1700,  0.0636,  0.0019,  0.0841], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0864,  0.3394,  0.0401, -0.0415, -0.0153], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.3981, -0.2752,  0.4167, -0.0585, -0.1774], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6566, -1.1306, -1.6058, -2.4414, -2.8823], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1450, 0.0069, 0.0953, 0.0953, 0.0370], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6803, 0.9923, 0.8580, 0.7924, 0.8988], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0307,  0.1700,  0.0636,  0.0019,  0.0841], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.8475e-04, -1.5107e-03, -1.7862e-04,  1.8489e-04,  6.8084e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-6.8660e-04, -2.1416e-03, -3.7696e-04,  4.5382e-04,  9.7272e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0028,  0.0212,  0.0045, -0.0020,  0.0086], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-3.7933e-02,  2.1599e-01,  7.7433e-02,  1.8692e-04,  1.0489e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-3.7933e-02,  2.1599e-01,  7.7433e-02,  1.8692e-04,  1.0489e-01],
       grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 1.0563e-02,  8.6148e-02, -2.1560e-02, -5.1356e-05, -2.6118e-02],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0097], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.1421], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 1.5734e-01,  1.8720e+00, -3.1647e-01, -8.4843e-04, -3.7355e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 1.5734e-01,  1.8720e+00, -3.1647e-01, -8.4843e-04, -3.7355e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.7350, -2.1989, -4.6037, -4.2755,  2.4925], grad_fn=<SliceBackward0>)
  [Layer 36] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 36] Output sample values after mixer: tensor([-1.7350, -2.1989, -4.6037, -4.2755,  2.4925], grad_fn=<SliceBackward0>)
  [Layer 36] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 36] Residual connection sample values: tensor([ 7.5770, -6.5291, -6.9841, -6.3014, 22.1339], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 37/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1142.0491], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0296], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1279, -0.1127, -0.1165, -0.1029,  0.3764], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.5753,  1.7764,  0.4760, -3.3743,  0.8907], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.5753,  1.7764,  0.4760, -3.3743,  0.8907], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4518,  0.4242, -0.2493, -0.3970, -1.7227], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.1182, -0.7747, -0.1465,  1.1253,  0.7860], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0773, -0.6521, -0.2521,  0.4518, -0.0613], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1132, -0.0806,  0.0123, -0.1107, -0.2246], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1255, -0.1091,  0.0173, -0.2616, -0.2099], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0588, -0.0516,  0.0087, -0.1138, -0.0940], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0588, -0.0516,  0.0087, -0.1138, -0.0940], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3725,  0.2297,  0.0255, -0.0902, -0.0186], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1954, -0.1044, -0.2732, -0.2538, -0.2785], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0606, -3.2470, -0.8191, -0.2453, -1.9752], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0284, 0.0045, 0.0081, 0.0038, 0.0254], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9983, 0.9855, 0.9934, 0.9991, 0.9510], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0588, -0.0516,  0.0087, -0.1138, -0.0940], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-6.2315e-04, -3.8430e-04, -4.2691e-05,  1.5089e-04,  3.1103e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0007, -0.0009, -0.0010,  0.0013, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0025, -0.0087, -0.0109,  0.0345,  0.0426], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0087,  0.0011, -0.0126,  0.0561,  0.0605], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0087,  0.0011, -0.0126,  0.0561,  0.0605], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0032,  0.0017, -0.0037, -0.0063,  0.0382], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0341], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.4139], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0281,  0.0137, -0.0577, -0.1814,  0.2469], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0281,  0.0137, -0.0577, -0.1814,  0.2469], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.2798, -5.1710,  0.2408, -4.0284, -7.4220], grad_fn=<SliceBackward0>)
  [Layer 37] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 37] Output sample values after mixer: tensor([ 2.2798, -5.1710,  0.2408, -4.0284, -7.4220], grad_fn=<SliceBackward0>)
  [Layer 37] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 37] Residual connection sample values: tensor([  9.8568, -11.7001,  -6.7434, -10.3298,  14.7119],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 38/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1439.1609], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0264], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1347, -0.1587, -0.0910, -0.1361,  0.1986], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7038, -0.3259,  0.2085, -0.8132, -0.0811], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7038, -0.3259,  0.2085, -0.8132, -0.0811], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.3542,  0.4889,  0.7236, -0.2484, -0.0314], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.7083, 2.0554, 1.3538, 1.4789, 1.6478], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.0855,  0.7721,  0.8204, -0.3542,  0.0792], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0391, -0.0946, -0.0972,  0.1035, -0.0125], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0672, -0.1317, -0.1229,  0.0919, -0.0338], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0347, -0.0615, -0.0577,  0.0480, -0.0166], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0347, -0.0615, -0.0577,  0.0480, -0.0166], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2781, -0.2763,  0.0052,  0.0559, -0.2490], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1540, -0.2513, -0.1054, -0.0789, -0.2446], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0881, -1.3536, -1.1764, -1.6451, -1.1941], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1028, 0.2132, 0.5353, 0.1729, 0.1140], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8942, 0.7493, 0.5328, 0.7525, 0.8727], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0347, -0.0615, -0.0577,  0.0480, -0.0166], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-9.9203e-04, -9.8564e-04,  1.8542e-05,  1.9949e-04, -8.8828e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([0.0073, 0.0096, 0.0016, 0.0010, 0.0093], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0194, -0.0296, -0.0057,  0.0574,  0.0022], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0087, -0.0794, -0.0524,  0.0963, -0.0113], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0087, -0.0794, -0.0524,  0.0963, -0.0113], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0020,  0.0108, -0.0060, -0.0241,  0.0004], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0108], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.5969], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0388,  0.2010, -0.1171, -0.4267,  0.0070], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0388,  0.2010, -0.1171, -0.4267,  0.0070], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.1309, -3.1339, -3.7965, -1.5083, -3.0676], grad_fn=<SliceBackward0>)
  [Layer 38] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 38] Output sample values after mixer: tensor([-1.1309, -3.1339, -3.7965, -1.5083, -3.0676], grad_fn=<SliceBackward0>)
  [Layer 38] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 38] Residual connection sample values: tensor([  8.7259, -14.8340, -10.5399, -11.8381,  11.6443],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 39/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1828.3335], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0234], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0921, -0.1581, -0.1114, -0.1253,  0.1243], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1934,  0.0538,  0.6176,  0.7789, -0.1894], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1934,  0.0538,  0.6176,  0.7789, -0.1894], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7949,  0.4046,  1.5980, -0.9059,  0.3780], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.8582, 1.3765, 1.8370, 2.0854, 1.2437], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1945, -0.0317, -0.1963,  0.7949,  0.0454], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1133, -0.0652,  0.2889, -0.2314,  0.0494], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0990,  0.0200,  0.2666, -0.2273,  0.0284], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0519,  0.0101,  0.1510, -0.1008,  0.0144], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0519,  0.0101,  0.1510, -0.1008,  0.0144], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0847, -0.0064, -0.0001,  0.0018, -0.0586], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.3176,  0.0454,  0.0335,  0.0789, -0.0398], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6942, -0.9243, -1.3151, -3.1533, -2.1087], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0114, 0.0296, 0.0545, 0.2017, 0.0864], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9921, 0.9730, 0.9308, 0.5294, 0.8334], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0519,  0.0101,  0.1510, -0.1008,  0.0144], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.0064e-05, -3.8100e-06, -8.3446e-08,  1.0440e-06, -3.4650e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0002, -0.0001,  0.0001, -0.0002,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0007,  0.0056,  0.0007, -0.0047,  0.0037], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0452,  0.0143,  0.1301, -0.0911,  0.0160], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0452,  0.0143,  0.1301, -0.0911,  0.0160], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0048,  0.0004,  0.0522, -0.0486, -0.0014], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0040], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([15.8700], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1430,  0.0127,  1.7113, -1.2895, -0.0415], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1430,  0.0127,  1.7113, -1.2895, -0.0415], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-3.8715, -4.5301, -0.2578, -6.6595, -5.3772], grad_fn=<SliceBackward0>)
  [Layer 39] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 39] Output sample values after mixer: tensor([-3.8715, -4.5301, -0.2578, -6.6595, -5.3772], grad_fn=<SliceBackward0>)
  [Layer 39] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 39] Residual connection sample values: tensor([  4.8544, -19.3642, -10.7977, -18.4975,   6.2671],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 40/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2238.0662], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0211], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0448, -0.1802, -0.1031, -0.1724,  0.0577], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8978, -0.8984, -0.7354, -0.0401, -1.4425], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8978, -0.8984, -0.7354, -0.0401, -1.4425], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0321,  0.5717, -0.0147,  0.2492, -0.7072], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.8871, 0.6813, 0.8746, 0.5606, 1.8610], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.3031,  0.0295, -0.1661,  0.0321, -0.2435], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0025, -0.0847,  0.0041, -0.0362, -0.1611], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0131, -0.1034,  0.0099, -0.0461, -0.1659], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0065, -0.0490,  0.0050, -0.0225, -0.0761], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0065, -0.0490,  0.0050, -0.0225, -0.0761], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0607,  0.0874, -0.0193, -0.0918,  0.0094], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([0.0170, 0.0481, 0.0099, 0.1845, 0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9810, -1.4352, -0.7966, -1.6062, -1.8465], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1334, 0.0265, 0.0109, 0.0638, 0.3304], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7678, 0.9626, 0.9914, 0.9027, 0.5433], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0065, -0.0490,  0.0050, -0.0225, -0.0761], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.2795e-05, -7.6024e-05,  1.6808e-05,  7.9924e-05, -8.1967e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([2.8084e-04, 9.6558e-04, 4.5629e-04, 3.1920e-05, 3.3389e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0018,  0.0003,  0.0026, -0.0013, -0.0084], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0071, -0.0397,  0.0067, -0.0197, -0.0705], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0071, -0.0397,  0.0067, -0.0197, -0.0705], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0018,  0.0103, -0.0016,  0.0004,  0.0195], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0034], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([17.2065], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0624,  0.3508, -0.0532,  0.0154,  0.6482], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0624,  0.3508, -0.0532,  0.0154,  0.6482], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 3.6299, -2.2112, -1.0922,  7.7132,  2.7662], grad_fn=<SliceBackward0>)
  [Layer 40] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 40] Output sample values after mixer: tensor([ 3.6299, -2.2112, -1.0922,  7.7132,  2.7662], grad_fn=<SliceBackward0>)
  [Layer 40] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 40] Residual connection sample values: tensor([  8.4843, -21.5754, -11.8899, -10.7843,   9.0333],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 41/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2672.9060], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0193], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0732, -0.1877, -0.1048, -0.0930,  0.0783], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.6468, -0.5841,  0.0182, -0.1813, -0.7216], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.6468, -0.5841,  0.0182, -0.1813, -0.7216], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.1797, -0.1176,  0.6869,  0.2806,  0.6460], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.1855,  1.6538,  0.8584, -0.6437,  0.7832], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.7251,  0.3270,  0.7986,  0.1797,  0.9139], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0534, -0.0166,  0.1555,  0.0543,  0.1993], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0667, -0.0306,  0.1576,  0.0476,  0.1837], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0322, -0.0151,  0.0850,  0.0244,  0.1003], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0322, -0.0151,  0.0850,  0.0244,  0.1003], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0640, -0.0714, -0.1261, -0.2719,  0.2631], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0606,  0.0234, -0.0089, -0.0719,  0.2285], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8259, -1.8637, -1.2829, -1.4543, -4.4079], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1173, 0.1542, 0.0169, 0.0219, 0.0139], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8072, 0.7502, 0.9785, 0.9686, 0.9405], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0322, -0.0151,  0.0850,  0.0244,  0.1003], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0002,  0.0003,  0.0005,  0.0010, -0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0006,  0.0007, -0.0001,  0.0040, -0.0044], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0030,  0.0002,  0.0085,  0.0021,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0344, -0.0144,  0.0914,  0.0258,  0.0981], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0344, -0.0144,  0.0914,  0.0258,  0.0981], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0146,  0.0030,  0.0008, -0.0021, -0.0231], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0020], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([22.0740], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.5580,  0.1153,  0.0315, -0.0841, -0.7121], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.5580,  0.1153,  0.0315, -0.0841, -0.7121], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 4.2132,  0.9361,  3.5797, -1.9357, -2.4594], grad_fn=<SliceBackward0>)
  [Layer 41] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 41] Output sample values after mixer: tensor([ 4.2132,  0.9361,  3.5797, -1.9357, -2.4594], grad_fn=<SliceBackward0>)
  [Layer 41] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 41] Residual connection sample values: tensor([ 12.6975, -20.6393,  -8.3101, -12.7201,   6.5739],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 42/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2994.0518], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0183], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1101, -0.1824, -0.0728, -0.1095,  0.0567], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2779, -0.1918, -2.0396, -0.7657,  0.9296], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2779, -0.1918, -2.0396, -0.7657,  0.9296], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3323,  0.2129, -1.0636,  0.2329, -0.1448], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0627, 2.3122, 2.0163, 0.6549, 0.0852], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.6473,  0.0857, -0.2624,  0.3323, -0.5871], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0476, -0.0373, -0.1671,  0.0787, -0.0342], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0383, -0.0505, -0.1570,  0.0823, -0.0542], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0195, -0.0246, -0.0724,  0.0428, -0.0263], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0195, -0.0246, -0.0724,  0.0428, -0.0263], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0330,  0.0019,  0.1082, -0.0350,  0.3107], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0259,  0.0845,  0.1679, -0.0455, -0.2655], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0661, -1.4514, -0.7270, -1.9455, -0.6256], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0606, 1.0157, 0.0256, 0.0515, 0.0123], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9375, 0.2289, 0.9815, 0.9047, 0.9923], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0195, -0.0246, -0.0724,  0.0428, -0.0263], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.8989e-05,  2.1924e-06,  1.2794e-04, -4.1335e-05,  3.6724e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.9446e-04, -2.3069e-05, -1.1510e-04,  5.4041e-04, -1.7396e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.7787e-05, -1.3289e-03, -2.5990e-03,  3.5085e-03, -1.3248e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0196, -0.0260, -0.0752,  0.0465, -0.0278], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0196, -0.0260, -0.0752,  0.0465, -0.0278], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0031,  0.0023,  0.0177, -0.0113, -0.0185], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0023], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([21.0079], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1347,  0.0967,  0.7695, -0.4075, -0.7320], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1347,  0.0967,  0.7695, -0.4075, -0.7320], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 3.1468,  1.8041, -1.0537, -0.1677, -2.0121], grad_fn=<SliceBackward0>)
  [Layer 42] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 42] Output sample values after mixer: tensor([ 3.1468,  1.8041, -1.0537, -0.1677, -2.0121], grad_fn=<SliceBackward0>)
  [Layer 42] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 42] Residual connection sample values: tensor([ 15.8443, -18.8352,  -9.3639, -12.8878,   4.5618],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 43/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3298.7336], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0174], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1305, -0.1626, -0.0773, -0.1079,  0.0373], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.0321, -0.2123, -1.6903, -0.3733, -0.3830], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.0321, -0.2123, -1.6903, -0.3733, -0.3830], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.9247, -0.4871,  0.6000,  0.0191, -0.1738], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.6917, 2.4772, 0.2277, 1.8511, 2.2614], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.1240,  0.9579,  0.7815,  0.9247, -0.3701], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1447,  0.0010,  0.0886, -0.0097,  0.0277], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1411, -0.0447,  0.1011, -0.0038,  0.0189], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0755, -0.0219,  0.0531, -0.0019,  0.0095], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0755, -0.0219,  0.0531, -0.0019,  0.0095], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0727, -0.0984,  0.8907,  0.0185, -0.0297], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2147, -0.0828, -0.2761,  0.0366, -0.1537], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9762, -1.4783, -1.0589, -1.0815, -5.9141], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0218, 0.1644, 0.0102, 0.0431, 0.4239], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9790, 0.7842, 0.9892, 0.9544, 0.0815], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0755, -0.0219,  0.0531, -0.0019,  0.0095], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.1947e-04, -1.6182e-04,  1.4646e-03,  3.0361e-05, -4.8799e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0003, -0.0014,  0.0114,  0.0002,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 4.2822e-03, -4.0778e-03, -5.0951e-03, -4.2430e-03,  2.7346e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0699, -0.0231,  0.0410, -0.0059,  0.0083], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0699, -0.0231,  0.0410, -0.0059,  0.0083], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0189,  0.0022, -0.0108,  0.0009, -0.0013], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0025], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([19.9974], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.9972,  0.0884, -0.4093,  0.0374, -0.0620], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.9972,  0.0884, -0.4093,  0.0374, -0.0620], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 7.5915, -1.8234, -2.8939, -1.5134,  2.0773], grad_fn=<SliceBackward0>)
  [Layer 43] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 43] Output sample values after mixer: tensor([ 7.5915, -1.8234, -2.8939, -1.5134,  2.0773], grad_fn=<SliceBackward0>)
  [Layer 43] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 43] Residual connection sample values: tensor([ 23.4358, -20.6586, -12.2578, -14.4012,   6.6391],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 44/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3627.6787], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0166], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1828, -0.1675, -0.0965, -0.1117,  0.0517], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1128, -1.6584, -0.1221,  0.0409, -0.8158], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1128, -1.6584, -0.1221,  0.0409, -0.8158], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.7053, -0.2283,  0.4600, -1.2515, -0.5696], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0365, 0.3547, 1.9308, 1.6036, 1.0083], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.3055, -0.9490, -0.7425, -0.7053,  0.5316], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1308,  0.0261,  0.0675, -0.2292,  0.0690], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1369,  0.0866,  0.0490, -0.2358,  0.0165], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0638,  0.0452,  0.0251, -0.1041,  0.0083], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0638,  0.0452,  0.0251, -0.1041,  0.0083], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2783,  0.1255,  0.0712,  0.0210,  0.0494], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2616,  0.1471,  0.0224, -0.0141, -0.0430], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7482, -0.6439, -1.1771, -1.3506, -1.0269], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0605, 0.0214, 0.0744, 0.0481, 0.0986], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9557, 0.9863, 0.9162, 0.9371, 0.9037], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0638,  0.0452,  0.0251, -0.1041,  0.0083], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.0744e-03, -4.8441e-04, -2.7472e-04, -8.1143e-05, -1.9083e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0059, -0.0015, -0.0006, -0.0002, -0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0044, -0.0008, -0.0005, -0.0062,  0.0035], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0643,  0.0416,  0.0230, -0.1040,  0.0113], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0643,  0.0416,  0.0230, -0.1040,  0.0113], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0034, -0.0110, -0.0013, -0.0022, -0.0028], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0019], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([22.7383], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1451, -0.3740, -0.0604, -0.0860, -0.1224], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1451, -0.3740, -0.0604, -0.0860, -0.1224], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-5.4042,  3.2675,  1.6773,  5.0781,  0.3902], grad_fn=<SliceBackward0>)
  [Layer 44] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 44] Output sample values after mixer: tensor([-5.4042,  3.2675,  1.6773,  5.0781,  0.3902], grad_fn=<SliceBackward0>)
  [Layer 44] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 44] Residual connection sample values: tensor([ 18.0316, -17.3911, -10.5805,  -9.3230,   7.0293],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 45/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3869.5283], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0161], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1391, -0.1378, -0.0819, -0.0707,  0.0539], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.7643,  0.7537, -0.3716, -0.2043,  0.3964], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.7643,  0.7537, -0.3716, -0.2043,  0.3964], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5001, -0.1982, -0.5217, -0.0996, -2.9123], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.1657,  2.6885, -1.0819,  1.0392,  2.0223], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.3775, -0.2258,  0.0393,  0.5001,  0.1731], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0740,  0.0298, -0.0893, -0.0259,  0.5352], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0694,  0.0820, -0.0918, -0.0324,  0.5326], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0359,  0.0427, -0.0438, -0.0160,  0.3356], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0359,  0.0427, -0.0438, -0.0160,  0.3356], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.4036, -0.0429,  0.0302, -0.2449,  0.0306], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0269,  0.0782, -0.0639, -0.2185, -0.0242], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.2502, -4.1815, -1.0937, -2.6774, -2.3149], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0611, 0.2896, 0.0066, 0.0352, 0.0412], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8715, 0.2979, 0.9928, 0.9100, 0.9091], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0359,  0.0427, -0.0438, -0.0160,  0.3356], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 8.8663e-04, -9.4128e-05,  6.6443e-05, -5.3797e-04,  6.7186e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.2423e-03, -1.2064e-04,  5.8187e-05,  2.5636e-04,  1.6794e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0004,  0.0008, -0.0095, -0.0066,  0.0519], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0399,  0.0486, -0.0586, -0.0245,  0.4284], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0399,  0.0486, -0.0586, -0.0245,  0.4284], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0208, 0.0249, 0.0089, 0.0022, 0.1015], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0032], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([17.6195], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.8566, 0.7444, 0.3365, 0.0780, 3.7726], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.8566, 0.7444, 0.3365, 0.0780, 3.7726], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.3389,  4.3127, -7.3249, -3.6895, -0.3675], grad_fn=<SliceBackward0>)
  [Layer 45] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 45] Output sample values after mixer: tensor([-0.3389,  4.3127, -7.3249, -3.6895, -0.3675], grad_fn=<SliceBackward0>)
  [Layer 45] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 45] Residual connection sample values: tensor([ 17.6927, -13.0784, -17.9054, -13.0125,   6.6618],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 46/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4167.5298], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0155], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1583, -0.1220, -0.1632, -0.1177,  0.0592], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.4730,  1.1020, -0.1574, -0.1303,  0.1952], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.4730,  1.1020, -0.1574, -0.1303,  0.1952], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.8710, -0.1341, -0.3211, -1.6309, -0.5018], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.3016,  1.4776, -0.7311,  1.7520, -0.0622], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.3332, 0.1950, 0.2820, 0.8710, 0.7100], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1417, -0.0055, -0.0546,  0.2277,  0.0789], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1448, -0.0093, -0.0757,  0.2119,  0.0992], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0672, -0.0046, -0.0364,  0.1171,  0.0520], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0672, -0.0046, -0.0364,  0.1171,  0.0520], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0305, -0.2585, -0.0152, -0.0079,  0.0713], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0431, -0.2745,  0.0873, -0.0018,  0.0927], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8673, -0.9793, -1.6584, -0.9408, -0.4381], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0111, 0.0247, 0.0031, 0.0582, 0.0083], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9796, 0.9761, 0.9949, 0.9467, 0.9964], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0672, -0.0046, -0.0364,  0.1171,  0.0520], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.2637e-05,  1.9199e-04,  1.1260e-05,  5.8346e-06, -5.2974e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.1371e-05,  8.3528e-04, -3.1198e-05,  2.0213e-05, -6.6503e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-5.2848e-04,  1.0433e-05, -9.2382e-05,  9.6768e-04,  4.2453e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0542, -0.0037, -0.0292,  0.0945,  0.0420], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0542, -0.0037, -0.0292,  0.0945,  0.0420], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0158, -0.0031,  0.0021, -0.0058,  0.0045], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0036], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([16.6866], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.6132, -0.1134,  0.0709, -0.1785,  0.1703], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.6132, -0.1134,  0.0709, -0.1785,  0.1703], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 5.2695,  3.1069, -2.9184,  1.2384, -7.9627], grad_fn=<SliceBackward0>)
  [Layer 46] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 46] Output sample values after mixer: tensor([ 5.2695,  3.1069, -2.9184,  1.2384, -7.9627], grad_fn=<SliceBackward0>)
  [Layer 46] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 46] Residual connection sample values: tensor([ 22.9622,  -9.9714, -20.8238, -11.7741,  -1.3009],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 47/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4345.0503], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0152], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1788, -0.0784, -0.1573, -0.0900, -0.0095], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.1991,  1.0127, -1.6360, -0.5292, -0.4782], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.1991,  1.0127, -1.6360, -0.5292, -0.4782], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.1626, -0.7631, -0.0668,  1.5433, -0.1558], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.5496, -0.4891,  2.0037,  1.5677,  1.1999], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2278,  0.2285, -0.0890,  0.1626,  0.9386], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0222, -0.1192, -0.0073, -0.2422, -0.0204], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0051, -0.1441, -0.2267, -0.2456, -0.0152], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0025, -0.0669, -0.1006, -0.1078, -0.0075], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0025, -0.0669, -0.1006, -0.1078, -0.0075], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1473, -0.0222, -0.1913, -0.2763, -0.0678], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.6852,  0.1334, -0.0047, -0.2418,  0.0311], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -3.5522, -11.2450,  -2.6866,  -3.1935,  -3.1998],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0384, 0.0093, 0.0190, 0.0174, 0.0381], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8724, 0.9003, 0.9502, 0.9459, 0.8853], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0025, -0.0669, -0.1006, -0.1078, -0.0075], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([1.4307e-05, 2.1591e-06, 1.8584e-05, 2.6837e-05, 6.5904e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0006, -0.0002, -0.0014, -0.0008,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0008, -0.0036, -0.0061, -0.0047,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0027, -0.0981, -0.1483, -0.1571, -0.0105], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0027, -0.0981, -0.1483, -0.1571, -0.0105], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0008, -0.0729,  0.0395,  0.0308,  0.0019], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0041], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([15.6383], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0256, -1.4642,  1.2995,  1.0584,  0.0632], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0256, -1.4642,  1.2995,  1.0584,  0.0632], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.7153,  5.9575, -2.9154,  3.7960, 12.1156], grad_fn=<SliceBackward0>)
  [Layer 47] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 47] Output sample values after mixer: tensor([ 1.7153,  5.9575, -2.9154,  3.7960, 12.1156], grad_fn=<SliceBackward0>)
  [Layer 47] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 47] Residual connection sample values: tensor([ 24.6775,  -4.0139, -23.7393,  -7.9781,  10.8147],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 48/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4914.9766], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0143], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1842, -0.0280, -0.1618, -0.0561,  0.0717], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0406, -2.2301, -0.4466, -0.2213,  0.1990], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0406, -2.2301, -0.4466, -0.2213,  0.1990], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7338,  0.1693,  0.1910, -0.5645, -0.1373], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.7406,  2.2839,  1.9848,  1.1418, -0.0477], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0366,  0.3766,  1.0177,  0.7338, -1.3049], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1364,  0.0133,  0.0267, -0.1243,  0.0238], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1416,  0.2333, -0.0592, -0.1906,  0.0214], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0658,  0.1302, -0.0287, -0.0862,  0.0108], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0658,  0.1302, -0.0287, -0.0862,  0.0108], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0423,  0.0027,  0.0236, -0.0275, -0.0543], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0988, -0.2785,  0.0565, -0.1774, -0.0927], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-54.8118, -78.5143, -47.2508,  -2.3308,  -4.2266],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0637, 0.0834, 0.0292, 0.0034, 0.0072], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.0305, 0.0014, 0.2517, 0.9920, 0.9702], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0658,  0.1302, -0.0287, -0.0862,  0.0108], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.7734e-04, -1.1286e-05, -9.8817e-05,  1.1499e-04,  2.2753e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.6150e-04, -9.7657e-06, -9.8090e-05,  1.1920e-04,  2.4559e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0007,  0.0014, -0.0003, -0.0009,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0531,  0.1051, -0.0232, -0.0696,  0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0531,  0.1051, -0.0232, -0.0696,  0.0087], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0011, -0.0227,  0.0040,  0.0069,  0.0010], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0025], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([19.9307], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0481, -0.8506,  0.1563,  0.3037,  0.0471], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0481, -0.8506,  0.1563,  0.3037,  0.0471], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-13.2016,  -2.6619,  -4.1938,  23.5713,  15.2354],
       grad_fn=<SliceBackward0>)
  [Layer 48] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 48] Output sample values after mixer: tensor([-13.2016,  -2.6619,  -4.1938,  23.5713,  15.2354],
       grad_fn=<SliceBackward0>)
  [Layer 48] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 48] Residual connection sample values: tensor([ 11.4758,  -6.6758, -27.9331,  15.5932,  26.0501],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4806.1060], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0144], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0922, -0.0593, -0.2286,  0.1301,  0.2073], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Final backbone norm output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Final backbone norm output sample values: tensor([ 0.0922, -0.0593, -0.2286,  0.1301,  0.2073], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Logits shape: torch.Size([1, 1, 50288])
[Mamba2LMHeadModel] Logits sample values: tensor([ 3.9310, -7.7316,  4.3804,  3.3255, -1.4611], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Forward pass input_ids shape: torch.Size([1, 1])
[Mamba2LMHeadModel] input_ids sample values: tensor([278])
[Mamba2LMHeadModel] Embedding output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Embedding sample values: tensor([ 0.0298, -0.0005, -0.1168,  0.0171, -0.0401], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 1/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0293], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([5.8425], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0309, -0.0005, -0.1249,  0.0183, -0.0422], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.0582, -0.3223,  0.1891, -0.0424, -0.5380], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.0582, -0.3223,  0.1891, -0.0424, -0.5380], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4551,  0.4114, -0.2609, -0.2344, -0.0973], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.5775,  0.2133, -0.1266, -0.5792, -0.2677], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.8398,  0.0913,  0.5232,  0.4551,  0.0364], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0649, -0.1064,  0.0322,  0.0554,  0.0460], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2927,  0.1089,  0.3025,  0.1046, -0.2109], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1676,  0.0574,  0.1739,  0.0550, -0.0944], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1676,  0.0574,  0.1739,  0.0550, -0.0944], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0711,  0.1039, -0.2691, -0.2784,  0.0508], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2732,  0.7614, -0.2704, -0.2653, -0.0071], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6180, -2.5226, -3.0473, -3.3078, -3.9090], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0161, 0.0168, 0.0080, 0.0138, 0.0056], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9586, 0.9586, 0.9760, 0.9555, 0.9784], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1676,  0.0574,  0.1739,  0.0550, -0.0944], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0002,  0.0003, -0.0007, -0.0008,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0023,  0.0014, -0.0033, -0.0035,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0920,  0.0843,  0.1168,  0.0169, -0.0857], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1559,  0.1063,  0.1831,  0.0379, -0.1217], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1559,  0.1063,  0.1831,  0.0379, -0.1217], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.1225, -0.0144,  0.0189, -0.0008,  0.0241], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([2.0002], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7071], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0867, -0.0110,  0.0114, -0.0009,  0.0174], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0867, -0.0110,  0.0114, -0.0009,  0.0174], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0823, -0.0420,  0.0269,  0.0353, -0.1005], grad_fn=<SliceBackward0>)
  [Layer 1] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 1] Output sample values after mixer: tensor([-0.0823, -0.0420,  0.0269,  0.0353, -0.1005], grad_fn=<SliceBackward0>)
  [Layer 1] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 1] Residual connection sample values: tensor([-0.0525, -0.0424, -0.0899,  0.0524, -0.1406], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 2/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0765], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([3.6147], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0685, -0.0437, -0.1081,  0.0660, -0.1731], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7234, -0.9596, -0.7557, -0.8123, -0.9572], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7234, -0.9596, -0.7557, -0.8123, -0.9572], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([0.7518, 1.7751, 2.8290, 5.2551, 2.2689], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9718, 1.8582, 0.4468, 1.4036, 2.3054], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([1.0774, 0.1298, 0.3517, 0.7518, 0.6795], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0374, -0.3479,  0.2152, -2.6153, -0.1549], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0076, -0.5024,  0.2047, -1.5616, -0.1681], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0038, -0.1894,  0.1128, -0.2708, -0.0770], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0038, -0.1894,  0.1128, -0.2708, -0.0770], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1316, -0.1039,  0.0437, -0.1562,  0.5363], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.6718, -0.2784,  0.1359,  0.1379, -0.2268], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-19.8515, -18.6852, -13.5640,  -2.4189,  -0.4662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0160, 0.0396, 0.0328, 0.0294, 0.1392], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7276, 0.4768, 0.6409, 0.9313, 0.9372], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0038, -0.1894,  0.1128, -0.2708, -0.0770], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-8.0264e-06, -6.3400e-06,  2.6637e-06, -9.5287e-06,  3.2719e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 3.4039e-04, -1.4173e-04,  7.7967e-05, -1.4507e-03,  1.1904e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0119, -0.0805, -0.0218, -0.1116, -0.0161], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0145, -0.2113,  0.0561, -0.2985, -0.0692], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0145, -0.2113,  0.0561, -0.2985, -0.0692], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0034,  0.0562, -0.0135,  0.0745,  0.0184], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([79.9597], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1118], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0005,  0.0038, -0.0020,  0.0045,  0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0005,  0.0038, -0.0020,  0.0045,  0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1134, -0.0030, -0.0578, -0.1103,  0.0456], grad_fn=<SliceBackward0>)
  [Layer 2] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 2] Output sample values after mixer: tensor([ 0.1134, -0.0030, -0.0578, -0.1103,  0.0456], grad_fn=<SliceBackward0>)
  [Layer 2] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 2] Residual connection sample values: tensor([ 0.0610, -0.0454, -0.1477, -0.0579, -0.0950], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 3/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1132], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([2.9717], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0718, -0.0418, -0.1558, -0.0628, -0.1109], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5711, -0.0082, -2.9526, -1.3059, -1.7270], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5711, -0.0082, -2.9526, -1.3059, -1.7270], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0516,  0.4026, -2.0736,  1.2160, -0.1106], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.1018, 1.0007, 1.3777, 2.1598, 1.8722], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-2.0852, -0.9024,  0.4298,  0.0516, -3.9667], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1169,  0.1339,  0.2017, -0.0093, -0.0576], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1153,  0.1146,  0.3254, -0.0216, -0.0739], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0610,  0.0606,  0.1889, -0.0107, -0.0356], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0610,  0.0606,  0.1889, -0.0107, -0.0356], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3833, -0.0167,  0.0857,  0.2555,  0.0045], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.4478, -0.0301, -0.2391, -0.1780,  0.4120], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6506, -3.9939, -6.7806, -0.9419, -6.0308], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0666, 0.0545, 0.0530, 0.0555, 0.1333], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9576, 0.8044, 0.6982, 0.9491, 0.4477], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0610,  0.0606,  0.1889, -0.0107, -0.0356], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.5570e-03, -6.7856e-05,  3.4809e-04,  1.0379e-03,  1.8127e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.4060e-03, -8.4765e-05,  3.5854e-03,  3.9395e-04,  9.7792e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0012,  0.2516,  0.1820, -0.0495, -0.0201], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0265,  0.2792,  0.2680, -0.0544, -0.0363], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0265,  0.2792,  0.2680, -0.0544, -0.0363], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0055, -0.0011, -0.0393,  0.0151,  0.0095], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([24.2001], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2033], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0015, -0.0004, -0.0098,  0.0058,  0.0021], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0015, -0.0004, -0.0098,  0.0058,  0.0021], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0299,  0.0219,  0.0597,  0.0183,  0.0075], grad_fn=<SliceBackward0>)
  [Layer 3] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 3] Output sample values after mixer: tensor([-0.0299,  0.0219,  0.0597,  0.0183,  0.0075], grad_fn=<SliceBackward0>)
  [Layer 3] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 3] Residual connection sample values: tensor([ 0.0310, -0.0234, -0.0880, -0.0395, -0.0876], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 4/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1611], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([2.4913], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0361, -0.0206, -0.0904, -0.0420, -0.1022], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7973,  0.2342,  0.1196, -1.4104,  0.6492], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7973,  0.2342,  0.1196, -1.4104,  0.6492], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.3304, -2.6721, -1.3209, -0.2492, -0.1325], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.6738, 2.7476, 2.1232, 2.2487, 0.6725], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.1195,  0.6362, -0.0969, -1.3304, -1.7536], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2370, -0.3670,  0.2160,  0.1306,  0.1441], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3108, -0.4021,  0.1678,  0.1148,  0.4370], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1314, -0.1612,  0.0909,  0.0607,  0.2655], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1314, -0.1612,  0.0909,  0.0607,  0.2655], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.4773,  0.2446,  0.4659, -0.1728, -0.0433], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.7357, -0.1965, -0.2760, -0.2138,  0.2067], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.7127,  -1.2862,  -1.4870, -27.0280,  -4.0727],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0323, 0.0369, 0.0159, 0.0303, 0.0729], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9462, 0.9536, 0.9767, 0.4410, 0.7430], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1314, -0.1612,  0.0909,  0.0607,  0.2655], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0020, -0.0010, -0.0020,  0.0007,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0033, -0.0023, -0.0024,  0.0007, -0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0079,  0.0479, -0.0232, -0.0346,  0.1868], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0819, -0.0428,  0.0279, -0.0004,  0.3363], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0819, -0.0428,  0.0279, -0.0004,  0.3363], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 2.0284e-02, -5.5971e-03,  1.7695e-03,  1.2064e-04,  1.4341e-01],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([17.7177], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2376], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 1.0071e-02, -1.7855e-03,  8.6376e-04,  4.9623e-05,  3.5201e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 1.0071e-02, -1.7855e-03,  8.6376e-04,  4.9623e-05,  3.5201e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0854,  0.0132,  0.0019, -0.1698,  0.0649], grad_fn=<SliceBackward0>)
  [Layer 4] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 4] Output sample values after mixer: tensor([-0.0854,  0.0132,  0.0019, -0.1698,  0.0649], grad_fn=<SliceBackward0>)
  [Layer 4] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 4] Residual connection sample values: tensor([-0.0544, -0.0102, -0.0860, -0.2093, -0.0227], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 5/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1943], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([2.2686], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0557, -0.0086, -0.0823, -0.2053, -0.0240], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.4313, -0.7150, -1.0203, -1.7593,  0.5293], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.4313, -0.7150, -1.0203, -1.7593,  0.5293], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0259, -0.4396,  0.8289,  0.7619, -2.6490], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.6277, 1.2198, 0.6108, 1.0300, 0.4496], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.4854, -0.0204, -0.3398, -0.0259, -1.6659], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0482, -0.5024, -0.4652, -0.0810, -0.5243], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0034, -0.5397, -0.5347, -0.1072, -0.5302], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0017, -0.1987, -0.1975, -0.0507, -0.1964], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0017, -0.1987, -0.1975, -0.0507, -0.1964], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0903,  0.1195,  0.0558,  1.1043,  0.2810], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.2288, -0.1163, -0.0929, -0.2086,  0.0685], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.5763,  -1.0444,  -0.8388,  -5.6765, -20.4018],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0526, 0.0402, 0.0768, 0.0384, 0.0053], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9205, 0.9589, 0.9376, 0.8040, 0.8968], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0017, -0.1987, -0.1975, -0.0507, -0.1964], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 8.0502e-06, -1.0660e-05, -4.9746e-06, -9.8463e-05, -2.5054e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0002, -0.0001,  0.0006,  0.0001, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0021,  0.0058, -0.0221,  0.0036, -0.0166], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0030, -0.1010, -0.1283, -0.0237, -0.1221], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0030, -0.1010, -0.1283, -0.0237, -0.1221], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0008,  0.0237,  0.0347,  0.0061, -0.0407], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([6.2924], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3986], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0005,  0.0152,  0.0211,  0.0039, -0.0230], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0005,  0.0152,  0.0211,  0.0039, -0.0230], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0651,  0.0648, -0.1241, -0.0152, -0.0429], grad_fn=<SliceBackward0>)
  [Layer 5] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 5] Output sample values after mixer: tensor([ 0.0651,  0.0648, -0.1241, -0.0152, -0.0429], grad_fn=<SliceBackward0>)
  [Layer 5] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 5] Residual connection sample values: tensor([ 0.0107,  0.0546, -0.2101, -0.2245, -0.0656], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 6/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2785], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.8950], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0089,  0.0353, -0.1557, -0.1720, -0.0556], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.9845, -0.0552, -1.5301,  1.0818,  0.3402], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.9845, -0.0552, -1.5301,  1.0818,  0.3402], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1148, -0.3116, -0.7862,  2.2849,  0.8305], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.2884, 2.4765, 1.5164, 1.2231, 1.4278], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.9961,  0.4546,  0.0595, -0.1148,  0.2337], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0104,  0.0521, -1.6640, -0.2982,  0.2576], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0447, -0.0202, -1.7262, -0.2361,  0.3273], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0229, -0.0100, -0.2608, -0.1042,  0.1902], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0229, -0.0100, -0.2608, -0.1042,  0.1902], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0561, -0.1145, -0.2571, -0.0294,  0.0635], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1098, -0.1226, -0.2784,  0.1991,  0.1972], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9866, -8.7747, -3.3046, -2.9913, -3.3435], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0339, 0.1523, 0.3357, 0.2084, 0.1184], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9671, 0.2628, 0.3298, 0.5362, 0.6732], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0229, -0.0100, -0.2608, -0.1042,  0.1902], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 4.3454e-05, -8.8695e-05, -1.9915e-04, -2.2735e-05,  4.9161e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0176, -0.0006, -0.0103, -0.0012,  0.0039], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0877, -0.1618, -0.1869,  0.0043, -0.1945], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0926, -0.1640, -0.2433, -0.0182, -0.1533], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0926, -0.1640, -0.2433, -0.0182, -0.1533], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0664,  0.0044,  0.0663, -0.0147, -0.0305], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([6.9353], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3797], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0484,  0.0015,  0.0215, -0.0062, -0.0091], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0484,  0.0015,  0.0215, -0.0062, -0.0091], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1246,  0.1650, -0.0036, -0.2285,  0.4317], grad_fn=<SliceBackward0>)
  [Layer 6] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 6] Output sample values after mixer: tensor([ 0.1246,  0.1650, -0.0036, -0.2285,  0.4317], grad_fn=<SliceBackward0>)
  [Layer 6] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 6] Residual connection sample values: tensor([ 0.1353,  0.2196, -0.2137, -0.4531,  0.3661], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 7/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.4351], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.5160], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0789,  0.1064, -0.1156, -0.2420,  0.2142], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1386, -1.2892, -0.7356, -1.5447,  0.3087], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1386, -1.2892, -0.7356, -1.5447,  0.3087], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.6185, -0.3893, -0.8486, -0.3419,  0.9687], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.8863, 0.0026, 1.5209, 1.5664, 1.3249], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-2.4475, -1.9762, -1.7871, -1.6185, -1.2238], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0075,  0.0762,  0.0266, -0.3771, -0.1612], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0757,  0.1008,  0.0259, -0.3707, -0.1648], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0364,  0.0529,  0.0131, -0.1514, -0.0756], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0364,  0.0529,  0.0131, -0.1514, -0.0756], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0891, -0.0435, -0.0381, -0.1075,  0.0559], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0344, -0.0649, -0.0839, -0.0482,  0.0156], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2959, -1.1836, -0.3113, -0.1314, -1.5015], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0418, 0.0060, 0.0115, 0.0699, 0.0040], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9877, 0.9929, 0.9964, 0.9909, 0.9940], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0364,  0.0529,  0.0131, -0.1514, -0.0756], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.3575e-04,  6.6314e-05,  5.8002e-05,  1.6367e-04, -8.5137e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0010,  0.0008, -0.0012,  0.0004, -0.0033], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 7.4542e-04, -2.4308e-03, -5.2648e-03, -9.3929e-05,  1.6280e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0007, -0.0023, -0.0052, -0.0004,  0.0015], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0007, -0.0023, -0.0052, -0.0004,  0.0015], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([4.9075e-05, 6.4313e-04, 1.2475e-03, 1.1960e-04, 2.5900e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0353], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.3194], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0003, 0.0024, 0.0108, 0.0007, 0.0022], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0003, 0.0024, 0.0108, 0.0007, 0.0022], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2564,  0.1232, -0.0453, -0.0684, -0.1429], grad_fn=<SliceBackward0>)
  [Layer 7] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 7] Output sample values after mixer: tensor([-0.2564,  0.1232, -0.0453, -0.0684, -0.1429], grad_fn=<SliceBackward0>)
  [Layer 7] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 7] Residual connection sample values: tensor([-0.1211,  0.3428, -0.2590, -0.5215,  0.2232], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 8/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.6479], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.2423], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0776,  0.1719, -0.1546, -0.3097,  0.1423], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2845, -2.3648, -2.3444, -1.9353, -0.5149], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2845, -2.3648, -2.3444, -1.9353, -0.5149], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7769,  1.3697, -2.0141, -0.0442,  0.0095], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.7395,  0.2203,  0.5501,  1.6970, -0.4396], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.3357, 0.8001, 0.3661, 0.7769, 0.5890], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0834, -0.1109,  0.1931, -0.5692,  0.0483], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.5463, -0.1419, -0.1216, -0.6207, -0.0078], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.3459, -0.0659, -0.0571, -0.2170, -0.0039], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.3459, -0.0659, -0.0571, -0.2170, -0.0039], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0569, -0.0628,  0.1869,  0.0335,  0.0726], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.5477, -0.1303, -0.0913,  0.5309, -0.2456], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.6543, -0.9827, -0.5550, -3.9397, -1.8081], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0210, 0.0672, 0.0192, 0.1248, 0.0062], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9262, 0.9361, 0.9894, 0.6116, 0.9888], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.3459, -0.0659, -0.0571, -0.2170, -0.0039], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0004, -0.0005,  0.0014,  0.0002,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0005,  0.0028,  0.0016, -0.0027, -0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0541, -0.0154, -0.0280, -0.0197, -0.0128], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.3453, -0.0709, -0.0761, -0.2023, -0.0161], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.3453, -0.0709, -0.0761, -0.2023, -0.0161], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0561, 0.0144, 0.0156, 0.0494, 0.0031], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([2.9127], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5859], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0317, 0.0104, 0.0076, 0.0379, 0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0317, 0.0104, 0.0076, 0.0379, 0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1131,  0.1239,  0.1495,  0.0870, -0.1421], grad_fn=<SliceBackward0>)
  [Layer 8] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 8] Output sample values after mixer: tensor([ 0.1131,  0.1239,  0.1495,  0.0870, -0.1421], grad_fn=<SliceBackward0>)
  [Layer 8] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 8] Residual connection sample values: tensor([-0.0080,  0.4667, -0.1095, -0.4345,  0.0811], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 9/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.1165], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9464], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0036,  0.1715, -0.0452, -0.1725,  0.0360], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.3515, -0.0636, -0.8075, -1.2605, -0.9796], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.3515, -0.0636, -0.8075, -1.2605, -0.9796], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([1.5141, 0.4714, 0.0658, 0.7394, 0.0422], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.6822, 1.4830, 2.3596, 1.2054, 2.1156], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0206,  0.3292,  0.7056,  1.5141, -0.9900], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2224,  0.0709, -0.2880,  0.0412, -0.1306], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2150,  0.0456, -0.3747, -0.0327, -0.1056], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0960,  0.0233, -0.1526, -0.0161, -0.0500], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0960,  0.0233, -0.1526, -0.0161, -0.0500], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1795, -0.2769, -0.0175,  0.4347,  0.1518], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1082, -0.2289, -0.2448, -0.2697, -0.2439], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-5.2345, -1.2161, -1.4888, -0.9523, -3.9667], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1384, 0.1555, 0.0497, 0.3740, 0.1235], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.4846, 0.8277, 0.9286, 0.7004, 0.6126], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0960,  0.0233, -0.1526, -0.0161, -0.0500], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0024,  0.0037,  0.0002, -0.0058, -0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0025,  0.0025,  0.0022, -0.0037, -0.0026], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0074,  0.0047, -0.0259,  0.0005, -0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1375,  0.0363, -0.2328, -0.0213, -0.0703], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1375,  0.0363, -0.2328, -0.0213, -0.0703], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0382, -0.0011,  0.0580,  0.0059,  0.0188], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([3.0374], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5738], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0227, -0.0010,  0.0343,  0.0028,  0.0128], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0227, -0.0010,  0.0343,  0.0028,  0.0128], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0697, -0.0392,  0.3924,  0.1017,  0.0935], grad_fn=<SliceBackward0>)
  [Layer 9] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 9] Output sample values after mixer: tensor([-0.0697, -0.0392,  0.3924,  0.1017,  0.0935], grad_fn=<SliceBackward0>)
  [Layer 9] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 9] Residual connection sample values: tensor([-0.0777,  0.4275,  0.2830, -0.3328,  0.1745], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 10/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.3712], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8540], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0271,  0.1248,  0.0892, -0.1039,  0.0596], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4301, -0.5985, -0.0174, -0.6373, -0.5604], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4301, -0.5985, -0.0174, -0.6373, -0.5604], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7226,  0.1137,  0.9381, -0.2624,  0.5380], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.0673, 0.2937, 0.6619, 0.7831, 1.2595], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.3957, -0.5293, -0.7617,  0.7226,  1.2418], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1228, -0.3178,  0.0865,  0.0034,  0.0820], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0844, -0.4049, -0.0174, -0.0825,  0.0224], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0440, -0.1620, -0.0086, -0.0395,  0.0113], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0440, -0.1620, -0.0086, -0.0395,  0.0113], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1042, -0.0464,  0.0793,  0.1246, -0.0900], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2480, -0.0366, -0.2743,  0.0653, -0.1072], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.7155, -1.4068, -0.3534, -2.0102, -0.4653], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0035, 0.0048, 0.1759, 0.0040, 0.0264], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9872, 0.9933, 0.9397, 0.9920, 0.9878], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0440, -0.1620, -0.0086, -0.0395,  0.0113], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.5884e-05, -7.0818e-06,  1.2095e-05,  1.9006e-05, -1.3722e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-7.9396e-06,  5.0750e-05,  3.8826e-05,  3.2433e-05,  1.4402e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 8.6367e-05, -2.4252e-03,  2.8689e-04, -5.1923e-04,  1.8298e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0098, -0.0380, -0.0016, -0.0092,  0.0043], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0098, -0.0380, -0.0016, -0.0092,  0.0043], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.6535e-03,  8.0709e-03,  1.3824e-05,  2.0288e-03, -8.8034e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0189], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.2705], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0180,  0.0429,  0.0001,  0.0197, -0.0079], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0180,  0.0429,  0.0001,  0.0197, -0.0079], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1013,  0.2863,  0.0369, -0.0164,  0.0385], grad_fn=<SliceBackward0>)
  [Layer 10] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 10] Output sample values after mixer: tensor([-0.1013,  0.2863,  0.0369, -0.0164,  0.0385], grad_fn=<SliceBackward0>)
  [Layer 10] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 10] Residual connection sample values: tensor([-0.1790,  0.7138,  0.3199, -0.3491,  0.2130], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 11/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.7741], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7508], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0618,  0.2005,  0.0986, -0.1050,  0.0703], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.1318, -0.2446,  0.1041, -0.6048,  0.7671], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.1318, -0.2446,  0.1041, -0.6048,  0.7671], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5231,  0.5698, -0.3505,  0.4223, -0.0876], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0839, 1.5165, 1.7290, 2.3122, 2.0289], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.5171, -0.0825,  0.5254, -0.5231,  0.0086], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1060, -0.1873,  0.1056, -0.0701, -0.0268], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0918, -0.5450,  0.2021, -0.0580, -0.0037], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0480, -0.2000,  0.1112, -0.0281, -0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0480, -0.2000,  0.1112, -0.0281, -0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2686, -0.2745, -0.2779, -0.0209,  0.1421], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0414, -0.0719, -0.2667, -0.2006,  0.0171], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.3116, -0.0902, -1.5786, -0.2096, -0.6694], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0511, 0.1359, 0.5411, 0.3654, 0.0554], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9842, 0.9878, 0.4257, 0.9263, 0.9636], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0480, -0.2000,  0.1112, -0.0281, -0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-6.5982e-04, -6.7433e-04, -6.8269e-04, -5.1271e-05,  3.4914e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0437, -0.0569,  0.0509,  0.0138, -0.0513], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0807, -0.1564,  0.1593, -0.0505,  0.0116], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0631, -0.2298,  0.2001, -0.0608,  0.0109], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0631, -0.2298,  0.2001, -0.0608,  0.0109], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0540,  0.0247,  0.0110,  0.0130,  0.0057], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.3812], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8509], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0564,  0.0253,  0.0080,  0.0308,  0.0045], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0564,  0.0253,  0.0080,  0.0308,  0.0045], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0078,  0.2023, -0.1819,  0.3064,  0.1506], grad_fn=<SliceBackward0>)
  [Layer 11] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 11] Output sample values after mixer: tensor([ 0.0078,  0.2023, -0.1819,  0.3064,  0.1506], grad_fn=<SliceBackward0>)
  [Layer 11] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 11] Residual connection sample values: tensor([-0.1712,  0.9162,  0.1380, -0.0427,  0.3636], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 12/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.4299], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6415], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0454,  0.2015,  0.0319, -0.0098,  0.0923], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1499, -0.8383, -0.6425,  0.1357, -0.6005], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1499, -0.8383, -0.6425,  0.1357, -0.6005], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6395,  0.3757, -0.0652, -0.2589,  0.1402], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.0872, 2.0956, 1.8770, 1.2042, 1.7051], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1674, -0.3650, -0.6304, -0.6395,  1.2600], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1111, -0.0875, -0.0774,  0.0323,  0.0248], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1541, -0.0746, -0.1123,  0.0026,  0.0375], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0711, -0.0359, -0.0530,  0.0013,  0.0191], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0711, -0.0359, -0.0530,  0.0013,  0.0191], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0138, -0.2200, -0.0084, -0.1036, -0.0101], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2755, -0.1754,  0.0537, -0.2643, -0.0979], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2412, -0.7694, -1.9975, -1.2368, -1.0181], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2992, 0.4495, 0.1643, 0.2809, 0.3678], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6898, 0.7077, 0.7202, 0.7065, 0.6876], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0711, -0.0359, -0.0530,  0.0013,  0.0191], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0003,  0.0047,  0.0002,  0.0022,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0028,  0.0091, -0.0122,  0.0046, -0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0099, -0.0116,  0.0258, -0.0045, -0.0038], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0611, -0.0375, -0.0123, -0.0035,  0.0099], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0611, -0.0375, -0.0123, -0.0035,  0.0099], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0049,  0.0095,  0.0027, -0.0003, -0.0021], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2606], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.9588], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0173,  0.0220,  0.0048, -0.0005, -0.0061], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0173,  0.0220,  0.0048, -0.0005, -0.0061], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.3338, -0.1647, -0.1824, -0.2155,  0.4322], grad_fn=<SliceBackward0>)
  [Layer 12] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 12] Output sample values after mixer: tensor([-0.3338, -0.1647, -0.1824, -0.2155,  0.4322], grad_fn=<SliceBackward0>)
  [Layer 12] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 12] Residual connection sample values: tensor([-0.5050,  0.7514, -0.0445, -0.2583,  0.7958], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 13/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.7156], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6068], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1240,  0.1596, -0.0101, -0.0551,  0.1983], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-2.0498,  1.0725,  0.5427,  1.0185, -0.0680], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-2.0498,  1.0725,  0.5427,  1.0185, -0.0680], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6495, -0.2188, -0.5108,  0.3746,  0.3227], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.5958, 1.4072, 1.5906, 1.0673, 2.1649], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.8053, -0.2960, -1.7110, -0.6495,  0.1351], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-3.0877e-01, -1.3195e-02,  7.7870e-01, -2.3363e-04, -6.0881e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.5734, -0.1231,  0.7582, -0.0010, -0.0848], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.2067, -0.0578,  0.5163, -0.0005, -0.0406], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.2067, -0.0578,  0.5163, -0.0005, -0.0406], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0739,  0.0972, -0.1777,  0.5368, -0.0933], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.3015, -0.1681, -0.0574,  0.4294,  0.1498], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3103, -1.7871, -0.8606, -1.8811, -0.5252], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0465, 0.0393, 0.1754, 0.1301, 0.1438], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9409, 0.9322, 0.8599, 0.7829, 0.9272], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.2067, -0.0578,  0.5163, -0.0005, -0.0406], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0007, -0.0009,  0.0017, -0.0052,  0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0007, -0.0063,  0.0012, -0.0400,  0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0706,  0.0394,  0.0256, -0.0107,  0.0327], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0795,  0.0369,  0.0478, -0.0107,  0.0310], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0795,  0.0369,  0.0478, -0.0107,  0.0310], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0186,  0.0295,  0.0164, -0.0080, -0.0010], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1240], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([2.8399], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0717,  0.0375,  0.0855, -0.0476, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0717,  0.0375,  0.0855, -0.0476, -0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2509, -0.2693,  0.0112,  0.1097,  0.1825], grad_fn=<SliceBackward0>)
  [Layer 13] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 13] Output sample values after mixer: tensor([ 0.2509, -0.2693,  0.0112,  0.1097,  0.1825], grad_fn=<SliceBackward0>)
  [Layer 13] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 13] Residual connection sample values: tensor([-0.2541,  0.4821, -0.0333, -0.1486,  0.9783], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 14/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.8520], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5921], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0525,  0.0875, -0.0064, -0.0267,  0.1974], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1869,  0.1839, -0.7541, -0.4455,  0.2909], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1869,  0.1839, -0.7541, -0.4455,  0.2909], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.2765, -0.1006,  0.2325, -0.0415,  0.3634], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0729, 1.2303, 1.2388, 1.6383, 2.3051], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0466, -0.7872, -1.5263, -1.2765,  1.1026], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3571, -0.1055, -0.1315, -0.0260, -0.0499], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3966, -0.1467, -0.1924, -0.0888, -0.0134], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1595, -0.0680, -0.0870, -0.0424, -0.0066], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1595, -0.0680, -0.0870, -0.0424, -0.0066], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0869, -0.0336,  0.0430, -0.0349, -0.0288], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0682, -0.0515,  0.0303, -0.0760, -0.1056], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.3184, -0.7621, -2.6670, -5.1836, -2.8487], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1114, 0.0406, 0.2564, 0.0823, 0.1312], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6180, 0.9695, 0.5046, 0.6526, 0.6881], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1595, -0.0680, -0.0870, -0.0424, -0.0066], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0015,  0.0006, -0.0008,  0.0006,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0024,  0.0009, -0.0009,  0.0012,  0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0218, -0.0042, -0.0146, -0.0057, -0.0031], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0863, -0.0316, -0.0497, -0.0229, -0.0058], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0863, -0.0316, -0.0497, -0.0229, -0.0058], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0088, -0.0032,  0.0120,  0.0040, -0.0010], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0356], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.2996], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0509, -0.0107,  0.0585,  0.0273, -0.0076], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0509, -0.0107,  0.0585,  0.0273, -0.0076], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2638,  0.1069,  0.2673,  0.4344, -0.0016], grad_fn=<SliceBackward0>)
  [Layer 14] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 14] Output sample values after mixer: tensor([ 0.2638,  0.1069,  0.2673,  0.4344, -0.0016], grad_fn=<SliceBackward0>)
  [Layer 14] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 14] Residual connection sample values: tensor([0.0097, 0.5890, 0.2341, 0.2858, 0.9767], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 15/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3.3900], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5431], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.0019, 0.0953, 0.0409, 0.0468, 0.1781], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3463,  1.0722,  0.5539, -0.0512, -1.0556], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3463,  1.0722,  0.5539, -0.0512, -1.0556], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0531, -0.7318, -0.2281,  0.3990,  0.7812], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.5565, 0.6364, 2.1197, 0.1931, 0.5581], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.4717,  0.1967, -0.6432,  0.0531,  0.1164], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1399,  0.1684,  0.0753, -0.2559, -0.0643], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1773,  0.1616,  0.0505, -0.2736, -0.0896], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0808,  0.0873,  0.0259, -0.1182, -0.0428], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0808,  0.0873,  0.0259, -0.1182, -0.0428], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0400, -0.0568, -0.0148,  0.0293,  0.0482], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0269, -0.0296,  0.0063, -0.0254, -0.0314], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2782, -0.6808, -2.7209, -0.1126, -3.8484], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0034, 0.0297, 0.1195, 0.0069, 0.0401], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9991, 0.9800, 0.7224, 0.9992, 0.8569], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0808,  0.0873,  0.0259, -0.1182, -0.0428], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.0916e-05,  1.5487e-05,  4.0449e-06, -7.9835e-06, -1.3138e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-6.2597e-05,  5.7871e-06, -1.8659e-05, -1.5917e-05, -1.0143e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 4.6982e-06,  1.2902e-06,  2.6805e-06, -1.2029e-06,  3.0831e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0138,  0.0149,  0.0044, -0.0201, -0.0073], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0138,  0.0149,  0.0044, -0.0201, -0.0073], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0028,  0.0119,  0.0016,  0.0005,  0.0020], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0029], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([18.5680], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0537,  0.2985,  0.0301,  0.0113,  0.0328], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0537,  0.2985,  0.0301,  0.0113,  0.0328], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1457,  0.3817,  0.5156, -0.2529,  0.0990], grad_fn=<SliceBackward0>)
  [Layer 15] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 15] Output sample values after mixer: tensor([-0.1457,  0.3817,  0.5156, -0.2529,  0.0990], grad_fn=<SliceBackward0>)
  [Layer 15] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 15] Residual connection sample values: tensor([-0.1359,  0.9707,  0.7497,  0.0329,  1.0757], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 16/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([5.5429], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4247], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0225,  0.1345,  0.1138,  0.0046,  0.1712], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.6236e-01,  5.9605e-06,  5.3798e-02,  1.1053e+00, -6.6109e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.6236e-01,  5.9605e-06,  5.3798e-02,  1.1053e+00, -6.6109e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.6475,  0.0963, -0.4101,  1.0362,  0.2033], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4632, 1.1194, 1.6726, 1.1930, 1.9715], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.9899,  0.8946,  1.6345,  0.6475, -1.3075], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2755, -0.0405, -0.0958,  0.3158,  0.0245], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2394, -0.0816, -0.1089,  0.2234, -0.0176], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1340, -0.0392, -0.0515,  0.1241, -0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1340, -0.0392, -0.0515,  0.1241, -0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2221, -0.0333, -0.0291,  0.0277, -0.1950], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1994,  0.1072, -0.0847,  0.9007, -0.1513], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6906, -0.1348, -1.3129, -3.7740, -1.2635], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2263, 0.1948, 0.2360, 0.2242, 0.1566], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5440, 0.9741, 0.7335, 0.4291, 0.8205], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1340, -0.0392, -0.0515,  0.1241, -0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0067, -0.0010, -0.0009,  0.0008, -0.0059], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-8.8766e-03, -2.6541e-03,  3.9363e-04,  4.9266e-05, -7.4735e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0509, -0.0235, -0.0133,  0.0279, -0.0149], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1371, -0.0487, -0.0464,  0.1078, -0.0205], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1371, -0.0487, -0.0464,  0.1078, -0.0205], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.0225e-02, -1.4520e-07, -1.2825e-03,  8.9523e-02,  4.6098e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0925], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.2874], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-4.3200e-02, -4.8152e-07, -5.0974e-03,  3.1700e-01,  1.6767e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-4.3200e-02, -4.8152e-07, -5.0974e-03,  3.1700e-01,  1.6767e-02],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2143,  0.2350,  0.2242,  0.4943, -0.1428], grad_fn=<SliceBackward0>)
  [Layer 16] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 16] Output sample values after mixer: tensor([ 0.2143,  0.2350,  0.2242,  0.4943, -0.1428], grad_fn=<SliceBackward0>)
  [Layer 16] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 16] Residual connection sample values: tensor([0.0784, 1.2056, 0.9739, 0.5273, 0.9330], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 17/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([6.4988], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3923], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.0119, 0.1537, 0.1316, 0.0659, 0.1362], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0731, -0.1740, -0.3143, -0.3178, -0.1109], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0731, -0.1740, -0.3143, -0.3178, -0.1109], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.4684, -0.7466,  0.4578, -1.0219, -0.5412], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.3041,  2.0325,  1.1573,  1.6168,  1.6795], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.9301, -1.2048, -1.2433, -0.4684,  0.3195], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1417,  0.1296, -0.1114,  0.0728,  0.0965], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1735,  0.1034, -0.1257,  0.0674,  0.1091], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0793,  0.0544, -0.0589,  0.0348,  0.0575], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0793,  0.0544, -0.0589,  0.0348,  0.0575], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1849,  0.0273, -0.1660,  0.1652, -0.1776], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1056,  0.0117,  0.0599,  0.1429,  0.0214], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.1571, -11.4668, -14.2150,  -0.1286, -14.2428],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0004, 0.0758, 0.0672, 0.1057, 0.0373], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9996, 0.4194, 0.3849, 0.9865, 0.5877], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0793,  0.0544, -0.0589,  0.0348,  0.0575], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.5510e-06, -8.1964e-07,  4.9837e-06, -4.9606e-06,  5.3321e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-6.8680e-05,  8.4496e-05,  1.0638e-04, -2.6223e-04,  1.4366e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.3572e-05, -1.4424e-05,  4.5059e-07, -4.1234e-06,  2.2889e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0511,  0.0351, -0.0380,  0.0225,  0.0371], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0511,  0.0351, -0.0380,  0.0225,  0.0371], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0019, -0.0028,  0.0050, -0.0030, -0.0019], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0340], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.4221], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0163, -0.0286,  0.0393, -0.0286, -0.0186], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0163, -0.0286,  0.0393, -0.0286, -0.0186], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.5733, -0.1929,  0.0721, -0.2366,  0.4085], grad_fn=<SliceBackward0>)
  [Layer 17] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 17] Output sample values after mixer: tensor([ 0.5733, -0.1929,  0.0721, -0.2366,  0.4085], grad_fn=<SliceBackward0>)
  [Layer 17] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 17] Residual connection sample values: tensor([0.6517, 1.0127, 1.0460, 0.2906, 1.3415], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 18/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([10.0883], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3148], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.0710, 0.0933, 0.1019, 0.0266, 0.1405], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6222, -0.7682,  0.0418, -0.1162,  0.1104], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6222, -0.7682,  0.0418, -0.1162,  0.1104], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0258,  0.6980, -0.0142, -0.1407, -0.4150], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9947, 1.7862, 0.6390, 1.4221, 2.6002], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5444,  0.0838,  0.9927, -0.0258, -0.9689], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2033, -0.5172, -0.0553, -0.1987, -0.0336], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1933, -0.7826,  0.2245, -0.2126, -0.0757], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1060, -0.2456,  0.1248, -0.0950, -0.0364], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1060, -0.2456,  0.1248, -0.0950, -0.0364], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1720,  0.0682, -0.0628,  0.0586,  0.0387], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2782, -0.1108,  0.0173, -0.0857, -0.0380], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3011, -1.4686, -1.2083, -1.2129, -2.5875], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2401, 0.2887, 0.1349, 0.2769, 0.4633], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7317, 0.6545, 0.8496, 0.7147, 0.3015], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1060, -0.2456,  0.1248, -0.0950, -0.0364], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0044,  0.0017, -0.0016,  0.0015,  0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([0.0078, 0.0067, 0.0060, 0.0015, 0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0112, -0.0727,  0.0911, -0.0490, -0.0253], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0317, -0.1201,  0.1152, -0.0674, -0.0324], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0317, -0.1201,  0.1152, -0.0674, -0.0324], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0069,  0.0292,  0.0025,  0.0037, -0.0019], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0230], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.5907], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0593,  0.1034,  0.0158,  0.0305, -0.0246], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0593,  0.1034,  0.0158,  0.0305, -0.0246], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.4901,  0.2554,  0.2575, -0.2767,  0.3663], grad_fn=<SliceBackward0>)
  [Layer 18] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 18] Output sample values after mixer: tensor([ 0.4901,  0.2554,  0.2575, -0.2767,  0.3663], grad_fn=<SliceBackward0>)
  [Layer 18] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 18] Residual connection sample values: tensor([1.1417, 1.2681, 1.3035, 0.0139, 1.7077], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 19/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([10.7881], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3045], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.1186, 0.1137, 0.1263, 0.0012, 0.1770], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1313, -0.4682,  0.5274, -0.1783,  0.0716], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1313, -0.4682,  0.5274, -0.1783,  0.0716], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0258, -0.4758, -0.4548, -0.1594, -0.2099], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9217, 1.6571, 1.6708, 1.0045, 0.9322], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.4180, -1.0871, -0.6589, -0.0258, -0.2743], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1832, -0.1825, -0.0834, -0.0767,  0.0229], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2189, -0.2069, -0.0884, -0.1193, -0.0101], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0975, -0.0928, -0.0423, -0.0561, -0.0050], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0975, -0.0928, -0.0423, -0.0561, -0.0050], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0338, -0.0567,  0.0290,  0.1043, -0.0066], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2257, -0.0198, -0.0078, -0.1989, -0.0586], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9436, -1.8179, -2.0862, -1.0006, -0.9650], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1316, 0.1425, 0.1172, 0.1342, 0.1738], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7742, 0.7718, 0.7832, 0.8744, 0.8456], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0975, -0.0928, -0.0423, -0.0561, -0.0050], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 4.3349e-04,  7.2805e-04, -3.7212e-04, -1.3393e-03,  8.4307e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0011, -0.0185, -0.0003, -0.0015,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0074, -0.0083, -0.0030,  0.0007,  0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0183, -0.0187, -0.0078, -0.0056,  0.0024], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0183, -0.0187, -0.0078, -0.0056,  0.0024], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.2833e-03,  3.3760e-03, -2.5807e-03,  4.5224e-04,  8.8043e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0018], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([23.5368], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0365,  0.1010, -0.0990,  0.0127,  0.0035], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0365,  0.1010, -0.0990,  0.0127,  0.0035], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1279, -0.1698,  0.2693, -0.0558, -0.2480], grad_fn=<SliceBackward0>)
  [Layer 19] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 19] Output sample values after mixer: tensor([ 0.1279, -0.1698,  0.2693, -0.0558, -0.2480], grad_fn=<SliceBackward0>)
  [Layer 19] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 19] Residual connection sample values: tensor([ 1.2696,  1.0983,  1.5727, -0.0419,  1.4597], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 20/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([11.1108], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3000], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1472,  0.1092,  0.1674, -0.0041,  0.1641], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0948, -0.3824, -0.5035, -0.0205,  0.2113], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0948, -0.3824, -0.5035, -0.0205,  0.2113], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0375,  0.4224, -0.8799,  0.3799, -0.2621], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.5366, 2.0371, 1.9467, 1.2003, 1.4709], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.4117, -0.9065, -0.4845,  0.0375,  0.1886], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1287,  0.2185, -0.3028, -0.3206,  0.1707], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0902,  0.2270, -0.2362, -0.3394,  0.1432], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0471,  0.1263, -0.1042, -0.1412,  0.0767], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0471,  0.1263, -0.1042, -0.1412,  0.0767], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([0.1969, 0.2024, 0.0808, 0.2079, 0.2335], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1241, -0.2318,  0.0448, -0.0243,  0.6044], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.6216, -5.0389, -1.2056, -1.6435, -1.3345], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1292, 0.0839, 0.0597, 0.1454, 0.1253], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8110, 0.6551, 0.9305, 0.7874, 0.8460], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0471,  0.1263, -0.1042, -0.1412,  0.0767], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([0.0012, 0.0012, 0.0005, 0.0013, 0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0024,  0.0012,  0.0031,  0.0034,  0.0047], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0170,  0.0323, -0.0093, -0.0228,  0.0360], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0174,  0.0333, -0.0102, -0.0239,  0.0366], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0174,  0.0333, -0.0102, -0.0239,  0.0366], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0008, -0.0052,  0.0019,  0.0002,  0.0043], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0099], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.0439], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0105, -0.0740,  0.0371,  0.0035,  0.0555], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0105, -0.0740,  0.0371,  0.0035,  0.0555], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2645,  0.4379,  0.1218, -0.5258,  0.2432], grad_fn=<SliceBackward0>)
  [Layer 20] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 20] Output sample values after mixer: tensor([ 0.2645,  0.4379,  0.1218, -0.5258,  0.2432], grad_fn=<SliceBackward0>)
  [Layer 20] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 20] Residual connection sample values: tensor([ 1.5341,  1.5362,  1.6945, -0.5676,  1.7029], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 21/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([12.0825], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2877], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1294,  0.1176,  0.1231, -0.0397,  0.1343], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6029, -0.3702,  0.0484, -0.0848, -0.0739], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6029, -0.3702,  0.0484, -0.0848, -0.0739], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0051,  0.5011,  0.0216, -0.3774,  0.2001], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4231, 3.0360, 1.2013, 1.1698, 3.3352], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.1052,  0.6582, -0.0838,  0.0051, -0.2656], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0004,  0.1352, -0.0058,  0.0813, -0.0313], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0309,  0.1051,  0.0091,  0.0763, -0.0034], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0152,  0.0553,  0.0046,  0.0396, -0.0017], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0152,  0.0553,  0.0046,  0.0396, -0.0017], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0095, -0.0455,  0.1031,  0.0417,  0.0792], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0394, -0.0009, -0.0041,  0.0633, -0.0017], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.2092, -0.0434, -3.8147, -6.6624, -0.0228], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2225, 0.0848, 0.0967, 0.0758, 0.1999], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.4896, 0.9963, 0.6914, 0.6034, 0.9955], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0152,  0.0553,  0.0046,  0.0396, -0.0017], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.2298e-05,  1.5393e-04, -3.4922e-04, -1.4132e-04, -2.6815e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0002,  0.0002, -0.0002, -0.0002, -0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.8091e-04,  5.6091e-04,  9.9763e-05,  4.9232e-04, -3.1310e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0029,  0.0103,  0.0009,  0.0074, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0029,  0.0103,  0.0009,  0.0074, -0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 6.0819e-04, -1.5527e-03,  2.2297e-05, -3.0208e-04,  1.1676e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([59.1122], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0455, -0.1067,  0.0020, -0.0233,  0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0455, -0.1067,  0.0020, -0.0233,  0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2792,  0.3260,  0.0898, -0.4735,  0.5902], grad_fn=<SliceBackward0>)
  [Layer 21] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 21] Output sample values after mixer: tensor([-0.2792,  0.3260,  0.0898, -0.4735,  0.5902], grad_fn=<SliceBackward0>)
  [Layer 21] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 21] Residual connection sample values: tensor([ 1.2550,  1.8622,  1.7843, -1.0412,  2.2931], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 22/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([14.1008], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2663], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1541,  0.1926,  0.1956, -0.1052,  0.2640], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.8319,  0.1722, -0.1257, -0.4901, -0.4170], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.8319,  0.1722, -0.1257, -0.4901, -0.4170], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6780,  0.0390, -0.3192,  0.3095, -0.1761], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.1080, 1.7123, 1.2831, 1.0028, 1.8415], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0208, -0.6229,  0.0427, -0.6780, -0.0486], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0575, -0.0144, -0.0504, -0.0443, -0.1702], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0099, -0.0931,  0.2690, -0.0853, -0.2359], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0049, -0.0444,  0.1525, -0.0408, -0.1041], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0049, -0.0444,  0.1525, -0.0408, -0.1041], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0535,  0.0223, -0.0502, -0.1736, -0.0404], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1513, -0.0695, -0.0482, -0.0190, -0.1046], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.1489, -3.5006, -2.8321, -5.5396, -1.7186], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0109, 0.2064, 0.2086, 0.1207, 0.0179], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9558, 0.4856, 0.5538, 0.5125, 0.9697], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0049, -0.0444,  0.1525, -0.0408, -0.1041], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.8892e-06,  1.2011e-06, -2.7073e-06, -9.3695e-06, -2.1815e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([3.0692e-05, 3.2290e-05, 7.7750e-06, 2.0388e-05, 6.1081e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0014,  0.0004,  0.0024,  0.0003, -0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0002, -0.0103,  0.0393, -0.0096, -0.0262], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0002, -0.0103,  0.0393, -0.0096, -0.0262], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 4.7074e-05, -9.6573e-04, -2.3151e-03,  1.7806e-03,  4.3466e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0033], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([17.4229], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0003, -0.0158, -0.0216,  0.0408,  0.0654], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0003, -0.0158, -0.0216,  0.0408,  0.0654], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0077, -0.4783,  0.2041,  0.3876, -0.0055], grad_fn=<SliceBackward0>)
  [Layer 22] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 22] Output sample values after mixer: tensor([-0.0077, -0.4783,  0.2041,  0.3876, -0.0055], grad_fn=<SliceBackward0>)
  [Layer 22] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 22] Residual connection sample values: tensor([ 1.2472,  1.3839,  1.9884, -0.6535,  2.2876], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 23/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([16.2242], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2483], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1002,  0.0956,  0.1462, -0.0454,  0.1780], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0267, -0.5391, -0.6545, -0.1569, -0.0312], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0267, -0.5391, -0.6545, -0.1569, -0.0312], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5952, -0.4787, -0.0677,  0.0169, -0.4892], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.1255,  0.7122,  0.9458,  0.1149,  1.4041], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.1897, -0.7503, -1.0936,  0.5952,  0.4468], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2763, -0.0741, -0.0163,  0.0203,  0.1662], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2539, -0.1073, -0.0277,  0.0181,  0.1168], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1430, -0.0508, -0.0136,  0.0091,  0.0618], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1430, -0.0508, -0.0136,  0.0091,  0.0618], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0846, -0.0005,  0.1965,  0.0216, -0.0470], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0400, -0.0592,  0.1247, -0.0006, -0.0115], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0811, -3.7998, -0.0826, -0.4878, -1.4532], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0105, 0.0859, 0.0265, 0.0016, 0.0042], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9992, 0.7214, 0.9978, 0.9992, 0.9939], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1430, -0.0508, -0.0136,  0.0091,  0.0618], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.2653e-04, -7.8180e-07,  2.9375e-04,  3.2229e-05, -7.0288e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0003,  0.0005, -0.0029, -0.0001,  0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0024, -0.0023,  0.0007, -0.0005,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0054, -0.0012,  0.0010, -0.0007, -0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0054, -0.0012,  0.0010, -0.0007, -0.0010], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 7.1848e-05,  2.3692e-04, -2.1722e-04,  5.3031e-05,  1.4892e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0006], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([40.1081], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0128,  0.0054, -0.0086,  0.0034,  0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0128,  0.0054, -0.0086,  0.0034,  0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.9535,  0.6539, -1.8661,  0.5106,  0.5506], grad_fn=<SliceBackward0>)
  [Layer 23] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 23] Output sample values after mixer: tensor([ 0.9535,  0.6539, -1.8661,  0.5106,  0.5506], grad_fn=<SliceBackward0>)
  [Layer 23] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 23] Residual connection sample values: tensor([ 2.2007,  2.0378,  0.1223, -0.1429,  2.8382], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 24/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([18.7869], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2307], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1351,  0.1194,  0.0069, -0.0078,  0.1690], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.8015, -0.5439,  0.8108, -0.0678, -0.1602], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.8015, -0.5439,  0.8108, -0.0678, -0.1602], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.1292,  0.3148,  0.2364, -0.2251,  0.7608], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.5067, 0.0943, 0.0176, 0.6714, 0.9115], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0015, -0.5737, -0.0558,  0.1292, -0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0346,  0.0013,  0.0276, -0.0303,  0.3518], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0380,  0.0013,  0.0237, -0.0319,  0.3471], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0186,  0.0006,  0.0120, -0.0157,  0.2034], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0186,  0.0006,  0.0120, -0.0157,  0.2034], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0536, -0.0546,  0.1524,  0.2498, -0.0348], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2266, -0.2437, -0.2779, -0.2721,  0.2751], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0742, -3.4497, -3.2885, -0.1609, -2.6945], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0246, 0.0319, 0.0465, 0.0090, 0.0529], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9982, 0.8958, 0.8582, 0.9986, 0.8671], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0186,  0.0006,  0.0120, -0.0157,  0.2034], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.4549e-05,  2.5031e-05, -6.9796e-05, -1.1442e-04,  1.5949e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.5050e-04,  5.5301e-04,  2.9779e-05, -6.6536e-05,  6.9890e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0009, -0.0014,  0.0013, -0.0012, -0.0044], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0008, -0.0014,  0.0012, -0.0011, -0.0054], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0008, -0.0014,  0.0012, -0.0011, -0.0054], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-4.1830e-04,  2.7772e-04,  6.8237e-04,  3.6285e-05,  4.0047e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([59.8807], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0237,  0.0223,  0.0494,  0.0096,  0.0626], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0237,  0.0223,  0.0494,  0.0096,  0.0626], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.3072,  0.3679, -0.8011, -0.2396, -0.5940], grad_fn=<SliceBackward0>)
  [Layer 24] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 24] Output sample values after mixer: tensor([-0.3072,  0.3679, -0.8011, -0.2396, -0.5940], grad_fn=<SliceBackward0>)
  [Layer 24] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 24] Residual connection sample values: tensor([ 1.8935,  2.4057, -0.6788, -0.3825,  2.2442], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 25/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([25.5033], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1980], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1118,  0.1298, -0.0378, -0.0199,  0.1311], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1979,  0.0378,  0.1760,  0.2141, -0.1702], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1979,  0.0378,  0.1760,  0.2141, -0.1702], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1142, -0.2667, -0.0546,  0.0810, -0.0950], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.9929, -1.2430,  1.2764,  2.5381,  0.7015], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.5078, -0.5971,  0.0611, -0.1142, -0.1709], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0180, -0.1087,  0.1953, -0.0262,  0.2665], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0155, -0.1369,  0.1839,  0.0346,  0.2607], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0078, -0.0638,  0.1004,  0.0176,  0.1472], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0078, -0.0638,  0.1004,  0.0176,  0.1472], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0072,  0.0294,  0.0376, -0.0547,  0.0589], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0022,  0.0220, -0.0838, -0.0036, -0.0527], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -0.3702,  -1.5045,  -5.7210,  -0.8176, -14.6662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3343, 0.0018, 0.0909, 0.0856, 0.0647], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8836, 0.9972, 0.5946, 0.9324, 0.3869], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0078, -0.0638,  0.1004,  0.0176,  0.1472], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.8713e-05,  7.6686e-05,  9.7902e-05, -1.4244e-04,  1.5348e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0055, -0.0028, -0.0006,  0.0015,  0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0002, -0.0002,  0.0010,  0.0004,  0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0002, -0.0009,  0.0020,  0.0006,  0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0002, -0.0009,  0.0020,  0.0006,  0.0023], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.7107e-05, -1.7232e-05,  1.9431e-04,  6.9401e-05, -1.8030e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0004], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([51.0138], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0010, -0.0007,  0.0131,  0.0028, -0.0159], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0010, -0.0007,  0.0131,  0.0028, -0.0159], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0558,  0.7178,  0.0760, -0.3913, -0.4072], grad_fn=<SliceBackward0>)
  [Layer 25] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 25] Output sample values after mixer: tensor([ 0.0558,  0.7178,  0.0760, -0.3913, -0.4072], grad_fn=<SliceBackward0>)
  [Layer 25] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 25] Residual connection sample values: tensor([ 1.9493,  3.1236, -0.6028, -0.7739,  1.8370], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 26/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([34.1853], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1710], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1286,  0.1907, -0.0371, -0.0467,  0.1185], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.6179, -0.0367, -0.0149, -0.1366, -0.7683], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.6179, -0.0367, -0.0149, -0.1366, -0.7683], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5639, -0.3627, -0.4825, -0.0141,  0.3546], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3262, 1.0188, 1.1905, 1.3197, 2.2739], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.8974,  1.1813,  0.8584,  0.5639, -0.6818], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2381,  0.1548, -0.0837,  0.0389, -0.0746], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3266,  0.0988, -0.0196,  0.0119, -0.0665], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1369,  0.0518, -0.0097,  0.0060, -0.0321], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1369,  0.0518, -0.0097,  0.0060, -0.0321], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0659,  0.0035, -0.0218,  0.0345,  0.0345], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1112,  0.0891,  0.0565,  0.0223, -0.0112], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9595, -0.3945, -0.8420, -1.4275, -0.1466], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1989, 0.2776, 0.1925, 0.3540, 0.1017], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8262, 0.8963, 0.8504, 0.6033, 0.9852], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1369,  0.0518, -0.0097,  0.0060, -0.0321], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.7944e-03, -9.6600e-05,  5.9441e-04, -9.3841e-04, -9.3981e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0029, -0.0013, -0.0021,  0.0003, -0.0031], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0078,  0.0062,  0.0022, -0.0009,  0.0049], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-2.5275e-02,  1.2841e-02,  9.3792e-04, -9.1724e-05,  8.1405e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-2.5275e-02,  1.2841e-02,  9.3792e-04, -9.1724e-05,  8.1405e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.0148e-02, -2.3153e-04, -6.9138e-06,  5.8360e-06, -1.9817e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0013], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([27.4687], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1394, -0.0071, -0.0002,  0.0002, -0.0068], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1394, -0.0071, -0.0002,  0.0002, -0.0068], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0021, -0.1715, -1.3994, -0.2293,  0.4473], grad_fn=<SliceBackward0>)
  [Layer 26] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 26] Output sample values after mixer: tensor([ 0.0021, -0.1715, -1.3994, -0.2293,  0.4473], grad_fn=<SliceBackward0>)
  [Layer 26] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 26] Residual connection sample values: tensor([ 1.9514,  2.9521, -2.0022, -1.0031,  2.2843], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 27/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([45.7365], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1479], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1207,  0.1667, -0.1213, -0.0558,  0.1470], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6282, -0.2562, -0.6264, -0.0306,  1.0180], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6282, -0.2562, -0.6264, -0.0306,  1.0180], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.2342,  0.3215, -0.2837,  0.1150, -0.2229], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3268, 1.3115, 1.1091, 1.2917, 1.5881], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.2518, -1.3850, -0.3111, -0.2342,  1.1541], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0868,  0.0418, -0.0643,  0.0277,  0.2416], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1128,  0.0053, -0.0743, -0.1742,  0.2118], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0532,  0.0026, -0.0358, -0.0796,  0.1171], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0532,  0.0026, -0.0358, -0.0796,  0.1171], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0904, -0.0889, -0.0821, -0.0254, -0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0342, -0.2759, -0.0722, -0.0176, -0.1765], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3662, -1.3799, -1.8268, -2.0409, -2.3490], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1508, 0.1645, 0.1408, 0.0596, 0.2036], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8139, 0.7970, 0.7732, 0.8855, 0.6199], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0532,  0.0026, -0.0358, -0.0796,  0.1171], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([7.2476e-04, 7.1302e-04, 6.5863e-04, 2.0390e-04, 5.0772e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0009,  0.0028,  0.0044, -0.0021,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0110, -0.0070, -0.0032, -0.0267,  0.0065], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0164, -0.0067, -0.0068, -0.0347,  0.0184], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0164, -0.0067, -0.0068, -0.0347,  0.0184], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0036, 0.0008, 0.0015, 0.0005, 0.0137], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0055], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.4850], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0817, 0.0125, 0.0427, 0.0135, 0.2178], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0817, 0.0125, 0.0427, 0.0135, 0.2178], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.3802, -0.4232, -0.6408,  0.2895, -0.5846], grad_fn=<SliceBackward0>)
  [Layer 27] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 27] Output sample values after mixer: tensor([-0.3802, -0.4232, -0.6408,  0.2895, -0.5846], grad_fn=<SliceBackward0>)
  [Layer 27] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 27] Residual connection sample values: tensor([ 1.5712,  2.5289, -2.6431, -0.7136,  1.6996], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 28/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([52.0765], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1386], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0884,  0.1331, -0.1406, -0.0369,  0.0946], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5934,  0.1352, -0.1787, -0.7503, -0.6144], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5934,  0.1352, -0.1787, -0.7503, -0.6144], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.2787, -0.2187, -0.5853, -0.9052, -0.2993], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0018, 0.8653, 1.4773, 1.0501, 1.5164], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0207, -1.4833, -1.1666, -0.2787, -1.8383], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0555,  0.2290, -0.1430, -0.1694,  0.0181], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1132,  0.2176, -0.1567, -0.1807,  0.1228], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0534,  0.1206, -0.0722, -0.0822,  0.0652], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0534,  0.1206, -0.0722, -0.0822,  0.0652], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0378, -0.0808, -0.0526, -0.0540,  0.1551], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1903, -0.1213,  0.3774, -0.0942,  0.3101], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2728, -3.9978, -2.5177, -2.1714, -2.8655], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0275, 0.1015, 0.1714, 0.0482, 0.0676], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9656, 0.6664, 0.6496, 0.9007, 0.8238], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0534,  0.1206, -0.0722, -0.0822,  0.0652], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.5441e-05,  1.1869e-04,  7.7239e-05,  7.9209e-05, -2.2766e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.4002e-05, -8.6920e-05,  3.4780e-05,  2.9770e-04,  2.4453e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 3.8181e-05,  6.8863e-03, -5.5649e-04, -2.6308e-03,  3.2282e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0115,  0.0330, -0.0162, -0.0205,  0.0174], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0115,  0.0330, -0.0162, -0.0205,  0.0174], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0024,  0.0024,  0.0013,  0.0049, -0.0037], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0014], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([26.6293], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1343,  0.0871,  0.0457,  0.1968, -0.1451], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1343,  0.0871,  0.0457,  0.1968, -0.1451], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.4549, -1.5126, -1.4146,  0.8265, -2.2327], grad_fn=<SliceBackward0>)
  [Layer 28] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 28] Output sample values after mixer: tensor([-0.4549, -1.5126, -1.4146,  0.8265, -2.2327], grad_fn=<SliceBackward0>)
  [Layer 28] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 28] Residual connection sample values: tensor([ 1.1163,  1.0163, -4.0577,  0.1129, -0.5331], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 29/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([67.6765], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1216], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0524,  0.0457, -0.1826,  0.0049, -0.0249], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.2457,  0.2421,  0.5884, -0.6430,  0.0131], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.2457,  0.2421,  0.5884, -0.6430,  0.0131], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6525,  0.4198,  0.6272, -1.1347, -0.1836], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.5272, 0.1935, 0.1654, 0.5269, 0.6013], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2188, -0.4078, -1.7795, -0.6525, -1.4940], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1715, -0.1054, -0.1230,  0.2293, -0.0543], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1581, -0.1399, -0.1201,  0.1688, -0.1674], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0853, -0.0651, -0.0565,  0.0915, -0.0767], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0853, -0.0651, -0.0565,  0.0915, -0.0767], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0540, -0.0314, -0.0382,  0.0455,  0.0523], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2428, -0.2592, -0.1243, -0.2688, -0.0631], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8072, -2.1170, -1.9257, -0.2904, -2.0499], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0942, 0.0597, 0.0747, 0.0027, 0.1118], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8434, 0.8813, 0.8661, 0.9992, 0.7953], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0853, -0.0651, -0.0565,  0.0915, -0.0767], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0004, -0.0003, -0.0003,  0.0004,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0012,  0.0002, -0.0009,  0.0007,  0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0029, -0.0048, -0.0123,  0.0152, -0.0208], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0901, -0.0713, -0.0700,  0.1088, -0.0992], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0901, -0.0713, -0.0700,  0.1088, -0.0992], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0251, -0.0097, -0.0265, -0.0241, -0.0007], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0161], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.8693], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2158, -0.0783, -0.3398, -0.2775, -0.0067], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2158, -0.0783, -0.3398, -0.2775, -0.0067], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2402, -0.1313, -1.1813,  0.6552, -0.5541], grad_fn=<SliceBackward0>)
  [Layer 29] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 29] Output sample values after mixer: tensor([-0.2402, -0.1313, -1.1813,  0.6552, -0.5541], grad_fn=<SliceBackward0>)
  [Layer 29] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 29] Residual connection sample values: tensor([ 0.8761,  0.8850, -5.2390,  0.7681, -1.0871], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 30/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([88.7513], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1061], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0396,  0.0394, -0.2314,  0.0320, -0.0505], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8400, -0.1593, -0.9441,  0.5418, -1.0709], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8400, -0.1593, -0.9441,  0.5418, -1.0709], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.9596, -0.3165, -0.0626,  0.9051,  0.7477], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3824, 1.8300, 1.3649, 1.9465, 1.7947], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([1.1604, 1.0086, 0.4021, 0.9596, 0.4017], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1513, -0.0436, -0.0302, -0.1703, -0.1777], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1280, -0.0299,  0.0029, -0.1885, -0.2051], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0681, -0.0147,  0.0015, -0.0854, -0.0921], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0681, -0.0147,  0.0015, -0.0854, -0.0921], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1491, -0.0391, -0.0277,  0.0632, -0.0873], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2784, -0.2517, -0.1434, -0.1660, -0.2433], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0150, -0.4675, -0.4280, -0.7895, -0.4175], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0158, 0.5215, 0.7172, 0.3369, 0.5058], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9841, 0.7836, 0.7357, 0.7665, 0.8097], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0681, -0.0147,  0.0015, -0.0854, -0.0921], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.6023e-04, -4.1989e-05, -2.9790e-05,  6.7909e-05, -9.3883e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 8.0648e-04,  2.2296e-05,  2.1721e-06,  1.4302e-03, -7.9982e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0011, -0.0003, -0.0009, -0.0006, -0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0850, -0.0185,  0.0009, -0.1058, -0.1140], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0850, -0.0185,  0.0009, -0.1058, -0.1140], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0215,  0.0014, -0.0002, -0.0362,  0.0312], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0125], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.9231], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2763,  0.0176, -0.0018, -0.3858,  0.2948], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2763,  0.0176, -0.0018, -0.3858,  0.2948], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.7488,  0.8885, -3.4274,  3.4366, -2.2537], grad_fn=<SliceBackward0>)
  [Layer 30] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 30] Output sample values after mixer: tensor([ 1.7488,  0.8885, -3.4274,  3.4366, -2.2537], grad_fn=<SliceBackward0>)
  [Layer 30] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 30] Residual connection sample values: tensor([ 2.6248,  1.7734, -8.6664,  4.2047, -3.3408], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 31/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([117.0984], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0924], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1035,  0.0686, -0.3363,  0.1588, -0.1331], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2085, -0.7363, -0.3178, -1.2847, -0.9090], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2085, -0.7363, -0.3178, -1.2847, -0.9090], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.1307,  0.3566, -0.2984,  0.3376, -0.0615], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.0959,  0.4066,  0.3599, -0.2166,  0.8276], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2619,  0.6666, -0.7322, -1.1307,  0.3753], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2123, -0.0490, -0.0681, -0.0481, -0.0068], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2128, -0.0593, -0.0671, -0.0500, -0.0121], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0951, -0.0288, -0.0324, -0.0244, -0.0060], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0951, -0.0288, -0.0324, -0.0244, -0.0060], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1124, -0.0270,  0.0532, -0.1615, -0.0140], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0221, -0.0708, -0.2213, -0.0306, -0.0748], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.9478, -3.5384, -4.7060, -2.4630, -0.9027], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0957, 0.0339, 0.0225, 0.0484, 0.0926], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7543, 0.8869, 0.8993, 0.8876, 0.9198], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0951, -0.0288, -0.0324, -0.0244, -0.0060], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0010,  0.0002, -0.0005,  0.0015,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0027,  0.0008, -0.0004,  0.0024,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0103,  0.0034, -0.0029,  0.0008,  0.0110], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0758, -0.0164, -0.0252, -0.0160,  0.0068], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0758, -0.0164, -0.0252, -0.0160,  0.0068], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0071,  0.0039,  0.0034,  0.0045, -0.0018], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0141], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.4185], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1174,  0.0565,  0.0436,  0.0611, -0.0290], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1174,  0.0565,  0.0436,  0.0611, -0.0290], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([0.0252, 1.8321, 0.3505, 0.6114, 0.3562], grad_fn=<SliceBackward0>)
  [Layer 31] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 31] Output sample values after mixer: tensor([0.0252, 1.8321, 0.3505, 0.6114, 0.3562], grad_fn=<SliceBackward0>)
  [Layer 31] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 31] Residual connection sample values: tensor([ 2.6500,  3.6056, -8.3159,  4.8161, -2.9846], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 32/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([141.0320], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0842], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1013,  0.1384, -0.3183,  0.1727, -0.1186], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7064, -0.7555, -1.0060, -1.3591, -0.8058], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7064, -0.7555, -1.0060, -1.3591, -0.8058], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1870, -0.1221, -0.0874,  0.6319,  0.3200], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.6210, 1.4874, 1.1316, 1.8265, 1.7348], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0590, -0.1990,  0.1698, -0.1870,  0.4398], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0389,  0.0007,  0.0730, -0.1907, -0.2987], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0017, -0.0513,  0.0572, -0.1782, -0.3056], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0008, -0.0250,  0.0294, -0.0812, -0.1296], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0008, -0.0250,  0.0294, -0.0812, -0.1296], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0009, -0.0428,  0.0150, -0.0660, -0.0733], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2665, -0.1182,  0.0604, -0.2750, -0.2043], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6971, -2.0893, -1.7967, -1.3894, -1.0395], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1409, 0.0239, 0.3209, 0.5060, 0.6807], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9065, 0.9514, 0.5618, 0.4951, 0.4928], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0008, -0.0250,  0.0294, -0.0812, -0.1296], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.0712e-07,  5.0792e-06, -1.7789e-06,  7.8305e-06,  8.6969e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.2514e-03,  2.7075e-03, -8.8467e-05, -3.8692e-03, -1.8172e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0181, -0.0223, -0.0085, -0.0348, -0.0333], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0179, -0.0283, -0.0014, -0.0543, -0.0644], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0179, -0.0283, -0.0014, -0.0543, -0.0644], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0042,  0.0068,  0.0004,  0.0151,  0.0160], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0171], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.6405], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0388,  0.0511,  0.0056,  0.1791,  0.1556], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0388,  0.0511,  0.0056,  0.1791,  0.1556], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.0744,  1.8629, -1.1540,  2.3416, -0.7820], grad_fn=<SliceBackward0>)
  [Layer 32] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 32] Output sample values after mixer: tensor([ 1.0744,  1.8629, -1.1540,  2.3416, -0.7820], grad_fn=<SliceBackward0>)
  [Layer 32] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 32] Residual connection sample values: tensor([ 3.7244,  5.4684, -9.4699,  7.1577, -3.7666], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 33/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([143.9374], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0834], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1463,  0.2226, -0.3789,  0.2781, -0.1532], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.8508,  4.0608,  2.0955, -0.1207, -0.6264], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.8508,  4.0608,  2.0955, -0.1207, -0.6264], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2413, -0.9667,  0.5068, -1.4963,  0.6087], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.8782,  0.9500,  0.9954,  1.6113, -1.6689], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.8269,  0.7822,  0.4440,  0.2413, -1.1368], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0460, -0.4506, -0.1084, -0.2935, -0.1057], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0328, -0.5000, -0.0816, -0.2947, -0.1069], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0167, -0.1888, -0.0391, -0.1258, -0.0506], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0167, -0.1888, -0.0391, -0.1258, -0.0506], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2772, -0.0691, -0.0414, -0.0239, -0.0268], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0147, -0.1825, -0.0921, -0.1432, -0.1755], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9791, -9.6938, -6.1678, -0.1135, -2.0903], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0049, 0.0256, 0.0347, 0.0401, 0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9903, 0.7801, 0.8075, 0.9955, 0.9989], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0167, -0.1888, -0.0391, -0.1258, -0.0506], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.2674e-05, -5.6500e-06, -3.3904e-06, -1.9579e-06, -2.1895e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.7143e-05,  6.5891e-05, -7.7421e-05, -2.0639e-05,  5.9285e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.0708e-05, -7.3294e-04, -2.2367e-05, -5.2993e-04, -3.7577e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0174, -0.1973, -0.0408, -0.1315, -0.0531], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0174, -0.1973, -0.0408, -0.1315, -0.0531], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0278, -0.7875, -0.0761,  0.0075,  0.0116], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0143], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.3517], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.3491, -5.9028, -0.7183,  0.0688,  0.1208], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.3491, -5.9028, -0.7183,  0.0688,  0.1208], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.7546, -0.5026,  1.2314, -2.6299, -0.2211], grad_fn=<SliceBackward0>)
  [Layer 33] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 33] Output sample values after mixer: tensor([ 2.7546, -0.5026,  1.2314, -2.6299, -0.2211], grad_fn=<SliceBackward0>)
  [Layer 33] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 33] Residual connection sample values: tensor([ 6.4790,  4.9658, -8.2385,  4.5278, -3.9877], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 34/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([190.9959], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0724], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1806,  0.1467, -0.2295,  0.1273, -0.1166], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.6766,  0.5828,  0.6725, -0.1255,  0.3986], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.6766,  0.5828,  0.6725, -0.1255,  0.3986], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5119, -0.5745,  0.3415, -0.4636, -0.4787], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.2131,  0.7161,  2.1979, -0.1935, -0.0299], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6617,  0.2582, -0.7701,  0.5119, -0.1941], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0918,  0.1222,  0.0673,  0.1200, -0.0975], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1237,  0.1483,  0.0554,  0.0804, -0.1060], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0580,  0.0796,  0.0284,  0.0418, -0.0502], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0580,  0.0796,  0.0284,  0.0418, -0.0502], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2071,  0.0307, -0.0006,  0.0516, -0.0293], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0019, -0.2346, -0.2580, -0.1261, -0.2660], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.5611, -2.4811, -2.8936, -0.0159, -0.0261], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1658, 0.0653, 0.0815, 0.0119, 0.0073], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6540, 0.8504, 0.7899, 0.9998, 0.9998], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0580,  0.0796,  0.0284,  0.0418, -0.0502], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.9927e-03, -2.9501e-04,  5.7925e-06, -4.9618e-04,  2.8187e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0004,  0.0004,  0.0007,  0.0006, -0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0006,  0.0046,  0.0008,  0.0053, -0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0351,  0.0536,  0.0183,  0.0311, -0.0327], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0351,  0.0536,  0.0183,  0.0311, -0.0327], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0158,  0.0201,  0.0081, -0.0018, -0.0078], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0060], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.8938], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.4045,  0.5005,  0.2325, -0.0587, -0.2377], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.4045,  0.5005,  0.2325, -0.0587, -0.2377], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.6160e+00,  2.5554e+00, -1.6755e+00,  6.6686e-01, -1.6354e-03],
       grad_fn=<SliceBackward0>)
  [Layer 34] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 34] Output sample values after mixer: tensor([ 1.6160e+00,  2.5554e+00, -1.6755e+00,  6.6686e-01, -1.6354e-03],
       grad_fn=<SliceBackward0>)
  [Layer 34] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 34] Residual connection sample values: tensor([ 8.0950,  7.5212, -9.9140,  5.1946, -3.9893], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 35/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([314.4561], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0564], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2360,  0.2189, -0.2839,  0.1395, -0.1151], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.2382, -0.6078,  0.1232, -1.5465,  0.1044], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.2382, -0.6078,  0.1232, -1.5465,  0.1044], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.8680,  1.2173,  0.6399, -0.3821,  0.4170], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.5355, -0.2295,  0.7667,  0.6426,  0.0259], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0469,  0.8683,  0.9649, -0.8680,  0.4509], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1546, -0.2918, -0.1223, -0.1001,  0.0686], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0014, -0.2507, -0.1585, -0.1450,  0.0272], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0007, -0.1097, -0.0730, -0.0673,  0.0138], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0007, -0.1097, -0.0730, -0.0673,  0.0138], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0430,  0.3069, -0.2783,  0.1072,  0.0322], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2317,  0.2400, -0.1009, -0.2719, -0.1059], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7098, -2.7746, -0.4453, -1.1391, -3.5906], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0416, 0.0135, 0.3133, 0.1230, 0.0266], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9709, 0.9631, 0.8698, 0.8692, 0.9090], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0007, -0.1097, -0.0730, -0.0673,  0.0138], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.2499e-06, -8.9293e-06,  8.0964e-06, -3.1190e-06, -9.3559e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0040, -0.0146,  0.0241, -0.0207,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0218, -0.0220, -0.0213, -0.0311, -0.0079], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0222, -0.0962, -0.0706, -0.0766,  0.0014], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0222, -0.0962, -0.0706, -0.0766,  0.0014], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 6.1876e-03,  2.0613e-02, -4.6207e-03,  2.0801e-02,  7.6801e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0174], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.5802], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1532,  0.2715, -0.0430,  0.2237,  0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1532,  0.2715, -0.0430,  0.2237,  0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0331,  0.4260,  4.6875,  4.8888, -5.2821], grad_fn=<SliceBackward0>)
  [Layer 35] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 35] Output sample values after mixer: tensor([-0.0331,  0.4260,  4.6875,  4.8888, -5.2821], grad_fn=<SliceBackward0>)
  [Layer 35] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 35] Residual connection sample values: tensor([ 8.0619,  7.9472, -5.2265, 10.0835, -9.2714], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 36/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([472.0508], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0460], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1821,  0.1817, -0.1172,  0.2247, -0.2144], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8353,  0.3506, -1.1164, -1.4678, -0.3932], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8353,  0.3506, -1.1164, -1.4678, -0.3932], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0426,  1.3037, -0.3623, -0.0560,  0.1966], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.5059,  1.3391, -0.2866,  0.4043,  0.9991], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.4721,  0.0341,  0.2234,  0.0426,  0.5466], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0183,  0.2364, -0.0167, -0.0086, -0.0183], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0545,  0.2363, -0.0452, -0.0336, -0.0462], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0265,  0.1320, -0.0221, -0.0165, -0.0226], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0265,  0.1320, -0.0221, -0.0165, -0.0226], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1253,  0.3324, -0.0477,  0.0344, -0.0177], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1973, -0.2501, -0.1675, -0.1459, -0.2525], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6566, -1.1306, -1.6058, -2.4414, -2.8823], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0698, 0.0140, 0.0162, 0.0544, 0.1076], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8307, 0.9843, 0.9743, 0.8757, 0.7333], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0265,  0.1320, -0.0221, -0.0165, -0.0226], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.3189e-04, -6.1529e-04,  8.8245e-05, -6.3639e-05,  3.2751e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0008, -0.0024, -0.0002,  0.0003,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0020,  0.0124,  0.0019, -0.0008,  0.0044], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0324,  0.1636, -0.0234, -0.0197, -0.0215], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0324,  0.1636, -0.0234, -0.0197, -0.0215], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0082, 0.0337, 0.0065, 0.0054, 0.0034], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0079], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([11.2792], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.1355, 0.8134, 0.1054, 0.0996, 0.0541], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.1355, 0.8134, 0.1054, 0.0996, 0.0541], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.0699, -5.4777, -3.3613, -7.5937, -1.7813], grad_fn=<SliceBackward0>)
  [Layer 36] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 36] Output sample values after mixer: tensor([ 1.0699, -5.4777, -3.3613, -7.5937, -1.7813], grad_fn=<SliceBackward0>)
  [Layer 36] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 36] Residual connection sample values: tensor([  9.1318,   2.4695,  -8.5878,   2.4898, -11.0528],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 37/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([665.4139], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0388], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2019,  0.0559, -0.1876,  0.0533, -0.2462], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0863,  1.0612, -0.0235, -4.1206,  0.7103], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0863,  1.0612, -0.0235, -4.1206,  0.7103], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2273,  0.8233,  0.8962,  0.7071, -1.1057], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.3692, -0.7189, -0.6560,  1.8337, -1.1353], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6521, -0.2521,  0.4518,  0.2273, -0.2254], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0319, -0.1134,  0.0922,  0.3671, -0.2011], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0442, -0.1419,  0.0972,  0.2163, -0.1864], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0216, -0.0659,  0.0510,  0.1198, -0.0845], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0216, -0.0659,  0.0510,  0.1198, -0.0845], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1032,  0.0942, -0.1658, -0.0155, -0.0805], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2017, -0.1000, -0.2201, -0.2552, -0.2691], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0606, -3.2470, -0.8191, -0.2453, -1.9752], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0960, 0.0048, 0.0049, 0.0078, 0.0038], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9942, 0.9846, 0.9960, 0.9981, 0.9926], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0216, -0.0659,  0.0510,  0.1198, -0.0845], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.1433e-04, -1.9558e-04,  3.4431e-04,  3.2156e-05,  1.6720e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-9.3494e-04, -1.1025e-03, -6.0986e-04,  1.3310e-03, -9.0960e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0014, -0.0057,  0.0005,  0.0363,  0.0206], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0027,  0.0069, -0.0092,  0.0135,  0.0367], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0027,  0.0069, -0.0092,  0.0135,  0.0367], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0001,  0.0054,  0.0001, -0.0009,  0.0175], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0283], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.9450], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0012,  0.0473,  0.0018, -0.0283,  0.1240], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0012,  0.0473,  0.0018, -0.0283,  0.1240], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 5.2083,  2.1047, -7.0346,  0.4984, -3.5287], grad_fn=<SliceBackward0>)
  [Layer 37] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 37] Output sample values after mixer: tensor([ 5.2083,  2.1047, -7.0346,  0.4984, -3.5287], grad_fn=<SliceBackward0>)
  [Layer 37] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 37] Residual connection sample values: tensor([ 14.3401,   4.5742, -15.6225,   2.9881, -14.5815],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 38/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([841.0591], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0345], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2564,  0.0812, -0.2759,  0.0515, -0.2575], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5094, -0.7151, -0.7654, -0.3672, -1.0992], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5094, -0.7151, -0.7654, -0.3672, -1.0992], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([0.4713, 1.1070, 1.1654, 1.2715, 0.7101], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0470, 0.6556, 2.3130, 1.5042, 1.1872], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.7721,  0.8204, -0.3542,  0.4713,  0.4787], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0699, -0.2100, -0.2432, -0.2234,  0.1345], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0418, -0.2472, -0.2690, -0.2350,  0.1132], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0205, -0.1084, -0.1165, -0.1037,  0.0598], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0205, -0.1084, -0.1165, -0.1037,  0.0598], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2404, -0.2782,  0.0427,  0.0393, -0.2749], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0562, -0.2707, -0.1313,  0.2410, -0.2748], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0881, -1.3536, -1.1764, -1.6451, -1.1941], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1414, 0.0570, 1.0464, 0.1769, 0.0734], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8574, 0.9258, 0.2920, 0.7475, 0.9161], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0205, -0.1084, -0.1165, -0.1037,  0.0598], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0007,  0.0008, -0.0001, -0.0001,  0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([0.0069, 0.0090, 0.0013, 0.0007, 0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0067, -0.0161, -0.0094,  0.0106,  0.0069], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0232, -0.1039, -0.1038, -0.0734,  0.0554], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0232, -0.1039, -0.1038, -0.0734,  0.0554], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0044,  0.0244,  0.0252,  0.0110, -0.0152], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0063], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.5858], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1117,  0.5932,  0.6430,  0.2565, -0.3181], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1117,  0.5932,  0.6430,  0.2565, -0.3181], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([  2.2422, -10.3825,  -1.5055,  -5.3500,  -5.6255],
       grad_fn=<SliceBackward0>)
  [Layer 38] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 38] Output sample values after mixer: tensor([  2.2422, -10.3825,  -1.5055,  -5.3500,  -5.6255],
       grad_fn=<SliceBackward0>)
  [Layer 38] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 38] Residual connection sample values: tensor([ 16.5823,  -5.8083, -17.1279,  -2.3619, -20.2070],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 39/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1181.9521], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0291], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2176, -0.0770, -0.2251, -0.0311, -0.2683], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.8849,  0.5155, -0.1668,  0.4338,  0.3529], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.8849,  0.5155, -0.1668,  0.4338,  0.3529], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.5400,  0.2196,  0.5276, -0.9052, -0.7407], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.1865,  1.9203, -0.3067,  1.1738,  0.8143], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0317, -0.1963,  0.7949,  1.5400, -1.5646], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2382, -0.0350,  0.1122, -0.2236, -0.1287], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2239,  0.0502,  0.0899, -0.2195, -0.1497], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1244,  0.0257,  0.0470, -0.0977, -0.0692], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1244,  0.0257,  0.0470, -0.0977, -0.0692], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0755, -0.0142,  0.0694, -0.0751,  0.0689], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1709, -0.0611, -0.1222, -0.1374, -0.1478], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6942, -0.9243, -1.3151, -3.1533, -2.1087], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0158, 0.0504, 0.0065, 0.0860, 0.0571], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9891, 0.9545, 0.9914, 0.7625, 0.8865], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1244,  0.0257,  0.0470, -0.0977, -0.0692], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.4807e-04, -2.7828e-05,  1.3619e-04, -1.4732e-04,  1.3528e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0004, -0.0002,  0.0002, -0.0003,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0005,  0.0014,  0.0003, -0.0016,  0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1071,  0.0235,  0.0406, -0.0853, -0.0577], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1071,  0.0235,  0.0406, -0.0853, -0.0577], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0671,  0.0076, -0.0031, -0.0225, -0.0120], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0030], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([18.1299], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 2.2879,  0.2777, -0.1162, -0.6805, -0.4134], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 2.2879,  0.2777, -0.1162, -0.6805, -0.4134], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-3.4482,  1.1392, -2.0021,  0.8425, -2.6803], grad_fn=<SliceBackward0>)
  [Layer 39] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 39] Output sample values after mixer: tensor([-3.4482,  1.1392, -2.0021,  0.8425, -2.6803], grad_fn=<SliceBackward0>)
  [Layer 39] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 39] Residual connection sample values: tensor([ 13.1341,  -4.6691, -19.1300,  -1.5194, -22.8873],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 40/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1527.8663], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0256], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1468, -0.0526, -0.2212, -0.0171, -0.2550], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4378, -0.6115, -0.4215, -0.3882, -0.5988], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4378, -0.6115, -0.4215, -0.3882, -0.5988], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.8465, -0.2876, -0.6515,  0.1863, -0.4697], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.8676, 1.0566, 1.7143, 0.5471, 1.1896], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0295, -0.1661,  0.0321,  0.8465, -0.0222], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1709,  0.0164, -0.1281, -0.0331, -0.1150], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1552, -0.0022, -0.1224, -0.0430, -0.1198], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0836, -0.0011, -0.0574, -0.0210, -0.0563], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0836, -0.0011, -0.0574, -0.0210, -0.0563], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1673,  0.1565, -0.0461, -0.0644,  0.0795], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0090,  0.0633, -0.0253,  0.0761, -0.1279], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9810, -1.4352, -0.7966, -1.6062, -1.8465], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3224, 0.0384, 0.0250, 0.0629, 0.1824], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5280, 0.9464, 0.9803, 0.9039, 0.7141], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0836, -0.0011, -0.0574, -0.0210, -0.0563], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0045,  0.0042, -0.0012, -0.0017,  0.0021], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0044,  0.0047, -0.0010, -0.0017,  0.0023], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0105, -0.0004, -0.0067, -0.0031, -0.0098], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0788, -0.0013, -0.0536, -0.0202, -0.0558], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0788, -0.0013, -0.0536, -0.0202, -0.0558], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0135,  0.0003,  0.0090,  0.0032,  0.0118], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0017], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([24.2427], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.6435,  0.0138,  0.4218,  0.1772,  0.5561], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.6435,  0.0138,  0.4218,  0.1772,  0.5561], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 3.0036,  0.5916, -6.3428, -2.8143, -1.7546], grad_fn=<SliceBackward0>)
  [Layer 40] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 40] Output sample values after mixer: tensor([ 3.0036,  0.5916, -6.3428, -2.8143, -1.7546], grad_fn=<SliceBackward0>)
  [Layer 40] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 40] Residual connection sample values: tensor([ 16.1378,  -4.0775, -25.4728,  -4.3337, -24.6419],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 41/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1822.8018], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0234], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1686, -0.0429, -0.2718, -0.0453, -0.2587], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.6568,  2.4249, -0.7270, -0.1012, -0.4681], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.6568,  2.4249, -0.7270, -0.1012, -0.4681], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.2611, -1.1826,  0.9860,  0.0028,  0.6041], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.1015,  1.0042,  1.8064,  0.8604, -0.4574], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.3270,  0.7986,  0.1797, -0.2611,  0.2788], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0328, -0.1776,  0.1941,  0.0116,  0.1767], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0194, -0.1916,  0.1962,  0.0049,  0.1611], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0098, -0.0867,  0.1077,  0.0025,  0.0870], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0098, -0.0867,  0.1077,  0.0025,  0.0870], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0210, -0.0680, -0.1214, -0.2510, -0.0027], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0768, -0.0447, -0.1232, -0.0999, -0.2660], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8259, -1.8637, -1.2829, -1.4543, -4.4079], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0412, 0.0835, 0.0431, 0.0950, 0.0040], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9275, 0.8559, 0.9462, 0.8709, 0.9823], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0098, -0.0867,  0.1077,  0.0025,  0.0870], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 8.5087e-06, -2.7488e-05, -4.9090e-05, -1.0151e-04, -1.0911e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0005,  0.0007, -0.0002,  0.0036, -0.0041], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0015,  0.0012, -0.0029, -0.0007,  0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0110, -0.0832,  0.1021,  0.0017,  0.0861], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0110, -0.0832,  0.1021,  0.0017,  0.0861], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 4.7650e-03, -1.8544e-01, -2.4181e-02, -8.2386e-05, -1.5522e-02],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0012], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([28.2222], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 2.3271e-01, -9.0513e+00, -1.1616e+00, -4.1575e-03, -6.1047e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 2.3271e-01, -9.0513e+00, -1.1616e+00, -4.1575e-03, -6.1047e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.6974, -0.2297,  2.6989, -1.8998,  4.3440], grad_fn=<SliceBackward0>)
  [Layer 41] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 41] Output sample values after mixer: tensor([ 0.6974, -0.2297,  2.6989, -1.8998,  4.3440], grad_fn=<SliceBackward0>)
  [Layer 41] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 41] Residual connection sample values: tensor([ 16.8352,  -4.3072, -22.7739,  -6.2335, -20.2979],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 42/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2137.1643], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0216], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1727, -0.0451, -0.2361, -0.0635, -0.2073], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5431, -1.1739, -0.9944, -1.2557, -0.0988], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5431, -1.1739, -0.9944, -1.2557, -0.0988], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.3848,  0.6304, -0.0502, -0.0271, -0.1719], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.0800,  3.0358,  0.7683, -0.1609, -0.1808], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0857, -0.2624,  0.3323,  1.3848,  0.4673], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2150, -0.1004, -0.0231, -0.0103, -0.0319], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2057, -0.1136, -0.0130, -0.0068, -0.0518], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1134, -0.0536, -0.0065, -0.0034, -0.0252], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1134, -0.0536, -0.0065, -0.0034, -0.0252], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0606, -0.1894, -0.1139,  0.3513,  0.3317], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1486, -0.0394,  0.1077,  0.2495, -0.2762], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0661, -1.4514, -0.7270, -1.9455, -0.6256], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0231, 1.5329, 0.0074, 0.0231, 0.0094], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9757, 0.1081, 0.9946, 0.9561, 0.9941], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1134, -0.0536, -0.0065, -0.0034, -0.0252], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0002, -0.0005, -0.0003,  0.0009,  0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0004, -0.0005, -0.0004,  0.0014,  0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0009, -0.0003, -0.0010,  0.0006, -0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1147, -0.0541, -0.0075, -0.0028, -0.0257], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1147, -0.0541, -0.0075, -0.0028, -0.0257], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0229,  0.0150,  0.0020,  0.0008,  0.0012], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0016], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([25.2496], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-1.1989,  0.7719,  0.1055,  0.0336,  0.0574], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-1.1989,  0.7719,  0.1055,  0.0336,  0.0574], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-3.3860,  9.8197,  2.0462, -2.7276,  2.2026], grad_fn=<SliceBackward0>)
  [Layer 42] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 42] Output sample values after mixer: tensor([-3.3860,  9.8197,  2.0462, -2.7276,  2.2026], grad_fn=<SliceBackward0>)
  [Layer 42] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 42] Residual connection sample values: tensor([ 13.4492,   5.5126, -20.7278,  -8.9611, -18.0953],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 43/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2466.1411], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0201], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1281,  0.0550, -0.1980, -0.0868, -0.1709], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-5.1885e-01, -1.0426e+00, -1.0342e+00, -5.7411e-04,  2.5693e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-5.1885e-01, -1.0426e+00, -1.0342e+00, -5.7411e-04,  2.5693e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.2893, -0.0935, -0.2678,  0.6841, -1.0253], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.7362, 0.2803, 2.8296, 2.7733, 0.9009], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.9579,  0.7815,  0.9247, -0.2893,  0.0360], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0184, -0.0702, -0.0284, -0.1202,  0.1661], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0220, -0.1159, -0.0159, -0.1143,  0.1573], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0109, -0.0546, -0.0079, -0.0539,  0.0848], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0109, -0.0546, -0.0079, -0.0539,  0.0848], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0602,  0.0108,  0.8850,  0.0183, -0.0027], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2046, -0.0406, -0.2773,  0.0177, -0.1235], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9762, -1.4783, -1.0589, -1.0815, -5.9141], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0084, 0.0197, 0.1299, 0.1051, 0.1270], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9918, 0.9713, 0.8715, 0.8925, 0.4719], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0109, -0.0546, -0.0079, -0.0539,  0.0848], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.5208e-06, -9.9152e-07, -8.1130e-05, -1.6778e-06,  2.4622e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0003, -0.0014,  0.0112,  0.0002,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.7507e-05, -3.8416e-04, -1.2554e-04,  7.3137e-04, -1.3089e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0095, -0.0478, -0.0070, -0.0460,  0.0735], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0095, -0.0478, -0.0070, -0.0460,  0.0735], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([1.8333e-03, 1.2987e-02, 1.8922e-03, 1.3214e-05, 1.0653e-02],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0014], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([26.8668], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.1297, 0.7047, 0.0964, 0.0007, 0.6898], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.1297, 0.7047, 0.0964, 0.0007, 0.6898], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([  2.4440,   1.6090,   4.2124,  -4.4208, -12.4177],
       grad_fn=<SliceBackward0>)
  [Layer 43] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 43] Output sample values after mixer: tensor([  2.4440,   1.6090,   4.2124,  -4.4208, -12.4177],
       grad_fn=<SliceBackward0>)
  [Layer 43] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 43] Residual connection sample values: tensor([ 15.8931,   7.1216, -16.5154, -13.3819, -30.5130],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 44/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2809.2183], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0189], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1409,  0.0656, -0.1477, -0.1180, -0.2701], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0620, -2.6219, -1.4493, -0.0589, -1.0574], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0620, -2.6219, -1.4493, -0.0589, -1.0574], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.6840,  0.9485, -0.4831, -1.8760,  0.3306], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.1769, 1.0524, 0.2117, 0.1187, 1.6994], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.9490, -0.7425, -0.7053, -0.6840,  1.2354], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1253, -0.1202, -0.0694, -0.3483, -0.0350], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1314, -0.0598, -0.0879, -0.3548, -0.0875], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0614, -0.0290, -0.0420, -0.1463, -0.0418], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0614, -0.0290, -0.0420, -0.1463, -0.0418], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2775,  0.0324,  0.1505,  0.0010,  0.0519], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2775, -0.0386,  0.0187,  0.0062, -0.0634], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7482, -0.6439, -1.1771, -1.3506, -1.0269], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0261, 0.0426, 0.0137, 0.0111, 0.1880], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9807, 0.9730, 0.9840, 0.9851, 0.8245], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0614, -0.0290, -0.0420, -0.1463, -0.0418], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 4.4427e-04, -5.1933e-05, -2.4101e-04, -1.5359e-06, -8.3170e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0062, -0.0015, -0.0009, -0.0002, -0.0015], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0016, -0.0002, -0.0002, -0.0025,  0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0592, -0.0275, -0.0397, -0.1399, -0.0383], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0592, -0.0275, -0.0397, -0.1399, -0.0383], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0018, 0.0049, 0.0109, 0.0040, 0.0104], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0012], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([29.1111], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0967, 0.2116, 0.6398, 0.2028, 0.5765], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0967, 0.2116, 0.6398, 0.2028, 0.5765], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.8844,  7.2130,  9.4679, 10.7686, -2.1721], grad_fn=<SliceBackward0>)
  [Layer 44] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 44] Output sample values after mixer: tensor([-2.8844,  7.2130,  9.4679, 10.7686, -2.1721], grad_fn=<SliceBackward0>)
  [Layer 44] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 44] Residual connection sample values: tensor([ 13.0087,  14.3346,  -7.0475,  -2.6133, -32.6851],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 45/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3149.5112], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0178], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1112,  0.1259, -0.0605, -0.0220, -0.2780], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.7191,  0.9102,  0.5571, -0.5244, -1.0145], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.7191,  0.9102,  0.5571, -0.5244, -1.0145], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.1710,  0.1741,  0.4667,  0.3946, -1.0843], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.3726,  0.9448,  0.5901,  0.3333, -0.2244], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.2258,  0.0393,  0.5001,  1.1710,  0.3872], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1810, -0.0300,  0.0644,  0.0631,  0.2477], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([0.1764, 0.0222, 0.0620, 0.0565, 0.2452], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([0.0960, 0.0112, 0.0319, 0.0290, 0.1376], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([0.0960, 0.0112, 0.0319, 0.0290, 0.1376], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0447,  0.0535,  0.0956, -0.2479,  0.0433], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0264, -0.2333, -0.0239, -0.2530, -0.1058], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.2502, -4.1815, -1.0937, -2.6774, -2.3149], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0281, 0.0571, 0.0348, 0.0176, 0.0044], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9387, 0.7877, 0.9627, 0.9541, 0.9898], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([0.0960, 0.0112, 0.0319, 0.0290, 0.1376], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0001,  0.0001,  0.0003, -0.0007,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.2867e-03,  3.1279e-05,  3.1257e-04, -4.2854e-04,  2.7455e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0005,  0.0004, -0.0042, -0.0024,  0.0255], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([0.1082, 0.0130, 0.0317, 0.0301, 0.1798], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([0.1082, 0.0130, 0.0317, 0.0301, 0.1798], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0523,  0.0084,  0.0112, -0.0059, -0.0485], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0015], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([25.3740], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 3.1039,  0.3633,  0.6116, -0.2933, -2.5983], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 3.1039,  0.3633,  0.6116, -0.2933, -2.5983], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([  1.1217,  14.5804, -11.1084,  14.7475,  -0.6031],
       grad_fn=<SliceBackward0>)
  [Layer 45] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 45] Output sample values after mixer: tensor([  1.1217,  14.5804, -11.1084,  14.7475,  -0.6031],
       grad_fn=<SliceBackward0>)
  [Layer 45] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 45] Residual connection sample values: tensor([ 14.1304,  28.9150, -18.1559,  12.1342, -33.2881],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 46/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3569.3547], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0167], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1366,  0.2914, -0.1788,  0.1186, -0.3197], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.5435,  0.4922,  0.0928, -1.7475, -1.1122], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.5435,  0.4922,  0.0928, -1.7475, -1.1122], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2408,  0.4240, -0.4017,  0.3369, -1.4698], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.8566, 1.5090, 1.0396, 0.4026, 0.8919], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.1950, 0.2820, 0.8710, 0.2408, 0.0761], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0653,  0.0642, -0.0661, -0.0673,  0.2400], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0684,  0.0604, -0.0872, -0.0832,  0.2603], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0330,  0.0311, -0.0417, -0.0399,  0.1470], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0330,  0.0311, -0.0417, -0.0399,  0.1470], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0553, -0.2693,  0.1346,  0.0013,  0.0732], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0911, -0.2689,  0.5624,  0.1069, -0.1048], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8673, -0.9793, -1.6584, -0.9408, -0.4381], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0513, 0.0254, 0.0178, 0.0154, 0.0214], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9086, 0.9754, 0.9709, 0.9856, 0.9907], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0330,  0.0311, -0.0417, -0.0399,  0.1470], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 9.3748e-05,  4.5655e-04, -2.2819e-04, -2.1558e-06, -1.2402e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 8.3416e-05,  1.2155e-03, -2.5654e-04,  1.6211e-05, -1.8445e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0007,  0.0003, -0.0005,  0.0002,  0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0271,  0.0251, -0.0338, -0.0316,  0.1194], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0271,  0.0251, -0.0338, -0.0316,  0.1194], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0093,  0.0077, -0.0016,  0.0082, -0.0329], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0015], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([25.6608], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.5570,  0.4379, -0.0845,  0.3910, -1.9143], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.5570,  0.4379, -0.0845,  0.3910, -1.9143], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ -4.0915,   1.9296,   4.6537, -11.7228,   3.1316],
       grad_fn=<SliceBackward0>)
  [Layer 46] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 46] Output sample values after mixer: tensor([ -4.0915,   1.9296,   4.6537, -11.7228,   3.1316],
       grad_fn=<SliceBackward0>)
  [Layer 46] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 46] Residual connection sample values: tensor([ 10.0389,  30.8447, -13.5022,   0.4115, -30.1565],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 47/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3875.9138], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0161], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0828,  0.2567, -0.1080,  0.0033, -0.2325], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4284,  0.6849, -2.1313, -1.1510, -0.3240], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4284,  0.6849, -2.1313, -1.1510, -0.3240], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0061, -0.0313, -0.3241, -0.3129,  0.7200], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.5192,  0.7116,  0.3477,  1.1888,  1.2016], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2285, -0.0890,  0.1626,  0.0061, -0.3934], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0008,  0.0412, -0.0309,  0.0113,  0.0971], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0163,  0.0163, -0.2504,  0.0079,  0.1023], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0082,  0.0082, -0.1096,  0.0040,  0.0538], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0082,  0.0082, -0.1096,  0.0040,  0.0538], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1181, -0.0086,  1.5813, -0.2600,  0.0234], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.6723, -0.1147,  0.0821, -0.2663, -0.2331], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -3.5522, -11.2450,  -2.6866,  -3.1935,  -3.1998],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0134, 0.0307, 0.0037, 0.0120, 0.0381], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9536, 0.7081, 0.9902, 0.9625, 0.8851], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0082,  0.0082, -0.1096,  0.0040,  0.0538], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.2952e-05, -9.4541e-07,  1.7343e-04, -2.8518e-05,  2.5687e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0006, -0.0002, -0.0011, -0.0008,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 2.5115e-04,  6.9420e-05, -6.2954e-04, -9.8612e-04,  4.1892e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0119,  0.0117, -0.1556,  0.0046,  0.0764], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0119,  0.0117, -0.1556,  0.0046,  0.0764], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0020,  0.0053,  0.0352, -0.0013, -0.0104], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0012], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([28.4769], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1222,  0.1947,  2.1055, -0.0803, -0.6231], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1222,  0.1947,  2.1055, -0.0803, -0.6231], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-4.4154,  2.5382, -5.8166, 14.4959,  1.7445], grad_fn=<SliceBackward0>)
  [Layer 47] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 47] Output sample values after mixer: tensor([-4.4154,  2.5382, -5.8166, 14.4959,  1.7445], grad_fn=<SliceBackward0>)
  [Layer 47] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 47] Residual connection sample values: tensor([  5.6235,  33.3829, -19.3188,  14.9074, -28.4119],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 48/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4070.0640], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0157], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0461,  0.2558, -0.1447,  0.1152, -0.2071], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.6537, -3.1630, -1.9490,  0.1067,  1.0384], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.6537, -3.1630, -1.9490,  0.1067,  1.0384], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0176, -0.2249, -1.8963, -1.2041,  0.0091], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.7631,  2.6112,  0.5737, -0.5622, -0.8374], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.3766,  1.0177,  0.7338, -0.0176,  0.2861], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0114, -0.0267, -0.2712, -0.2405, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0165,  0.1932, -0.3571, -0.3067, -0.0030], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0082,  0.1059, -0.1470, -0.1300, -0.0015], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0082,  0.1059, -0.1470, -0.1300, -0.0015], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0635,  0.0611, -0.0708, -0.0836,  0.1155], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1309, -0.2661, -0.0953, -0.1952, -0.0479], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-54.8118, -78.5143, -47.2508,  -2.3308,  -4.2266],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0651, 0.1139, 0.0072, 0.0006, 0.0033], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([2.8269e-02, 1.3118e-04, 7.1166e-01, 9.9855e-01, 9.8631e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0082,  0.1059, -0.1470, -0.1300, -0.0015], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.3921e-05, -3.2620e-05,  3.7821e-05,  4.4647e-05, -6.1661e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.8487e-05, -3.2897e-05,  3.5048e-05,  4.8017e-05, -5.4719e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-8.6187e-05,  1.0742e-03, -1.4825e-03, -1.3144e-03, -1.4312e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0066,  0.0854, -0.1185, -0.1049, -0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0066,  0.0854, -0.1185, -0.1049, -0.0012], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0028, -0.0110,  0.0288, -0.0059, -0.0009], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0013], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([27.8478], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1815, -0.5728,  1.5569, -0.3648, -0.0634], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1815, -0.5728,  1.5569, -0.3648, -0.0634], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-17.4144,  -1.0152,  -9.6331,  10.4697,   5.2618],
       grad_fn=<SliceBackward0>)
  [Layer 48] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 48] Output sample values after mixer: tensor([-17.4144,  -1.0152,  -9.6331,  10.4697,   5.2618],
       grad_fn=<SliceBackward0>)
  [Layer 48] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 48] Residual connection sample values: tensor([-11.7909,  32.3677, -28.9519,  25.3771, -23.1502],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3932.0042], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0159], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1048,  0.3181, -0.2620,  0.2342, -0.2037], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Final backbone norm output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Final backbone norm output sample values: tensor([-0.1048,  0.3181, -0.2620,  0.2342, -0.2037], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Logits shape: torch.Size([1, 1, 50288])
[Mamba2LMHeadModel] Logits sample values: tensor([11.7446, -7.4957,  7.3954,  8.3287,  7.0412], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Forward pass input_ids shape: torch.Size([1, 1])
[Mamba2LMHeadModel] input_ids sample values: tensor([4875])
[Mamba2LMHeadModel] Embedding output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Embedding sample values: tensor([-0.0116, -0.0120,  0.0704, -0.0842, -0.0271], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 1/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0599], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([4.0840], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0084, -0.0098,  0.0527, -0.0630, -0.0199], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1128, -0.2021,  0.6348,  0.0873,  0.6653], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1128, -0.2021,  0.6348,  0.0873,  0.6653], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.8021,  0.0754, -0.7154, -0.3317,  0.2209], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.0245, -0.1086, -0.4676, -0.4794,  0.1524], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0913,  0.5232,  0.4551, -0.8021, -0.2357], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1165, -0.0693, -0.0227, -0.0321, -0.0112], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.3442,  0.1460,  0.2476,  0.0171, -0.2681], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.2015,  0.0783,  0.1390,  0.0086, -0.1162], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.2015,  0.0783,  0.1390,  0.0086, -0.1162], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1301,  0.0845, -0.2704, -0.2430,  0.1043], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2510, -0.0827, -0.2754, -0.2784,  0.1691], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6180, -2.5226, -3.0473, -3.3078, -3.9090], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0093, 0.0122, 0.0057, 0.0152, 0.0085], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9759, 0.9697, 0.9828, 0.9510, 0.9674], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.2015,  0.0783,  0.1390,  0.0086, -0.1162], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0002,  0.0002, -0.0005, -0.0005,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0025,  0.0015, -0.0037, -0.0038,  0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0043, -0.0031, -0.0055, -0.0012,  0.0038], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0725,  0.0267,  0.0476,  0.0020, -0.0405], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0725,  0.0267,  0.0476,  0.0020, -0.0405], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-3.8573e-03, -2.4295e-03,  1.9728e-02,  9.2607e-05, -1.7789e-02],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0339], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.4340], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0210, -0.0142,  0.0915,  0.0008, -0.0986], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0210, -0.0142,  0.0915,  0.0008, -0.0986], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1484, -0.7832,  0.9443,  0.2656, -0.2286], grad_fn=<SliceBackward0>)
  [Layer 1] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 1] Output sample values after mixer: tensor([-0.1484, -0.7832,  0.9443,  0.2656, -0.2286], grad_fn=<SliceBackward0>)
  [Layer 1] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 1] Residual connection sample values: tensor([-0.1600, -0.7951,  1.0147,  0.1813, -0.2557], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 2/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2946], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.8423], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1064, -0.4177,  0.6221,  0.1165, -0.1604], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.9690, -2.8241, -0.1591, -3.7867, -0.6856], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.9690, -2.8241, -0.1591, -3.7867, -0.6856], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1531,  1.3668, -0.4749,  4.5447,  0.3720], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.8721,  1.3768,  0.1076, -0.5023, -1.2165], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.1298,  0.3517,  0.7518, -0.1531,  0.9405], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1228, -0.2115, -0.4411, -3.1344,  0.3273], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0930, -0.3660, -0.4516, -2.0807,  0.3141], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0486, -0.1499, -0.1757, -0.2309,  0.1815], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0486, -0.1499, -0.1757, -0.2309,  0.1815], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1414, -0.0258,  0.2701,  0.5344, -0.1103], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2300, -0.2393, -0.1457, -0.0620, -0.2469], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-19.8515, -18.6852, -13.5640,  -2.4189,  -0.4662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0145, 0.0247, 0.0235, 0.0044, 0.0044], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7497, 0.6306, 0.7273, 0.9893, 0.9980], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0486, -0.1499, -0.1757, -0.2309,  0.1815], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 9.9841e-05, -1.8212e-05,  1.9070e-04,  3.7724e-04, -7.7869e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0004, -0.0001,  0.0002, -0.0007,  0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0012, -0.0040, -0.0018, -0.0058, -0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0348, -0.1075, -0.1231, -0.1652,  0.1245], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0348, -0.1075, -0.1231, -0.1652,  0.1245], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0600,  0.0170,  0.0090,  0.0139, -0.0286], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.7356], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.1660], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0889,  0.0119,  0.0141,  0.0088, -0.0454], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0889,  0.0119,  0.0141,  0.0088, -0.0454], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0583, -0.3112, -0.2196,  0.2495,  0.1979], grad_fn=<SliceBackward0>)
  [Layer 2] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 2] Output sample values after mixer: tensor([ 0.0583, -0.3112, -0.2196,  0.2495,  0.1979], grad_fn=<SliceBackward0>)
  [Layer 2] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 2] Residual connection sample values: tensor([-0.1017, -1.1064,  0.7951,  0.4308, -0.0578], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 3/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.4518], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.4878], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0599, -0.5100,  0.4199,  0.2341, -0.0338], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8215,  0.8987,  0.3249, -1.0637,  1.0182], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8215,  0.8987,  0.3249, -1.0637,  1.0182], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.0487, -0.1921, -2.3975, -0.8027, -1.7819], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.4284,  1.4873,  0.5711, -0.6261,  0.0376], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.9024,  0.4298,  0.0516, -1.0487, -0.4886], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0271, -0.0388,  0.0638, -0.3740,  0.1211], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0287, -0.0581,  0.1875, -0.3864,  0.1048], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0141, -0.0282,  0.1025, -0.1563,  0.0551], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0141, -0.0282,  0.1025, -0.1563,  0.0551], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.2905, -0.1113,  0.0166, -0.0029,  0.1977], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.3857, -0.0722, -0.1951, -0.2044, -0.2530], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6506, -3.9939, -6.7806, -0.9419, -6.0308], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0055, 0.0872, 0.0240, 0.0035, 0.0225], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9964, 0.7059, 0.8499, 0.9967, 0.8731], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0141, -0.0282,  0.1025, -0.1563,  0.0551], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.2445e-05,  8.5972e-06, -1.2845e-06,  2.2497e-07, -1.5274e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.4235e-03, -7.5866e-05,  3.5713e-03,  3.9277e-04,  9.5917e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0088,  0.0961,  0.0640, -0.0230, -0.0112], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0024,  0.0832,  0.1107, -0.0941,  0.0139], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0024,  0.0832,  0.1107, -0.0941,  0.0139], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0006,  0.0532,  0.0209,  0.0257,  0.0104], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.7465], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.1574], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0010,  0.0935,  0.0296,  0.0558,  0.0130], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0010,  0.0935,  0.0296,  0.0558,  0.0130], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.8791,  0.0972,  0.0065, -0.6958,  0.1415], grad_fn=<SliceBackward0>)
  [Layer 3] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 3] Output sample values after mixer: tensor([-0.8791,  0.0972,  0.0065, -0.6958,  0.1415], grad_fn=<SliceBackward0>)
  [Layer 3] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 3] Residual connection sample values: tensor([-0.9807, -1.0092,  0.8016, -0.2650,  0.0838], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 4/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.7219], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.1770], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.5388, -0.4199,  0.3891, -0.1330,  0.0462], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.7146,  0.4351, -1.5109, -0.5705, -1.3258], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.7146,  0.4351, -1.5109, -0.5705, -1.3258], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.3905, -1.0080, -2.0407, -2.4531, -2.2157], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.0496,  2.1975,  0.2335,  0.8980, -0.7357], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.6362, -0.0969, -1.3304,  1.3905,  0.2179], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([0.2639, 0.3042, 0.2919, 0.0390, 0.0381], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([0.1901, 0.2690, 0.2437, 0.0232, 0.3311], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([0.1040, 0.1525, 0.1366, 0.0117, 0.1927], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([0.1040, 0.1525, 0.1366, 0.0117, 0.1927], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3954,  0.1506, -0.0335,  0.2079,  0.0722], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.7367, -0.2577, -0.2724, -0.2743, -0.1575], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.7127,  -1.2862,  -1.4870, -27.0280,  -4.0727],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0065, 0.0215, 0.0024, 0.0079, 0.0183], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9890, 0.9727, 0.9964, 0.8070, 0.9280], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([0.1040, 0.1525, 0.1366, 0.0117, 0.1927], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.6536e-04,  1.0105e-04, -2.2489e-05,  1.3951e-04,  4.8484e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0030, -0.0022, -0.0024,  0.0008, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0030,  0.0130, -0.0055, -0.0099,  0.0543], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0556,  0.0989,  0.0714, -0.0033,  0.1628], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0556,  0.0989,  0.0714, -0.0033,  0.1628], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0145,  0.0261, -0.0195,  0.0007, -0.0453], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.9182], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.0436], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0317,  0.0366, -0.0418,  0.0012, -0.0488], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0317,  0.0366, -0.0418,  0.0012, -0.0488], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.0002, -0.1413, -0.9089, -0.7699, -0.1668], grad_fn=<SliceBackward0>)
  [Layer 4] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 4] Output sample values after mixer: tensor([ 1.0002, -0.1413, -0.9089, -0.7699, -0.1668], grad_fn=<SliceBackward0>)
  [Layer 4] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 4] Residual connection sample values: tensor([ 0.0194, -1.1505, -0.1072, -1.0349, -0.0831], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 5/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.1578], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9294], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0081, -0.3989, -0.0420, -0.4158, -0.0360], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.9849, -0.1947, -0.1378, -0.5255, -1.6196], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.9849, -0.1947, -0.1378, -0.5255, -1.6196], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.7607,  1.3172, -1.2999,  0.1638,  0.9770], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.2094,  0.9205,  0.5049, -0.0413, -0.9343], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0204, -0.3398, -0.0259, -0.7607, -0.1759], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0544, -0.0666,  0.0068, -0.1700, -0.2826], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1060, -0.1039, -0.0627, -0.1961, -0.2885], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0502, -0.0492, -0.0304, -0.0885, -0.1236], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0502, -0.0492, -0.0304, -0.0885, -0.1236], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1307, -0.0278, -0.0249, -0.1451,  0.1112], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0669, -0.2435, -0.1598,  0.3817,  0.0201], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.5763,  -1.0444,  -0.8388,  -5.6765, -20.4018],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0349, 0.0299, 0.0693, 0.0133, 0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9465, 0.9692, 0.9435, 0.9271, 0.9730], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0502, -0.0492, -0.0304, -0.0885, -0.1236], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.2904e-04,  4.8664e-05,  4.3686e-05,  2.5428e-04, -1.9487e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-4.3192e-04, -6.1293e-05,  5.6672e-04,  3.6419e-04, -6.3618e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0018, -0.0075, -0.0174, -0.0015, -0.0161], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0288, -0.0339, -0.0337, -0.0490, -0.0825], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0288, -0.0339, -0.0337, -0.0490, -0.0825], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0077, 0.0030, 0.0022, 0.0096, 0.0221], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.2466], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8956], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0109, 0.0043, 0.0030, 0.0137, 0.0280], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0109, 0.0043, 0.0030, 0.0137, 0.0280], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2592, -0.2834, -0.3324, -0.1204,  0.1168], grad_fn=<SliceBackward0>)
  [Layer 5] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 5] Output sample values after mixer: tensor([ 0.2592, -0.2834, -0.3324, -0.1204,  0.1168], grad_fn=<SliceBackward0>)
  [Layer 5] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 5] Residual connection sample values: tensor([ 0.2787, -1.4339, -0.4396, -1.1553,  0.0337], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 6/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.3005], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8769], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1077, -0.4288, -0.1508, -0.4096,  0.0132], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.8857, -2.4526, -3.1563,  0.7794, -1.7863], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.8857, -2.4526, -3.1563,  0.7794, -1.7863], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.0794, -0.0991, -4.5567,  2.4120, -2.1858], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.4731,  0.0195, -0.0534, -0.0346,  1.3284], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4546,  0.0595, -0.1148, -0.0794,  0.7236], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0142,  0.0100, -2.2783, -0.4068, -0.4083], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0485, -0.0623, -2.3404, -0.3447, -0.3386], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0248, -0.0302, -0.2056, -0.1429, -0.1409], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0248, -0.0302, -0.2056, -0.1429, -0.1409], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1408,  0.0182, -0.2669,  0.0205,  0.0499], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2185, -0.1369, -0.2668,  0.2652,  0.0528], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9866, -8.7747, -3.3046, -2.9913, -3.3435], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1068, 0.0140, 0.0797, 0.0638, 0.1078], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9000, 0.8844, 0.7684, 0.8263, 0.6975], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0248, -0.0302, -0.2056, -0.1429, -0.1409], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.7342e-04,  4.8289e-05, -7.0818e-04,  5.4435e-05,  1.3238e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0162, -0.0005, -0.0100, -0.0010,  0.0036], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0512, -0.0803, -0.1384, -0.0237, -0.1115], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0566, -0.0868, -0.1830, -0.0546, -0.1420], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0566, -0.0868, -0.1830, -0.0546, -0.1420], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0355,  0.0169,  0.0236, -0.0292,  0.0364], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.1127], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9480], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0646,  0.0144,  0.0191, -0.0308,  0.0271], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0646,  0.0144,  0.0191, -0.0308,  0.0271], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2381,  0.0324,  0.1840, -0.1718, -0.0052], grad_fn=<SliceBackward0>)
  [Layer 6] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 6] Output sample values after mixer: tensor([-0.2381,  0.0324,  0.1840, -0.1718, -0.0052], grad_fn=<SliceBackward0>)
  [Layer 6] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 6] Residual connection sample values: tensor([ 0.0405, -1.4014, -0.2556, -1.3271,  0.0285], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 7/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.6293], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7834], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0122, -0.3509, -0.0714, -0.3663,  0.0086], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3990, -1.8637,  0.9486, -0.6949, -0.4498], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3990, -1.8637,  0.9486, -0.6949, -0.4498], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-3.4465e+00, -1.0717e-04,  1.3464e+00, -1.7855e+00,  1.1311e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9146, 1.0837, 0.7945, 1.3250, 1.4011], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.9762, -1.7871, -1.6185, -3.4465,  0.2975], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2850,  0.1346,  0.1484, -0.3938, -0.3005], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2169,  0.1592,  0.1476, -0.3874, -0.3041], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1202,  0.0859,  0.0792, -0.1566, -0.1291], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1202,  0.0859,  0.0792, -0.1566, -0.1291], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0351, -0.0656, -0.0595, -0.0473,  0.0428], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0435, -0.0094, -0.2149,  0.0015, -0.0819], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2959, -1.1836, -0.3113, -0.1314, -1.5015], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0430, 0.0176, 0.0056, 0.0553, 0.0044], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9874, 0.9794, 0.9983, 0.9928, 0.9935], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1202,  0.0859,  0.0792, -0.1566, -0.1291], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0002, -0.0003, -0.0003, -0.0002,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0008,  0.0004, -0.0015,  0.0002, -0.0031], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0029, -0.0021, -0.0018, -0.0017, -0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0032, -0.0019, -0.0016, -0.0020, -0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0032, -0.0019, -0.0016, -0.0020, -0.0008], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0008,  0.0005, -0.0011,  0.0005,  0.0001], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0113], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.4064], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0090,  0.0031, -0.0169,  0.0051,  0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0090,  0.0031, -0.0169,  0.0051,  0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.3775, -0.4033,  0.1249, -0.3470, -0.4346], grad_fn=<SliceBackward0>)
  [Layer 7] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 7] Output sample values after mixer: tensor([ 0.3775, -0.4033,  0.1249, -0.3470, -0.4346], grad_fn=<SliceBackward0>)
  [Layer 7] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 7] Residual connection sample values: tensor([ 0.4180, -1.8047, -0.1307, -1.6741, -0.4061], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 8/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.0598], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6968], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1502, -0.5075, -0.0438, -0.5576, -0.1452], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8471, -0.8254, -1.2192, -0.8385,  1.2246], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8471, -0.8254, -1.2192, -0.8385,  1.2246], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7703, -0.1626, -1.9133,  0.7961, -0.6925], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-1.0605, -0.0680,  0.6734, -0.5552,  0.0549], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.8001,  0.3661,  0.7769,  0.7703, -0.8371], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1054,  0.2917,  0.2833, -0.0677, -0.1207], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.5683,  0.2607, -0.0314, -0.1193, -0.1768], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.3628,  0.1472, -0.0154, -0.0561, -0.0806], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.3628,  0.1472, -0.0154, -0.0561, -0.0806], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.2766,  0.0117, -0.0909,  0.5038, -0.1231], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.6367, -0.2385, -0.0896, -0.2239, -0.0121], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.6543, -0.9827, -0.5550, -3.9397, -1.8081], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0035, 0.0508, 0.0217, 0.0139, 0.0102], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9873, 0.9513, 0.9880, 0.9468, 0.9818], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.3628,  0.1472, -0.0154, -0.0561, -0.0806], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.5091e-04,  1.4881e-05, -1.1536e-04,  6.3906e-04, -1.5620e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0008,  0.0028,  0.0015, -0.0020, -0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0454, -0.0153, -0.0208, -0.0181, -0.0105], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.3508,  0.1087, -0.0338, -0.0653, -0.0784], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.3508,  0.1087, -0.0338, -0.0653, -0.0784], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0892, -0.0273,  0.0094,  0.0165, -0.0742], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.9740], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.0132], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0872, -0.0341,  0.0080,  0.0220, -0.1175], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0872, -0.0341,  0.0080,  0.0220, -0.1175], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0845, -0.3142, -0.2627, -0.2860,  0.4621], grad_fn=<SliceBackward0>)
  [Layer 8] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 8] Output sample values after mixer: tensor([-0.0845, -0.3142, -0.2627, -0.2860,  0.4621], grad_fn=<SliceBackward0>)
  [Layer 8] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 8] Residual connection sample values: tensor([ 0.3335, -2.1189, -0.3934, -1.9601,  0.0560], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 9/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.3412], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6535], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1035, -0.5376, -0.1123, -0.5373,  0.0172], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.4280, -1.1525, -0.4180, -3.2024, -0.6874], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.4280, -1.1525, -0.4180, -3.2024, -0.6874], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 2.0374, -2.5895, -2.6666, -2.1466, -1.9542], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.6422,  0.5096,  1.8905, -0.0406,  1.4602], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.3292, 0.7056, 1.5141, 2.0374, 0.4805], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.4120, -0.3818,  0.0973, -0.1821, -0.1313], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.4047, -0.4072,  0.0106, -0.2560, -0.1063], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1619, -0.1627,  0.0054, -0.1117, -0.0503], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1619, -0.1627,  0.0054, -0.1117, -0.0503], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1023, -0.2780,  0.0591,  0.3092,  0.3577], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2246, -0.2288, -0.2783, -0.2736,  0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-5.2345, -1.2161, -1.4888, -0.9523, -3.9667], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0191, 0.0616, 0.0314, 0.1226, 0.0660], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9048, 0.9278, 0.9543, 0.8898, 0.7695], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1619, -0.1627,  0.0054, -0.1117, -0.0503], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0003,  0.0009, -0.0002, -0.0010, -0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0025,  0.0032,  0.0018, -0.0043, -0.0035], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0167,  0.0051, -0.0354, -0.0006, -0.0048], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.2363, -0.2155, -0.0282, -0.1520, -0.0730], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.2363, -0.2155, -0.0282, -0.1520, -0.0730], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0653, 0.0596, 0.0047, 0.0190, 0.0168], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.1976], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9138], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0618, 0.0841, 0.0044, 0.0141, 0.0182], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0618, 0.0841, 0.0044, 0.0141, 0.0182], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1357,  0.0850,  0.3727, -0.0723,  0.0941], grad_fn=<SliceBackward0>)
  [Layer 9] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 9] Output sample values after mixer: tensor([-0.1357,  0.0850,  0.3727, -0.0723,  0.0941], grad_fn=<SliceBackward0>)
  [Layer 9] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 9] Residual connection sample values: tensor([ 0.1978, -2.0340, -0.0208, -2.0324,  0.1501], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 10/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.6609], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6130], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0496, -0.4262, -0.0047, -0.4554,  0.0368], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2239,  0.5751, -0.9455, -2.8225, -1.3546], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2239,  0.5751, -0.9455, -2.8225, -1.3546], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 2.0156, -1.0325,  0.9786,  0.2516, -0.8668], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.1344, -0.3020,  0.4263,  0.3930,  0.9802], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5293, -0.7617,  0.7226,  2.0156,  1.1742], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.3343,  0.1381,  0.1808, -0.0456, -0.1571], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2960,  0.0510,  0.0770, -0.1314, -0.2167], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1697,  0.0262,  0.0400, -0.0614, -0.0966], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1697,  0.0262,  0.0400, -0.0614, -0.0966], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0327, -0.0510, -0.0289,  0.1030, -0.0743], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2200, -0.1781, -0.2617, -0.1374,  0.1977], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.7155, -1.4068, -0.3534, -2.0102, -0.4653], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0014, 0.0026, 0.1415, 0.0027, 0.0201], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9949, 0.9963, 0.9512, 0.9946, 0.9907], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1697,  0.0262,  0.0400, -0.0614, -0.0966], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-7.5674e-06, -1.1824e-05, -6.6834e-06,  2.3853e-05, -1.7204e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.5467e-05,  3.8669e-05,  3.1946e-05,  5.6122e-05, -2.8750e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0003, -0.0018,  0.0003, -0.0005,  0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0376,  0.0040,  0.0091, -0.0140, -0.0201], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0376,  0.0040,  0.0091, -0.0140, -0.0201], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0037,  0.0015, -0.0024,  0.0022,  0.0056], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0150], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.1717], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0459,  0.0088, -0.0230,  0.0242,  0.0563], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0459,  0.0088, -0.0230,  0.0242,  0.0563], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.6260, -0.4454,  0.1385, -0.3680, -0.2529], grad_fn=<SliceBackward0>)
  [Layer 10] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 10] Output sample values after mixer: tensor([-0.6260, -0.4454,  0.1385, -0.3680, -0.2529], grad_fn=<SliceBackward0>)
  [Layer 10] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 10] Residual connection sample values: tensor([-0.4282, -2.4794,  0.1178, -2.4005, -0.1028], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 11/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3.1092], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5671], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1116, -0.5259,  0.0274, -0.5454, -0.0256], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.1286,  1.1729,  1.3942, -2.1086, -0.1401], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.1286,  1.1729,  1.3942, -2.1086, -0.1401], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([0.8702, 0.8405, 1.4424, 1.3520, 0.6081], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.8899,  3.3388, -0.1818,  1.3177,  1.8409], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0825,  0.5254, -0.5231,  0.8702,  0.0161], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1993, -0.1889, -0.3277, -0.1304,  0.1263], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2135, -0.5466, -0.2311, -0.1183,  0.1495], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0954, -0.2004, -0.1023, -0.0556,  0.0803], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0954, -0.2004, -0.1023, -0.0556,  0.0803], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2318, -0.2738, -0.2755,  0.0438,  0.0490], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0075, -0.1358, -0.2228, -0.2781, -0.0999], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.3116, -0.0902, -1.5786, -0.2096, -0.6694], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2772, 0.6422, 0.1009, 0.1511, 0.0461], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9173, 0.9437, 0.8527, 0.9688, 0.9696], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0954, -0.2004, -0.1023, -0.0556,  0.0803], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0061,  0.0072,  0.0073, -0.0012, -0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0462, -0.0450,  0.0540,  0.0115, -0.0483], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0789, -0.1630,  0.1184, -0.0496,  0.0183], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1139, -0.2365,  0.0808, -0.0701,  0.0478], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1139, -0.2365,  0.0808, -0.0701,  0.0478], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0314, -0.2118,  0.0903,  0.0160, -0.0031], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.9858], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.0071], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0389, -0.2569,  0.0777,  0.0448, -0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0389, -0.2569,  0.0777,  0.0448, -0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.5394, -0.1698, -0.4183,  0.8764,  0.3597], grad_fn=<SliceBackward0>)
  [Layer 11] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 11] Output sample values after mixer: tensor([ 0.5394, -0.1698, -0.4183,  0.8764,  0.3597], grad_fn=<SliceBackward0>)
  [Layer 11] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 11] Residual connection sample values: tensor([ 0.1112, -2.6492, -0.3005, -1.5241,  0.2570], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 12/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4.1093], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4933], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0227, -0.4480, -0.0535, -0.2695,  0.0502], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2349, -1.2868,  2.1061,  0.1460, -0.9332], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2349, -1.2868,  2.1061,  0.1460, -0.9332], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3947,  0.4078, -0.7344, -0.4218, -0.7467], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9835, 1.0919, 1.1431, 0.8081, 1.3763], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.3650, -0.6304, -0.6395,  0.3947,  0.5146], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0578, -0.1103, -0.0555, -0.0048, -0.1367], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0148, -0.0974, -0.0903, -0.0345, -0.1240], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0075, -0.0464, -0.0431, -0.0169, -0.0582], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0075, -0.0464, -0.0431, -0.0169, -0.0582], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0601, -0.1303,  0.2352, -0.0308,  0.1016], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2773, -0.2375,  0.0655, -0.2777, -0.2609], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2412, -0.7694, -1.9975, -1.2368, -1.0181], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1094, 0.1890, 0.0823, 0.1974, 0.2777], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8730, 0.8647, 0.8485, 0.7833, 0.7537], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0075, -0.0464, -0.0431, -0.0169, -0.0582], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 4.9143e-05, -1.0658e-04,  1.9238e-04, -2.5174e-05,  8.3102e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.3579e-03,  7.8697e-03, -1.0427e-02,  4.0169e-03, -5.6572e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0155, -0.0153,  0.0079, -0.0048, -0.0054], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0101, -0.0487, -0.0232, -0.0169, -0.0473], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0101, -0.0487, -0.0232, -0.0169, -0.0473], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0010,  0.0136, -0.0435, -0.0013,  0.0125], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2590], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.9650], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0037,  0.0315, -0.0764, -0.0027,  0.0359], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0037,  0.0315, -0.0764, -0.0027,  0.0359], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.7049,  1.2909,  0.3022,  1.2601,  0.5834], grad_fn=<SliceBackward0>)
  [Layer 12] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 12] Output sample values after mixer: tensor([-0.7049,  1.2909,  0.3022,  1.2601,  0.5834], grad_fn=<SliceBackward0>)
  [Layer 12] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 12] Residual connection sample values: tensor([-0.5937, -1.3583,  0.0017, -0.2640,  0.8403], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 13/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([5.4676], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4277], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1027, -0.2034,  0.0003, -0.0397,  0.1476], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.9926,  0.9696, -1.2272,  3.5365,  0.2969], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.9926,  0.9696, -1.2272,  3.5365,  0.2969], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5729,  0.5522, -1.3964,  1.8348, -0.6279], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.9309, 0.7782, 1.5064, 0.6420, 0.9014], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.2960, -1.7110, -0.6495, -0.5729, -0.6659], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1826,  0.1501,  0.1229,  0.0069, -0.0394], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.4473,  0.0402,  0.1024,  0.0061, -0.0633], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1744,  0.0205,  0.0538,  0.0030, -0.0307], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1744,  0.0205,  0.0538,  0.0030, -0.0307], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0780,  0.3510, -0.0676,  0.5665, -0.0652], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0558, -0.2596, -0.0640,  0.4147,  0.2159], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3103, -1.7871, -0.8606, -1.8811, -0.5252], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0242, 0.0211, 0.1623, 0.0869, 0.0428], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9688, 0.9630, 0.8696, 0.8492, 0.9778], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1744,  0.0205,  0.0538,  0.0030, -0.0307], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0003, -0.0015,  0.0003, -0.0024,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0004, -0.0076,  0.0014, -0.0412,  0.0011], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0665,  0.0331,  0.0239, -0.0096,  0.0268], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0741,  0.0339,  0.0262, -0.0095,  0.0254], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0741,  0.0339,  0.0262, -0.0095,  0.0254], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0177,  0.0239, -0.0073, -0.0325,  0.0043], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0862], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.4054], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0818,  0.0364, -0.0455, -0.2312,  0.0118], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0818,  0.0364, -0.0455, -0.2312,  0.0118], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2336,  0.3416, -0.9414, -1.1358, -0.0457], grad_fn=<SliceBackward0>)
  [Layer 13] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 13] Output sample values after mixer: tensor([ 0.2336,  0.3416, -0.9414, -1.1358, -0.0457], grad_fn=<SliceBackward0>)
  [Layer 13] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 13] Residual connection sample values: tensor([-0.3601, -1.0167, -0.9397, -1.3997,  0.7946], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 14/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([6.6237], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3886], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0488, -0.1211, -0.1180, -0.1653,  0.1052], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6311, -1.0245, -1.1783, -2.0791,  0.0597], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6311, -1.0245, -1.1783, -2.0791,  0.0597], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.3516,  0.1898, -0.1676, -1.6491,  0.2516], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.4693, 0.9573, 0.7980, 1.4171, 1.8095], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.7872, -1.5263, -1.2765, -1.3516, -0.5360], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3783, -0.0633, -0.0321, -0.3677, -0.0295], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.4179, -0.1046, -0.0930, -0.4305,  0.0071], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1659, -0.0496, -0.0443, -0.1696,  0.0036], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1659, -0.0496, -0.0443, -0.1696,  0.0036], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0617,  0.0422,  0.1315, -0.1071, -0.0350], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1979, -0.0553,  0.2828, -0.1549, -0.2678], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.3184, -0.7621, -2.6670, -5.1836, -2.8487], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0625, 0.0310, 0.1724, 0.0665, 0.0820], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7635, 0.9766, 0.6315, 0.7083, 0.7917], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1659, -0.0496, -0.0443, -0.1696,  0.0036], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0006, -0.0004, -0.0014,  0.0011,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0025,  0.0003, -0.0021,  0.0020,  0.0009], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0209, -0.0059, -0.0093, -0.0140, -0.0008], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0879, -0.0259, -0.0272, -0.0826,  0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0879, -0.0259, -0.0272, -0.0826,  0.0006], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([1.9268e-02, 7.0099e-03, 7.5388e-03, 1.9083e-02, 1.9180e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0228], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.6225], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.1391, 0.0294, 0.0460, 0.1635, 0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.1391, 0.0294, 0.0460, 0.1635, 0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0377, -0.0138,  0.8130, -0.3208,  0.8243], grad_fn=<SliceBackward0>)
  [Layer 14] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 14] Output sample values after mixer: tensor([ 0.0377, -0.0138,  0.8130, -0.3208,  0.8243], grad_fn=<SliceBackward0>)
  [Layer 14] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 14] Residual connection sample values: tensor([-0.3224, -1.0305, -0.1267, -1.7205,  1.6190], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 15/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([8.6104], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3408], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0385, -0.1046, -0.0139, -0.1768,  0.1852], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1081,  1.1945, -1.6092, -0.5277, -1.5535], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1081,  1.1945, -1.6092, -0.5277, -1.5535], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1941, -0.6311,  0.2775, -0.4959,  0.1842], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.4770, 0.1741, 1.9451, 0.6348, 0.5715], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.1967, -0.6432,  0.0531, -0.1941,  0.9233], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0170,  0.1444, -0.0012, -0.0482, -0.1739], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0205,  0.1375, -0.0260, -0.0659, -0.1993], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0101,  0.0735, -0.0128, -0.0319, -0.0897], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0101,  0.0735, -0.0128, -0.0319, -0.0897], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0194, -0.0355,  0.0008,  0.0092, -0.0258], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0999, -0.0091,  0.0217, -0.0355, -0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2782, -0.6808, -2.7209, -0.1126, -3.8484], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0085, 0.0188, 0.1013, 0.0108, 0.0406], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9977, 0.9873, 0.7591, 0.9988, 0.8552], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0101,  0.0735, -0.0128, -0.0319, -0.0897], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.6639e-06,  3.0422e-06, -6.8975e-08, -7.9215e-07,  2.2138e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-6.0786e-05,  8.8158e-06, -1.8684e-05, -1.6671e-05, -7.9052e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 6.2468e-05,  2.0656e-05, -2.0289e-06,  8.0036e-06, -1.4982e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0017,  0.0125, -0.0022, -0.0054, -0.0153], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0017,  0.0125, -0.0022, -0.0054, -0.0153], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([8.5154e-05, 1.1502e-02, 5.8684e-04, 1.0623e-03, 4.1519e-03],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0025], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([19.9754], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0018, 0.3107, 0.0122, 0.0257, 0.0738], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0018, 0.3107, 0.0122, 0.0257, 0.0738], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1364, -0.1609, -0.1440,  0.3250,  0.3165], grad_fn=<SliceBackward0>)
  [Layer 15] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 15] Output sample values after mixer: tensor([ 0.1364, -0.1609, -0.1440,  0.3250,  0.3165], grad_fn=<SliceBackward0>)
  [Layer 15] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 15] Residual connection sample values: tensor([-0.1859, -1.1914, -0.2707, -1.3956,  1.9355], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 16/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([9.7693], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3199], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0232, -0.1243, -0.0310, -0.1462,  0.2321], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1607,  0.0732,  0.4748,  1.1466, -0.2935], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1607,  0.0732,  0.4748,  1.1466, -0.2935], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.7791, -0.7830,  0.5332,  1.8585,  0.0052], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.0276,  0.5609,  0.6583, -0.2087,  1.2359], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.8946, 1.6345, 0.6475, 0.7791, 0.5628], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2340, -0.1424,  0.1075,  0.4441,  0.0057], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1979, -0.1835,  0.0944,  0.3517, -0.0364], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1087, -0.0834,  0.0494,  0.2064, -0.0179], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1087, -0.0834,  0.0494,  0.2064, -0.0179], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1605,  0.1177,  0.1058, -0.0760,  1.3340], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2176, -0.0475, -0.2182,  1.0132, -0.0553], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6906, -0.1348, -1.3129, -3.7740, -1.2635], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0587, 0.1160, 0.0922, 0.0600, 0.0781], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8540, 0.9845, 0.8860, 0.7973, 0.9060], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1087, -0.0834,  0.0494,  0.2064, -0.0179], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0010,  0.0008,  0.0007, -0.0005,  0.0085], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0086, -0.0015,  0.0010, -0.0004,  0.0079], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0623, -0.0333, -0.0094,  0.0497, -0.0152], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1322, -0.0869,  0.0224,  0.1826, -0.0267], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1322, -0.0869,  0.0224,  0.1826, -0.0267], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0115, -0.0033,  0.0065,  0.1589,  0.0033], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0848], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.4334], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0506, -0.0114,  0.0272,  0.5875,  0.0127], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0506, -0.0114,  0.0272,  0.5875,  0.0127], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0880,  0.9377,  0.0253,  0.1040, -2.0605], grad_fn=<SliceBackward0>)
  [Layer 16] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 16] Output sample values after mixer: tensor([-0.0880,  0.9377,  0.0253,  0.1040, -2.0605], grad_fn=<SliceBackward0>)
  [Layer 16] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 16] Residual connection sample values: tensor([-0.2739, -0.2537, -0.2453, -1.2916, -0.1250], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 17/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([13.4549], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2726], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0289, -0.0225, -0.0230, -0.1122, -0.0127], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1668, -0.3453, -0.6527, -1.0534, -1.0389], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1668, -0.3453, -0.6527, -1.0534, -1.0389], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.3540, -0.7617,  0.2351, -1.1376, -1.2454], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.2107, -0.2816,  0.5770,  1.0011, -1.1013], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.2048, -1.2433, -0.4684, -0.3540, -0.3928], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1032,  0.1441, -0.0611,  0.0490,  0.2164], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1350,  0.1179, -0.0755,  0.0436,  0.2290], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0630,  0.0624, -0.0363,  0.0223,  0.1276], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0630,  0.0624, -0.0363,  0.0223,  0.1276], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1117,  0.0278, -0.0519, -0.0057,  0.1508], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1927,  0.0032, -0.1234,  0.0268,  0.0542], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.1571, -11.4668, -14.2150,  -0.1286, -14.2428],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0004, 0.0078, 0.0381, 0.0585, 0.0024], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9995, 0.9149, 0.5814, 0.9925, 0.9670], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0630,  0.0624, -0.0363,  0.0223,  0.1276], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.9237e-06, -7.2701e-07,  1.3597e-06,  1.4957e-07, -3.9482e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-6.5723e-05,  8.3728e-05,  1.0769e-04, -2.6195e-04,  1.0411e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.2958e-04, -9.6262e-07, -1.0374e-04, -4.5872e-06,  9.5357e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0407,  0.0403, -0.0235,  0.0144,  0.0824], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0407,  0.0403, -0.0235,  0.0144,  0.0824], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0037, -0.0058,  0.0053, -0.0039, -0.0224], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0360], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.2711], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0301, -0.0576,  0.0399, -0.0361, -0.2075], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0301, -0.0576,  0.0399, -0.0361, -0.2075], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0612, -1.4298, -0.1503,  0.6382,  1.0715], grad_fn=<SliceBackward0>)
  [Layer 17] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 17] Output sample values after mixer: tensor([-0.0612, -1.4298, -0.1503,  0.6382,  1.0715], grad_fn=<SliceBackward0>)
  [Layer 17] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 17] Residual connection sample values: tensor([-0.3351, -1.6836, -0.3956, -0.6534,  0.9465], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 18/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([16.0967], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2492], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0289, -0.1228, -0.0305, -0.0473,  0.0785], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.4847,  0.0118,  0.2451, -1.9851, -0.5527], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.4847,  0.0118,  0.2451, -1.9851, -0.5527], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.9200, -0.1573,  0.0060, -0.7875,  2.0870], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.2361,  0.4729, -0.2067,  0.1860,  0.9229], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0838,  0.9927, -0.0258, -0.9200, -0.1164], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2076, -0.0795, -0.0011, -0.1027,  0.5653], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2177, -0.3449,  0.2787, -0.1165,  0.5232], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0970, -0.1430,  0.1587, -0.0549,  0.3285], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0970, -0.1430,  0.1587, -0.0549,  0.3285], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([0.0720, 0.0466, 0.0808, 0.1395, 0.0996], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2090,  0.0326,  0.0664, -0.1287, -0.1062], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3011, -1.4686, -1.2083, -1.2129, -2.5875], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1197, 0.0862, 0.0601, 0.0886, 0.1045], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8558, 0.8811, 0.9299, 0.8981, 0.7631], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0970, -0.1430,  0.1587, -0.0549,  0.3285], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0008, -0.0005, -0.0009, -0.0016, -0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0059,  0.0052,  0.0042, -0.0004,  0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0127, -0.1433,  0.1405, -0.0786,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0060, -0.1709,  0.1712, -0.0892,  0.0638], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0060, -0.1709,  0.1712, -0.0892,  0.0638], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0016, -0.0010,  0.0235,  0.0214, -0.0129], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0328], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.5202], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0119, -0.0030,  0.1268,  0.1482, -0.1406], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0119, -0.0030,  0.1268,  0.1482, -0.1406], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.1327,  0.8187,  1.5821, -1.0156, -1.0542], grad_fn=<SliceBackward0>)
  [Layer 18] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 18] Output sample values after mixer: tensor([-1.1327,  0.8187,  1.5821, -1.0156, -1.0542], grad_fn=<SliceBackward0>)
  [Layer 18] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 18] Residual connection sample values: tensor([-1.4678, -0.8649,  1.1865, -1.6690, -0.1077], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 19/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([18.0078], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2357], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1180, -0.0600,  0.0890, -0.1153, -0.0086], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.9577,  0.9635,  0.1681, -0.6894, -0.6378], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.9577,  0.9635,  0.1681, -0.6894, -0.6378], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.3337,  0.4218, -0.4793,  0.7234, -1.3485], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.3660,  0.3636,  0.9964, -0.1537,  0.2417], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.0871, -0.6589, -0.0258, -1.3337, -0.6539], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2571, -0.0306, -0.1226,  0.1238,  0.2626], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2927, -0.0549, -0.1276,  0.0812,  0.2296], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1251, -0.0267, -0.0597,  0.0423,  0.1279], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1251, -0.0267, -0.0597,  0.0423,  0.1279], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0383,  0.2883,  0.3230,  0.1183, -0.0365], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2735,  0.0253, -0.0700, -0.0777, -0.2679], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9436, -1.8179, -2.0862, -1.0006, -0.9650], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0381, 0.0412, 0.0614, 0.0441, 0.0909], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9286, 0.9279, 0.8798, 0.9568, 0.9160], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1251, -0.0267, -0.0597,  0.0423,  0.1279], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0002, -0.0014, -0.0015, -0.0006,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0008, -0.0185, -0.0018, -0.0020,  0.0007], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0181, -0.0156, -0.0053,  0.0002,  0.0028], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0321, -0.0186, -0.0120,  0.0050,  0.0172], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0321, -0.0186, -0.0120,  0.0050,  0.0172], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0085, -0.0130, -0.0011, -0.0011, -0.0038], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0030], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([18.3185], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1890, -0.3023, -0.0327, -0.0249, -0.1180], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1890, -0.3023, -0.0327, -0.0249, -0.1180], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.6878,  0.1296, -0.5139, -0.3520,  0.1466], grad_fn=<SliceBackward0>)
  [Layer 19] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 19] Output sample values after mixer: tensor([ 1.6878,  0.1296, -0.5139, -0.3520,  0.1466], grad_fn=<SliceBackward0>)
  [Layer 19] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 19] Residual connection sample values: tensor([ 0.2200, -0.7353,  0.6726, -2.0210,  0.0390], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 20/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([21.0906], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2177], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0185, -0.0530,  0.0520, -0.1444,  0.0032], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2672, -1.9070, -0.3517,  0.5111, -0.0122], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2672, -1.9070, -0.3517,  0.5111, -0.0122], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.6735, -0.5095, -0.2924,  1.7618,  0.4259], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.7417, 0.7944, 1.1940, 0.1366, 0.4673], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.9065, -0.4845,  0.0375,  0.6735,  0.8972], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0153, -0.0253, -0.1897, -0.0648, -0.0903], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0232, -0.0168, -0.1232, -0.0836, -0.1178], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0115, -0.0083, -0.0578, -0.0401, -0.0554], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0115, -0.0083, -0.0578, -0.0401, -0.0554], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0527,  0.1265,  0.1137, -0.1029,  0.3235], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1855, -0.1995,  0.1383, -0.1487,  0.6036], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.6216, -5.0389, -1.2056, -1.6435, -1.3345], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0604, 0.0250, 0.0286, 0.0526, 0.0478], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9067, 0.8818, 0.9661, 0.9171, 0.9382], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0115, -0.0083, -0.0578, -0.0401, -0.0554], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.6438e-05, -8.7541e-05, -7.8719e-05,  7.1186e-05, -2.2385e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0021,  0.0010,  0.0027,  0.0032,  0.0041], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0144,  0.0307, -0.0107, -0.0250,  0.0309], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0143,  0.0307, -0.0111, -0.0253,  0.0305], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0143,  0.0307, -0.0111, -0.0253,  0.0305], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0022, -0.0076,  0.0016, -0.0081, -0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0088], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.6241], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0306, -0.1146,  0.0328, -0.1244, -0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0306, -0.1146,  0.0328, -0.1244, -0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.2448, -0.1428,  0.8687, -1.0498, -0.3148], grad_fn=<SliceBackward0>)
  [Layer 20] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 20] Output sample values after mixer: tensor([ 1.2448, -0.1428,  0.8687, -1.0498, -0.3148], grad_fn=<SliceBackward0>)
  [Layer 20] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 20] Residual connection sample values: tensor([ 1.4649, -0.8780,  1.5413, -3.0708, -0.2759], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 21/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([27.6245], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1903], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0817, -0.0445,  0.0740, -0.1422, -0.0144], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2409, -0.5133,  0.3875, -0.0956, -0.0070], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2409, -0.5133,  0.3875, -0.0956, -0.0070], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.1839,  0.4201, -2.2819, -0.1327, -0.2509], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.3530, 2.2026, 1.1780, 0.6180, 2.9182], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.6582, -0.0838,  0.0051,  1.1839, -0.2593], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1845,  0.1166,  0.2966,  0.0381,  0.0270], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2158,  0.0865,  0.3114,  0.0330,  0.0549], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0963,  0.0451,  0.1798,  0.0168,  0.0282], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0963,  0.0451,  0.1798,  0.0168,  0.0282], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0203,  0.0124,  0.0219,  0.0623,  0.0381], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0275, -0.0407,  0.0226, -0.0776, -0.1641], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.2092, -0.0434, -3.8147, -6.6624, -0.0228], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0820, 0.0377, 0.0946, 0.0444, 0.1361], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7686, 0.9984, 0.6970, 0.7441, 0.9969], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0963,  0.0451,  0.1798,  0.0168,  0.0282], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.6019e-04, -9.8096e-05, -1.7301e-04, -4.9203e-04, -3.0055e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.3000e-05,  2.5200e-05, -3.6331e-04, -6.7239e-04, -6.1243e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0006,  0.0005,  0.0011,  0.0004,  0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0175,  0.0084,  0.0326,  0.0033,  0.0052], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0175,  0.0084,  0.0326,  0.0033,  0.0052], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-2.3597e-03, -1.6127e-03,  7.5287e-03, -1.5007e-04, -1.7938e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([60.2554], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1801, -0.1130,  0.7013, -0.0118, -0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1801, -0.1130,  0.7013, -0.0118, -0.0013], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.5708,  0.5948,  0.1680, -0.7108,  0.2923], grad_fn=<SliceBackward0>)
  [Layer 21] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 21] Output sample values after mixer: tensor([-0.5708,  0.5948,  0.1680, -0.7108,  0.2923], grad_fn=<SliceBackward0>)
  [Layer 21] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 21] Residual connection sample values: tensor([ 0.8941, -0.2832,  1.7093, -3.7817,  0.0165], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 22/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([32.0826], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1765], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0728, -0.0194,  0.1242, -0.2533,  0.0013], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3546,  0.1648,  0.4553, -0.8618, -0.3584], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3546,  0.1648,  0.4553, -0.8618, -0.3584], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.1725, -0.3381,  1.5188, -0.6970, -1.4118], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.7275,  1.1238, -0.6529, -0.1686,  2.0150], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6229,  0.0427, -0.6780, -0.1725, -0.2144], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2967, -0.0829,  0.2287,  0.1083, -0.4637], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3443, -0.1616,  0.5480,  0.0673, -0.5294], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1428, -0.0743,  0.3473,  0.0348, -0.1962], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1428, -0.0743,  0.3473,  0.0348, -0.1962], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0508, -0.0692, -0.0040, -0.0716, -0.0582], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1932,  0.0457, -0.1688, -0.0057, -0.0302], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.1489, -3.5006, -2.8321, -5.5396, -1.7186], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0202, 0.1198, 0.0329, 0.0390, 0.0213], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9197, 0.6575, 0.9110, 0.8058, 0.9641], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1428, -0.0743,  0.3473,  0.0348, -0.1962], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.4626e-04,  1.9931e-04,  1.1517e-05,  2.0608e-04,  1.6775e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.1803e-04,  2.2901e-04,  1.8668e-05,  2.2484e-04,  2.2393e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0022, -0.0002,  0.0049,  0.0005, -0.0025], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0368, -0.0182,  0.0890,  0.0089, -0.0500], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0368, -0.0182,  0.0890,  0.0089, -0.0500], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0054, -0.0016,  0.0248, -0.0023,  0.0074], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0036], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([16.6115], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0298, -0.0253,  0.2203, -0.0498,  0.1058], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0298, -0.0253,  0.2203, -0.0498,  0.1058], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.6846,  0.8442,  0.1042, -1.0304, -1.1604], grad_fn=<SliceBackward0>)
  [Layer 22] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 22] Output sample values after mixer: tensor([-0.6846,  0.8442,  0.1042, -1.0304, -1.1604], grad_fn=<SliceBackward0>)
  [Layer 22] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 22] Residual connection sample values: tensor([ 0.2095,  0.5609,  1.8135, -4.8120, -1.1440], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 23/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([37.6823], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1629], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0110,  0.0254,  0.0875, -0.2193, -0.0584], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0198, -0.5050, -0.3158,  0.4070, -0.0709], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0198, -0.5050, -0.3158,  0.4070, -0.0709], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.0781,  0.0944,  0.2240, -0.0321,  0.6033], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.5697, 0.8310, 2.8422, 0.3100, 1.1011], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.7503, -1.0936,  0.5952,  1.0781,  0.2686], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.3955,  0.0711,  0.1013, -0.0009, -0.2850], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.3731,  0.0380,  0.0899, -0.0031, -0.3344], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.2209,  0.0193,  0.0470, -0.0015, -0.1395], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.2209,  0.0193,  0.0470, -0.0015, -0.1395], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0776,  0.0543,  0.1740,  0.0158, -0.1301], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0840,  0.0753,  0.2420, -0.1481, -0.0263], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0811, -3.7998, -0.0826, -0.4878, -1.4532], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0557, 0.0963, 0.1647, 0.0020, 0.0031], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9955, 0.6936, 0.9865, 0.9990, 0.9955], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.2209,  0.0193,  0.0470, -0.0015, -0.1395], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0010,  0.0007,  0.0021,  0.0002, -0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.2458e-03,  1.1841e-03, -7.6740e-04,  9.1800e-05, -8.9162e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0010, -0.0033,  0.0023, -0.0007, -0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0037, -0.0037,  0.0013, -0.0007,  0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0037, -0.0037,  0.0013, -0.0007,  0.0012], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 3.6596e-05,  6.9843e-04, -1.6712e-04, -1.7043e-04, -3.9959e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0006], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([39.4090], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0064,  0.0155, -0.0065, -0.0107, -0.0073], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0064,  0.0155, -0.0065, -0.0107, -0.0073], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.5736, -1.9277, -0.4666, -0.0713,  1.9251], grad_fn=<SliceBackward0>)
  [Layer 23] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 23] Output sample values after mixer: tensor([ 0.5736, -1.9277, -0.4666, -0.0713,  1.9251], grad_fn=<SliceBackward0>)
  [Layer 23] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 23] Residual connection sample values: tensor([ 0.7831, -1.3668,  1.3469, -4.8834,  0.7811], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 24/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([43.7739], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1511], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0315, -0.0525,  0.0500, -0.1747,  0.0305], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1348,  0.0531,  0.1170,  0.0795, -0.2081], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1348,  0.0531,  0.1170,  0.0795, -0.2081], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.4203, -0.4480,  0.5168,  0.1241, -0.7013], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 3.0236, -0.1708, -0.3729,  2.2898,  0.0122], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5737, -0.0558,  0.1292, -0.4203, -0.1712], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0810, -0.0898,  0.0676,  0.0364, -0.3309], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0776, -0.0898,  0.0637,  0.0348, -0.3356], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0403, -0.0429,  0.0329,  0.0177, -0.1399], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0403, -0.0429,  0.0329,  0.0177, -0.1399], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0901,  0.0066, -0.0128, -0.0106, -0.0767], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2146, -0.2257, -0.2539, -0.2739,  0.1075], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0742, -3.4497, -3.2885, -0.1609, -2.6945], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1075, 0.0246, 0.0317, 0.0444, 0.0219], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9921, 0.9188, 0.9010, 0.9929, 0.9428], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0403, -0.0429,  0.0329,  0.0177, -0.1399], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.9077e-04,  2.8589e-05, -5.5564e-05, -4.5848e-05, -3.3272e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.4147e-04,  5.7721e-04, -2.6022e-05, -1.1185e-04,  3.6063e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0004, -0.0014,  0.0012, -0.0011, -0.0056], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0002, -0.0012,  0.0011, -0.0012, -0.0049], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0002, -0.0012,  0.0011, -0.0012, -0.0049], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.1475e-05, -3.3284e-05,  6.5591e-05, -5.0228e-05,  4.5624e-04],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0002], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([67.1416], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0007, -0.0030,  0.0053, -0.0149,  0.0800], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0007, -0.0030,  0.0053, -0.0149,  0.0800], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0042,  0.8134, -1.1087,  2.6689,  0.8013], grad_fn=<SliceBackward0>)
  [Layer 24] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 24] Output sample values after mixer: tensor([ 0.0042,  0.8134, -1.1087,  2.6689,  0.8013], grad_fn=<SliceBackward0>)
  [Layer 24] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 24] Residual connection sample values: tensor([ 0.7873, -0.5534,  0.2382, -2.2144,  1.5824], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 25/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([49.2199], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1425], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0335, -0.0215,  0.0096, -0.0831,  0.0665], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0978,  0.2392, -0.3945,  0.4172,  0.0357], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0978,  0.2392, -0.3945,  0.4172,  0.0357], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.5756, -1.0164,  0.5505, -1.0448, -0.8992], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.0064, -1.6358,  0.3498,  0.3113, -1.3776], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5971,  0.0611, -0.1142,  1.5756, -0.3637], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0510, -0.0705,  0.0554,  0.0920,  0.0534], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0484, -0.0987,  0.0440,  0.1529,  0.0476], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0248, -0.0469,  0.0225,  0.0823,  0.0244], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0248, -0.0469,  0.0225,  0.0823,  0.0244], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0535, -0.0216,  0.0099, -0.0556, -0.0339], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0222, -0.0297, -0.0602, -0.1183, -0.1483], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -0.3702,  -1.5045,  -5.7210,  -0.8176, -14.6662],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1380, 0.0012, 0.0370, 0.0096, 0.0083], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9502, 0.9981, 0.8094, 0.9922, 0.8850], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0248, -0.0469,  0.0225,  0.0823,  0.0244], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.8322e-04, -7.3987e-05,  3.3947e-05, -1.9051e-04, -1.1622e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0051, -0.0027, -0.0005,  0.0012,  0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0061, -0.0032,  0.0069,  0.0032,  0.0079], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0063, -0.0037,  0.0071,  0.0041,  0.0081], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0063, -0.0037,  0.0071,  0.0041,  0.0081], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0003, -0.0005, -0.0011,  0.0010,  0.0001], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0003], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([52.9736], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0187, -0.0214, -0.0792,  0.0425,  0.0135], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0187, -0.0214, -0.0792,  0.0425,  0.0135], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.2460, -1.7601,  0.0639, -1.1131, -1.4462], grad_fn=<SliceBackward0>)
  [Layer 25] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 25] Output sample values after mixer: tensor([-1.2460, -1.7601,  0.0639, -1.1131, -1.4462], grad_fn=<SliceBackward0>)
  [Layer 25] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 25] Residual connection sample values: tensor([-0.4587, -2.3135,  0.3021, -3.3275,  0.1361], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 26/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([58.3484], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1309], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0232, -0.1081,  0.0142, -0.1536,  0.0067], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.7280, -1.2263, -2.0535,  0.9260,  0.8303], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.7280, -1.2263, -2.0535,  0.9260,  0.8303], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.1610, -0.1294,  0.3055, -0.5404,  0.2026], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.4704,  0.5686,  0.0652, -0.9441,  1.4523], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.1813,  0.8584,  0.5639, -1.1610, -0.0036], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.6670,  0.0885,  0.0168,  0.1075, -0.0708], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.7555,  0.0325,  0.0810,  0.0805, -0.0627], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.2415,  0.0165,  0.0421,  0.0419, -0.0304], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.2415,  0.0165,  0.0421,  0.0419, -0.0304], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0229,  0.0009,  0.0077,  0.0347,  0.0043], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-1.1362e-01,  1.0337e-02,  3.3993e-04,  6.5056e-01,  1.1680e-01],
       grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9595, -0.3945, -0.8420, -1.4275, -0.1466], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0894, 0.1857, 0.0666, 0.0432, 0.0460], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9178, 0.9294, 0.9454, 0.9402, 0.9933], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.2415,  0.0165,  0.0421,  0.0419, -0.0304], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 4.9390e-04, -1.8993e-05, -1.6640e-04, -7.4874e-04, -9.2562e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0032, -0.0012, -0.0021, -0.0005, -0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0096,  0.0071,  0.0052,  0.0015,  0.0049], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0404,  0.0092,  0.0106,  0.0069,  0.0010], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0404,  0.0092,  0.0106,  0.0069,  0.0010], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0198, -0.0025, -0.0025,  0.0046,  0.0006], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0016], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([25.2522], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2503, -0.0714, -0.0589,  0.1654,  0.0184], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2503, -0.0714, -0.0589,  0.1654,  0.0184], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.7338,  0.0592,  1.4058, -1.2038,  1.5034], grad_fn=<SliceBackward0>)
  [Layer 26] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 26] Output sample values after mixer: tensor([-2.7338,  0.0592,  1.4058, -1.2038,  1.5034], grad_fn=<SliceBackward0>)
  [Layer 26] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 26] Residual connection sample values: tensor([-3.1925, -2.2542,  1.7079, -4.5313,  1.6395], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 27/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([63.0459], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1259], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1683, -0.1084,  0.0881, -0.2147,  0.0899], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6698, -1.3667, -1.5653,  0.0125,  1.1744], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6698, -1.3667, -1.5653,  0.0125,  1.1744], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.5274, -0.6731, -0.7319,  0.6465, -1.2053], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([0.6803, 0.3739, 0.6800, 0.7741, 0.8440], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.3850, -0.3111, -0.2342,  0.5274,  0.9142], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0612,  0.0202, -0.1684, -0.0646,  0.0745], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0352, -0.0163, -0.1784, -0.2665,  0.0447], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0179, -0.0081, -0.0813, -0.1156,  0.0228], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0179, -0.0081, -0.0813, -0.1156,  0.0228], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.3530, -0.0964, -0.1054,  0.0621, -0.0068], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1157, -0.2673,  0.0019, -0.1075, -0.2577], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3662, -1.3799, -1.8268, -2.0409, -2.3490], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0818, 0.0677, 0.0939, 0.0359, 0.1019], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8943, 0.9109, 0.8424, 0.9293, 0.7871], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0179, -0.0081, -0.0813, -0.1156,  0.0228], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.1787e-04, -1.4138e-04, -1.5462e-04,  9.1153e-05, -9.9046e-06],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0003,  0.0023,  0.0038, -0.0018,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0210, -0.0115, -0.0099, -0.0564,  0.0182], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0192, -0.0123, -0.0181, -0.0681,  0.0205], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0192, -0.0123, -0.0181, -0.0681,  0.0205], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0044,  0.0034,  0.0049, -0.0004,  0.0184], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0127], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.8860], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0656,  0.0374,  0.0927, -0.0073,  0.1921], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0656,  0.0374,  0.0927, -0.0073,  0.1921], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-5.0759, -1.0241,  1.0853,  0.0143, -0.0945], grad_fn=<SliceBackward0>)
  [Layer 27] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 27] Output sample values after mixer: tensor([-5.0759, -1.0241,  1.0853,  0.0143, -0.0945], grad_fn=<SliceBackward0>)
  [Layer 27] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 27] Residual connection sample values: tensor([-8.2684, -3.2783,  2.7932, -4.5170,  1.5450], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 28/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([76.2692], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1145], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3844, -0.1426,  0.1227, -0.1929,  0.0711], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7523, -0.1227,  0.2357, -0.5159, -0.8794], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7523, -0.1227,  0.2357, -0.5159, -0.8794], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.1147, -0.8363, -0.4628, -0.0372,  0.1177], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 1.7832, -0.8175, -0.2301,  1.0238,  0.7331], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.4833, -1.1666, -0.2787,  0.1147, -1.6980], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0859,  0.2367, -0.1287, -0.0331, -0.0400], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1437,  0.2254, -0.1424, -0.0445,  0.0647], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0667,  0.1253, -0.0661, -0.0217,  0.0334], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0667,  0.1253, -0.0661, -0.0217,  0.0334], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0604, -0.0212,  0.0279, -0.0389,  0.2211], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2106, -0.0135,  0.4290, -0.1476,  0.3763], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2728, -3.9978, -2.5177, -2.1714, -2.8655], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0591, 0.0197, 0.0333, 0.0470, 0.0315], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9275, 0.9244, 0.9195, 0.9030, 0.9137], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0667,  0.1253, -0.0661, -0.0217,  0.0334], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.3805e-04,  8.3412e-05, -1.0998e-04,  1.5338e-04, -8.7129e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.2506e-04,  2.7906e-06, -7.7720e-05,  4.2951e-04, -6.4448e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0012,  0.0117, -0.0029, -0.0046,  0.0051], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0156,  0.0389, -0.0172, -0.0094,  0.0124], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0156,  0.0389, -0.0172, -0.0094,  0.0124], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0038, -0.0022, -0.0023,  0.0018, -0.0032], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0027], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([19.0830], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1486, -0.0586, -0.0563,  0.0517, -0.0887], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1486, -0.0586, -0.0563,  0.0517, -0.0887], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.5757, -1.4097,  2.2739, -0.5675, -1.5897], grad_fn=<SliceBackward0>)
  [Layer 28] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 28] Output sample values after mixer: tensor([ 2.5757, -1.4097,  2.2739, -0.5675, -1.5897], grad_fn=<SliceBackward0>)
  [Layer 28] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 28] Residual connection sample values: tensor([-5.6927, -4.6880,  5.0670, -5.0845, -0.0446], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 29/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([101.1681], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0994], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2187, -0.1723,  0.1865, -0.1802, -0.0017], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.2781, -0.8740,  0.1260, -0.3506, -0.3967], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.2781, -0.8740,  0.1260, -0.3506, -0.3967], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-4.2566e-01, -3.7953e-01,  1.0584e-01,  3.4645e-04, -2.1192e+00],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.8958, 0.4266, 0.6633, 2.7775, 0.6622], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.4078, -1.7795, -0.6525, -0.4257, -0.4371], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0856,  0.0992, -0.0236,  0.0284, -0.2341], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0722,  0.0647, -0.0207, -0.0321, -0.3472], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0374,  0.0334, -0.0103, -0.0158, -0.1438], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0374,  0.0334, -0.0103, -0.0158, -0.1438], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0170,  0.0286, -0.0639, -0.0768,  0.1298], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2783, -0.2737, -0.1357, -0.1780, -0.1522], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8072, -2.1170, -1.9257, -0.2904, -2.0499], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3281, 0.0748, 0.1200, 0.0250, 0.1184], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5527, 0.8536, 0.7936, 0.9928, 0.7845], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0374,  0.0334, -0.0103, -0.0158, -0.1438], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0002,  0.0004, -0.0008, -0.0009,  0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0005,  0.0005, -0.0013, -0.0006,  0.0020], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0103,  0.0033, -0.0107,  0.0063, -0.0449], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0485,  0.0375, -0.0211, -0.0098, -0.1919], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0485,  0.0375, -0.0211, -0.0098, -0.1919], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0485, -0.0096, -0.0014,  0.0014,  0.0306], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0248], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.3452], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.3365, -0.0630, -0.0147,  0.0132,  0.2521], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.3365, -0.0630, -0.0147,  0.0132,  0.2521], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.5539, -2.5189, -1.8895,  0.9591, -0.8712], grad_fn=<SliceBackward0>)
  [Layer 29] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 29] Output sample values after mixer: tensor([-2.5539, -2.5189, -1.8895,  0.9591, -0.8712], grad_fn=<SliceBackward0>)
  [Layer 29] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 29] Residual connection sample values: tensor([-8.2466, -7.2070,  3.1775, -4.1255, -0.9158], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 30/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([119.6539], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0914], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3210, -0.2760,  0.1208, -0.1480, -0.0366], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6141, -1.0967, -0.3196, -0.4330, -0.4133], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6141, -1.0967, -0.3196, -0.4330, -0.4133], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.1811, -1.3215, -0.1792, -0.0998,  0.8314], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.1883, 1.3977, 0.4699, 1.4756, 1.3222], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.0086,  0.4021,  0.9596,  1.1811, -0.6511], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1895, -0.1815, -0.0796,  0.0025, -0.2000], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1663, -0.1678, -0.0465, -0.0156, -0.2274], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0900, -0.0769, -0.0227, -0.0078, -0.1008], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0900, -0.0769, -0.0227, -0.0078, -0.1008], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0276, -0.0168,  0.0235,  0.1851, -0.0197], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2705, -0.2740,  0.3663, -0.2282, -0.1973], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0150, -0.4675, -0.4280, -0.7895, -0.4175], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0350, 0.3676, 0.3566, 0.2233, 0.3438], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9651, 0.8421, 0.8584, 0.8384, 0.8663], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0900, -0.0769, -0.0227, -0.0078, -0.1008], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 8.6928e-05, -5.2977e-05,  7.4017e-05,  5.8299e-04, -6.1977e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 8.6527e-04, -3.1459e-05,  7.6113e-05,  1.9632e-03, -1.3917e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0040, -0.0018, -0.0032, -0.0019, -0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1149, -0.0965, -0.0311, -0.0114, -0.1271], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1149, -0.0965, -0.0311, -0.0114, -0.1271], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0248,  0.0265,  0.0042,  0.0019,  0.0209], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0242], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.4221], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2287,  0.2483,  0.0238,  0.0149,  0.1424], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2287,  0.2483,  0.0238,  0.0149,  0.1424], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.7066, -0.5364,  2.1820, -0.6726,  1.1817], grad_fn=<SliceBackward0>)
  [Layer 30] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 30] Output sample values after mixer: tensor([ 1.7066, -0.5364,  2.1820, -0.6726,  1.1817], grad_fn=<SliceBackward0>)
  [Layer 30] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 30] Residual connection sample values: tensor([-6.5400, -7.7434,  5.3595, -4.7980,  0.2659], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 31/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([133.1384], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0867], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2419, -0.2810,  0.1950, -0.1699,  0.0099], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3222,  0.4468, -0.5647, -0.3032, -0.1483], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3222,  0.4468, -0.5647, -0.3032, -0.1483], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4075, -0.1309, -0.2604, -1.1925, -1.9380], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.1820, -0.4091,  1.8075,  0.5382,  0.5307], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.6666, -0.7322, -1.1307,  0.4075, -0.9496], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0720,  0.0140, -0.0425,  0.1935,  0.3628], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0715,  0.0037, -0.0415,  0.1916,  0.3575], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0371,  0.0018, -0.0203,  0.1049,  0.2104], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0371,  0.0018, -0.0203,  0.1049,  0.2104], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([0.0764, 0.0490, 0.0765, 0.0533, 0.0006], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0498, -0.2180, -0.2758, -0.0660, -0.2635], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.9478, -3.5384, -4.7060, -2.4630, -0.9027], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0395, 0.0151, 0.0926, 0.1003, 0.0696], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8902, 0.9478, 0.6468, 0.7811, 0.9391], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0371,  0.0018, -0.0203,  0.1049,  0.2104], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([1.1175e-04, 7.1627e-05, 1.1193e-04, 7.7923e-05, 8.4732e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0025,  0.0008, -0.0002,  0.0022,  0.0005], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0144,  0.0059, -0.0051,  0.0037,  0.0185], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0111,  0.0071, -0.0191,  0.0759,  0.1632], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0111,  0.0071, -0.0191,  0.0759,  0.1632], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0021,  0.0019,  0.0039, -0.0098, -0.0112], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0263], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.1608], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0251,  0.0206,  0.0369, -0.0983, -0.1334], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0251,  0.0206,  0.0369, -0.0983, -0.1334], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.1575,  2.9140, -2.4636, -0.0904, -0.2350], grad_fn=<SliceBackward0>)
  [Layer 31] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 31] Output sample values after mixer: tensor([-2.1575,  2.9140, -2.4636, -0.0904, -0.2350], grad_fn=<SliceBackward0>)
  [Layer 31] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 31] Residual connection sample values: tensor([-8.6975, -4.8293,  2.8959, -4.8884,  0.0309], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 32/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([143.7553], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0834], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.3292, -0.1836,  0.1098, -0.1736,  0.0012], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2670,  1.7944, -3.4081, -0.2836, -1.0540], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2670,  1.7944, -3.4081, -0.2836, -1.0540], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.9295,  1.4688, -0.6914, -0.2780,  1.1739], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-0.5178,  0.9940,  1.1026,  0.9327,  1.0419], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1990,  0.1698, -0.1870, -0.9295,  0.3346], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0374,  0.1404,  0.2244,  0.0443, -0.0372], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0745,  0.0883,  0.2086,  0.0568, -0.0442], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0387,  0.0461,  0.1151,  0.0292, -0.0216], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0387,  0.0461,  0.1151,  0.0292, -0.0216], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0376, -0.0444, -0.0209, -0.0321,  0.0803], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2783, -0.2777, -0.0904, -0.2598, -0.2206], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6971, -2.0893, -1.7967, -1.3894, -1.0395], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0473, 0.0146, 0.3130, 0.2386, 0.3973], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9676, 0.9699, 0.5699, 0.7179, 0.6617], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0387,  0.0461,  0.1151,  0.0292, -0.0216], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-6.8669e-05, -8.1084e-05, -3.8230e-05, -5.8624e-05,  1.4686e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0021,  0.0025, -0.0001, -0.0038, -0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0316, -0.0327, -0.0093, -0.0522, -0.0498], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0409, -0.0216,  0.0183, -0.0452, -0.0550], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0409, -0.0216,  0.0183, -0.0452, -0.0550], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0062, -0.0333, -0.0020,  0.0055,  0.0150], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0428], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.8355], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0363, -0.1574, -0.0184,  0.0414,  0.0921], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0363, -0.1574, -0.0184,  0.0414,  0.0921], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 4.7820, -0.3169, -4.4490,  0.2131,  0.2755], grad_fn=<SliceBackward0>)
  [Layer 32] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 32] Output sample values after mixer: tensor([ 4.7820, -0.3169, -4.4490,  0.2131,  0.2755], grad_fn=<SliceBackward0>)
  [Layer 32] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 32] Residual connection sample values: tensor([-3.9155, -5.1462, -1.5531, -4.6753,  0.3064], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 33/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([180.2186], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0745], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1374, -0.1872, -0.0555, -0.1623,  0.0111], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4714,  0.9789,  2.5114, -0.9154, -0.5975], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4714,  0.9789,  2.5114, -0.9154, -0.5975], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 1.4796, -1.0333,  0.6730, -1.7225,  0.5731], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-1.2197,  0.3853,  0.9213,  2.2350,  0.4392], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.7822,  0.4440,  0.2413,  1.4796, -2.0371], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2250, -0.2178, -0.1491, -0.3318, -0.1023], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2118, -0.2672, -0.1222, -0.3330, -0.1035], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1171, -0.1159, -0.0574, -0.1390, -0.0491], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1171, -0.1159, -0.0574, -0.1390, -0.0491], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2329,  0.1018, -0.0446, -0.1102,  0.0569], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0156, -0.0850, -0.1880, -0.2220,  0.5141], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9791, -9.6938, -6.1678, -0.1135, -2.0903], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0035, 0.0146, 0.0322, 0.0735, 0.0045], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9931, 0.8676, 0.8197, 0.9917, 0.9907], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1171, -0.1159, -0.0574, -0.1390, -0.0491], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-9.5077e-05,  4.1563e-05, -1.8202e-05, -4.4988e-05,  2.3229e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.3197e-04,  1.0700e-04, -9.5091e-05, -6.5485e-05,  8.2106e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 3.2224e-04, -5.9400e-04,  5.2636e-05, -8.1614e-04, -5.6119e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1222, -0.1212, -0.0597, -0.1456, -0.0517], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1222, -0.1212, -0.0597, -0.1456, -0.0517], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0221, -0.0863, -0.1387,  0.0381,  0.0110], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0225], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.6719], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2225, -0.5165, -1.0464,  0.2808,  0.0914], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2225, -0.5165, -1.0464,  0.2808,  0.0914], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.7677,  0.3245, -0.8573, -0.1964,  4.5665], grad_fn=<SliceBackward0>)
  [Layer 33] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 33] Output sample values after mixer: tensor([ 0.7677,  0.3245, -0.8573, -0.1964,  4.5665], grad_fn=<SliceBackward0>)
  [Layer 33] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 33] Residual connection sample values: tensor([-3.1479, -4.8218, -2.4103, -4.8717,  4.8729], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 34/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([194.7380], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0717], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0869, -0.1410, -0.0665, -0.1356,  0.1411], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6187, -0.0419, -1.3448, -0.1931,  1.4959], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6187, -0.0419, -1.3448, -0.1931,  1.4959], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.2410, -0.3326, -0.1062, -1.2702, -1.4116], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.6954, 0.0930, 3.4724, 2.7845, 2.4848], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2582, -0.7701,  0.5119, -0.2410, -0.9480], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0446,  0.0802, -0.0005,  0.3073, -0.2856], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0127,  0.1062, -0.0124,  0.2678, -0.2941], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0064,  0.0559, -0.0062,  0.1517, -0.1256], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0064,  0.0559, -0.0062,  0.1517, -0.1256], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1059,  0.0295,  0.0410,  0.0300,  0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0043, -0.2195, -0.2357, -0.2250, -0.2078], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.5611, -2.4811, -2.8936, -0.0159, -0.0261], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2563, 0.0355, 0.2652, 0.2107, 0.0864], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5187, 0.9156, 0.4642, 0.9967, 0.9977], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0064,  0.0559, -0.0062,  0.1517, -0.1256], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.7333e-04,  4.8223e-05,  6.7032e-05,  4.9046e-05,  6.1458e-07],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.6320e-04,  2.8133e-04,  4.4489e-04,  3.3523e-04, -8.3029e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0005,  0.0035, -0.0005,  0.0093, -0.0075], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0045,  0.0380, -0.0043,  0.1027, -0.0848], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0045,  0.0380, -0.0043,  0.1027, -0.0848], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0010, -0.0008,  0.0012, -0.0090, -0.1037], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0092], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.4176], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0201, -0.0157,  0.0274, -0.2323, -2.5521], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0201, -0.0157,  0.0274, -0.2323, -2.5521], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.5226,  3.1208, -3.4013, -0.2252,  0.7498], grad_fn=<SliceBackward0>)
  [Layer 34] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 34] Output sample values after mixer: tensor([-1.5226,  3.1208, -3.4013, -0.2252,  0.7498], grad_fn=<SliceBackward0>)
  [Layer 34] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 34] Residual connection sample values: tensor([-4.6705, -1.7009, -5.8116, -5.0970,  5.6227], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 35/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([309.4414], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0568], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1373, -0.0499, -0.1678, -0.1380,  0.1636], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.1347,  0.6326,  2.0333,  0.4868, -1.4443], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.1347,  0.6326,  2.0333,  0.4868, -1.4443], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 2.3285,  0.3601,  0.4946, -0.4533, -0.4072], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.9658, 2.2282, 0.5940, 1.3362, 2.6827], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.8683,  0.9649, -0.8680,  2.3285,  1.2026], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3940, -0.0964, -0.0949, -0.1062, -0.0624], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.5500, -0.0552, -0.1311, -0.1511, -0.1039], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.2012, -0.0269, -0.0613, -0.0699, -0.0492], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.2012, -0.0269, -0.0613, -0.0699, -0.0492], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0052,  0.0737, -0.2739,  0.1994, -0.1459], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.8458,  0.4754, -0.1989, -0.2623,  0.3933], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7098, -2.7746, -0.4453, -1.1391, -3.5906], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1633, 0.1476, 0.2697, 0.2327, 0.3247], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8906, 0.6639, 0.8868, 0.7672, 0.3116], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.2012, -0.0269, -0.0613, -0.0699, -0.0492], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0002, -0.0024,  0.0090, -0.0066,  0.0048], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0037, -0.0154,  0.0305, -0.0250,  0.0050], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.1083, -0.0765, -0.0760, -0.1300, -0.0248], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.2444, -0.0947, -0.1174, -0.1773, -0.0581], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.2444, -0.0947, -0.1174, -0.1773, -0.0581], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0675, -0.0391, -0.2111, -0.0534,  0.0160], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0756], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.6367], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.8012, -0.2471, -0.9425, -0.2758,  0.1110], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.8012, -0.2471, -0.9425, -0.2758,  0.1110], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([3.1231, 1.0607, 0.8838, 0.4895, 0.1131], grad_fn=<SliceBackward0>)
  [Layer 35] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 35] Output sample values after mixer: tensor([3.1231, 1.0607, 0.8838, 0.4895, 0.1131], grad_fn=<SliceBackward0>)
  [Layer 35] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 35] Residual connection sample values: tensor([-1.5473, -0.6402, -4.9278, -4.6075,  5.7358], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 36/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([443.4500], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0475], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0361, -0.0151, -0.1140, -0.1059,  0.1369], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.9161, -1.0449, -1.5966,  0.1624, -1.0924], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.9161, -1.0449, -1.5966,  0.1624, -1.0924], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.0857, -0.3745,  0.1756, -1.7712,  0.2431], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0327, 1.0414, 0.5446, 2.1518, 0.9207], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0341,  0.2234,  0.0426, -1.0857,  1.1827], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1848, -0.0522,  0.0089, -0.3134, -0.0444], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1486, -0.0524, -0.0196, -0.3383, -0.0723], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0798, -0.0255, -0.0097, -0.1408, -0.0348], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0798, -0.0255, -0.0097, -0.1408, -0.0348], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1138,  0.3444, -0.0137,  0.0422, -0.0344], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2738, -0.2608,  0.1010, -0.0049, -0.2724], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6566, -1.1306, -1.6058, -2.4414, -2.8823], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1155, 0.0104, 0.0369, 0.2782, 0.0999], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7358, 0.9883, 0.9425, 0.5071, 0.7498], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0798, -0.0255, -0.0097, -0.1408, -0.0348], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0010,  0.0032, -0.0001,  0.0004, -0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0005,  0.0014, -0.0003,  0.0006, -0.0002], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 2.3313e-03,  5.6373e-03,  1.8428e-04, -6.6257e-03,  2.8411e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0938, -0.0236, -0.0109, -0.1680, -0.0399], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0938, -0.0236, -0.0109, -0.1680, -0.0399], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0246,  0.0064,  0.0029, -0.0147,  0.0109], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0168], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.7084], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2780,  0.1059,  0.0328, -0.1852,  0.1190], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2780,  0.1059,  0.0328, -0.1852,  0.1190], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0564, -2.5527, -0.6849,  0.5361, -3.2315], grad_fn=<SliceBackward0>)
  [Layer 36] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 36] Output sample values after mixer: tensor([ 0.0564, -2.5527, -0.6849,  0.5361, -3.2315], grad_fn=<SliceBackward0>)
  [Layer 36] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 36] Residual connection sample values: tensor([-1.4910, -3.1929, -5.6127, -4.0714,  2.5043], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 37/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([525.1943], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0436], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0371, -0.0813, -0.1380, -0.0980,  0.0628], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.7181,  2.1852,  2.9555, -3.1200,  0.1217], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.7181,  2.1852,  2.9555, -3.1200,  0.1217], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-1.6311,  0.4639,  0.1552,  0.1568, -0.1141], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.5735, 0.6769, 1.2333, 1.7006, 1.1724], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.2521,  0.4518,  0.2273, -1.6311, -0.1742], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.3285, -0.0252,  0.0022,  0.0163, -0.0621], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.3162, -0.0536,  0.0072, -0.1346, -0.0474], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1829, -0.0261,  0.0036, -0.0628, -0.0231], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1829, -0.0261,  0.0036, -0.0628, -0.0231], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.0029,  0.0323, -0.1164, -0.0857, -0.0688], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2352, -0.1077, -0.2626, -0.2615, -0.2781], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0606, -3.2470, -0.8191, -0.2453, -1.9752], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1166, 0.0191, 0.0318, 0.0068, 0.0372], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9930, 0.9398, 0.9743, 0.9983, 0.9292], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1829, -0.0261,  0.0036, -0.0628, -0.0231], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 6.2645e-05,  6.8758e-04, -2.4809e-03, -1.8269e-03, -1.4666e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0009, -0.0004, -0.0031, -0.0005, -0.0016], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0228, -0.0143, -0.0021,  0.0013,  0.0192], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0120, -0.0093, -0.0028,  0.0133,  0.0236], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0120, -0.0093, -0.0028,  0.0133,  0.0236], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0175, -0.0183, -0.0079, -0.0017,  0.0015], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0761], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.6244], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1027, -0.0973, -0.0825, -0.0339,  0.0066], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1027, -0.0973, -0.0825, -0.0339,  0.0066], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.2232,  2.8247, -2.7777,  0.0500, -2.1041], grad_fn=<SliceBackward0>)
  [Layer 37] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 37] Output sample values after mixer: tensor([ 2.2232,  2.8247, -2.7777,  0.0500, -2.1041], grad_fn=<SliceBackward0>)
  [Layer 37] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 37] Residual connection sample values: tensor([ 0.7322, -0.3682, -8.3904, -4.0214,  0.4001], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 38/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([590.8558], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0411], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0156, -0.0078, -0.1768, -0.0827,  0.0084], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6584,  0.0782, -0.7699, -1.5019, -0.4566], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6584,  0.0782, -0.7699, -1.5019, -0.4566], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.8226,  0.1888,  1.1450,  0.5343,  0.3946], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0319, 2.1571, 0.2321, 1.3022, 2.1472], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.8204, -0.3542,  0.4713, -0.8226,  0.3171], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1283, -0.0779, -0.2679, -0.1518,  0.0898], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1564, -0.1150, -0.2937, -0.1634,  0.0685], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0843, -0.0542, -0.1254, -0.0750,  0.0354], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0843, -0.0542, -0.1254, -0.0750,  0.0354], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1147, -0.1628, -0.0353, -0.0069, -0.2778], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.1114, -0.2376, -0.0237, -0.0509, -0.2778], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0881, -1.3536, -1.1764, -1.6451, -1.1941], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1394, 0.2336, 0.2075, 0.1468, 0.1815], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8592, 0.7289, 0.7834, 0.7854, 0.8052], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0843, -0.0542, -0.1254, -0.0750,  0.0354], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.3485e-03, -1.9142e-03, -4.1539e-04, -8.0749e-05, -3.2650e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([0.0046, 0.0058, 0.0007, 0.0006, 0.0042], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0130, -0.0506, -0.0348,  0.0332,  0.0202], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0553, -0.0945, -0.1364, -0.0276,  0.0489], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0553, -0.0945, -0.1364, -0.0276,  0.0489], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0124, -0.0038,  0.0332,  0.0075, -0.0087], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0345], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.3795], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1333, -0.0398,  0.3620,  0.0749, -0.0774], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1333, -0.0398,  0.3620,  0.0749, -0.0774], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.6060, -5.5894, -5.9619,  0.6441,  3.9604], grad_fn=<SliceBackward0>)
  [Layer 38] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 38] Output sample values after mixer: tensor([ 0.6060, -5.5894, -5.9619,  0.6441,  3.9604], grad_fn=<SliceBackward0>)
  [Layer 38] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 38] Residual connection sample values: tensor([  1.3382,  -5.9576, -14.3523,  -3.3773,   4.3605],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 39/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([763.9823], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0362], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0218, -0.0982, -0.2347, -0.0553,  0.0720], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.3353, -0.1913,  0.2219,  1.1864,  0.9398], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.3353, -0.1913,  0.2219,  1.1864,  0.9398], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 2.3279, -0.7220, -0.2426, -1.1986,  0.6005], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([3.3732, 1.8073, 0.8137, 2.6992, 1.3507], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1963,  0.7949,  1.5400,  2.3279, -0.1756], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.3768,  0.1172, -0.0281, -0.2740,  0.0903], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.3624,  0.2024, -0.0505, -0.2699,  0.0693], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.2137,  0.1114, -0.0246, -0.1169,  0.0359], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.2137,  0.1114, -0.0246, -0.1169,  0.0359], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([0.1122, 0.0054, 0.0462, 0.0365, 0.1169], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.6453,  0.2716,  0.3598, -0.0724, -0.1702], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6942, -0.9243, -1.3151, -3.1533, -2.1087], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1324, 0.0451, 0.0199, 0.3456, 0.0958], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9122, 0.9591, 0.9741, 0.3363, 0.8172], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.2137,  0.1114, -0.0246, -0.1169,  0.0359], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([0.0032, 0.0002, 0.0013, 0.0010, 0.0033], grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([2.8523e-03, 1.3195e-05, 1.5277e-03, 7.4335e-04, 3.7134e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0211,  0.0085, -0.0033, -0.0107,  0.0055], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.2042,  0.1039, -0.0244, -0.1108,  0.0363], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.2042,  0.1039, -0.0244, -0.1108,  0.0363], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.2159, -0.0090, -0.0030, -0.1007,  0.0245], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0093], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.3419], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 4.2014, -0.1880, -0.0643, -1.7401,  0.4829], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 4.2014, -0.1880, -0.0643, -1.7401,  0.4829], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2696, -2.2065,  2.1189,  0.0508, -0.5376], grad_fn=<SliceBackward0>)
  [Layer 39] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 39] Output sample values after mixer: tensor([-0.2696, -2.2065,  2.1189,  0.0508, -0.5376], grad_fn=<SliceBackward0>)
  [Layer 39] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 39] Residual connection sample values: tensor([  1.0686,  -8.1641, -12.2333,  -3.3265,   3.8230],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 40/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([964.4441], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0322], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0150, -0.1157, -0.1780, -0.0472,  0.0536], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.9584, -1.5013, -1.1254,  0.0422, -0.0457], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.9584, -1.5013, -1.1254,  0.0422, -0.0457], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.0553,  0.3790, -0.5314,  0.7701,  0.5125], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0549, 1.0218, 1.7599, 0.4263, 1.2541], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1661,  0.0321,  0.8465,  0.0553, -0.2266], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0337, -0.0484, -0.1180, -0.1366,  0.0783], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0180, -0.0670, -0.1122, -0.1465,  0.0735], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0091, -0.0324, -0.0530, -0.0679,  0.0381], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0091, -0.0324, -0.0530, -0.0679,  0.0381], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.1930, -0.0013, -0.0483, -0.0394,  0.0229], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.2142, -0.1357, -0.0464, -0.0771,  0.3229], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9810, -1.4352, -0.7966, -1.6062, -1.8465], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1560, 0.0371, 0.0262, 0.0560, 0.1934], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7342, 0.9481, 0.9794, 0.9140, 0.6997], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0091, -0.0324, -0.0530, -0.0679,  0.0381], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.7359e-04, -1.8154e-06, -6.8477e-05, -5.5853e-05,  3.2506e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0029,  0.0035, -0.0008, -0.0013,  0.0017], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0084, -0.0031, -0.0093, -0.0077, -0.0040], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0158, -0.0295, -0.0526, -0.0632,  0.0272], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0158, -0.0295, -0.0526, -0.0632,  0.0272], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0042,  0.0081,  0.0145, -0.0014, -0.0006], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0060], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.8588], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1061,  0.2050,  0.3623, -0.0403, -0.0151], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1061,  0.2050,  0.3623, -0.0403, -0.0151], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0082,  0.4351,  1.7284,  0.0367, -2.3697], grad_fn=<SliceBackward0>)
  [Layer 40] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 40] Output sample values after mixer: tensor([ 0.0082,  0.4351,  1.7284,  0.0367, -2.3697], grad_fn=<SliceBackward0>)
  [Layer 40] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 40] Residual connection sample values: tensor([  1.0769,  -7.7290, -10.5049,  -3.2898,   1.4532],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 41/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1124.9542], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0298], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0143, -0.1036, -0.1427, -0.0437,  0.0194], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2325,  0.2557, -0.7214, -0.5752, -0.6547], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2325,  0.2557, -0.7214, -0.5752, -0.6547], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4608, -0.2644,  0.2541, -0.2605,  0.0523], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.0245, 0.5392, 1.4764, 1.3783, 0.9164], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.7986,  0.1797, -0.2611,  0.4608, -0.0464], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0745, -0.0958,  0.0746, -0.0430,  0.0036], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0879, -0.1098,  0.0767, -0.0498, -0.0120], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0420, -0.0519,  0.0398, -0.0243, -0.0060], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0420, -0.0519,  0.0398, -0.0243, -0.0060], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0599,  0.0306,  0.1368, -0.2526, -0.0165], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.0008, -0.0299, -0.1940, -0.1081,  0.1143], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8259, -1.8637, -1.2829, -1.4543, -4.4079], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1007, 0.0532, 0.0311, 0.1547, 0.0159], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8321, 0.9055, 0.9608, 0.7985, 0.9324], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0420, -0.0519,  0.0398, -0.0243, -0.0060], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.5318e-04, -1.2941e-04, -5.7832e-04,  1.0681e-03,  6.9569e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0002,  0.0004, -0.0007,  0.0040, -0.0034], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 8.6755e-05, -2.1091e-03,  1.5645e-03, -2.0900e-03,  2.8806e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0408, -0.0527,  0.0404, -0.0257, -0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0408, -0.0527,  0.0404, -0.0257, -0.0029], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0042, -0.0076, -0.0095,  0.0053,  0.0007], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0048], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([14.3994], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1046, -0.1891, -0.2336,  0.1373,  0.0131], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1046, -0.1891, -0.2336,  0.1373,  0.0131], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.8300, -4.1590, -0.1447,  1.6130,  0.8097], grad_fn=<SliceBackward0>)
  [Layer 41] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 41] Output sample values after mixer: tensor([-1.8300, -4.1590, -0.1447,  1.6130,  0.8097], grad_fn=<SliceBackward0>)
  [Layer 41] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 41] Residual connection sample values: tensor([ -0.7531, -11.8880, -10.6496,  -1.6767,   2.2630],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 42/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1279.9619], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0280], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0100, -0.1607, -0.1427, -0.0221,  0.0299], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6038,  0.0254, -1.3836, -1.2326,  0.1178], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6038,  0.0254, -1.3836, -1.2326,  0.1178], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.2067,  0.5194, -0.6454,  0.8738, -0.0286], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.3941, 3.0386, 4.1241, 1.6153, 2.2531], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.2624,  0.3323,  1.3848,  0.2067,  0.1228], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0478, -0.0880, -0.0990, -0.0690, -0.0087], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0385, -0.1012, -0.0889, -0.0655, -0.0287], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0196, -0.0480, -0.0425, -0.0317, -0.0141], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0196, -0.0480, -0.0425, -0.0317, -0.0141], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0265, -0.1298, -0.1194,  0.0868,  0.3654], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0101, -0.0175,  0.0218,  0.2791, -0.2608], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0661, -1.4514, -0.7270, -1.9455, -0.6256], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0834, 1.5352, 0.1935, 0.1293, 0.1028], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9149, 0.1077, 0.8687, 0.7776, 0.9377], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0196, -0.0480, -0.0425, -0.0317, -0.0141], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.3301e-05, -2.1230e-04, -1.9516e-04,  1.4191e-04,  5.9747e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0005, -0.0007, -0.0006,  0.0015,  0.0012], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 2.1272e-03, -1.6517e-03, -7.7514e-05, -1.6425e-03,  1.5688e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0218, -0.0499, -0.0427, -0.0334, -0.0126], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0218, -0.0499, -0.0427, -0.0334, -0.0126], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0047, -0.0006,  0.0118,  0.0093, -0.0008], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0050], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([14.0606], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1357, -0.0184,  0.3455,  0.2245, -0.0208], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1357, -0.0184,  0.3455,  0.2245, -0.0208], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.5376, -1.6052, -0.0377,  2.1305, -0.8895], grad_fn=<SliceBackward0>)
  [Layer 42] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 42] Output sample values after mixer: tensor([-0.5376, -1.6052, -0.0377,  2.1305, -0.8895], grad_fn=<SliceBackward0>)
  [Layer 42] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 42] Residual connection sample values: tensor([ -1.2907, -13.4932, -10.6873,   0.4538,   1.3734],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 43/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1396.6965], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0268], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0163, -0.1790, -0.1357,  0.0058,  0.0172], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.0600, -1.2853, -0.0910,  0.0495,  0.2709], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.0600, -1.2853, -0.0910,  0.0495,  0.2709], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.3435, -0.7024,  0.1402,  0.6628, -0.9310], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.2375, 2.4461, 0.8040, 2.8565, 2.2614], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.7815,  0.9247, -0.2893,  0.3435,  0.1337], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0481, -0.0365,  0.0175, -0.1229,  0.1571], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0445, -0.0822,  0.0300, -0.1170,  0.1483], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0228, -0.0394,  0.0152, -0.0551,  0.0796], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0228, -0.0394,  0.0152, -0.0551,  0.0796], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0078, -0.0212,  0.8786, -0.0291,  0.0222], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.1501, -0.1314, -0.2751,  0.0155,  0.1165], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9762, -1.4783, -1.0589, -1.0815, -5.9141], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0373, 0.1598, 0.0181, 0.1138, 0.4238], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9643, 0.7896, 0.9810, 0.8842, 0.0815], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0228, -0.0394,  0.0152, -0.0551,  0.0796], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-6.5829e-06, -1.7949e-05,  7.4558e-04, -2.4699e-05,  1.8868e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0003, -0.0014,  0.0116,  0.0002,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0045, -0.0048, -0.0069, -0.0040,  0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0243, -0.0390,  0.0063, -0.0518,  0.0710], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0243, -0.0390,  0.0063, -0.0518,  0.0710], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0066,  0.0109, -0.0003, -0.0013,  0.0109], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0066], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.2673], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.2139,  0.2691, -0.0063, -0.0337,  0.3224], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.2139,  0.2691, -0.0063, -0.0337,  0.3224], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.9474,  1.4699, -2.2606,  1.8259,  2.0817], grad_fn=<SliceBackward0>)
  [Layer 43] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 43] Output sample values after mixer: tensor([-2.9474,  1.4699, -2.2606,  1.8259,  2.0817], grad_fn=<SliceBackward0>)
  [Layer 43] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 43] Residual connection sample values: tensor([ -4.2380, -12.0233, -12.9479,   2.2797,   3.4551],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 44/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1491.5321], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0259], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0515, -0.1520, -0.1590,  0.0276,  0.0420], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2604, -0.1891,  0.4310,  0.2179, -1.5253], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2604, -0.1891,  0.4310,  0.2179, -1.5253], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([-0.5129, -0.6818,  0.1664, -1.5110, -2.1671], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([1.9108, 0.5674, 0.6831, 1.5005, 0.7061], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.7425, -0.7053, -0.6840, -0.5129,  0.6795], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0965,  0.0826,  0.0200, -0.3476,  0.2518], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1026,  0.1430,  0.0015, -0.3542,  0.1993], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0487,  0.0766,  0.0007, -0.1461,  0.1095], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0487,  0.0766,  0.0007, -0.1461,  0.1095], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2785, -0.1265,  0.0600, -0.0086,  0.0689], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.2610, -0.0140,  0.0224, -0.1232,  0.1848], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7482, -0.6439, -1.1771, -1.3506, -1.0269], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1394, 0.0264, 0.0219, 0.0435, 0.0738], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9009, 0.9831, 0.9745, 0.9429, 0.9270], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0487,  0.0766,  0.0007, -0.1461,  0.1095], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.8901e-03,  8.5840e-04, -4.0742e-04,  5.8234e-05, -4.6735e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0075, -0.0005, -0.0012, -0.0001, -0.0018], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0024,  0.0005, -0.0003, -0.0046,  0.0027], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0481,  0.0724,  0.0004, -0.1418,  0.1056], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0481,  0.0724,  0.0004, -0.1418,  0.1056], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0055, -0.0062,  0.0001, -0.0171, -0.0288], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0051], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.9859], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1423, -0.1292,  0.0030, -0.4175, -0.7632], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1423, -0.1292,  0.0030, -0.4175, -0.7632], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-3.4188,  1.3170, -0.9803, -2.6039,  2.3062], grad_fn=<SliceBackward0>)
  [Layer 44] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 44] Output sample values after mixer: tensor([-3.4188,  1.3170, -0.9803, -2.6039,  2.3062], grad_fn=<SliceBackward0>)
  [Layer 44] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 44] Residual connection sample values: tensor([ -7.6568, -10.7063, -13.9282,  -0.3243,   5.7613],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 45/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1611.1770], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0249], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0915, -0.1315, -0.1671, -0.0038,  0.0685], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6393,  0.1958,  0.6951, -0.4856,  0.5500], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6393,  0.1958,  0.6951, -0.4856,  0.5500], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.9239, -0.0919,  0.5986, -0.3831, -1.0493], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([2.1315, 1.7030, 1.0458, 1.3852, 1.8565], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0393, 0.5001, 1.1710, 0.9239, 0.2427], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1555,  0.0146,  0.0973, -0.0607,  0.2079], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1509,  0.0669,  0.0948, -0.0673,  0.2054], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0811,  0.0345,  0.0497, -0.0325,  0.1132], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0811,  0.0345,  0.0497, -0.0325,  0.1132], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([ 0.2646, -0.1107, -0.0855, -0.0448,  0.0145], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0080,  0.5111,  0.2895, -0.1990,  0.4218], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.2502, -4.1815, -1.0937, -2.6774, -2.3149], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0591, 0.1181, 0.0543, 0.0495, 0.0350], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8754, 0.6102, 0.9423, 0.8760, 0.9222], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0811,  0.0345,  0.0497, -0.0325,  0.1132], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.2698e-03, -5.3119e-04, -4.1044e-04, -2.1508e-04,  6.9488e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0024, -0.0005, -0.0001, -0.0006,  0.0003], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0041,  0.0021, -0.0063, -0.0052,  0.0526], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0952,  0.0408,  0.0494, -0.0416,  0.1796], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0952,  0.0408,  0.0494, -0.0416,  0.1796], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0210,  0.0044,  0.0229,  0.0077,  0.0626], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0083], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.9936], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.5401,  0.0818,  0.5408,  0.1665,  1.4526], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.5401,  0.0818,  0.5408,  0.1665,  1.4526], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.4249, -0.8600,  0.1376,  0.4083, -0.5765], grad_fn=<SliceBackward0>)
  [Layer 45] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 45] Output sample values after mixer: tensor([ 0.4249, -0.8600,  0.1376,  0.4083, -0.5765], grad_fn=<SliceBackward0>)
  [Layer 45] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 45] Residual connection sample values: tensor([ -7.2319, -11.5663, -13.7905,   0.0841,   5.1848],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 46/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1747.7896], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0239], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0999, -0.1666, -0.1941,  0.0012,  0.0712], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.1640, -0.1475, -0.8558,  0.1389, -0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.1640, -0.1475, -0.8558,  0.1389, -0.0029], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.9274, -0.0269, -0.6171, -1.3090, -0.0131], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 2.3833,  1.8036, -0.6665,  0.2084,  1.4803], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.2820, 0.8710, 0.2408, 0.9274, 0.5911], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1534,  0.0064, -0.1039,  0.1933,  0.0039], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1566,  0.0026, -0.1250,  0.1775,  0.0242], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0722,  0.0013, -0.0586,  0.0966,  0.0123], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0722,  0.0013, -0.0586,  0.0966,  0.0123], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.1090, -0.1854, -0.0324,  0.0413,  0.0938], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0189, -0.2534,  0.0657,  0.0360, -0.0534], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8673, -0.9793, -1.6584, -0.9408, -0.4381], grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0323, 0.0340, 0.0033, 0.0127, 0.0382], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9415, 0.9673, 0.9946, 0.9881, 0.9834], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0722,  0.0013, -0.0586,  0.0966,  0.0123], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.5376e-04,  4.3163e-04,  7.5472e-05, -9.6146e-05, -2.1850e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 3.3230e-04,  1.5761e-03, -1.6606e-04, -8.0884e-05, -3.9216e-04],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-5.2378e-04,  9.3221e-05, -7.2453e-04,  2.4152e-05,  1.5596e-03],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0581,  0.0011, -0.0475,  0.0772,  0.0114], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0581,  0.0011, -0.0475,  0.0772,  0.0114], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 1.6104e-02, -7.6654e-05,  1.2125e-02,  5.7314e-03, -1.6693e-05],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0104], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.8097], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.3678, -0.0017,  0.2388,  0.1045, -0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.3678, -0.0017,  0.2388,  0.1045, -0.0004], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-4.6088,  0.5957, -2.7294, -5.0223, -4.0414], grad_fn=<SliceBackward0>)
  [Layer 46] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 46] Output sample values after mixer: tensor([-4.6088,  0.5957, -2.7294, -5.0223, -4.0414], grad_fn=<SliceBackward0>)
  [Layer 46] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 46] Residual connection sample values: tensor([-11.8407, -10.9706, -16.5199,  -4.9382,   1.1434],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 47/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1806.6210], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0235], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1430, -0.1337, -0.1935, -0.0585,  0.0129], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.3060,  0.5008, -1.7025, -1.1664,  0.5644], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.3060,  0.5008, -1.7025, -1.1664,  0.5644], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([ 0.4181, -1.3584, -0.2560, -0.5960, -0.1389], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([ 0.6254, -0.9814,  1.2231,  1.2418, -0.0770], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0890,  0.1626,  0.0061,  0.4181,  2.0191], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0577,  0.0591, -0.0240,  0.0867, -0.0188], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0406,  0.0342, -0.2434,  0.0833, -0.0136], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0199,  0.0174, -0.1070,  0.0434, -0.0068], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0199,  0.0174, -0.1070,  0.0434, -0.0068], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.2244, -0.0188, -0.2753, -0.2764,  0.0349], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([ 0.6582, -0.0791, -0.0245, -0.2767,  0.0866], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -3.5522, -11.2450,  -2.6866,  -3.1935,  -3.1998],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0414, 0.0057, 0.0088, 0.0126, 0.0108], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8632, 0.9377, 0.9768, 0.9606, 0.9661], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0199,  0.0174, -0.1070,  0.0434, -0.0068], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.8456e-04,  1.5450e-05,  2.2643e-04,  2.2731e-04, -2.8673e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0003, -0.0001, -0.0008, -0.0005,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0006, -0.0022, -0.0066, -0.0015,  0.0001], grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0275,  0.0224, -0.1579,  0.0599, -0.0095], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0275,  0.0224, -0.1579,  0.0599, -0.0095], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0077,  0.0070,  0.0414, -0.0166, -0.0034], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0107], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.6558], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1585,  0.0866,  0.8406, -0.3517, -0.0691], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1585,  0.0866,  0.8406, -0.3517, -0.0691], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.4528, -5.9257, -9.7364, -2.4757, -8.1406], grad_fn=<SliceBackward0>)
  [Layer 47] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 47] Output sample values after mixer: tensor([-2.4528, -5.9257, -9.7364, -2.4757, -8.1406], grad_fn=<SliceBackward0>)
  [Layer 47] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 47] Residual connection sample values: tensor([-14.2935, -16.8963, -26.2563,  -7.4139,  -6.9972],
       grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Processing layer 48/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1763.7369], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0238], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1782, -0.1966, -0.2987, -0.0870, -0.0775], grad_fn=<SliceBackward0>)
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6457, -1.7127, -1.4628, -0.7311, -0.1146], grad_fn=<SliceBackward0>)
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6457, -1.7127, -1.4628, -0.7311, -0.1146], grad_fn=<SliceBackward0>)
  [Mamba2] xBC (step) sample values: tensor([0.3866, 1.1819, 0.8151, 0.3042, 0.3604], grad_fn=<SliceBackward0>)
  [Mamba2] dt (step) sample values: tensor([-2.2092,  0.9223,  1.0555,  2.6993,  0.6633], grad_fn=<SliceBackward0>)
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.0177,  0.7338, -0.0176,  0.3866,  1.0138], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0678,  0.1316,  0.1186,  0.0208, -0.0550], grad_fn=<SliceBackward0>)
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0729,  0.3516,  0.0327, -0.0455, -0.0575], grad_fn=<SliceBackward0>)
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0351,  0.2064,  0.0166, -0.0222, -0.0279], grad_fn=<SliceBackward0>)
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0351,  0.2064,  0.0166, -0.0222, -0.0279], grad_fn=<SliceBackward0>)
  [Mamba2] B (step) sample values: tensor([-0.0040,  0.0342,  0.0291,  0.1553,  0.1294], grad_fn=<SliceBackward0>)
  [Mamba2] C (step) sample values: tensor([-0.0349, -0.1491, -0.1462,  0.2301,  0.1041], grad_fn=<SliceBackward0>)
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-54.8118, -78.5143, -47.2508,  -2.3308,  -4.2266],
       grad_fn=<SliceBackward0>)
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0034, 0.0220, 0.0116, 0.0162, 0.0145], grad_fn=<SliceBackward0>)
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8284, 0.1773, 0.5772, 0.9630, 0.9404], grad_fn=<SliceBackward0>)
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0351,  0.2064,  0.0166, -0.0222, -0.0279], grad_fn=<SliceBackward0>)
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 4.7928e-07, -4.1289e-06, -3.5150e-06, -1.8740e-05, -1.5617e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.1403e-05, -3.1380e-05,  2.5518e-05,  2.1037e-05, -6.0946e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-6.9061e-05,  6.7428e-04, -7.3728e-04, -6.7975e-04, -2.3269e-05],
       grad_fn=<SliceBackward0>)
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0280,  0.1650,  0.0125, -0.0184, -0.0223], grad_fn=<SliceBackward0>)
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0280,  0.1650,  0.0125, -0.0184, -0.0223], grad_fn=<SliceBackward0>)
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0062, -0.0432, -0.0034,  0.0044,  0.0012], grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0108], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.6027], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1369, -0.7780, -0.0641,  0.0933,  0.0286], grad_fn=<SliceBackward0>)
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1369, -0.7780, -0.0641,  0.0933,  0.0286], grad_fn=<SliceBackward0>)
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([  3.9167, -27.4263,  -3.7030,  19.8684, -20.1283],
       grad_fn=<SliceBackward0>)
  [Layer 48] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 48] Output sample values after mixer: tensor([  3.9167, -27.4263,  -3.7030,  19.8684, -20.1283],
       grad_fn=<SliceBackward0>)
  [Layer 48] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 48] Residual connection sample values: tensor([-10.3768, -44.3226, -29.9594,  12.4545, -27.1255],
       grad_fn=<SliceBackward0>)
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2147.4438], grad_fn=<SliceBackward0>)
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0216], grad_fn=<SliceBackward0>)
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1248, -0.5894, -0.3668,  0.1555, -0.3230], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Final backbone norm output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Final backbone norm output sample values: tensor([-0.1248, -0.5894, -0.3668,  0.1555, -0.3230], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Logits shape: torch.Size([1, 1, 50288])
[Mamba2LMHeadModel] Logits sample values: tensor([29.6147, -0.7065, 28.8769, 28.0065, 22.1739], grad_fn=<SliceBackward0>)
[Mamba2LMHeadModel] Forward pass input_ids shape: torch.Size([1, 1])
[Mamba2LMHeadModel] input_ids sample values: tensor([323])
[Mamba2LMHeadModel] Embedding output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Embedding sample values: tensor([-0.1489,  0.0808, -0.0527, -0.1936,  0.0148])
[Mamba2LMHeadModel] Processing layer 1/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0202])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([7.0307])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1856,  0.1140, -0.0679, -0.2492,  0.0188])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.0377, -0.6924, -0.4287,  0.0116, -0.5943])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.0377, -0.6924, -0.4287,  0.0116, -0.5943])
  [Mamba2] xBC (step) sample values: tensor([ 0.4046, -0.5026,  0.4483,  0.1909, -1.1877])
  [Mamba2] dt (step) sample values: tensor([ 0.4522, -0.0345,  0.0771, -0.1646,  0.2104])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5232,  0.4551, -0.8021,  0.4046,  0.8165], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1544, -0.0456, -0.1489, -0.0606,  0.0110])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0734,  0.1697,  0.1214, -0.0114, -0.2458])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0380,  0.0921,  0.0644, -0.0057, -0.1079])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0380,  0.0921,  0.0644, -0.0057, -0.1079])
  [Mamba2] B (step) sample values: tensor([ 0.2008,  0.2494, -0.2707, -0.2780,  0.0464])
  [Mamba2] C (step) sample values: tensor([-0.2256,  0.3097, -0.2756, -0.2016,  0.1052])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6180, -2.5226, -3.0473, -3.3078, -3.9090])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0143, 0.0131, 0.0098, 0.0208, 0.0090])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9634, 0.9675, 0.9706, 0.9336, 0.9655])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0380,  0.0921,  0.0644, -0.0057, -0.1079])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.0888e-04,  1.3523e-04, -1.4678e-04, -1.5077e-04,  2.5150e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0025,  0.0016, -0.0037, -0.0038,  0.0008], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0587,  0.0470,  0.0665,  0.0086, -0.0516])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0732,  0.0821,  0.0911,  0.0064, -0.0928])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0732,  0.0821,  0.0911,  0.0064, -0.0928])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.9873e-02, -1.8954e-02, -1.5401e-02,  3.7602e-05,  1.9612e-02])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([8.9771])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3338])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-6.6391e-03, -6.8203e-03, -4.3898e-03,  2.0737e-05,  6.6734e-03])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-6.6391e-03, -6.8203e-03, -4.3898e-03,  2.0737e-05,  6.6734e-03])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0749, -0.0276,  0.0559,  0.0029, -0.0721])
  [Layer 1] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 1] Output sample values after mixer: tensor([ 0.0749, -0.0276,  0.0559,  0.0029, -0.0721])
  [Layer 1] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 1] Residual connection sample values: tensor([-0.0741,  0.0532,  0.0032, -0.1907, -0.0573])
[Mamba2LMHeadModel] Processing layer 2/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0247])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([6.3575])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1700,  0.0964,  0.0068, -0.4226, -0.1240])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4618,  0.0644, -0.9759, -1.6178, -0.1931])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4618,  0.0644, -0.9759, -1.6178, -0.1931])
  [Mamba2] xBC (step) sample values: tensor([-1.5585,  1.6584,  0.8251,  4.1606,  1.5427])
  [Mamba2] dt (step) sample values: tensor([2.0986, 1.4236, 0.6772, 1.2664, 2.2661])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.3517,  0.7518, -0.1531, -1.5585,  0.2878], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0174, -0.3585,  0.0926, -3.0270, -0.0229])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0125, -0.5131,  0.0821, -1.9733, -0.0360])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0062, -0.1921,  0.0427, -0.2408, -0.0177])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0062, -0.1921,  0.0427, -0.2408, -0.0177])
  [Mamba2] B (step) sample values: tensor([ 0.0613,  0.0102, -0.1000, -0.0844,  0.0459])
  [Mamba2] C (step) sample values: tensor([-0.1429, -0.2539,  0.1075, -0.2640, -0.1937])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-19.8515, -18.6852, -13.5640,  -2.4189,  -0.4662])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0486, 0.0258, 0.0411, 0.0257, 0.1342])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.3808, 0.6170, 0.5724, 0.9397, 0.9394])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0062, -0.1921,  0.0427, -0.2408, -0.0177])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.8432e-05, -3.0752e-06,  3.0081e-05,  2.5390e-05, -1.3798e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.1678e-04, -5.0478e-05,  1.2497e-04, -2.4514e-04,  2.9642e-04],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0006, -0.0532, -0.0045, -0.0701,  0.0063])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0036, -0.1859,  0.0250, -0.2364, -0.0059])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0036, -0.1859,  0.0250, -0.2364, -0.0059])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0007, -0.0062, -0.0067,  0.0633,  0.0005])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([98.3792])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1008])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 8.3209e-05, -3.7394e-04, -9.0612e-04,  3.4744e-03,  7.0629e-05])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 8.3209e-05, -3.7394e-04, -9.0612e-04,  3.4744e-03,  7.0629e-05])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([0.0226, 0.0078, 0.0293, 0.0134, 0.0490])
  [Layer 2] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 2] Output sample values after mixer: tensor([0.0226, 0.0078, 0.0293, 0.0134, 0.0490])
  [Layer 2] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 2] Residual connection sample values: tensor([-0.0515,  0.0610,  0.0325, -0.1773, -0.0083])
[Mamba2LMHeadModel] Processing layer 3/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0312])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([5.6580])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1154,  0.1069,  0.0652, -0.3663, -0.0183])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.0628, -0.3026, -1.4437, -0.8098, -2.3237])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.0628, -0.3026, -1.4437, -0.8098, -2.3237])
  [Mamba2] xBC (step) sample values: tensor([ 1.1437,  0.1562, -0.4286,  0.6710, -1.0356])
  [Mamba2] dt (step) sample values: tensor([2.2556, 0.9853, 1.9329, 2.1563, 1.1444])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4298,  0.0516, -1.0487,  1.1437, -0.2453], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2008,  0.0125, -0.2340,  0.1511,  0.0439])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1992, -0.0068, -0.1103,  0.1387,  0.0276])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1095, -0.0034, -0.0521,  0.0742,  0.0140])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1095, -0.0034, -0.0521,  0.0742,  0.0140])
  [Mamba2] B (step) sample values: tensor([ 0.2950, -0.1500, -0.0358, -0.1760, -0.0356])
  [Mamba2] C (step) sample values: tensor([ 0.3513,  0.3623, -0.2495,  0.3774,  0.2317])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6506, -3.9939, -6.7806, -0.9419, -6.0308])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0773, 0.0537, 0.0906, 0.0553, 0.0666])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9510, 0.8070, 0.5412, 0.9492, 0.6693])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1095, -0.0034, -0.0521,  0.0742,  0.0140])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0025, -0.0013, -0.0003, -0.0015, -0.0003])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0011, -0.0013,  0.0031, -0.0011,  0.0006], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0355,  0.2720,  0.2546, -0.0484, -0.0231])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0853,  0.2704,  0.2309, -0.0146, -0.0168])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0853,  0.2704,  0.2309, -0.0146, -0.0168])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0233, -0.0348, -0.0636,  0.0036,  0.0035])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([120.9430])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0909])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0030, -0.0048, -0.0071,  0.0006,  0.0003])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0030, -0.0048, -0.0071,  0.0006,  0.0003])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0910,  0.0020,  0.0912, -0.0224,  0.0381])
  [Layer 3] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 3] Output sample values after mixer: tensor([ 0.0910,  0.0020,  0.0912, -0.0224,  0.0381])
  [Layer 3] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 3] Residual connection sample values: tensor([ 0.0395,  0.0630,  0.1237, -0.1996,  0.0298])
[Mamba2LMHeadModel] Processing layer 4/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0397])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([5.0211])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0926,  0.1118,  0.2561, -0.4275,  0.0702])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3110,  0.3071, -0.5734,  0.2097, -0.9841])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3110,  0.3071, -0.5734,  0.2097, -0.9841])
  [Mamba2] xBC (step) sample values: tensor([ 0.4962,  0.8578, -0.9517, -0.1901, -0.6703])
  [Mamba2] dt (step) sample values: tensor([ 1.7185,  2.7992,  2.6605,  0.4869, -0.5503])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0969, -1.3304,  1.3905,  0.4962,  1.8118], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0711,  0.2535,  0.0747, -0.4269,  0.3203])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0027,  0.2184,  0.0265, -0.4427,  0.6132])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0014,  0.1211,  0.0134, -0.1731,  0.3978])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0014,  0.1211,  0.0134, -0.1731,  0.3978])
  [Mamba2] B (step) sample values: tensor([ 0.4935,  0.1824,  0.6483,  1.0505, -0.0692])
  [Mamba2] C (step) sample values: tensor([ 0.7369, -0.2574, -0.0370, -0.2781, -0.0171])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.7127,  -1.2862,  -1.4870, -27.0280,  -4.0727])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0338, 0.0389, 0.0270, 0.0053, 0.0220])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9438, 0.9512, 0.9606, 0.8673, 0.9142])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0014,  0.1211,  0.0134, -0.1731,  0.3978])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.2511e-05, -8.3211e-06, -2.9575e-05, -4.7920e-05,  3.1558e-06])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0028, -0.0020, -0.0023,  0.0007, -0.0005], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0374, -0.0142,  0.0188, -0.0066,  0.2116])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0381,  0.0540,  0.0263, -0.1041,  0.4355])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0381,  0.0540,  0.0263, -0.1041,  0.4355])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0050,  0.0096, -0.0054, -0.0121, -0.1166])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([70.5335])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1191])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0012,  0.0015, -0.0013, -0.0025, -0.0143])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0012,  0.0015, -0.0013, -0.0025, -0.0143])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0913,  0.0362,  0.0407, -0.0038,  0.0468])
  [Layer 4] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 4] Output sample values after mixer: tensor([-0.0913,  0.0362,  0.0407, -0.0038,  0.0468])
  [Layer 4] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 4] Residual connection sample values: tensor([-0.0518,  0.0992,  0.1644, -0.2034,  0.0766])
[Mamba2LMHeadModel] Processing layer 5/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0539])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([4.3054])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1007,  0.1593,  0.2984, -0.3787,  0.1536])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.1818,  0.3434,  2.2649, -1.3482, -1.9905])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.1818,  0.3434,  2.2649, -1.3482, -1.9905])
  [Mamba2] xBC (step) sample values: tensor([ 1.3625,  1.5349,  0.2525,  0.3147, -3.6176])
  [Mamba2] dt (step) sample values: tensor([1.4654, 1.4435, 0.8728, 1.3449, 0.1423])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.3398, -0.0259, -0.7607,  1.3625,  3.8007], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2165, -0.1569,  0.0366, -0.0684, -0.4373])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1649, -0.1942, -0.0329, -0.0946, -0.4432])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0893, -0.0877, -0.0162, -0.0451, -0.1733])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0893, -0.0877, -0.0162, -0.0451, -0.1733])
  [Mamba2] B (step) sample values: tensor([ 0.1538, -0.1316, -0.1238,  0.2329,  0.0194])
  [Mamba2] C (step) sample values: tensor([ 0.0661,  0.0327, -0.0561,  0.0825,  0.0572])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.5763,  -1.0444,  -0.8388,  -5.6765, -20.4018])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0167, 0.0500, 0.0987, 0.0523, 0.0039])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9740, 0.9491, 0.9205, 0.7432, 0.9230])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0893, -0.0877, -0.0162, -0.0451, -0.1733])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.2988e-04, -1.9664e-04, -1.8495e-04,  3.4805e-04,  2.8996e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0002, -0.0003,  0.0004,  0.0007, -0.0006], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0054, -0.0072, -0.0381, -0.0041, -0.0350])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0426, -0.0543, -0.0468, -0.0283, -0.1282])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0426, -0.0543, -0.0468, -0.0283, -0.1282])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0385, -0.0109, -0.0959,  0.0079,  0.0307])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([21.0389])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2180])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0132, -0.0038, -0.0319,  0.0027,  0.0095])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0132, -0.0038, -0.0319,  0.0027,  0.0095])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0696,  0.0741, -0.0758,  0.0330,  0.0569])
  [Layer 5] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 5] Output sample values after mixer: tensor([ 0.0696,  0.0741, -0.0758,  0.0330,  0.0569])
  [Layer 5] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 5] Residual connection sample values: tensor([ 0.0178,  0.1733,  0.0886, -0.1705,  0.1335])
[Mamba2LMHeadModel] Processing layer 6/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0810])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([3.5143])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0276,  0.2078,  0.1218, -0.2422,  0.2098])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.5757, -1.5610, -1.2645, -1.3053, -0.7610])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.5757, -1.5610, -1.2645, -1.3053, -0.7610])
  [Mamba2] xBC (step) sample values: tensor([ 0.1797,  0.7129,  0.0586,  1.3583, -1.3141])
  [Mamba2] dt (step) sample values: tensor([1.9922, 1.8435, 0.8953, 0.0320, 1.2805])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0595, -0.1148, -0.0794,  0.1797,  0.2324], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0192,  0.0668, -1.9172, -0.3771, -1.1058])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0152, -0.0056, -1.9794, -0.3150, -1.0361])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0077, -0.0028, -0.2403, -0.1329, -0.2714])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0077, -0.0028, -0.2403, -0.1329, -0.2714])
  [Mamba2] B (step) sample values: tensor([ 0.3874, -0.0381, -0.2611,  0.6748,  0.0731])
  [Mamba2] C (step) sample values: tensor([-0.2446, -0.1381, -0.1651, -0.1436,  0.3048])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9866, -8.7747, -3.3046, -2.9913, -3.3435])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0673, 0.0838, 0.1942, 0.0680, 0.1030])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9357, 0.4796, 0.5264, 0.8159, 0.7087])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0077, -0.0028, -0.2403, -0.1329, -0.2714])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.9963e-04, -1.9618e-05, -1.3453e-04,  3.4767e-04,  3.7665e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0154, -0.0005, -0.0095, -0.0006,  0.0034], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.1253, -0.2091, -0.3321, -0.0670, -0.2690])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1270, -0.2097, -0.3841, -0.0957, -0.3278])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1270, -0.2097, -0.3841, -0.0957, -0.3278])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.1658, 0.0568, 0.1070, 0.0267, 0.0794])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([31.0773])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1794])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0571, 0.0092, 0.0164, 0.0053, 0.0112])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0571, 0.0092, 0.0164, 0.0053, 0.0112])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0847,  0.1054, -0.0378,  0.0291,  0.0782])
  [Layer 6] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 6] Output sample values after mixer: tensor([ 0.0847,  0.1054, -0.0378,  0.0291,  0.0782])
  [Layer 6] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 6] Residual connection sample values: tensor([ 0.1025,  0.2787,  0.0508, -0.1413,  0.2117])
[Mamba2LMHeadModel] Processing layer 7/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1629])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([2.4775])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0977,  0.2207,  0.0449, -0.1234,  0.2025])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2346, -0.4950, -1.1343, -0.0285,  0.1176])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2346, -0.4950, -1.1343, -0.0285,  0.1176])
  [Mamba2] xBC (step) sample values: tensor([-2.2221, -0.8198, -0.6864,  0.9373,  0.6041])
  [Mamba2] dt (step) sample values: tensor([1.5391, 1.0056, 3.1187, 2.6709, 1.7323])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.7871, -1.6185, -3.4465, -2.2221,  0.1546], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1272,  0.2796, -0.2409, -0.3552, -0.3512])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1953,  0.3042, -0.2416, -0.3488, -0.3548])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0882,  0.1751, -0.1063, -0.1443, -0.1463])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0882,  0.1751, -0.1063, -0.1443, -0.1463])
  [Mamba2] B (step) sample values: tensor([ 0.0659,  0.0141, -0.2252,  0.0292, -0.0683])
  [Mamba2] C (step) sample values: tensor([ 0.1123, -0.0541,  0.0755, -0.0914,  0.1029])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2959, -1.1836, -0.3113, -0.1314, -1.5015])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0789, 0.0163, 0.0556, 0.1977, 0.0061])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9769, 0.9809, 0.9828, 0.9744, 0.9909])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0882,  0.1751, -0.1063, -0.1443, -0.1463])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.5805e-04, -9.8117e-05,  1.5660e-03, -2.0286e-04,  4.7487e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.2172e-03,  2.9576e-04,  1.0170e-04, -4.0859e-05, -2.5154e-03],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-4.5917e-05,  2.1522e-03,  3.0208e-03, -3.4739e-04, -1.3921e-03])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0002,  0.0026,  0.0028, -0.0007, -0.0017])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0002,  0.0026,  0.0028, -0.0007, -0.0017])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-3.2442e-05, -4.7855e-04, -7.6677e-04,  9.5203e-06, -1.0752e-04])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0853])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.4230])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-1.3805e-04, -1.1342e-03, -4.2881e-03,  3.7553e-05, -5.7899e-04])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-1.3805e-04, -1.1342e-03, -4.2881e-03,  3.7553e-05, -5.7899e-04])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1327,  0.0947,  0.0481,  0.0891,  0.0173])
  [Layer 7] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 7] Output sample values after mixer: tensor([-0.1327,  0.0947,  0.0481,  0.0891,  0.0173])
  [Layer 7] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 7] Residual connection sample values: tensor([-0.0301,  0.3734,  0.0989, -0.0522,  0.2290])
[Mamba2LMHeadModel] Processing layer 8/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2081])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([2.1921])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0341,  0.3303,  0.1042, -0.0547,  0.2576])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.5377, -2.5617, -0.4436, -2.1890, -1.2128])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.5377, -2.5617, -0.4436, -2.1890, -1.2128])
  [Mamba2] xBC (step) sample values: tensor([ 0.5940, -0.3226, -0.8894, -0.1279, -0.0673])
  [Mamba2] dt (step) sample values: tensor([0.7303, 0.4841, 1.1491, 0.6104, 0.1815])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.3661, 0.7769, 0.7703, 0.5940, 1.5789], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([0.1022, 0.2996, 0.1757, 0.1505, 0.0228])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.5651,  0.2685, -0.1389,  0.0989, -0.0333])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.3603,  0.1522, -0.0647,  0.0519, -0.0164])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.3603,  0.1522, -0.0647,  0.0519, -0.0164])
  [Mamba2] B (step) sample values: tensor([ 0.4741, -0.0490, -0.0121, -0.1811,  0.0201])
  [Mamba2] C (step) sample values: tensor([ 0.0677, -0.1965,  0.1133, -0.1918, -0.2230])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.6543, -0.9827, -0.5550, -3.9397, -1.8081])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0208, 0.0866, 0.0347, 0.0439, 0.0116])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9269, 0.9184, 0.9809, 0.8413, 0.9793])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.3603,  0.1522, -0.0647,  0.0519, -0.0164])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.5495e-03, -3.6707e-04, -9.0386e-05, -1.3556e-03,  1.5065e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0043,  0.0022,  0.0013, -0.0032, -0.0006], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0703, -0.0079, -0.0280, -0.0212, -0.0115])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.3736,  0.1202, -0.0824,  0.0225, -0.0253])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.3736,  0.1202, -0.0824,  0.0225, -0.0253])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.1268, -0.0221,  0.0143, -0.0050,  0.0070])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([6.7987])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3835])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0470, -0.0104,  0.0046, -0.0025,  0.0042])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0470, -0.0104,  0.0046, -0.0025,  0.0042])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0073, -0.0642,  0.0331, -0.1569,  0.0210])
  [Layer 8] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 8] Output sample values after mixer: tensor([-0.0073, -0.0642,  0.0331, -0.1569,  0.0210])
  [Layer 8] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 8] Residual connection sample values: tensor([-0.0374,  0.3092,  0.1321, -0.2091,  0.2500])
[Mamba2LMHeadModel] Processing layer 9/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.3146])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.7830])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0317,  0.2140,  0.1029, -0.1564,  0.2091])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.1074, -1.6438, -0.2577, -2.0183, -0.3309])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.1074, -1.6438, -0.2577, -2.0183, -0.3309])
  [Mamba2] xBC (step) sample values: tensor([ 0.2393,  0.3249, -0.1979,  0.3421, -1.1413])
  [Mamba2] dt (step) sample values: tensor([2.5816, 2.2359, 2.9717, 0.5033, 1.6492])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.7056, 1.5141, 2.0374, 0.2393, 0.4120], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.4304,  0.0387, -0.0689,  0.3331, -0.3637])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.4230,  0.0133, -0.1556,  0.2592, -0.3386])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1674,  0.0067, -0.0718,  0.1463, -0.1409])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1674,  0.0067, -0.0718,  0.1463, -0.1409])
  [Mamba2] B (step) sample values: tensor([ 0.4655, -0.1033,  0.3915,  0.4045, -0.0810])
  [Mamba2] C (step) sample values: tensor([-0.2591, -0.1909, -0.2769,  0.2331,  0.2255])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-5.2345, -1.2161, -1.4888, -0.9523, -3.9667])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1260, 0.3053, 0.0899, 0.2027, 0.0792])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5172, 0.6898, 0.8748, 0.8244, 0.7303])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1674,  0.0067, -0.0718,  0.1463, -0.1409])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0098,  0.0022, -0.0083, -0.0085,  0.0017])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-8.5023e-03,  3.8147e-03, -7.3242e-03, -1.0743e-02, -8.7275e-05],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0368,  0.0034, -0.0433,  0.0113, -0.0206])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.2637,  0.0125, -0.1406,  0.2096, -0.2116])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.2637,  0.0125, -0.1406,  0.2096, -0.2116])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0725, -0.0033,  0.0158, -0.0496,  0.0293])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([7.6871])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3607])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0271, -0.0019,  0.0059, -0.0146,  0.0125])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0271, -0.0019,  0.0059, -0.0146,  0.0125])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.3317,  0.0704,  0.0850, -0.0424, -0.1356])
  [Layer 9] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 9] Output sample values after mixer: tensor([-0.3317,  0.0704,  0.0850, -0.0424, -0.1356])
  [Layer 9] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 9] Residual connection sample values: tensor([-0.3691,  0.3795,  0.2170, -0.2515,  0.1144])
[Mamba2LMHeadModel] Processing layer 10/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.5144])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.3943])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.2105,  0.1809,  0.1117, -0.1282,  0.0638])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0580, -0.8002,  0.1005, -0.6537, -1.5379])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0580, -0.8002,  0.1005, -0.6537, -1.5379])
  [Mamba2] xBC (step) sample values: tensor([ 0.3930,  1.5385, -0.3591, -0.0348, -0.6808])
  [Mamba2] dt (step) sample values: tensor([2.0854, 0.9994, 0.2823, 1.9490, 1.5139])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.7617,  0.7226,  2.0156,  0.3930,  2.3397], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0550, -0.3320,  0.0103, -0.0072, -0.1509])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0167, -0.4191, -0.0935, -0.0930, -0.2105])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0084, -0.1663, -0.0446, -0.0444, -0.0942])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0084, -0.1663, -0.0446, -0.0444, -0.0942])
  [Mamba2] B (step) sample values: tensor([ 0.0420, -0.1417,  0.0497, -0.0020,  0.3482])
  [Mamba2] C (step) sample values: tensor([-0.1916, -0.1605, -0.2622, -0.1559, -0.1484])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.7155, -1.4068, -0.3534, -2.0102, -0.4653])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0035, 0.0096, 0.1236, 0.0128, 0.0340])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9870, 0.9865, 0.9573, 0.9747, 0.9843])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0084, -0.1663, -0.0446, -0.0444, -0.0942])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.2446e-06, -4.1984e-06,  1.4734e-06, -5.8168e-08,  1.0316e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.4021e-05,  3.3967e-05,  3.3003e-05,  5.5333e-05,  7.4782e-06],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 1.6165e-04, -1.8487e-03,  6.4405e-06, -4.9624e-04,  5.1498e-04])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0020, -0.0384, -0.0098, -0.0102, -0.0202])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0020, -0.0384, -0.0098, -0.0102, -0.0202])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-5.6536e-05,  9.5200e-03, -5.1643e-04,  2.2907e-03,  5.4888e-03])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0407])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.9567])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0004,  0.0345, -0.0030,  0.0152,  0.0336])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0004,  0.0345, -0.0030,  0.0152,  0.0336])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1805,  0.0761,  0.0692,  0.1999, -0.1935])
  [Layer 10] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 10] Output sample values after mixer: tensor([ 0.1805,  0.0761,  0.0692,  0.1999, -0.1935])
  [Layer 10] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 10] Residual connection sample values: tensor([-0.1886,  0.4557,  0.2862, -0.0516, -0.0791])
[Mamba2LMHeadModel] Processing layer 11/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.5581])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.3386])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1161,  0.2281,  0.1573, -0.0277, -0.0465])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7147,  0.0803,  0.4111, -0.8997,  0.2858])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7147,  0.0803,  0.4111, -0.8997,  0.2858])
  [Mamba2] xBC (step) sample values: tensor([ 0.0569,  1.7948,  0.8933,  2.0631, -0.1331])
  [Mamba2] dt (step) sample values: tensor([1.6317, 1.9966, 1.5930, 2.8815, 2.5662])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5254, -0.5231,  0.8702,  0.0569,  1.1324], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0695, -0.3496, -0.2598, -0.2201, -0.0144])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0837, -0.7073, -0.1632, -0.2080,  0.0088])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0401, -0.2335, -0.0750, -0.0932,  0.0044])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0401, -0.2335, -0.0750, -0.0932,  0.0044])
  [Mamba2] B (step) sample values: tensor([-0.2599, -0.2759, -0.2775, -0.0088, -0.0150])
  [Mamba2] C (step) sample values: tensor([-0.0319, -0.1320, -0.2575, -0.1720, -0.0249])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.3116, -0.0902, -1.5786, -0.2096, -0.6694])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0869, 0.2113, 0.4864, 0.5762, 0.0930])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9733, 0.9811, 0.4640, 0.8862, 0.9396])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0401, -0.2335, -0.0750, -0.0932,  0.0044])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([9.0575e-04, 9.6137e-04, 9.6703e-04, 3.0657e-05, 5.2279e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0459, -0.0428,  0.0535,  0.0112, -0.0470], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.1190, -0.2501,  0.1561, -0.0783,  0.0213])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1337, -0.3358,  0.1286, -0.1125,  0.0229])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1337, -0.3358,  0.1286, -0.1125,  0.0229])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0314, -0.0140,  0.0318,  0.0293,  0.0037])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([5.5479])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4246])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0164, -0.0072,  0.0115,  0.0346,  0.0014])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0164, -0.0072,  0.0115,  0.0346,  0.0014])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.4190,  0.2301,  0.1724, -0.0100,  0.3080])
  [Layer 11] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 11] Output sample values after mixer: tensor([ 0.4190,  0.2301,  0.1724, -0.0100,  0.3080])
  [Layer 11] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 11] Residual connection sample values: tensor([ 0.2304,  0.6858,  0.4586, -0.0616,  0.2290])
[Mamba2LMHeadModel] Processing layer 12/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.7770])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.1345])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1080,  0.2667,  0.1877, -0.0250,  0.1028])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7680, -1.1509, -0.7787, -0.9382, -0.8002])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7680, -1.1509, -0.7787, -0.9382, -0.8002])
  [Mamba2] xBC (step) sample values: tensor([-0.8605,  0.0452, -0.5800, -0.0887,  0.6866])
  [Mamba2] dt (step) sample values: tensor([2.3719, 2.2659, 2.0393, 1.0341, 1.5798])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6304, -0.6395,  0.3947, -0.8605, -0.1774], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1346, -0.0211, -0.2066,  0.0437,  0.1304])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1776, -0.0082, -0.2415,  0.0140,  0.1431])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0809, -0.0041, -0.1062,  0.0071,  0.0766])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0809, -0.0041, -0.1062,  0.0071,  0.0766])
  [Mamba2] B (step) sample values: tensor([ 0.0060, -0.0980,  0.5065, -0.1086,  0.0729])
  [Mamba2] C (step) sample values: tensor([ 0.2869, -0.1402, -0.0731, -0.1672, -0.1994])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2412, -0.7694, -1.9975, -1.2368, -1.0181])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.3809, 0.5146, 0.1907, 0.2419, 0.3309])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6233, 0.6731, 0.6833, 0.7414, 0.7140])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0809, -0.0041, -0.1062,  0.0071,  0.0766])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0002,  0.0030, -0.0156,  0.0033, -0.0022])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0017,  0.0079, -0.0221,  0.0059, -0.0023], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0198, -0.0150, -0.0136, -0.0074, -0.0106])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0780, -0.0179, -0.0900, -0.0023,  0.0446])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0780, -0.0179, -0.0900, -0.0023,  0.0446])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0190,  0.0050,  0.0221,  0.0006, -0.0111])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.5990])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.2921])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0440,  0.0076,  0.0255,  0.0008, -0.0210])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0440,  0.0076,  0.0255,  0.0008, -0.0210])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.4679, -0.1818, -0.1921, -0.5859,  0.2326])
  [Layer 12] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 12] Output sample values after mixer: tensor([-0.4679, -0.1818, -0.1921, -0.5859,  0.2326])
  [Layer 12] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 12] Residual connection sample values: tensor([-0.2375,  0.5040,  0.2665, -0.6475,  0.4615])
[Mamba2LMHeadModel] Processing layer 13/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.3137])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8725])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0838,  0.1539,  0.0868, -0.1985,  0.1654])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-3.3700,  0.3976,  0.2611,  1.9616, -0.3158])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-3.3700,  0.3976,  0.2611,  1.9616, -0.3158])
  [Mamba2] xBC (step) sample values: tensor([ 0.2348,  0.1387, -0.0849,  0.8082,  0.2366])
  [Mamba2] dt (step) sample values: tensor([2.1382, 1.9398, 1.8942, 1.5393, 1.7982])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.7110, -0.6495, -0.5729,  0.2348,  0.1081], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1551, -0.2015,  0.2695, -0.2251, -0.1530])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.4197, -0.3114,  0.2491, -0.2259, -0.1770])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1665, -0.1317,  0.1400, -0.1003, -0.0807])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1665, -0.1317,  0.1400, -0.1003, -0.0807])
  [Mamba2] B (step) sample values: tensor([ 0.0850, -0.2063, -0.0655,  0.5346,  0.2384])
  [Mamba2] C (step) sample values: tensor([ 0.2416,  0.0160, -0.0994,  0.4432,  0.2128])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3103, -1.7871, -0.8606, -1.8811, -0.5252])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0787, 0.0660, 0.2309, 0.2011, 0.1018])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9020, 0.8888, 0.8198, 0.6850, 0.9479])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1665, -0.1317,  0.1400, -0.1003, -0.0807])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0011,  0.0027,  0.0009, -0.0070, -0.0031])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0014, -0.0041,  0.0021, -0.0441, -0.0021], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0968,  0.0163,  0.0536, -0.0276,  0.0131])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1040,  0.0106,  0.0596, -0.0319,  0.0096])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1040,  0.0106,  0.0596, -0.0319,  0.0096])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0117,  0.0025,  0.0088, -0.0549, -0.0013])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2547])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.9816])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0313,  0.0022,  0.0320, -0.2272, -0.0020])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0313,  0.0022,  0.0320, -0.2272, -0.0020])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.7219e-01, -8.5323e-02,  1.6753e-01, -8.0422e-05,  2.1903e-01])
  [Layer 13] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 13] Output sample values after mixer: tensor([-1.7219e-01, -8.5323e-02,  1.6753e-01, -8.0422e-05,  2.1903e-01])
  [Layer 13] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 13] Residual connection sample values: tensor([-0.4097,  0.4187,  0.4340, -0.6476,  0.6806])
[Mamba2LMHeadModel] Processing layer 14/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.8360])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7380])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1056,  0.0948,  0.1035, -0.1453,  0.1712])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0236,  0.0675, -0.3081,  0.1199, -0.1044])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0236,  0.0675, -0.3081,  0.1199, -0.1044])
  [Mamba2] xBC (step) sample values: tensor([-1.2849,  0.3522,  0.2567, -0.8129,  0.3961])
  [Mamba2] dt (step) sample values: tensor([0.9099, 1.2543, 1.2172, 1.2914, 2.3401])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.5263, -1.2765, -1.3516, -1.2849,  0.6927], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3693, -0.1382, -0.0361, -0.2503, -0.0541])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.4089, -0.1795, -0.0970, -0.3131, -0.0176])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1632, -0.0817, -0.0461, -0.1322, -0.0087])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1632, -0.0817, -0.0461, -0.1322, -0.0087])
  [Mamba2] B (step) sample values: tensor([-0.0791, -0.0313,  0.0707, -0.1104, -0.0095])
  [Mamba2] C (step) sample values: tensor([-1.8362e-01, -1.1549e-01,  1.2299e-04, -1.9490e-01, -7.2257e-02])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.3184, -0.7621, -2.6670, -5.1836, -2.8487])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0955, 0.0416, 0.2516, 0.0589, 0.1356])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6622, 0.9688, 0.5112, 0.7369, 0.6796])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1632, -0.0817, -0.0461, -0.1322, -0.0087])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0012,  0.0005, -0.0011,  0.0017,  0.0001])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0029,  0.0007, -0.0025,  0.0031,  0.0007], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0186, -0.0069, -0.0074, -0.0127, -0.0014])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0846, -0.0399, -0.0260, -0.0662, -0.0049])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0846, -0.0399, -0.0260, -0.0662, -0.0049])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0010, -0.0014,  0.0034, -0.0042,  0.0002])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0392])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.0529])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0054, -0.0045,  0.0158, -0.0275,  0.0018])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0054, -0.0045,  0.0158, -0.0275,  0.0018])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2634, -0.5021,  0.0461,  0.4924, -0.0168])
  [Layer 14] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 14] Output sample values after mixer: tensor([ 0.2634, -0.5021,  0.0461,  0.4924, -0.0168])
  [Layer 14] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 14] Residual connection sample values: tensor([-0.1462, -0.0834,  0.4802, -0.1552,  0.6638])
[Mamba2LMHeadModel] Processing layer 15/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.7777])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6000])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0307, -0.0149,  0.0928, -0.0281,  0.1337])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.4150,  0.8311, -0.2714, -1.0482, -0.7237])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.4150,  0.8311, -0.2714, -1.0482, -0.7237])
  [Mamba2] xBC (step) sample values: tensor([-0.0449, -0.1526,  0.2569,  0.6079,  0.1714])
  [Mamba2] dt (step) sample values: tensor([0.5205, 0.9815, 1.7340, 0.0152, 0.9312])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6432,  0.0531, -0.1941, -0.0449, -1.2350], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0385,  0.0395, -0.0792, -0.0615, -0.0553])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0759,  0.0327, -0.1040, -0.0792, -0.0806])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0365,  0.0166, -0.0493, -0.0380, -0.0387])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0365,  0.0166, -0.0493, -0.0380, -0.0387])
  [Mamba2] B (step) sample values: tensor([-0.0734, -0.0389,  0.0200, -0.0303,  0.0147])
  [Mamba2] C (step) sample values: tensor([-0.0286,  0.0135,  0.0171,  0.0150, -0.0314])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2782, -0.6808, -2.7209, -0.1126, -3.8484])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0033, 0.0417, 0.0828, 0.0058, 0.0577])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9991, 0.9720, 0.7983, 0.9993, 0.8007])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0365,  0.0166, -0.0493, -0.0380, -0.0387])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 8.7206e-06,  4.6281e-06, -2.3774e-06,  3.6027e-06, -1.7535e-06])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.2011e-05,  1.3436e-05, -2.1044e-05, -1.3054e-05, -9.6515e-06],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.7297e-05,  4.3816e-05, -2.1749e-05, -3.7868e-05, -3.9727e-05])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0063,  0.0029, -0.0084, -0.0065, -0.0066])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0063,  0.0029, -0.0084, -0.0065, -0.0066])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0071,  0.0017,  0.0010,  0.0018,  0.0016])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0034])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([17.2118])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1268,  0.0387,  0.0178,  0.0370,  0.0240])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1268,  0.0387,  0.0178,  0.0370,  0.0240])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2601, -0.3016, -0.4336, -0.1643,  0.3330])
  [Layer 15] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 15] Output sample values after mixer: tensor([-0.2601, -0.3016, -0.4336, -0.1643,  0.3330])
  [Layer 15] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 15] Residual connection sample values: tensor([-0.4063, -0.3850,  0.0466, -0.3194,  0.9968])
[Mamba2LMHeadModel] Processing layer 16/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3.3298])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5480])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0869, -0.0688,  0.0091, -0.0573,  0.2047])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4905, -0.3808,  0.2876,  0.7670, -0.6135])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4905, -0.3808,  0.2876,  0.7670, -0.6135])
  [Mamba2] xBC (step) sample values: tensor([ 0.2722, -0.0836,  0.4650,  0.4789, -1.3027])
  [Mamba2] dt (step) sample values: tensor([1.0368, 1.5826, 2.3847, 0.7781, 2.7999])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.6345,  0.6475,  0.7791,  0.2722, -0.5997], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1231, -0.0944,  0.1233,  0.3247, -0.3326])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0870, -0.1355,  0.1101,  0.2323, -0.3747])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0454, -0.0632,  0.0581,  0.1296, -0.1526])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0454, -0.0632,  0.0581,  0.1296, -0.1526])
  [Mamba2] B (step) sample values: tensor([-0.1401, -0.0502,  0.0686, -0.0412, -0.2431])
  [Mamba2] C (step) sample values: tensor([ 0.2703, -0.0411, -0.0726,  0.8638, -0.2436])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6906, -0.1348, -1.3129, -3.7740, -1.2635])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1534, 0.2940, 0.4335, 0.1535, 0.3280])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6619, 0.9611, 0.5660, 0.5602, 0.6607])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0454, -0.0632,  0.0581,  0.1296, -0.1526])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0010, -0.0003,  0.0005, -0.0003, -0.0017])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0067, -0.0014,  0.0011, -0.0006,  0.0035], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0646, -0.0396,  0.0053,  0.0727, -0.0491])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0938, -0.0803,  0.0427,  0.1561, -0.1474])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0938, -0.0803,  0.0427,  0.1561, -0.1474])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0175,  0.0124,  0.0070,  0.0818,  0.0318])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.1835])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([2.3345])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0524,  0.0292,  0.0198,  0.2056,  0.0820])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0524,  0.0292,  0.0198,  0.2056,  0.0820])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.0680,  0.5913,  0.7256,  0.6513, -0.3074])
  [Layer 16] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 16] Output sample values after mixer: tensor([ 1.0680,  0.5913,  0.7256,  0.6513, -0.3074])
  [Layer 16] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 16] Residual connection sample values: tensor([0.6617, 0.2063, 0.7722, 0.3318, 0.6894])
[Mamba2LMHeadModel] Processing layer 17/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([5.2806])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4352])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.1114, 0.0292, 0.1158, 0.0460, 0.1116])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1601, -0.4743, -0.3273,  0.2958, -0.0304])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1601, -0.4743, -0.3273,  0.2958, -0.0304])
  [Mamba2] xBC (step) sample values: tensor([-1.1873, -0.6483,  0.6732, -0.6913,  0.0152])
  [Mamba2] dt (step) sample values: tensor([0.6571, 0.5148, 0.9862, 2.0051, 1.1320])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.2433, -0.4684, -0.3540, -1.1873, -0.1995], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2337,  0.1273, -0.1569, -0.0102, -0.0043])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2655,  0.1011, -0.1713, -0.0156,  0.0083])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1152,  0.0531, -0.0783, -0.0077,  0.0042])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1152,  0.0531, -0.0783, -0.0077,  0.0042])
  [Mamba2] B (step) sample values: tensor([-0.0961,  0.0661,  0.0657,  0.0188,  0.1096])
  [Mamba2] C (step) sample values: tensor([-0.1811, -0.1576, -0.0096, -0.0187, -0.0124])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.1571, -11.4668, -14.2150,  -0.1286, -14.2428])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0010, 0.0171, 0.0569, 0.1522, 0.0218])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9989, 0.8218, 0.4454, 0.9806, 0.7336])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1152,  0.0531, -0.0783, -0.0077,  0.0042])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.0963e-05, -7.5439e-06, -7.4949e-06, -2.1458e-06, -1.2506e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.4685e-05,  7.6088e-05,  1.0007e-04, -2.6380e-04, -2.1073e-06],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.2112e-04,  1.5487e-05, -2.1734e-04,  7.7629e-06,  1.0987e-04])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0745,  0.0343, -0.0507, -0.0050,  0.0028])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0745,  0.0343, -0.0507, -0.0050,  0.0028])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-6.4414e-03, -6.2360e-03,  6.9568e-03, -8.4609e-04, -4.1995e-05])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0337])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.4451])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0545, -0.0644,  0.0545, -0.0081, -0.0004])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0545, -0.0644,  0.0545, -0.0081, -0.0004])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([0.3699, 0.5613, 0.1223, 0.7707, 0.0167])
  [Layer 17] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 17] Output sample values after mixer: tensor([0.3699, 0.5613, 0.1223, 0.7707, 0.0167])
  [Layer 17] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 17] Residual connection sample values: tensor([1.0315, 0.7676, 0.8945, 1.1026, 0.7060])
[Mamba2LMHeadModel] Processing layer 18/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([7.1237])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3747])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.1338, 0.0842, 0.1038, 0.1200, 0.0880])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.5637, -1.1075,  0.0414, -0.3215, -0.9016])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.5637, -1.1075,  0.0414, -0.3215, -0.9016])
  [Mamba2] xBC (step) sample values: tensor([-0.4058,  0.1566,  0.4410, -0.0681, -0.7828])
  [Mamba2] dt (step) sample values: tensor([0.7247, 1.3456, 0.0454, 1.5866, 1.8619])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.9927, -0.0258, -0.9200, -0.4058,  0.2088], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2953, -0.0295,  0.0361, -0.1901, -0.2741])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3054, -0.2949,  0.3159, -0.2040, -0.3162])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1295, -0.1259,  0.1827, -0.0916, -0.1333])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1295, -0.1259,  0.1827, -0.0916, -0.1333])
  [Mamba2] B (step) sample values: tensor([-0.0214, -0.0165, -0.1306,  0.1849,  0.0379])
  [Mamba2] C (step) sample values: tensor([-0.2328,  0.0888,  0.0440, -0.0324,  0.0791])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3011, -1.4686, -1.2083, -1.2129, -2.5875])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1883, 0.1951, 0.0767, 0.3193, 0.2482])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7827, 0.7509, 0.9115, 0.6789, 0.5262])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1295, -0.1259,  0.1827, -0.0916, -0.1333])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0005,  0.0004,  0.0032, -0.0045, -0.0009])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0051,  0.0045,  0.0065, -0.0048, -0.0001], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0006, -0.1285,  0.1445, -0.0789,  0.0062])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0245, -0.1528,  0.1798, -0.0966, -0.0196])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0245, -0.1528,  0.1798, -0.0966, -0.0196])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0088,  0.0420,  0.0038,  0.0131,  0.0051])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0287])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.8977])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0678,  0.1330,  0.0218,  0.0967,  0.0594])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0678,  0.1330,  0.0218,  0.0967,  0.0594])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1402, -0.8748, -0.1275, -1.1452,  0.6011])
  [Layer 18] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 18] Output sample values after mixer: tensor([ 0.1402, -0.8748, -0.1275, -1.1452,  0.6011])
  [Layer 18] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 18] Residual connection sample values: tensor([ 1.1718, -0.1072,  0.7670, -0.0426,  1.3072])
[Mamba2LMHeadModel] Processing layer 19/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([11.3346])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2970])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1187, -0.0094,  0.0725, -0.0037,  0.1321])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2001,  0.3981, -0.1605, -0.8683, -1.3554])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2001,  0.3981, -0.1605, -0.8683, -1.3554])
  [Mamba2] xBC (step) sample values: tensor([ 0.1269,  0.0056, -0.3380, -0.1788, -0.1177])
  [Mamba2] dt (step) sample values: tensor([0.8227, 1.6174, 1.5511, 1.2919, 0.9091])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6589, -0.0258, -1.3337,  0.1269, -0.6664], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2145,  0.0405, -0.0885,  0.0388,  0.0358])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2501,  0.0161, -0.0935, -0.0038,  0.0029])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1095,  0.0081, -0.0446, -0.0019,  0.0014])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1095,  0.0081, -0.0446, -0.0019,  0.0014])
  [Mamba2] B (step) sample values: tensor([ 0.0634, -0.2736, -0.0888,  0.0868,  0.1123])
  [Mamba2] C (step) sample values: tensor([-0.2357, -0.0120, -0.1591, -0.0948, -0.0228])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9436, -1.8179, -2.0862, -1.0006, -0.9650])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1199, 0.1373, 0.1046, 0.1751, 0.1702])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7920, 0.7791, 0.8039, 0.8393, 0.8486])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1095,  0.0081, -0.0446, -0.0019,  0.0014])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0008,  0.0036,  0.0012, -0.0011, -0.0015])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0015, -0.0111, -0.0002, -0.0027, -0.0009], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0149, -0.0073, -0.0027, -0.0015,  0.0003])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0272, -0.0064, -0.0077, -0.0017,  0.0005])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0272, -0.0064, -0.0077, -0.0017,  0.0005])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0024, -0.0015,  0.0006,  0.0004, -0.0001])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0016])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([25.2179])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0746, -0.0490,  0.0235,  0.0132, -0.0055])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0746, -0.0490,  0.0235,  0.0132, -0.0055])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.4858,  0.6675, -1.1257, -0.4107,  0.8675])
  [Layer 19] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 19] Output sample values after mixer: tensor([ 1.4858,  0.6675, -1.1257, -0.4107,  0.8675])
  [Layer 19] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 19] Residual connection sample values: tensor([ 2.6575,  0.5603, -0.3588, -0.4533,  2.1747])
[Mamba2LMHeadModel] Processing layer 20/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([13.9554])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2677])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2749,  0.0497, -0.0341, -0.0398,  0.2182])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1652, -1.1993, -0.3780,  0.2388, -0.0522])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1652, -1.1993, -0.3780,  0.2388, -0.0522])
  [Mamba2] xBC (step) sample values: tensor([ 0.5232,  0.1707, -0.1877,  0.4434,  0.1503])
  [Mamba2] dt (step) sample values: tensor([1.8365, 1.8305, 2.1853, 1.4469, 1.6536])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.4845,  0.0375,  0.6735,  0.5232,  1.1289], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1346, -0.1171, -0.0428, -0.3838,  0.0893])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1731, -0.1086,  0.0238, -0.4026,  0.0618])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0791, -0.0514,  0.0120, -0.1613,  0.0319])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0791, -0.0514,  0.0120, -0.1613,  0.0319])
  [Mamba2] B (step) sample values: tensor([-0.2427,  0.4650,  0.0447,  0.1511,  0.1810])
  [Mamba2] C (step) sample values: tensor([ 0.1434, -0.1538,  0.1402, -0.0232,  0.6291])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.6216, -5.0389, -1.2056, -1.6435, -1.3345])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1707, 0.0688, 0.0752, 0.1826, 0.1487])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7582, 0.7071, 0.9133, 0.7408, 0.8200])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0791, -0.0514,  0.0120, -0.1613,  0.0319])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0033, -0.0063, -0.0006, -0.0020, -0.0024])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0017, -0.0055,  0.0015,  0.0004,  0.0006], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0010,  0.0154, -0.0064, -0.0417,  0.0304])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0017,  0.0150, -0.0063, -0.0430,  0.0306])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0017,  0.0150, -0.0063, -0.0430,  0.0306])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0001, -0.0042,  0.0010, -0.0057, -0.0008])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0073])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([11.6861])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0020, -0.0693,  0.0216, -0.0971, -0.0118])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0020, -0.0693,  0.0216, -0.0971, -0.0118])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2744, -0.5047,  0.1710, -1.6336,  0.0801])
  [Layer 20] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 20] Output sample values after mixer: tensor([ 0.2744, -0.5047,  0.1710, -1.6336,  0.0801])
  [Layer 20] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 20] Residual connection sample values: tensor([ 2.9320,  0.0556, -0.1878, -2.0869,  2.2548])
[Mamba2LMHeadModel] Processing layer 21/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([21.5548])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2154])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1852,  0.0032, -0.0102, -0.1094,  0.1332])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2753, -0.5542,  0.3808, -0.2137,  0.0898])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2753, -0.5542,  0.3808, -0.2137,  0.0898])
  [Mamba2] xBC (step) sample values: tensor([-0.1865, -0.0336, -0.1907,  0.4343, -0.5583])
  [Mamba2] dt (step) sample values: tensor([0.8771, 3.1819, 0.5587, 1.3209, 1.3802])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0838,  0.0051,  1.1839, -0.1865,  1.4521], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0524,  0.0347,  0.0476, -0.0651,  0.0815])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0212,  0.0046,  0.0624, -0.0702,  0.1094])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0107,  0.0023,  0.0322, -0.0339,  0.0577])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0107,  0.0023,  0.0322, -0.0339,  0.0577])
  [Mamba2] B (step) sample values: tensor([-0.0326, -0.0177,  0.0444, -0.0252, -0.1226])
  [Mamba2] C (step) sample values: tensor([-0.0090, -0.0214,  0.0093, -0.0588, -0.0880])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.2092, -0.0434, -3.8147, -6.6624, -0.0228])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1348, 0.0975, 0.0520, 0.0877, 0.0308])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6487, 0.9958, 0.8199, 0.5576, 0.9993])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0107,  0.0023,  0.0322, -0.0339,  0.0577])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.7028e-05, -2.5522e-05,  6.4018e-05, -3.6328e-05, -1.7674e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.2107e-05, -9.1739e-06, -1.7167e-04, -4.7253e-04, -5.7404e-04],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 6.7554e-05,  6.1444e-04,  1.6642e-03, -8.6919e-04,  2.2033e-03])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0019,  0.0010,  0.0073, -0.0068,  0.0123])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0019,  0.0010,  0.0073, -0.0068,  0.0123])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0002, -0.0002,  0.0017,  0.0007,  0.0006])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0001])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([82.5615])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0242, -0.0199,  0.2113,  0.0700,  0.0559])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0242, -0.0199,  0.2113,  0.0700,  0.0559])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1452,  1.1270, -0.1125, -0.2830,  0.5370])
  [Layer 21] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 21] Output sample values after mixer: tensor([ 0.1452,  1.1270, -0.1125, -0.2830,  0.5370])
  [Layer 21] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 21] Residual connection sample values: tensor([ 3.0771,  1.1826, -0.3002, -2.3699,  2.7918])
[Mamba2LMHeadModel] Processing layer 22/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([28.1363])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1885])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2675,  0.0866, -0.0233, -0.1695,  0.2276])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1253, -0.6857, -0.0665,  0.2666, -1.4796])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1253, -0.6857, -0.0665,  0.2666, -1.4796])
  [Mamba2] xBC (step) sample values: tensor([ 0.2034,  0.3348, -0.7408, -0.0009, -0.6836])
  [Mamba2] dt (step) sample values: tensor([ 2.5202,  1.0950, -0.0403,  0.6158,  2.6907])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0427, -0.6780, -0.1725,  0.2034, -0.3865], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0825,  0.0523, -0.1070,  0.0145, -0.3300])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1302, -0.0264,  0.2124, -0.0265, -0.3957])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0609, -0.0130,  0.1174, -0.0131, -0.1592])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0609, -0.0130,  0.1174, -0.0131, -0.1592])
  [Mamba2] B (step) sample values: tensor([ 0.0783, -0.0780, -0.1117, -0.1782, -0.0834])
  [Mamba2] C (step) sample values: tensor([ 0.0257,  0.0209, -0.0721, -0.0134, -0.1858])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.1489, -3.5006, -2.8321, -5.5396, -1.7186])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0164, 0.1166, 0.0599, 0.0835, 0.0414])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9341, 0.6650, 0.8439, 0.6297, 0.9314])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0609, -0.0130,  0.1174, -0.0131, -0.1592])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-7.8228e-05,  7.7928e-05,  1.1170e-04,  1.7812e-04,  8.3324e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0002,  0.0003,  0.0001,  0.0004,  0.0003], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.8416e-03, -4.1438e-05,  5.2390e-03,  5.2846e-04, -3.0656e-03])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0176, -0.0032,  0.0337, -0.0026, -0.0416])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0176, -0.0032,  0.0337, -0.0026, -0.0416])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0010,  0.0007, -0.0011, -0.0004,  0.0114])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0018])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([23.3288])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0080,  0.0161, -0.0135, -0.0122,  0.2302])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0080,  0.0161, -0.0135, -0.0122,  0.2302])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.2354, -0.5082, -0.9754, -0.5170,  0.7573])
  [Layer 22] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 22] Output sample values after mixer: tensor([ 1.2354, -0.5082, -0.9754, -0.5170,  0.7573])
  [Layer 22] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 22] Residual connection sample values: tensor([ 4.3125,  0.6744, -1.2757, -2.8869,  3.5490])
[Mamba2LMHeadModel] Processing layer 23/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([36.1702])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1663])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2320,  0.0312, -0.0628, -0.1343,  0.1850])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0102,  0.2433, -0.5755,  0.1117, -0.2676])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0102,  0.2433, -0.5755,  0.1117, -0.2676])
  [Mamba2] xBC (step) sample values: tensor([-0.1570, -0.5303, -0.1675, -0.4875, -0.3197])
  [Mamba2] dt (step) sample values: tensor([1.4527, 0.9041, 1.9397, 1.3425, 1.7491])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.0936,  0.5952,  1.0781, -0.1570,  1.0027], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1446,  0.2624, -0.0651, -0.1011,  0.1209])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1670,  0.2292, -0.0765, -0.1033,  0.0715])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0765,  0.1277, -0.0368, -0.0490,  0.0370])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0765,  0.1277, -0.0368, -0.0490,  0.0370])
  [Mamba2] B (step) sample values: tensor([ 0.1236,  0.1351,  0.1819, -0.0573, -0.1289])
  [Mamba2] C (step) sample values: tensor([-0.0603,  0.0009,  0.2218, -0.0660, -0.0209])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0811, -3.7998, -0.0826, -0.4878, -1.4532])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0497, 0.1032, 0.0701, 0.0056, 0.0059])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9960, 0.6756, 0.9942, 0.9973, 0.9914])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0765,  0.1277, -0.0368, -0.0490,  0.0370])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0005, -0.0005, -0.0007,  0.0002,  0.0005])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0008,  0.0007, -0.0015,  0.0003, -0.0004], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.3506e-03, -6.1738e-05,  1.0101e-03, -1.5928e-03, -5.7284e-04])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0003, -0.0028,  0.0018, -0.0005, -0.0014])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0003, -0.0028,  0.0018, -0.0005, -0.0014])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.4352e-06, -3.7995e-04, -3.7175e-04, -3.2320e-05,  1.5811e-04])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0003])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([53.1344])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0003, -0.0114, -0.0196, -0.0027,  0.0392])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0003, -0.0114, -0.0196, -0.0027,  0.0392])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.6394, -0.6852,  0.2588, -1.6338,  1.7692])
  [Layer 23] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 23] Output sample values after mixer: tensor([ 1.6394, -0.6852,  0.2588, -1.6338,  1.7692])
  [Layer 23] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 23] Residual connection sample values: tensor([ 5.9519, -0.0108, -1.0169, -4.5208,  5.3182])
[Mamba2LMHeadModel] Processing layer 24/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([48.1411])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1441])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2283, -0.0004, -0.0360, -0.1542,  0.1978])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3521, -0.4237,  0.8179, -0.1840, -0.1801])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3521, -0.4237,  0.8179, -0.1840, -0.1801])
  [Mamba2] xBC (step) sample values: tensor([-0.0107, -0.4500, -0.0547,  0.2132, -0.1188])
  [Mamba2] dt (step) sample values: tensor([0.0277, 0.6836, 1.2465, 1.8249, 1.0091])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0558,  0.1292, -0.4203, -0.0107,  0.0831], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0043,  0.0660, -0.0166,  0.0435, -0.0701])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0076,  0.0660, -0.0206,  0.0419, -0.0749])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0038,  0.0341, -0.0102,  0.0214, -0.0360])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0038,  0.0341, -0.0102,  0.0214, -0.0360])
  [Mamba2] B (step) sample values: tensor([-0.0495,  0.0228,  0.0596, -0.0372, -0.0177])
  [Mamba2] C (step) sample values: tensor([-0.1051, -0.2165, -0.2680, -0.2239,  0.3246])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0742, -3.4497, -3.2885, -0.1609, -2.6945])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0057, 0.0568, 0.1507, 0.0281, 0.0582])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9996, 0.8221, 0.6092, 0.9955, 0.8549])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0038,  0.0341, -0.0102,  0.0214, -0.0360])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.0636e-06, -4.8999e-07, -1.2791e-06,  7.9789e-07,  3.7908e-07])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.4030e-04,  5.7647e-04, -2.7290e-05, -1.1101e-04,  3.6086e-04],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0014, -0.0015,  0.0010, -0.0015, -0.0048])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0014, -0.0017,  0.0010, -0.0016, -0.0046])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0014, -0.0017,  0.0010, -0.0016, -0.0046])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0003,  0.0003,  0.0006,  0.0001,  0.0004])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([9.3048e-05])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([98.5102])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0268,  0.0370,  0.0684,  0.0570,  0.0972])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0268,  0.0370,  0.0684,  0.0570,  0.0972])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.6979,  0.3601,  0.6770,  0.8764, -1.4009])
  [Layer 24] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 24] Output sample values after mixer: tensor([-1.6979,  0.3601,  0.6770,  0.8764, -1.4009])
  [Layer 24] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 24] Residual connection sample values: tensor([ 4.2540,  0.3493, -0.3399, -3.6443,  3.9173])
[Mamba2LMHeadModel] Processing layer 25/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([64.4389])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1246])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1580,  0.0119, -0.0119, -0.1195,  0.1439])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2873, -0.0095,  0.3644,  0.3095, -0.3057])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2873, -0.0095,  0.3644,  0.3095, -0.3057])
  [Mamba2] xBC (step) sample values: tensor([ 0.2158, -0.5131,  0.1462, -0.2945, -1.1211])
  [Mamba2] dt (step) sample values: tensor([ 0.7590, -1.0610,  0.9871,  2.5146,  0.2303])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0611, -0.1142,  1.5756,  0.2158, -0.2249], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3012, -0.3748, -0.0695, -0.2172,  0.2118])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3038, -0.4030, -0.0809, -0.1564,  0.2060])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1290, -0.1614, -0.0388, -0.0721,  0.1136])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1290, -0.1614, -0.0388, -0.0721,  0.1136])
  [Mamba2] B (step) sample values: tensor([-0.0675,  0.0223, -0.0106, -0.0799,  0.0012])
  [Mamba2] C (step) sample values: tensor([ 0.0046,  0.1829, -0.1089, -0.0694, -0.1740])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -0.3702,  -1.5045,  -5.7210,  -0.8176, -14.6662])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2732, 0.0022, 0.0688, 0.0837, 0.0409])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9038, 0.9967, 0.6746, 0.9339, 0.5488])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1290, -0.1614, -0.0388, -0.0721,  0.1136])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.3771e-03, -7.8674e-04,  3.7446e-04,  2.8168e-03, -4.3212e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 6.9510e-03, -3.2554e-03, -8.4820e-05,  3.9013e-03,  1.5720e-03],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0041, -0.0133,  0.0005, -0.0042,  0.0107])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-5.4326e-03, -1.4971e-02,  5.2574e-05, -4.9150e-03,  1.1864e-02])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-5.4326e-03, -1.4971e-02,  5.2574e-05, -4.9150e-03,  1.1864e-02])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 6.6896e-04,  7.1034e-05,  1.1305e-05, -8.7737e-04, -1.5385e-03])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0001])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([91.1712])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0730,  0.0053,  0.0014, -0.0630, -0.2419])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0730,  0.0053,  0.0014, -0.0630, -0.2419])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0968,  0.0908,  0.3035,  0.4735, -0.5376])
  [Layer 25] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 25] Output sample values after mixer: tensor([ 0.0968,  0.0908,  0.3035,  0.4735, -0.5376])
  [Layer 25] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 25] Residual connection sample values: tensor([ 4.3507,  0.4401, -0.0364, -3.1708,  3.3796])
[Mamba2LMHeadModel] Processing layer 26/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([80.7160])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1113])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1868,  0.0175, -0.0015, -0.1244,  0.1419])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0168, -0.0624, -1.4686,  0.1047, -0.1295])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0168, -0.0624, -1.4686,  0.1047, -0.1295])
  [Mamba2] xBC (step) sample values: tensor([-0.3228,  0.2073, -0.6345, -0.7744,  0.5522])
  [Mamba2] dt (step) sample values: tensor([1.2047, 0.8091, 0.7219, 0.6489, 2.7676])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.8584,  0.5639, -1.1610, -0.3228, -0.4517], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2458, -0.0060, -0.1086,  0.1835, -0.1248])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1573, -0.0620, -0.0445,  0.1566, -0.1167])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0848, -0.0300, -0.0217,  0.0844, -0.0550])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0848, -0.0300, -0.0217,  0.0844, -0.0550])
  [Mamba2] B (step) sample values: tensor([-0.0449,  0.0389,  0.0162,  0.0800,  0.1071])
  [Mamba2] C (step) sample values: tensor([-0.1529, -0.1023,  0.1992,  0.2807,  0.1781])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9595, -0.3945, -0.8420, -1.4275, -0.1466])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1781, 0.2307, 0.1248, 0.1966, 0.1617])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8429, 0.9130, 0.9003, 0.7553, 0.9766])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0848, -0.0300, -0.0217,  0.0844, -0.0550])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0007,  0.0006,  0.0002,  0.0012,  0.0016])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0020, -0.0004, -0.0015,  0.0008, -0.0008], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0086,  0.0073,  0.0038,  0.0012,  0.0071])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([2.1910e-03, 3.4523e-03, 1.0111e-03, 1.1951e-02, 9.0900e-05])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([2.1910e-03, 3.4523e-03, 1.0111e-03, 1.1951e-02, 9.0900e-05])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 1.8528e-05, -1.0434e-04, -2.7791e-04,  6.5825e-04, -5.5046e-06])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0006])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([41.7274])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0004, -0.0048, -0.0110,  0.0395, -0.0003])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0004, -0.0048, -0.0110,  0.0395, -0.0003])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.8083, -0.4986,  0.6633, -1.9165, -0.2723])
  [Layer 26] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 26] Output sample values after mixer: tensor([-0.8083, -0.4986,  0.6633, -1.9165, -0.2723])
  [Layer 26] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 26] Residual connection sample values: tensor([ 3.5424, -0.0585,  0.6269, -5.0873,  3.1073])
[Mamba2LMHeadModel] Processing layer 27/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([94.4685])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1029])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1525, -0.0023,  0.0264, -0.1969,  0.1392])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4093,  0.6569, -0.3852, -0.1804,  0.1537])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4093,  0.6569, -0.3852, -0.1804,  0.1537])
  [Mamba2] xBC (step) sample values: tensor([ 0.3117,  0.4235,  0.8975,  0.2064, -0.5986])
  [Mamba2] dt (step) sample values: tensor([1.3742, 1.2260, 1.0359, 1.4233, 1.6975])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.3111, -0.2342,  0.5274,  0.3117, -0.0791], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1197,  0.1396,  0.2524, -0.1885, -0.2689])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0937,  0.1031,  0.2423, -0.3904, -0.2987])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0490,  0.0542,  0.1358, -0.1576, -0.1272])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0490,  0.0542,  0.1358, -0.1576, -0.1272])
  [Mamba2] B (step) sample values: tensor([-0.0942, -0.1055, -0.1445,  0.0591,  0.0017])
  [Mamba2] C (step) sample values: tensor([-0.0672, -0.2467, -0.0482,  0.2834, -0.2078])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3662, -1.3799, -1.8268, -2.0409, -2.3490])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1575, 0.1520, 0.1315, 0.0677, 0.2247])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8064, 0.8108, 0.7864, 0.8710, 0.5899])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0490,  0.0542,  0.1358, -0.1576, -0.1272])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-7.2718e-04, -8.1501e-04, -1.1156e-03,  4.5616e-04,  1.2868e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0010,  0.0011,  0.0019, -0.0010,  0.0004], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0151, -0.0106,  0.0159, -0.0723, -0.0161])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0101, -0.0051,  0.0297, -0.0882, -0.0290])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0101, -0.0051,  0.0297, -0.0882, -0.0290])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0016, -0.0022, -0.0046,  0.0072, -0.0024])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0052])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.8926])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0388, -0.0378, -0.1366,  0.1923, -0.0392])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0388, -0.0378, -0.1366,  0.1923, -0.0392])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-3.6765,  1.8787, -2.2716,  1.9079, -0.7977])
  [Layer 27] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 27] Output sample values after mixer: tensor([-3.6765,  1.8787, -2.2716,  1.9079, -0.7977])
  [Layer 27] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 27] Residual connection sample values: tensor([-0.1341,  1.8201, -1.6447, -3.1795,  2.3096])
[Mamba2LMHeadModel] Processing layer 28/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([123.7718])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0899])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0049,  0.0622, -0.0567, -0.1066,  0.0834])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5548, -0.4461,  0.5158, -0.4007, -1.0697])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5548, -0.4461,  0.5158, -0.4007, -1.0697])
  [Mamba2] xBC (step) sample values: tensor([-0.8093, -0.5084, -0.3668, -0.6723,  0.2204])
  [Mamba2] dt (step) sample values: tensor([1.5128, 0.7697, 1.2849, 1.0061, 2.0728])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.1666, -0.2787,  0.1147, -0.8093, -1.2985], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1232,  0.1762, -0.1097, -0.1129, -0.0371])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0654,  0.1648, -0.1233, -0.1243,  0.0675])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0338,  0.0892, -0.0579, -0.0583,  0.0349])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0338,  0.0892, -0.0579, -0.0583,  0.0349])
  [Mamba2] B (step) sample values: tensor([-0.0411, -0.0300, -0.1164, -0.0720,  0.3223])
  [Mamba2] C (step) sample values: tensor([-0.1987, -0.0783,  0.5835, -0.0246,  0.4335])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2728, -3.9978, -2.5177, -2.1714, -2.8655])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0454, 0.0927, 0.1434, 0.0462, 0.1152])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9438, 0.6904, 0.6969, 0.9046, 0.7189])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0338,  0.0892, -0.0579, -0.0583,  0.0349])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-6.2977e-05, -4.5958e-05, -1.7850e-04, -1.1043e-04,  4.9445e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.4944e-04, -4.3324e-05, -2.5186e-04,  2.9496e-04, -1.1384e-04],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0003,  0.0180, -0.0036, -0.0067,  0.0071])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0077,  0.0374, -0.0161, -0.0193,  0.0147])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0077,  0.0374, -0.0161, -0.0193,  0.0147])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0016, -0.0065, -0.0052,  0.0031, -0.0040])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0011])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([29.6361])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0953, -0.2645, -0.2005,  0.1379, -0.1729])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0953, -0.2645, -0.2005,  0.1379, -0.1729])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.2609, -0.3410, -5.0005, -1.7636,  2.1915])
  [Layer 28] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 28] Output sample values after mixer: tensor([ 1.2609, -0.3410, -5.0005, -1.7636,  2.1915])
  [Layer 28] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 28] Residual connection sample values: tensor([ 1.1268,  1.4792, -6.6452, -4.9431,  4.5011])
[Mamba2LMHeadModel] Processing layer 29/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([151.3603])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0813])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0354,  0.0444, -0.1999, -0.1432,  0.1406])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2736, -0.1403, -0.5836,  0.1816, -0.3232])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2736, -0.1403, -0.5836,  0.1816, -0.3232])
  [Mamba2] xBC (step) sample values: tensor([-0.6983, -0.0094, -0.2088, -1.3534, -1.2696])
  [Mamba2] dt (step) sample values: tensor([2.6439, 1.5319, 1.5101, 1.3740, 1.2412])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.7795, -0.6525, -0.4257, -0.6983, -0.1988], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0265,  0.0104,  0.0403,  0.2633, -0.1728])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0131, -0.0241,  0.0432,  0.2028, -0.2859])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0066, -0.0119,  0.0221,  0.1117, -0.1226])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0066, -0.0119,  0.0221,  0.1117, -0.1226])
  [Mamba2] B (step) sample values: tensor([ 0.0347,  0.0329, -0.0290,  0.0143, -0.0519])
  [Mamba2] C (step) sample values: tensor([-0.1834, -0.1358, -0.0784, -0.2489, -0.2425])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8072, -2.1170, -1.9257, -0.2904, -2.0499])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2638, 0.2106, 0.2604, 0.0062, 0.2023])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6208, 0.6402, 0.6057, 0.9982, 0.6605])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0066, -0.0119,  0.0221,  0.1117, -0.1226])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 6.0285e-05,  5.7199e-05, -5.0286e-05,  2.4765e-05, -9.0114e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0002,  0.0004, -0.0008, -0.0003,  0.0011], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0060,  0.0037, -0.0016,  0.0122, -0.0390])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0128, -0.0084,  0.0210,  0.1264, -0.1644])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0128, -0.0084,  0.0210,  0.1264, -0.1644])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0015,  0.0006, -0.0044,  0.0125,  0.0223])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0083])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.9766])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0181,  0.0062, -0.0786,  0.2009,  0.3179])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0181,  0.0062, -0.0786,  0.2009,  0.3179])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.7099, -2.7724, -2.1013, -2.1310,  0.3492])
  [Layer 29] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 29] Output sample values after mixer: tensor([ 0.7099, -2.7724, -2.1013, -2.1310,  0.3492])
  [Layer 29] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 29] Residual connection sample values: tensor([ 1.8367, -1.2932, -8.7465, -7.0741,  4.8503])
[Mamba2LMHeadModel] Processing layer 30/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([175.1750])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0756])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0591, -0.0409, -0.2749, -0.2097,  0.1603])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7004, -0.8176, -1.3877,  0.7438, -0.4612])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7004, -0.8176, -1.3877,  0.7438, -0.4612])
  [Mamba2] xBC (step) sample values: tensor([-0.3799, -0.4885, -0.3057,  0.1867,  1.1634])
  [Mamba2] dt (step) sample values: tensor([1.9614, 2.4313, 1.8866, 2.4676, 2.2380])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4021,  0.9596,  1.1811, -0.3799, -0.3885], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0661, -0.0672, -0.1275, -0.0370, -0.2727])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0893, -0.0535, -0.0944, -0.0551, -0.3000])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0427, -0.0260, -0.0450, -0.0268, -0.1277])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0427, -0.0260, -0.0450, -0.0268, -0.1277])
  [Mamba2] B (step) sample values: tensor([ 0.0064, -0.1744, -0.1154,  0.1416, -0.0751])
  [Mamba2] C (step) sample values: tensor([-0.2633, -0.2720,  0.2696,  0.0529, -0.2684])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0150, -0.4675, -0.4280, -0.7895, -0.4175])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0280, 0.8105, 1.0177, 0.5155, 0.7058])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9720, 0.6846, 0.6469, 0.6656, 0.7448])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0427, -0.0260, -0.0450, -0.0268, -0.1277])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-7.6065e-06,  2.0825e-04,  1.3785e-04, -1.6906e-04,  8.9688e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 8.3343e-04,  1.7767e-04,  2.1183e-04,  1.7392e-03, -4.5584e-05],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0025, -0.0020, -0.0026, -0.0013, -0.0036])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0501, -0.0341, -0.0579, -0.0343, -0.1609])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0501, -0.0341, -0.0579, -0.0343, -0.1609])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0116,  0.0085,  0.0161, -0.0173,  0.0287])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0088])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.6413])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1781,  0.1324,  0.1514, -0.2194,  0.3238])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1781,  0.1324,  0.1514, -0.2194,  0.3238])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 3.4723, -0.2537, -1.2045,  3.6797,  2.2694])
  [Layer 30] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 30] Output sample values after mixer: tensor([ 3.4723, -0.2537, -1.2045,  3.6797,  2.2694])
  [Layer 30] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 30] Residual connection sample values: tensor([ 5.3090, -1.5469, -9.9510, -3.3945,  7.1197])
[Mamba2LMHeadModel] Processing layer 31/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([200.8939])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0706])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1598, -0.0457, -0.2948, -0.0979,  0.2166])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.1986, -1.0227, -0.1919, -0.3364, -0.0299])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.1986, -1.0227, -0.1919, -0.3364, -0.0299])
  [Mamba2] xBC (step) sample values: tensor([-0.9861, -0.4091, -1.0543,  1.3792, -0.7906])
  [Mamba2] dt (step) sample values: tensor([2.7631, 1.8699, 2.7823, 1.9184, 1.4939])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.7322, -1.1307,  0.4075, -0.9861, -0.6999], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1634,  0.0589, -0.0802, -0.2197,  0.1364])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1639,  0.0485, -0.0792, -0.2216,  0.1310])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0753,  0.0249, -0.0380, -0.0986,  0.0698])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0753,  0.0249, -0.0380, -0.0986,  0.0698])
  [Mamba2] B (step) sample values: tensor([-0.0858, -0.0418, -0.0591, -0.1092, -0.0113])
  [Mamba2] C (step) sample values: tensor([-0.0472, -0.0920, -0.2406, -0.0858, -0.1646])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.9478, -3.5384, -4.7060, -2.4630, -0.9027])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.4264, 0.1389, 0.2288, 0.3503, 0.1731])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.2845, 0.6117, 0.3407, 0.4220, 0.8554])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0753,  0.0249, -0.0380, -0.0986,  0.0698])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([0.0028, 0.0013, 0.0019, 0.0035, 0.0004])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([0.0035, 0.0016, 0.0018, 0.0041, 0.0005], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0256,  0.0090, -0.0131, -0.0307,  0.0266])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0774,  0.0261, -0.0393, -0.0985,  0.0747])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0774,  0.0261, -0.0393, -0.0985,  0.0747])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0713, -0.0071,  0.0034,  0.0138, -0.0011])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0099])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.0382])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-1.4099, -0.1220,  0.0524,  0.2261, -0.0213])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-1.4099, -0.1220,  0.0524,  0.2261, -0.0213])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-4.0989,  1.8716, -0.1703, -0.6103,  0.1058])
  [Layer 31] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 31] Output sample values after mixer: tensor([-4.0989,  1.8716, -0.1703, -0.6103,  0.1058])
  [Layer 31] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 31] Residual connection sample values: tensor([  1.2101,   0.3247, -10.1213,  -4.0048,   7.2255])
[Mamba2LMHeadModel] Processing layer 32/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([235.6870])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0651])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0358,  0.0096, -0.2997, -0.1111,  0.2221])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2036, -0.3869, -2.2422, -0.9120, -1.4023])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2036, -0.3869, -2.2422, -0.9120, -1.4023])
  [Mamba2] xBC (step) sample values: tensor([-0.8245,  1.0549, -0.9100,  0.0492,  0.9841])
  [Mamba2] dt (step) sample values: tensor([1.1423, 2.5868, 1.9189, 1.6094, 2.1026])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.1698, -0.1870, -0.9295, -0.8245,  0.0171], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2592, -0.4008, -0.1053,  0.0395, -0.2104])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2964, -0.4528, -0.1211,  0.0520, -0.2173])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1700, -0.1760, -0.0569,  0.0267, -0.0969])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1700, -0.1760, -0.0569,  0.0267, -0.0969])
  [Mamba2] B (step) sample values: tensor([ 0.0140, -0.0653, -0.0067, -0.0098,  0.1936])
  [Mamba2] C (step) sample values: tensor([ 0.0368, -0.2337, -0.1412, -0.2552,  0.5726])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6971, -2.0893, -1.7967, -1.3894, -1.0395])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2269, 0.0700, 0.6051, 0.4253, 0.8792])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8537, 0.8640, 0.3372, 0.5538, 0.4009])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1700, -0.1760, -0.0569,  0.0267, -0.0969])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0005, -0.0025, -0.0003, -0.0004,  0.0075])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0023, -0.0004, -0.0004, -0.0036,  0.0061], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0428, -0.0456, -0.0080, -0.0218, -0.0362])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0835, -0.0878, -0.0216, -0.0154, -0.0595])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0835, -0.0878, -0.0216, -0.0154, -0.0595])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0076,  0.0137,  0.0047,  0.0040,  0.0165])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0162])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.8453])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0729,  0.1055,  0.0693,  0.0490,  0.1642])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0729,  0.1055,  0.0693,  0.0490,  0.1642])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.4690,  0.4954, -2.3034,  0.3537,  1.4678])
  [Layer 32] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 32] Output sample values after mixer: tensor([ 1.4690,  0.4954, -2.3034,  0.3537,  1.4678])
  [Layer 32] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 32] Residual connection sample values: tensor([  2.6791,   0.8201, -12.4247,  -3.6512,   8.6933])
[Mamba2LMHeadModel] Processing layer 33/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([374.0366])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0517])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0653,  0.0207, -0.3084, -0.0880,  0.2194])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.9590, -0.0387, -0.6901,  0.0527, -0.5883])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.9590, -0.0387, -0.6901,  0.0527, -0.5883])
  [Mamba2] xBC (step) sample values: tensor([ 0.6878, -1.7403,  0.0840, -0.8051,  0.7886])
  [Mamba2] dt (step) sample values: tensor([-1.8586,  1.3890,  1.4973,  1.7511,  0.8159])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4440,  0.2413,  1.4796,  0.6878, -2.9288], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1312, -0.2744, -0.0449, -0.1853, -0.1364])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1181, -0.3238, -0.0181, -0.1865, -0.1376])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0625, -0.1359, -0.0089, -0.0846, -0.0641])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0625, -0.1359, -0.0089, -0.0846, -0.0641])
  [Mamba2] B (step) sample values: tensor([-0.2781,  0.1695, -0.0500, -0.0550,  0.1161])
  [Mamba2] C (step) sample values: tensor([-0.0292, -0.0407, -0.2752, -0.2082,  0.3329])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9791, -9.6938, -6.1678, -0.1135, -2.0903])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0018, 0.0395, 0.0566, 0.0459, 0.0065])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9964, 0.6821, 0.7051, 0.9948, 0.9865])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0625, -0.1359, -0.0089, -0.0846, -0.0641])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.2024e-05,  1.9520e-05, -5.7609e-06, -6.3315e-06,  1.3373e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.6351e-04,  1.2613e-04, -1.0051e-04, -7.1578e-05,  9.5180e-05],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-5.4509e-05, -2.7082e-04,  2.9765e-04, -5.2383e-04, -6.6499e-04])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0651, -0.1418, -0.0090, -0.0886, -0.0674])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0651, -0.1418, -0.0090, -0.0886, -0.0674])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0173,  0.0027,  0.0021, -0.0024,  0.0141])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0067])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.1704])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.3168,  0.0294,  0.0286, -0.0322,  0.2153])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.3168,  0.0294,  0.0286, -0.0322,  0.2153])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.6722, -0.3456, -5.1898, -2.6946, -3.0288])
  [Layer 33] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 33] Output sample values after mixer: tensor([-1.6722, -0.3456, -5.1898, -2.6946, -3.0288])
  [Layer 33] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 33] Residual connection sample values: tensor([  1.0070,   0.4745, -17.6146,  -6.3457,   5.6645])
[Mamba2LMHeadModel] Processing layer 34/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([423.5589])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0486])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0189,  0.0094, -0.3295, -0.1198,  0.1112])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.9412, -0.9202,  0.1687, -0.7762, -0.8357])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.9412, -0.9202,  0.1687, -0.7762, -0.8357])
  [Mamba2] xBC (step) sample values: tensor([-0.8309, -0.6632, -1.0588, -0.5511, -0.4424])
  [Mamba2] dt (step) sample values: tensor([2.5736, 2.3368, 4.1036, 1.1139, 0.8445])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.7701,  0.5119, -0.2410, -0.8309, -1.1400], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1914,  0.1194, -0.1655,  0.1390, -0.0983])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1595,  0.1454, -0.1774,  0.0995, -0.1069])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0861,  0.0780, -0.0809,  0.0522, -0.0506])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0861,  0.0780, -0.0809,  0.0522, -0.0506])
  [Mamba2] B (step) sample values: tensor([-0.0548,  0.0679, -0.0714,  0.0036, -0.0004])
  [Mamba2] C (step) sample values: tensor([-0.0305, -0.2631, -0.2703, -0.2079, -0.2742])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.5611, -2.4811, -2.8936, -0.0159, -0.0261])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.5325, 0.2935, 0.4517, 0.0432, 0.0173])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.2557, 0.4827, 0.2706, 0.9993, 0.9995])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0861,  0.0780, -0.0809,  0.0522, -0.0506])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.5113e-03,  3.1154e-03, -3.2760e-03,  1.6699e-04, -1.8301e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.6042e-03,  3.1874e-03, -3.1622e-03,  2.5271e-04, -3.9532e-05],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0054,  0.0053, -0.0049,  0.0041, -0.0035])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0584,  0.0533, -0.0547,  0.0363, -0.0347])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0584,  0.0533, -0.0547,  0.0363, -0.0347])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0154, -0.0140, -0.0050, -0.0089,  0.0088])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0032])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([17.7187])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.5440, -0.4793, -0.1961, -0.3911,  0.3668])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.5440, -0.4793, -0.1961, -0.3911,  0.3668])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 4.8856,  0.6710, -7.6329, -2.8378, -2.6744])
  [Layer 34] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 34] Output sample values after mixer: tensor([ 4.8856,  0.6710, -7.6329, -2.8378, -2.6744])
  [Layer 34] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 34] Residual connection sample values: tensor([  5.8926,   1.1455, -25.2474,  -9.1835,   2.9901])
[Mamba2LMHeadModel] Processing layer 35/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([655.8918])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0390])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1190,  0.0231, -0.5006, -0.1708,  0.0597])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-2.8081, -1.8827,  2.0981,  0.3490, -1.7821])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-2.8081, -1.8827,  2.0981,  0.3490, -1.7821])
  [Mamba2] xBC (step) sample values: tensor([-0.5026,  0.6717,  0.8104, -0.6031,  0.4543])
  [Mamba2] dt (step) sample values: tensor([2.2536, 0.9245, 1.6619, 1.3960, 1.9000])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.9649, -0.8680,  2.3285, -0.5026,  0.8360], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0941, -0.1525, -0.1371, -0.1347,  0.0723])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0619, -0.1113, -0.1733, -0.1797,  0.0309])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0300, -0.0526, -0.0791, -0.0818,  0.0157])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0300, -0.0526, -0.0791, -0.0818,  0.0157])
  [Mamba2] B (step) sample values: tensor([-0.0042,  0.2267, -0.2462,  0.1572,  0.5075])
  [Mamba2] C (step) sample values: tensor([-0.2719,  0.4033, -0.2498,  0.1022, -0.0037])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7098, -2.7746, -0.4453, -1.1391, -3.5906])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0834, 0.0423, 0.6422, 0.2454, 0.1616])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9425, 0.8893, 0.7513, 0.7562, 0.5597])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0300, -0.0526, -0.0791, -0.0818,  0.0157])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.0586e-05, -5.6720e-04,  6.1590e-04, -3.9338e-04, -1.2698e-03])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0035, -0.0151,  0.0293, -0.0239,  0.0034], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0777, -0.0574, -0.0597, -0.1091, -0.0201])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0980, -0.0929, -0.1132, -0.1644, -0.0095])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0980, -0.0929, -0.1132, -0.1644, -0.0095])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0156,  0.0231, -0.2116, -0.0336,  0.0024])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0209])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.9076])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.3530,  0.2773, -1.7938, -0.3298,  0.0321])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.3530,  0.2773, -1.7938, -0.3298,  0.0321])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 4.8115, -2.0333,  0.9987,  1.8831, -6.6636])
  [Layer 35] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 35] Output sample values after mixer: tensor([ 4.8115, -2.0333,  0.9987,  1.8831, -6.6636])
  [Layer 35] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 35] Residual connection sample values: tensor([ 10.7041,  -0.8878, -24.2487,  -7.3003,  -3.6734])
[Mamba2LMHeadModel] Processing layer 36/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([882.6929])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0337])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1768, -0.0148, -0.3977, -0.1190, -0.0621])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-2.1632, -1.4303, -0.6671,  0.0619, -1.2295])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-2.1632, -1.4303, -0.6671,  0.0619, -1.2295])
  [Mamba2] xBC (step) sample values: tensor([ 0.1037,  1.6131,  0.0767, -1.3562, -0.8887])
  [Mamba2] dt (step) sample values: tensor([ 1.5082,  0.7759,  1.5401,  0.7117, -0.4493])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2234,  0.0426, -1.0857,  0.1037,  1.6855], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0428,  0.2722,  0.0221, -0.2730,  0.1595])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0066,  0.2721, -0.0064, -0.2979,  0.1317])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0033,  0.1545, -0.0032, -0.1269,  0.0702])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0033,  0.1545, -0.0032, -0.1269,  0.0702])
  [Mamba2] B (step) sample values: tensor([ 0.1287,  0.3543,  0.0332, -0.0217,  0.0829])
  [Mamba2] C (step) sample values: tensor([-0.1869, -0.2713, -0.1059, -0.1322, -0.0667])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6566, -1.1306, -1.6058, -2.4414, -2.8823])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1798, 0.0080, 0.0968, 0.0732, 0.0263])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6202, 0.9910, 0.8560, 0.8363, 0.9269])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0033,  0.1545, -0.0032, -0.1269,  0.0702])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 7.6948e-05,  2.1190e-04,  1.9867e-05, -1.2976e-05,  4.9560e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 3.6156e-04,  1.0890e-03, -1.6115e-04,  3.7152e-04, -9.5224e-05],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0008,  0.0094, -0.0002, -0.0067,  0.0022])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0046,  0.1864, -0.0038, -0.1521,  0.0826])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0046,  0.1864, -0.0038, -0.1521,  0.0826])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0010, -0.0515,  0.0009, -0.0049, -0.0230])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0083])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([10.9466])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0165, -1.2070,  0.0138, -0.0866, -0.3546])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0165, -1.2070,  0.0138, -0.0866, -0.3546])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.9512, -1.0935, -4.6892, -1.2775, -2.3990])
  [Layer 36] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 36] Output sample values after mixer: tensor([-1.9512, -1.0935, -4.6892, -1.2775, -2.3990])
  [Layer 36] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 36] Residual connection sample values: tensor([  8.7529,  -1.9813, -28.9380,  -8.5778,  -6.0725])
[Mamba2LMHeadModel] Processing layer 37/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1075.3386])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0305])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1522, -0.0353, -0.4972, -0.1443, -0.1064])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2456,  1.4671,  0.5983, -3.7595, -0.5859])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2456,  1.4671,  0.5983, -3.7595, -0.5859])
  [Mamba2] xBC (step) sample values: tensor([-0.4156, -0.2430, -0.1713, -0.3639, -0.6205])
  [Mamba2] dt (step) sample values: tensor([1.3311, 0.8073, 0.4020, 1.6222, 0.9020])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4518,  0.2273, -1.6311, -0.4156,  0.4242], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0044,  0.0810, -0.0247, -0.1955, -0.1016])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0168,  0.0525, -0.0197, -0.3464, -0.0868])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0083,  0.0270, -0.0097, -0.1435, -0.0415])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0083,  0.0270, -0.0097, -0.1435, -0.0415])
  [Mamba2] B (step) sample values: tensor([ 0.0088,  0.0346, -0.0853, -0.0206, -0.0571])
  [Mamba2] C (step) sample values: tensor([-0.1501, -0.1017, -0.2246, -0.2649, -0.2619])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0606, -3.2470, -0.8191, -0.2453, -1.9752])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0351, 0.0217, 0.0140, 0.0063, 0.0285])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9979, 0.9318, 0.9886, 0.9985, 0.9452])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0083,  0.0270, -0.0097, -0.1435, -0.0415])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.5726e-06, -1.0068e-05,  2.4841e-05,  6.0091e-06,  1.6646e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0009, -0.0004, -0.0031, -0.0005, -0.0015], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0167, -0.0222, -0.0191,  0.0888,  0.0726])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0183, -0.0273, -0.0172,  0.1161,  0.0805])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0183, -0.0273, -0.0172,  0.1161,  0.0805])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0020, -0.0326, -0.0067, -0.0099, -0.0169])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0324])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.5571])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0177, -0.2659, -0.1070, -0.2950, -0.1119])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0177, -0.2659, -0.1070, -0.2950, -0.1119])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.9278, -2.3965, -1.3034,  4.5070, -9.7404])
  [Layer 37] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 37] Output sample values after mixer: tensor([-0.9278, -2.3965, -1.3034,  4.5070, -9.7404])
  [Layer 37] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 37] Residual connection sample values: tensor([  7.8250,  -4.3778, -30.2414,  -4.0708, -15.8129])
[Mamba2LMHeadModel] Processing layer 38/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1342.9569])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0273])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1107, -0.0615, -0.4227, -0.0555, -0.2210])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8528, -0.8439,  0.8074, -1.9085,  0.1521])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8528, -0.8439,  0.8074, -1.9085,  0.1521])
  [Mamba2] xBC (step) sample values: tensor([-0.2939,  0.1416,  0.4406, -0.0487,  0.2985])
  [Mamba2] dt (step) sample values: tensor([1.0352, 2.2947, 1.0655, 0.9594, 0.5878])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.3542,  0.4713, -0.8226, -0.2939,  0.4889], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0668, -0.0184, -0.1377, -0.0142,  0.0719])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0949, -0.0556, -0.1635, -0.0258,  0.0507])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0497, -0.0270, -0.0751, -0.0127,  0.0260])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0497, -0.0270, -0.0751, -0.0127,  0.0260])
  [Mamba2] B (step) sample values: tensor([-0.1836, -0.2438, -0.0546,  0.1069, -0.2761])
  [Mamba2] C (step) sample values: tensor([-0.1886, -0.1728, -0.2653,  0.4540, -0.1172])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0881, -1.3536, -1.1764, -1.6451, -1.1941])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1399, 0.2639, 0.4257, 0.1064, 0.0410])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8588, 0.6997, 0.6061, 0.8394, 0.9522])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0497, -0.0270, -0.0751, -0.0127,  0.0260])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0013, -0.0017, -0.0004,  0.0007, -0.0019])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([0.0027, 0.0033, 0.0002, 0.0012, 0.0017], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0004, -0.0313, -0.0307,  0.0221,  0.0072])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0399, -0.0532, -0.0915,  0.0118,  0.0282])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0399, -0.0532, -0.0915,  0.0118,  0.0282])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0102,  0.0135, -0.0511, -0.0029,  0.0023])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0105])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([9.7713])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1983,  0.2545, -1.0106, -0.0527,  0.0375])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1983,  0.2545, -1.0106, -0.0527,  0.0375])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([  0.9630,  -4.9550, -10.8654,   5.2003,   3.6771])
  [Layer 38] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 38] Output sample values after mixer: tensor([  0.9630,  -4.9550, -10.8654,   5.2003,   3.6771])
  [Layer 38] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 38] Residual connection sample values: tensor([  8.7880,  -9.3328, -41.1068,   1.1295, -12.1358])
[Mamba2LMHeadModel] Processing layer 39/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1709.4508])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0242])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0959, -0.1029, -0.4493,  0.0124, -0.1340])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3752,  0.1962, -0.9869, -0.3569, -0.1942])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3752,  0.1962, -0.9869, -0.3569, -0.1942])
  [Mamba2] xBC (step) sample values: tensor([ 1.4473, -1.3426,  1.3165, -1.3169, -0.4740])
  [Mamba2] dt (step) sample values: tensor([2.6030, 1.5965, 1.4173, 1.3480, 1.3564])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.7949, 1.5400, 2.3279, 1.4473, 0.4046], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2735,  0.2151,  0.2351, -0.3079, -0.0744])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2591,  0.3003,  0.2128, -0.3038, -0.0954])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1463,  0.1725,  0.1177, -0.1290, -0.0454])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1463,  0.1725,  0.1177, -0.1290, -0.0454])
  [Mamba2] B (step) sample values: tensor([-0.0085, -0.0453, -0.0075,  0.1362, -0.0638])
  [Mamba2] C (step) sample values: tensor([ 0.2982, -0.0514,  0.3034,  0.2721, -0.1004])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6942, -0.9243, -1.3151, -3.1533, -2.1087])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0635, 0.0367, 0.0362, 0.1015, 0.0963])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9569, 0.9666, 0.9535, 0.7260, 0.8163])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1463,  0.1725,  0.1177, -0.1290, -0.0454])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-7.9270e-05, -4.2054e-04, -6.9517e-05,  1.2642e-03, -5.9219e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0027, -0.0004,  0.0014,  0.0020,  0.0030], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0165,  0.0260,  0.0083, -0.0198,  0.0034])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1418,  0.1738,  0.1092, -0.1304, -0.0355])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1418,  0.1738,  0.1092, -0.1304, -0.0355])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0315,  0.0187, -0.0293,  0.0192,  0.0031])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0040])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([15.8344])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.9397,  0.5992, -0.9573,  0.5069,  0.0939])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.9397,  0.5992, -0.9573,  0.5069,  0.0939])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.9195, -6.8660, -0.7239,  1.2918, -1.0414])
  [Layer 39] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 39] Output sample values after mixer: tensor([-2.9195, -6.8660, -0.7239,  1.2918, -1.0414])
  [Layer 39] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 39] Residual connection sample values: tensor([  5.8685, -16.1987, -41.8307,   2.4213, -13.1772])
[Mamba2LMHeadModel] Processing layer 40/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2048.4995])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0221])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0566, -0.1575, -0.4177,  0.0236, -0.1268])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7729, -0.2732, -1.2925,  0.3233, -1.6035])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7729, -0.2732, -1.2925,  0.3233, -1.6035])
  [Mamba2] xBC (step) sample values: tensor([ 0.0096,  0.0694, -0.2000,  0.2949, -0.5704])
  [Mamba2] dt (step) sample values: tensor([1.1876, 1.4928, 1.5727, 1.5609, 0.9060])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0321, 0.8465, 0.0553, 0.0096, 0.5717], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0019, -0.0318, -0.0539, -0.0610, -0.1003])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0138, -0.0504, -0.0481, -0.0709, -0.1050])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0068, -0.0246, -0.0235, -0.0342, -0.0498])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0068, -0.0246, -0.0235, -0.0342, -0.0498])
  [Mamba2] B (step) sample values: tensor([-0.1070, -0.0956, -0.0453,  0.0071,  0.1094])
  [Mamba2] C (step) sample values: tensor([-0.0048,  0.0020, -0.0118,  0.2161, -0.0651])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9810, -1.4352, -0.7966, -1.6062, -1.8465])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1763, 0.0588, 0.0217, 0.1647, 0.1403])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7053, 0.9191, 0.9828, 0.7676, 0.7718])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0068, -0.0246, -0.0235, -0.0342, -0.0498])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.2919e-04,  1.1536e-04,  5.4739e-05, -8.5516e-06, -1.3209e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0019,  0.0026, -0.0005, -0.0009,  0.0011], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0026, -0.0023, -0.0057, -0.0064, -0.0109])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0030, -0.0224, -0.0249, -0.0343, -0.0516])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0030, -0.0224, -0.0249, -0.0343, -0.0516])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0007,  0.0026,  0.0069, -0.0064,  0.0139])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0042])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([15.4946])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0220,  0.0808,  0.2084, -0.2295,  0.4157])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0220,  0.0808,  0.2084, -0.2295,  0.4157])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-11.2384,  -4.4567,  -3.7280,   5.7640,   5.9877])
  [Layer 40] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 40] Output sample values after mixer: tensor([-11.2384,  -4.4567,  -3.7280,   5.7640,   5.9877])
  [Layer 40] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 40] Residual connection sample values: tensor([ -5.3700, -20.6554, -45.5586,   8.1853,  -7.1895])
[Mamba2LMHeadModel] Processing layer 41/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2382.4392])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0205])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0491, -0.1903, -0.4252,  0.0748, -0.0660])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5009, -0.3912, -0.2173, -0.4591, -0.5881])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5009, -0.3912, -0.2173, -0.4591, -0.5881])
  [Mamba2] xBC (step) sample values: tensor([-0.0262,  0.2919,  0.8350, -0.4764,  0.2425])
  [Mamba2] dt (step) sample values: tensor([ 0.9918,  1.3118,  1.6880, -0.0389,  1.4422])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.1797, -0.2611,  0.4608, -0.0262, -0.1176], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0058,  0.0256,  0.1562, -0.0905,  0.0702])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0192,  0.0116,  0.1583, -0.0972,  0.0547])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0095,  0.0058,  0.0854, -0.0462,  0.0281])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0095,  0.0058,  0.0854, -0.0462,  0.0281])
  [Mamba2] B (step) sample values: tensor([-0.0438, -0.0652, -0.0112, -0.2389,  0.1413])
  [Mamba2] C (step) sample values: tensor([-0.0003, -0.0243,  0.1084, -0.0956,  0.1642])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8259, -1.8637, -1.2829, -1.4543, -4.4079])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0976, 0.1119, 0.0384, 0.0398, 0.0267])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8368, 0.8117, 0.9520, 0.9438, 0.8889])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0095,  0.0058,  0.0854, -0.0462,  0.0281])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 4.0577e-05,  6.0436e-05,  1.0391e-05,  2.2144e-04, -1.3099e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-9.9747e-05,  4.0555e-04, -6.0156e-04,  3.5991e-03, -2.9424e-03],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0065, -0.0007,  0.0277, -0.0016,  0.0007])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0158,  0.0050,  0.1110, -0.0466,  0.0281])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0158,  0.0050,  0.1110, -0.0466,  0.0281])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0030, -0.0008, -0.0107,  0.0083, -0.0059])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0026])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([19.4037])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1003, -0.0264, -0.3550,  0.2877, -0.1595])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1003, -0.0264, -0.3550,  0.2877, -0.1595])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 4.0061,  1.5372, -0.0077, -3.1244,  1.5899])
  [Layer 41] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 41] Output sample values after mixer: tensor([ 4.0061,  1.5372, -0.0077, -3.1244,  1.5899])
  [Layer 41] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 41] Residual connection sample values: tensor([ -1.3638, -19.1182, -45.5663,   5.0609,  -5.5996])
[Mamba2LMHeadModel] Processing layer 42/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2717.5720])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0192])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0124, -0.1774, -0.4189,  0.0457, -0.0507])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0214,  0.4448, -1.6407, -0.0919,  0.4662])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0214,  0.4448, -1.6407, -0.0919,  0.4662])
  [Mamba2] xBC (step) sample values: tensor([-0.8124,  0.6042, -1.1135, -0.2345, -0.3577])
  [Mamba2] dt (step) sample values: tensor([0.7143, 2.0859, 1.7807, 0.2235, 1.4670])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.3323,  1.3848,  0.2067, -0.8124,  0.2129], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1174, -0.1026, -0.1680, -0.0625, -0.0607])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1267, -0.1158, -0.1580, -0.0590, -0.0807])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0593, -0.0546, -0.0728, -0.0286, -0.0387])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0593, -0.0546, -0.0728, -0.0286, -0.0387])
  [Mamba2] B (step) sample values: tensor([-0.0171,  0.0229,  0.0490,  0.0372,  0.3966])
  [Mamba2] C (step) sample values: tensor([ 0.0101, -0.0901,  0.1606,  0.2890, -0.2505])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0661, -1.4514, -0.7270, -1.9455, -0.6256])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0431, 0.8774, 0.0203, 0.0337, 0.0481])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9550, 0.2798, 0.9854, 0.9365, 0.9703])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0593, -0.0546, -0.0728, -0.0286, -0.0387])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 4.3673e-05, -5.8692e-05, -1.2538e-04, -9.5111e-05, -1.0152e-03])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0004, -0.0007, -0.0007,  0.0013,  0.0002], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0002, -0.0026, -0.0018,  0.0020,  0.0009])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0593, -0.0573, -0.0748, -0.0267, -0.0379])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0593, -0.0573, -0.0748, -0.0267, -0.0379])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0006, -0.0155,  0.0199,  0.0012, -0.0109])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0028])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([18.7364])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0244, -0.5934,  0.7744,  0.0377, -0.3830])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0244, -0.5934,  0.7744,  0.0377, -0.3830])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 7.8523,  2.5393,  2.2369,  0.8608, -2.4023])
  [Layer 42] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 42] Output sample values after mixer: tensor([ 7.8523,  2.5393,  2.2369,  0.8608, -2.4023])
  [Layer 42] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 42] Residual connection sample values: tensor([  6.4885, -16.5789, -43.3293,   5.9217,  -8.0018])
[Mamba2LMHeadModel] Processing layer 43/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2936.6199])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0185])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0566, -0.1517, -0.3793,  0.0526, -0.0693])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6733, -0.1348, -0.7878, -0.5694, -0.2838])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6733, -0.1348, -0.7878, -0.5694, -0.2838])
  [Mamba2] xBC (step) sample values: tensor([ 0.4704, -1.1298,  0.5342, -0.0578, -1.6776])
  [Mamba2] dt (step) sample values: tensor([ 2.3784,  0.6024, -0.4982,  1.9436,  1.2626])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.9247, -0.2893,  0.3435,  0.4704, -0.4871], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0694, -0.1360,  0.0978,  0.0028,  0.2773])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0659, -0.1817,  0.1103,  0.0087,  0.2685])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0340, -0.0826,  0.0582,  0.0044,  0.1522])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0340, -0.0826,  0.0582,  0.0044,  0.1522])
  [Mamba2] B (step) sample values: tensor([ 0.0186, -0.0625,  0.8719, -0.0112,  0.0369])
  [Mamba2] C (step) sample values: tensor([ 0.2772, -0.0815, -0.2763, -0.0491, -0.0163])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9762, -1.4783, -1.0589, -1.0815, -5.9141])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0428, 0.0270, 0.0050, 0.0472, 0.1776])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9591, 0.9608, 0.9948, 0.9502, 0.3497])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0340, -0.0826,  0.0582,  0.0044,  0.1522])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.7117e-05, -9.1085e-05,  1.2698e-03, -1.6349e-05,  5.3749e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0002, -0.0014,  0.0124,  0.0002,  0.0002], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0084, -0.0100, -0.0097, -0.0084,  0.0057])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0379, -0.0817,  0.0409, -0.0046,  0.1378])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0379, -0.0817,  0.0409, -0.0046,  0.1378])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0086,  0.0051, -0.0101,  0.0009, -0.0168])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0031])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([17.9581])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.4074,  0.1864, -0.3427,  0.0355, -0.7270])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.4074,  0.1864, -0.3427,  0.0355, -0.7270])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.9057,  2.9768, -5.9394,  6.6915,  3.4083])
  [Layer 43] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 43] Output sample values after mixer: tensor([ 1.9057,  2.9768, -5.9394,  6.6915,  3.4083])
  [Layer 43] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 43] Residual connection sample values: tensor([  8.3942, -13.6021, -49.2687,  12.6132,  -4.5935])
[Mamba2LMHeadModel] Processing layer 44/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3172.2437])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0178])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0700, -0.1179, -0.4147,  0.1046, -0.0383])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.0290, -2.1183, -1.3477, -0.1112, -1.6878])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.0290, -2.1183, -1.3477, -0.1112, -1.6878])
  [Mamba2] xBC (step) sample values: tensor([-1.8358,  0.7220, -0.5495, -1.6236, -1.7362])
  [Mamba2] dt (step) sample values: tensor([0.7421, 0.8142, 0.3062, 1.6177, 0.5173])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.7053, -0.6840, -0.5129, -1.8358, -0.2283], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3152, -0.0889, -0.0856, -0.3425,  0.2036])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3213, -0.0285, -0.1040, -0.3491,  0.1511])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1351, -0.0140, -0.0493, -0.1444,  0.0813])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1351, -0.0140, -0.0493, -0.1444,  0.0813])
  [Mamba2] B (step) sample values: tensor([-0.2748, -0.0441,  0.0542, -0.0188,  0.0319])
  [Mamba2] C (step) sample values: tensor([-0.2784, -0.0271,  0.1825, -0.0581, -0.0513])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7482, -0.6439, -1.1771, -1.3506, -1.0269])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0454, 0.0337, 0.0151, 0.0488, 0.0615])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9666, 0.9785, 0.9824, 0.9362, 0.9388])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1351, -0.0140, -0.0493, -0.1444,  0.0813])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0017,  0.0003, -0.0003,  0.0001, -0.0002])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 8.9559e-03, -2.2829e-04, -1.4723e-03,  9.9337e-06, -1.9129e-03],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0086, -0.0020, -0.0014, -0.0117,  0.0068])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1355, -0.0152, -0.0477, -0.1474,  0.0831])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1355, -0.0152, -0.0477, -0.1474,  0.0831])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0367,  0.0034,  0.0133,  0.0077, -0.0219])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0023])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([20.6175])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 1.4117,  0.1058,  0.5499,  0.2782, -0.8561])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 1.4117,  0.1058,  0.5499,  0.2782, -0.8561])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0518, -5.4412, -5.8353,  0.4216, -0.2070])
  [Layer 44] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 44] Output sample values after mixer: tensor([-0.0518, -5.4412, -5.8353,  0.4216, -0.2070])
  [Layer 44] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 44] Residual connection sample values: tensor([  8.3424, -19.0433, -55.1040,  13.0348,  -4.8005])
[Mamba2LMHeadModel] Processing layer 45/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3354.2546])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0173])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0691, -0.1621, -0.4583,  0.1062, -0.0396])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.4486, -0.6403,  0.0447,  0.3947,  1.3157])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.4486, -0.6403,  0.0447,  0.3947,  1.3157])
  [Mamba2] xBC (step) sample values: tensor([ 0.0447,  0.0674, -0.2244, -0.1344, -2.1028])
  [Mamba2] dt (step) sample values: tensor([ 1.7858,  1.8736, -1.0757,  0.9465,  0.9943])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5001,  1.1710,  0.9239,  0.0447, -0.1982], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0233, -0.0114, -0.0267, -0.0277,  0.3733])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0187,  0.0409, -0.0291, -0.0343,  0.3708])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0095,  0.0208, -0.0143, -0.0169,  0.2194])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0095,  0.0208, -0.0143, -0.0169,  0.2194])
  [Mamba2] B (step) sample values: tensor([-0.0800,  0.1110,  0.1743, -0.2397,  0.0019])
  [Mamba2] C (step) sample values: tensor([-0.0477,  0.0290, -0.0360, -0.1947,  0.0605])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.2502, -4.1815, -1.0937, -2.6774, -2.3149])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0422, 0.1386, 0.0067, 0.0322, 0.0149])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9094, 0.5600, 0.9927, 0.9175, 0.9660])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0095,  0.0208, -0.0143, -0.0169,  0.2194])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.1947e-05,  4.4319e-05,  6.9562e-05, -9.5663e-05,  7.3881e-07])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.1471e-03, -4.1384e-04, -5.4854e-05, -6.3241e-04,  2.8250e-04],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0020,  0.0017, -0.0067, -0.0060,  0.0496])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0126,  0.0250, -0.0228, -0.0249,  0.2957])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0126,  0.0250, -0.0228, -0.0249,  0.2957])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0034, -0.0055, -0.0005, -0.0059,  0.3067])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0034])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([17.0445])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1371, -0.1599, -0.0191, -0.1969, 11.0281])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1371, -0.1599, -0.0191, -0.1969, 11.0281])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 7.0752, -1.9055,  0.7262,  3.6908,  0.1619])
  [Layer 45] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 45] Output sample values after mixer: tensor([ 7.0752, -1.9055,  0.7262,  3.6908,  0.1619])
  [Layer 45] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 45] Residual connection sample values: tensor([ 15.4177, -20.9488, -54.3778,  16.7256,  -4.6386])
[Mamba2LMHeadModel] Processing layer 46/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3562.8569])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0168])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1492, -0.2113, -0.5360,  0.1636, -0.0446])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1077, -0.2892,  0.3759, -1.3689, -0.9703])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1077, -0.2892,  0.3759, -1.3689, -0.9703])
  [Mamba2] xBC (step) sample values: tensor([ 1.7097, -0.0841, -0.3635, -0.2131, -0.1005])
  [Mamba2] dt (step) sample values: tensor([ 1.4193,  2.2340,  0.1429,  0.7795, -0.8997])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.8710,  0.2408,  0.9274,  1.7097, -0.1341], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2890, -0.0127, -0.0606,  0.0179,  0.0179])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2922, -0.0165, -0.0817,  0.0021,  0.0382])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1249, -0.0082, -0.0392,  0.0010,  0.0195])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1249, -0.0082, -0.0392,  0.0010,  0.0195])
  [Mamba2] B (step) sample values: tensor([-0.1473, -0.2070,  0.0182,  0.0017, -0.0848])
  [Mamba2] C (step) sample values: tensor([ 0.0425, -0.2785, -0.0702,  0.0973,  0.1334])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8673, -0.9793, -1.6584, -0.9408, -0.4381])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0124, 0.0518, 0.0073, 0.0224, 0.0036])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9771, 0.9505, 0.9880, 0.9791, 0.9984])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1249, -0.0082, -0.0392,  0.0010,  0.0195])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.2864e-04,  3.2131e-04, -2.8311e-05, -2.6853e-06,  1.3171e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 5.5331e-04,  1.8612e-03, -1.9056e-04, -8.1713e-05, -2.5146e-04],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.0173e-03,  7.4239e-05, -3.8284e-04,  6.2587e-04,  1.1867e-03])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1007, -0.0064, -0.0317,  0.0015,  0.0167])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1007, -0.0064, -0.0317,  0.0015,  0.0167])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0057,  0.0008, -0.0071, -0.0004, -0.0045])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0045])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([14.8413])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1975,  0.0263, -0.2103, -0.0112, -0.1504])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1975,  0.0263, -0.2103, -0.0112, -0.1504])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ -1.6329,  -2.1700,  -6.8427,   0.1083, -17.8826])
  [Layer 46] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 46] Output sample values after mixer: tensor([ -1.6329,  -2.1700,  -6.8427,   0.1083, -17.8826])
  [Layer 46] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 46] Residual connection sample values: tensor([ 13.7848, -23.1188, -61.2205,  16.8339, -22.5212])
[Mamba2LMHeadModel] Processing layer 47/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3708.1653])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0164])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1162, -0.1967, -0.5005,  0.1393, -0.1775])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8013,  0.7718, -0.8057, -1.0202, -1.0901])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8013,  0.7718, -0.8057, -1.0202, -1.0901])
  [Mamba2] xBC (step) sample values: tensor([ 0.1809, -0.7293,  0.6309,  0.2372, -0.0384])
  [Mamba2] dt (step) sample values: tensor([0.2610, 0.1445, 2.7768, 1.6106, 1.1467])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.1626,  0.0061,  0.4181,  0.1809, -0.7631], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0248,  0.1293,  0.0605, -0.0230, -0.0059])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0077,  0.1044, -0.1590, -0.0264, -0.0007])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0038,  0.0549, -0.0732, -0.0130, -0.0003])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0038,  0.0549, -0.0732, -0.0130, -0.0003])
  [Mamba2] B (step) sample values: tensor([-0.1297, -0.0268, -0.2549, -0.2774,  0.0095])
  [Mamba2] C (step) sample values: tensor([ 0.6816,  0.3477, -0.0280, -0.2749, -0.0028])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -3.5522, -11.2450,  -2.6866,  -3.1935,  -3.1998])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0289, 0.0175, 0.0407, 0.0182, 0.0361])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9023, 0.8211, 0.8963, 0.9436, 0.8908])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0038,  0.0549, -0.0732, -0.0130, -0.0003])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.4402e-05,  2.9745e-06,  2.8292e-05,  3.0790e-05, -1.0506e-06])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0003, -0.0001, -0.0007, -0.0004,  0.0001], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0005, -0.0027, -0.0093, -0.0028, -0.0001])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0049,  0.0750, -0.1128, -0.0212, -0.0006])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0049,  0.0750, -0.1128, -0.0212, -0.0006])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0012, 0.0396, 0.0281, 0.0057, 0.0002])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0053])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.7504])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0357, 0.6992, 0.8112, 0.1730, 0.0048])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0357, 0.6992, 0.8112, 0.1730, 0.0048])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ -3.6283,  -2.1620, -10.3439,  -4.4555,   2.6698])
  [Layer 47] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 47] Output sample values after mixer: tensor([ -3.6283,  -2.1620, -10.3439,  -4.4555,   2.6698])
  [Layer 47] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 47] Residual connection sample values: tensor([ 10.1565, -25.2808, -71.5644,  12.3784, -19.8514])
[Mamba2LMHeadModel] Processing layer 48/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4123.9727])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0156])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0828, -0.1924, -0.5324,  0.0950, -0.1438])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3511, -0.2515,  0.1113, -0.4851, -1.0328])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3511, -0.2515,  0.1113, -0.4851, -1.0328])
  [Mamba2] xBC (step) sample values: tensor([-0.1890,  0.6392,  0.1633, -0.2418,  0.1535])
  [Mamba2] dt (step) sample values: tensor([ 0.1040,  1.6840, -1.1274,  0.3482, -0.0822])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.7338, -0.0176,  0.3866, -0.1890,  0.1693], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0255,  0.0641,  0.0225, -0.0510, -0.0255])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0203,  0.2840, -0.0634, -0.1173, -0.0279])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0103,  0.1620, -0.0307, -0.0552, -0.0138])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0103,  0.1620, -0.0307, -0.0552, -0.0138])
  [Mamba2] B (step) sample values: tensor([-0.1077, -0.0407,  0.0554, -0.0167, -0.0348])
  [Mamba2] C (step) sample values: tensor([-0.0796, -0.2419, -0.1147, -0.2300,  0.0659])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-54.8118, -78.5143, -47.2508,  -2.3308,  -4.2266])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0342, 0.0466, 0.0013, 0.0016, 0.0069])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.1536, 0.0257, 0.9396, 0.9964, 0.9711])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0103,  0.1620, -0.0307, -0.0552, -0.0138])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.7758e-05, -1.4270e-05,  1.9423e-05, -5.8583e-06, -1.2215e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-4.2580e-05, -1.9089e-05,  2.3341e-05, -2.6280e-06, -2.1574e-05],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 6.1161e-05,  1.6953e-03, -6.5234e-04, -8.2433e-04, -1.2356e-04])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0082,  0.1307, -0.0251, -0.0448, -0.0111])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0082,  0.1307, -0.0251, -0.0448, -0.0111])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0012, -0.0144, -0.0015,  0.0083,  0.0030])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0034])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([17.1765])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0469, -0.4635, -0.0492,  0.3163,  0.1277])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0469, -0.4635, -0.0492,  0.3163,  0.1277])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-25.5104, -16.9464, -23.8103,  26.3497,   0.2407])
  [Layer 48] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 48] Output sample values after mixer: tensor([-25.5104, -16.9464, -23.8103,  26.3497,   0.2407])
  [Layer 48] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 48] Residual connection sample values: tensor([-15.3539, -42.2271, -95.3747,  38.7281, -19.6107])
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4510.7114])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0149])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1274, -0.3874, -0.8057,  0.3337, -0.1611])
[Mamba2LMHeadModel] Final backbone norm output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Final backbone norm output sample values: tensor([-0.1274, -0.3874, -0.8057,  0.3337, -0.1611])
[Mamba2LMHeadModel] Logits shape: torch.Size([1, 1, 50288])
[Mamba2LMHeadModel] Logits sample values: tensor([ 7.0084, -6.6158,  4.3923,  5.5548,  3.2240])
 enterprise[Mamba2LMHeadModel] Forward pass input_ids shape: torch.Size([1, 1])
[Mamba2LMHeadModel] input_ids sample values: tensor([16100])
[Mamba2LMHeadModel] Embedding output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Embedding sample values: tensor([ 0.2479, -0.2267, -0.2161,  0.2469, -0.1864])
[Mamba2LMHeadModel] Processing layer 1/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0279])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([5.9832])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2629, -0.2720, -0.2367,  0.2705, -0.2007])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.0753, -0.1726,  0.0054,  0.1569,  0.9847])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.0753, -0.1726,  0.0054,  0.1569,  0.9847])
  [Mamba2] xBC (step) sample values: tensor([-0.2867,  0.3075, -0.6309,  0.1069, -0.6128])
  [Mamba2] dt (step) sample values: tensor([ 0.5928, -0.1602,  0.5683, -0.3512,  0.3780])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4551, -0.8021,  0.4046, -0.2867,  0.4114], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0810,  0.1001,  0.0997,  0.0293, -0.2529])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.3087,  0.3155,  0.3699,  0.0785, -0.5097])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1780,  0.1824,  0.2188,  0.0408, -0.1913])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1780,  0.1824,  0.2188,  0.0408, -0.1913])
  [Mamba2] B (step) sample values: tensor([ 0.2843,  0.0476, -0.2733, -0.2761,  0.0913])
  [Mamba2] C (step) sample values: tensor([-0.2244,  0.8835, -0.2742, -0.0484, -0.0933])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6180, -2.5226, -3.0473, -3.3078, -3.9090])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0164, 0.0116, 0.0159, 0.0173, 0.0106])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9580, 0.9712, 0.9526, 0.9445, 0.9593])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1780,  0.1824,  0.2188,  0.0408, -0.1913])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0008,  0.0001, -0.0008, -0.0008,  0.0003])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0032,  0.0017, -0.0044, -0.0045,  0.0010], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0966,  0.0904,  0.1191,  0.0142, -0.0933])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1645,  0.1600,  0.2025,  0.0297, -0.1662])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1645,  0.1600,  0.2025,  0.0297, -0.1662])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0064, -0.0126,  0.0005,  0.0025, -0.1192])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2458])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([2.0170])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0130, -0.0274,  0.0009,  0.0084, -0.2451])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0130, -0.0274,  0.0009,  0.0084, -0.2451])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0197,  1.6344,  0.7528, -0.6764,  0.6303])
  [Layer 1] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 1] Output sample values after mixer: tensor([ 0.0197,  1.6344,  0.7528, -0.6764,  0.6303])
  [Layer 1] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 1] Residual connection sample values: tensor([ 0.2677,  1.4077,  0.5367, -0.4294,  0.4439])
[Mamba2LMHeadModel] Processing layer 2/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.4883])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.4310])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1383,  0.5744,  0.2556, -0.2142,  0.2163])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1488, -0.3569,  0.4931, -2.1478, -2.2719])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1488, -0.3569,  0.4931, -2.1478, -2.2719])
  [Mamba2] xBC (step) sample values: tensor([-1.3569,  3.0145, -1.7533,  4.5251,  0.6146])
  [Mamba2] dt (step) sample values: tensor([0.9857, 1.4176, 0.8072, 1.1795, 2.0195])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.7518, -0.1531, -1.5585, -1.3569,  1.7751], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2116, -0.6664, -0.1973, -2.7460,  0.2004])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2414, -0.8209, -0.2078, -1.6923,  0.1873])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1062, -0.2508, -0.0931, -0.2631,  0.1024])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1062, -0.2508, -0.0931, -0.2631,  0.1024])
  [Mamba2] B (step) sample values: tensor([ 0.1413,  0.0879,  0.0397, -0.1981,  0.2081])
  [Mamba2] C (step) sample values: tensor([-0.0344, -0.2542,  0.1536, -0.0661, -0.2753])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-19.8515, -18.6852, -13.5640,  -2.4189,  -0.4662])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0162, 0.0257, 0.0467, 0.0236, 0.1063])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7244, 0.6188, 0.5307, 0.9445, 0.9516])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1062, -0.2508, -0.0931, -0.2631,  0.1024])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.4377e-04, -1.5167e-04, -6.8422e-05,  3.4179e-04, -3.5903e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.5918e-04, -1.8823e-04,  2.2100e-05,  1.6421e-04, -1.4431e-04],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0018, -0.0567, -0.0106, -0.0712,  0.0012])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0751, -0.2299, -0.0749, -0.2529,  0.0719])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0751, -0.2299, -0.0749, -0.2529,  0.0719])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0052,  0.0338, -0.0229,  0.0568, -0.0153])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([22.3170])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2117])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0014,  0.0043, -0.0065,  0.0065, -0.0044])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0014,  0.0043, -0.0065,  0.0065, -0.0044])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0159, -0.0119, -0.1136,  0.0212,  0.0233])
  [Layer 2] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 2] Output sample values after mixer: tensor([ 0.0159, -0.0119, -0.1136,  0.0212,  0.0233])
  [Layer 2] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 2] Residual connection sample values: tensor([ 0.2836,  1.3958,  0.4231, -0.4082,  0.4672])
[Mamba2LMHeadModel] Processing layer 3/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.5120])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.3975])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1570,  0.6043,  0.2099, -0.2084,  0.2565])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4453, -1.0496, -2.4313, -2.1932,  0.0951])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4453, -1.0496, -2.4313, -2.1932,  0.0951])
  [Mamba2] xBC (step) sample values: tensor([ 0.4136, -2.4019, -0.6025,  2.8657,  0.6186])
  [Mamba2] dt (step) sample values: tensor([1.2615, 1.2145, 1.9922, 1.7474, 1.7442])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0516, -1.0487,  1.1437,  0.4136,  0.4026], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1131,  0.0135, -0.0620,  0.2108, -0.3052])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1146, -0.0058,  0.0616,  0.1985, -0.3215])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0540, -0.0029,  0.0318,  0.1090, -0.1351])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0540, -0.0029,  0.0318,  0.1090, -0.1351])
  [Mamba2] B (step) sample values: tensor([ 0.2228,  0.0241,  0.0193,  0.1646, -0.0721])
  [Mamba2] C (step) sample values: tensor([ 0.5147,  0.1130, -0.1797, -0.0781,  0.1111])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6506, -3.9939, -6.7806, -0.9419, -6.0308])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0293, 0.0671, 0.0958, 0.0371, 0.1182])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9811, 0.7650, 0.5222, 0.9657, 0.4904])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0540, -0.0029,  0.0318,  0.1090, -0.1351])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.5252e-04, -3.8145e-05, -3.0462e-05, -2.6041e-04,  1.1403e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0008, -0.0014,  0.0030, -0.0014,  0.0007], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0264,  0.2666,  0.2084, -0.0458, -0.0309])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0018,  0.2653,  0.2229,  0.0038, -0.0924])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0018,  0.2653,  0.2229,  0.0038, -0.0924])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0003, -0.0722, -0.0438, -0.0008, -0.0046])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([9.7963])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3195])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0001, -0.0351, -0.0171, -0.0005, -0.0016])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0001, -0.0351, -0.0171, -0.0005, -0.0016])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0201, -0.0241,  0.1383, -0.0451, -0.0398])
  [Layer 3] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 3] Output sample values after mixer: tensor([ 0.0201, -0.0241,  0.1383, -0.0451, -0.0398])
  [Layer 3] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 3] Residual connection sample values: tensor([ 0.3037,  1.3717,  0.5614, -0.4533,  0.4274])
[Mamba2LMHeadModel] Processing layer 4/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.5912])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.3005])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1844,  0.6306,  0.3011, -0.2514,  0.2603])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.2389,  2.5480, -0.2450, -2.5164, -1.1863])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.2389,  2.5480, -0.2450, -2.5164, -1.1863])
  [Mamba2] xBC (step) sample values: tensor([-0.0089,  0.5758, -0.7164,  0.0615, -1.1123])
  [Mamba2] dt (step) sample values: tensor([1.1485, 2.6773, 1.7705, 0.2461, 0.3535])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.3304,  1.3905,  0.4962, -0.0089, -2.6721], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0269, -0.0362,  0.0584, -0.0707,  0.1392])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1007, -0.0714,  0.0102, -0.0865,  0.4322])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0478, -0.0344,  0.0051, -0.0414,  0.2621])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0478, -0.0344,  0.0051, -0.0414,  0.2621])
  [Mamba2] B (step) sample values: tensor([ 0.3466,  0.3208, -0.1301,  0.0442,  0.0878])
  [Mamba2] C (step) sample values: tensor([ 0.7373, -0.0373, -0.0435, -0.2675,  0.5534])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.7127,  -1.2862,  -1.4870, -27.0280,  -4.0727])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0192, 0.0345, 0.0112, 0.0041, 0.0535])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9676, 0.9566, 0.9835, 0.8941, 0.8041])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0478, -0.0344,  0.0051, -0.0414,  0.2621])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.1881e-04, -2.9513e-04,  1.1971e-04, -4.0642e-05, -8.0778e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0031, -0.0023, -0.0021,  0.0006, -0.0005], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0163,  0.0605, -0.0201, -0.0478,  0.2835])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0432,  0.0411, -0.0172, -0.0710,  0.4310])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0432,  0.0411, -0.0172, -0.0710,  0.4310])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0120,  0.0971,  0.0018,  0.0134, -0.1196])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([16.5555])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2458])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0062,  0.0321,  0.0009,  0.0057, -0.0304])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0062,  0.0321,  0.0009,  0.0057, -0.0304])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0603, -0.0022,  0.2435, -0.1967, -0.0350])
  [Layer 4] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 4] Output sample values after mixer: tensor([ 0.0603, -0.0022,  0.2435, -0.1967, -0.0350])
  [Layer 4] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 4] Residual connection sample values: tensor([ 0.3641,  1.3695,  0.8049, -0.6500,  0.3923])
[Mamba2LMHeadModel] Processing layer 5/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.6419])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.2482])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2051,  0.6377,  0.4236, -0.3508,  0.2281])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-2.5754,  0.7048, -0.6703, -2.5494,  1.1895])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-2.5754,  0.7048, -0.6703, -2.5494,  1.1895])
  [Mamba2] xBC (step) sample values: tensor([-1.9022,  0.8037,  1.6341,  2.1248, -1.3119])
  [Mamba2] dt (step) sample values: tensor([2.1845, 1.5427, 0.8055, 0.2759, 0.2766])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0259, -0.7607,  1.3625, -1.9022, -0.4396], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3471, -0.2302, -0.2315,  0.0065, -0.6027])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3986, -0.2675, -0.3010, -0.0197, -0.6086])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1601, -0.1160, -0.1280, -0.0097, -0.2145])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1601, -0.1160, -0.1280, -0.0097, -0.2145])
  [Mamba2] B (step) sample values: tensor([-0.0502, -0.0500, -0.0646,  0.0619,  0.0292])
  [Mamba2] C (step) sample values: tensor([-0.1973,  0.0986, -0.0838, -0.2549, -0.0219])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.5763,  -1.0444,  -0.8388,  -5.6765, -20.4018])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0341, 0.0551, 0.0926, 0.0183, 0.0045])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9477, 0.9441, 0.9253, 0.9015, 0.9124])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1601, -0.1160, -0.1280, -0.0097, -0.2145])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0003,  0.0003,  0.0004, -0.0003, -0.0002])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 9.3200e-05,  2.9853e-05,  7.0032e-04,  3.2823e-04, -7.1910e-04],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0072,  0.0050, -0.0286, -0.0008, -0.0268])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0932, -0.0574, -0.0974, -0.0061, -0.1421])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0932, -0.0574, -0.0974, -0.0061, -0.1421])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0170, -0.0271,  0.0221,  0.0011, -0.1296])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([3.8664])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5086])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0136, -0.0221,  0.0172,  0.0009, -0.0934])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0136, -0.0221,  0.0172,  0.0009, -0.0934])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0035, -0.1650,  0.0499,  0.0904,  0.1807])
  [Layer 5] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 5] Output sample values after mixer: tensor([ 0.0035, -0.1650,  0.0499,  0.0904,  0.1807])
  [Layer 5] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 5] Residual connection sample values: tensor([ 0.3676,  1.2045,  0.8547, -0.5597,  0.5730])
[Mamba2LMHeadModel] Processing layer 6/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.7361])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.1656])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1888,  0.4788,  0.3897, -0.2637,  0.2985])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 2.8085,  0.9422, -0.2140,  1.8928, -2.1467])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 2.8085,  0.9422, -0.2140,  1.8928, -2.1467])
  [Mamba2] xBC (step) sample values: tensor([ 2.9640, -2.1713, -1.7757, -1.3649, -1.9128])
  [Mamba2] dt (step) sample values: tensor([3.2917, 1.5122, 1.1273, 1.4812, 1.4354])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1148, -0.0794,  0.1797,  2.9640, -0.3116], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3486, -0.2229, -1.2463, -0.1040, -1.2597])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3142, -0.2952, -1.3085, -0.0419, -1.1900])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1326, -0.1260, -0.2784, -0.0205, -0.2776])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1326, -0.1260, -0.2784, -0.0205, -0.2776])
  [Mamba2] B (step) sample values: tensor([ 0.0829,  0.0867, -0.1865, -0.1665,  0.0387])
  [Mamba2] C (step) sample values: tensor([ 0.2668, -0.1895, -0.2745,  0.0995,  0.2834])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9866, -8.7747, -3.3046, -2.9913, -3.3435])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2275, 0.0608, 0.2392, 0.2623, 0.1192])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7989, 0.5864, 0.4536, 0.4563, 0.6712])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1326, -0.1260, -0.2784, -0.0205, -0.2776])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0025, -0.0026,  0.0056,  0.0050, -0.0012])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0098, -0.0030, -0.0020,  0.0046,  0.0016], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0558, -0.1765, -0.2680, -0.0378, -0.2655])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0270, -0.2038, -0.3283, -0.0423, -0.3256])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0270, -0.2038, -0.3283, -0.0423, -0.3256])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0716, -0.1382,  0.0314, -0.0695,  0.0731])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([5.1864])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4391])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0604, -0.0546,  0.0118, -0.0339,  0.0252])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0604, -0.0546,  0.0118, -0.0339,  0.0252])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.8282,  0.1209, -0.3539, -0.3722, -0.2195])
  [Layer 6] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 6] Output sample values after mixer: tensor([ 0.8282,  0.1209, -0.3539, -0.3722, -0.2195])
  [Layer 6] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 6] Residual connection sample values: tensor([ 1.1958,  1.3254,  0.5009, -0.9319,  0.3535])
[Mamba2LMHeadModel] Processing layer 7/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([0.9653])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([1.0178])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.4683,  0.4311,  0.1818, -0.3341,  0.1389])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.0688, -1.8445, -2.1678,  0.0197,  0.0601])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.0688, -1.8445, -2.1678,  0.0197,  0.0601])
  [Mamba2] xBC (step) sample values: tensor([-1.8470,  0.5170, -2.3085, -1.0380,  0.3359])
  [Mamba2] dt (step) sample values: tensor([ 1.1204, -0.0076,  1.7897,  1.4165,  0.7360])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.6185, -3.4465, -2.2221, -1.8470, -0.3893], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0541,  0.1745,  0.1470, -0.0022, -0.2614])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1222,  0.1991,  0.1463,  0.0042, -0.2650])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0574,  0.1094,  0.0785,  0.0021, -0.1150])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0574,  0.1094,  0.0785,  0.0021, -0.1150])
  [Mamba2] B (step) sample values: tensor([ 0.0840, -0.0381,  0.0705, -0.0749,  0.1461])
  [Mamba2] C (step) sample values: tensor([ 0.0325, -0.1459,  0.0516, -0.1078, -0.0389])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2959, -1.1836, -0.3113, -0.1314, -1.5015])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0526, 0.0060, 0.0150, 0.0605, 0.0022])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9846, 0.9930, 0.9953, 0.9921, 0.9966])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0574,  0.1094,  0.0785,  0.0021, -0.1150])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0003,  0.0001, -0.0002,  0.0002, -0.0004])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0015,  0.0004, -0.0001,  0.0002, -0.0029], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0035,  0.0068,  0.0010, -0.0034, -0.0048])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0036,  0.0071,  0.0012, -0.0033, -0.0050])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0036,  0.0071,  0.0012, -0.0033, -0.0050])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-2.8788e-03, -1.7795e-03, -2.6107e-04, -3.3346e-05, -1.5594e-04])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0295])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.8258])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0208, -0.0072, -0.0025, -0.0002, -0.0014])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0208, -0.0072, -0.0025, -0.0002, -0.0014])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0054,  0.5142,  0.1818,  0.5313, -0.3718])
  [Layer 7] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 7] Output sample values after mixer: tensor([-0.0054,  0.5142,  0.1818,  0.5313, -0.3718])
  [Layer 7] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 7] Residual connection sample values: tensor([ 1.1904,  1.8396,  0.6826, -0.4006, -0.0184])
[Mamba2LMHeadModel] Processing layer 8/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.1825])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.9196])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.5644,  0.6827,  0.3016, -0.1761, -0.0087])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-2.0484, -1.6025,  1.5365, -3.8417, -1.6664])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-2.0484, -1.6025,  1.5365, -3.8417, -1.6664])
  [Mamba2] xBC (step) sample values: tensor([-1.4894, -0.2618, -1.2741, -0.0440,  0.5838])
  [Mamba2] dt (step) sample values: tensor([-1.0455, -0.0455,  1.1036,  0.3189, -0.9468])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.7769,  0.7703,  0.5940, -1.4894,  1.3697], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0078,  0.0164,  0.2039, -0.0091,  0.1129])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.4707, -0.0146, -0.1108, -0.0607,  0.0568])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.2897, -0.0073, -0.0523, -0.0294,  0.0292])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.2897, -0.0073, -0.0523, -0.0294,  0.0292])
  [Mamba2] B (step) sample values: tensor([-0.0489, -0.0469,  0.1423, -0.0570, -0.1531])
  [Mamba2] C (step) sample values: tensor([ 0.0888, -0.0898, -0.1614, -0.1543, -0.1891])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.6543, -0.9827, -0.5550, -3.9397, -1.8081])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0035, 0.0519, 0.0332, 0.0330, 0.0038])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9871, 0.9503, 0.9817, 0.8782, 0.9932])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.2897, -0.0073, -0.0523, -0.0294,  0.0292])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-5.0319e-05, -4.8223e-05,  1.4632e-04, -5.8591e-05, -1.5747e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0042,  0.0022,  0.0014, -0.0032, -0.0008], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0828, -0.0164, -0.0425, -0.0215, -0.0218])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.3267, -0.0225, -0.0865, -0.0463,  0.0028])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.3267, -0.0225, -0.0865, -0.0463,  0.0028])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0764,  0.0060, -0.1094,  0.0037, -0.0007])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([2.3433])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6533])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0482,  0.0049, -0.0598,  0.0032, -0.0008])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0482,  0.0049, -0.0598,  0.0032, -0.0008])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0517,  0.1664,  0.5098,  0.4467,  0.2024])
  [Layer 8] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 8] Output sample values after mixer: tensor([-0.0517,  0.1664,  0.5098,  0.4467,  0.2024])
  [Layer 8] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 8] Residual connection sample values: tensor([1.1387, 2.0059, 1.1925, 0.0461, 0.1841])
[Mamba2LMHeadModel] Processing layer 9/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.6008])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7904])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.4276, 0.6154, 0.4117, 0.0153, 0.0682])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-4.2990, -0.0438, -2.0167, -1.4562, -0.6853])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-4.2990, -0.0438, -2.0167, -1.4562, -0.6853])
  [Mamba2] xBC (step) sample values: tensor([ 0.7440, -0.6568, -1.1730,  0.2023, -0.1288])
  [Mamba2] dt (step) sample values: tensor([1.7252, 1.2044, 1.7736, 1.5693, 1.3811])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([1.5141, 2.0374, 0.2393, 0.7440, 0.4714], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1061, -0.0858, -0.2512,  0.2146, -0.2313])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0987, -0.1111, -0.3378,  0.1407, -0.2062])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0469, -0.0525, -0.1407,  0.0753, -0.0925])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0469, -0.0525, -0.1407,  0.0753, -0.0925])
  [Mamba2] B (step) sample values: tensor([-0.2214, -0.2506,  0.2951,  0.5369, -0.0046])
  [Mamba2] C (step) sample values: tensor([-0.2245, -0.1651, -0.2761, -0.2733, -0.2255])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-5.2345, -1.2161, -1.4888, -0.9523, -3.9667])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0554, 0.1198, 0.0280, 0.5024, 0.0612])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7481, 0.8644, 0.9592, 0.6198, 0.7846])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0469, -0.0525, -0.1407,  0.0753, -0.0925])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.7606e-04,  6.5185e-04, -7.6756e-04, -1.3966e-03,  1.2015e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.7846e-03,  3.5057e-03, -6.2469e-03, -9.4332e-03, -5.3277e-05],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0142, -0.0029, -0.0167,  0.0106, -0.0133])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0778, -0.0741, -0.2074,  0.1126, -0.1387])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0778, -0.0741, -0.2074,  0.1126, -0.1387])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0045,  0.0016,  0.0491, -0.0310,  0.0318])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([2.6970])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.6089])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0028,  0.0015,  0.0309, -0.0154,  0.0230])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0028,  0.0015,  0.0309, -0.0154,  0.0230])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.4394, -0.1731,  0.0831,  0.0395, -0.1734])
  [Layer 9] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 9] Output sample values after mixer: tensor([ 0.4394, -0.1731,  0.0831,  0.0395, -0.1734])
  [Layer 9] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 9] Residual connection sample values: tensor([1.5781, 1.8329, 1.2756, 0.0856, 0.0107])
[Mamba2LMHeadModel] Processing layer 10/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1.9327])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.7193])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([0.4642, 0.4506, 0.3387, 0.0225, 0.0031])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.6432,  0.0239,  0.2781, -0.9894, -0.0376])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.6432,  0.0239,  0.2781, -0.9894, -0.0376])
  [Mamba2] xBC (step) sample values: tensor([0.4866, 0.6835, 0.6735, 0.0410, 0.8822])
  [Mamba2] dt (step) sample values: tensor([ 0.6575, -0.2018,  0.3100,  1.0949,  1.0771])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.7226, 2.0156, 0.3930, 0.4866, 0.1137], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0611, -0.2809,  0.0811, -0.0066,  0.1375])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0227, -0.3680, -0.0228, -0.0924,  0.0780])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0115, -0.1505, -0.0113, -0.0441,  0.0405])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0115, -0.1505, -0.0113, -0.0441,  0.0405])
  [Mamba2] B (step) sample values: tensor([ 0.0912,  0.1854,  0.0529,  0.0089, -0.0841])
  [Mamba2] C (step) sample values: tensor([-0.0327,  0.5843, -0.2304,  0.0098,  0.1163])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.7155, -1.4068, -0.3534, -2.0102, -0.4653])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0008, 0.0029, 0.1269, 0.0054, 0.0221])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9969, 0.9959, 0.9562, 0.9891, 0.9898])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0115, -0.1505, -0.0113, -0.0441,  0.0405])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 8.8728e-07,  1.8031e-06,  5.1451e-07,  8.6529e-08, -8.1760e-07])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.3089e-05,  3.5663e-05,  3.3414e-05,  5.5246e-05,  6.6371e-06],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0002, -0.0043,  0.0004, -0.0008,  0.0033])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0027, -0.0374, -0.0021, -0.0105,  0.0122])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0027, -0.0374, -0.0021, -0.0105,  0.0122])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0012, -0.0005, -0.0003,  0.0028, -0.0002])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0246])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.3709])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0110, -0.0021, -0.0024,  0.0240, -0.0018])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0110, -0.0021, -0.0024,  0.0240, -0.0018])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1544, -0.3156,  0.2760, -0.1287,  0.2238])
  [Layer 10] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 10] Output sample values after mixer: tensor([-0.1544, -0.3156,  0.2760, -0.1287,  0.2238])
  [Layer 10] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 10] Residual connection sample values: tensor([ 1.4237,  1.5173,  1.5516, -0.0431,  0.2345])
[Mamba2LMHeadModel] Processing layer 11/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2.7886])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.5988])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.3919,  0.3398,  0.3816, -0.0103,  0.0617])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.0826, -2.1334, -1.1931, -0.6531,  1.3748])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.0826, -2.1334, -1.1931, -0.6531,  1.3748])
  [Mamba2] xBC (step) sample values: tensor([ 1.1340, -0.4056, -2.5274,  1.6859,  0.9376])
  [Mamba2] dt (step) sample values: tensor([2.5355, 3.9766, 1.1648, 2.0705, 2.0892])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.5231,  0.8702,  0.0569,  1.1340,  0.5698], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.3126, -0.0893,  0.5599, -0.1967,  0.2043])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.3268, -0.4470,  0.6565, -0.1846,  0.2274])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1369, -0.1744,  0.4323, -0.0838,  0.1266])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1369, -0.1744,  0.4323, -0.0838,  0.1266])
  [Mamba2] B (step) sample values: tensor([-0.2665,  0.0122, -0.2371, -0.0475, -0.0160])
  [Mamba2] C (step) sample values: tensor([-0.0315, -0.0685, -0.2621, -0.2267,  0.1110])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.3116, -0.0902, -1.5786, -0.2096, -0.6694])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2022, 0.9949, 0.3424, 0.2974, 0.0587])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9389, 0.9142, 0.5825, 0.9396, 0.9615])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1369, -0.1744,  0.4323, -0.0838,  0.1266])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0074, -0.0003,  0.0066,  0.0013,  0.0004])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0504, -0.0405,  0.0568,  0.0118, -0.0437], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.1409, -0.2427,  0.2650, -0.0748,  0.0271])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1911, -0.3067,  0.4236, -0.1056,  0.0736])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1911, -0.3067,  0.4236, -0.1056,  0.0736])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0523,  0.0693, -0.1176,  0.0236,  0.0807])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([1.4007])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([0.8449])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0543,  0.0705, -0.0849,  0.0555,  0.0624])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0543,  0.0705, -0.0849,  0.0555,  0.0624])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2752, -0.1666,  0.4648, -0.7367, -0.4834])
  [Layer 11] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 11] Output sample values after mixer: tensor([ 0.2752, -0.1666,  0.4648, -0.7367, -0.4834])
  [Layer 11] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 11] Residual connection sample values: tensor([ 1.6988,  1.3507,  2.0165, -0.7798, -0.2489])
[Mamba2LMHeadModel] Processing layer 12/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([4.2558])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4847])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.3402,  0.2244,  0.3527, -0.1355, -0.0478])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.1664, -1.3689, -2.5093,  0.3612, -0.2039])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.1664, -1.3689, -2.5093,  0.3612, -0.2039])
  [Mamba2] xBC (step) sample values: tensor([-0.3046,  1.7690,  3.5048, -2.8266, -0.0103])
  [Mamba2] dt (step) sample values: tensor([1.5125, 1.9355, 1.4245, 1.0513, 1.8246])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6395,  0.3947, -0.8605, -0.3046,  0.3757], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0572, -0.4429,  0.1243, -0.2956, -0.0026])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1002, -0.4300,  0.0895, -0.3253,  0.0100])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0476, -0.1695,  0.0467, -0.1364,  0.0050])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0476, -0.1695,  0.0467, -0.1364,  0.0050])
  [Mamba2] B (step) sample values: tensor([ 0.0333, -0.0882, -0.0703, -0.0550, -0.1121])
  [Mamba2] C (step) sample values: tensor([-0.2564, -0.2426, -0.0864, -0.2545, -0.1450])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2412, -0.7694, -1.9975, -1.2368, -1.0181])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1792, 0.3944, 0.1076, 0.2456, 0.4062])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8006, 0.7383, 0.8066, 0.7380, 0.6613])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0476, -0.1695,  0.0467, -0.1364,  0.0050])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0003,  0.0008,  0.0006,  0.0005,  0.0010])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0016,  0.0071, -0.0171,  0.0052, -0.0009], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0024, -0.0061,  0.0023, -0.0034, -0.0004])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0366, -0.1280,  0.0359, -0.1016,  0.0032])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0366, -0.1280,  0.0359, -0.1016,  0.0032])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0326,  0.0355, -0.0068, -0.0216, -0.0003])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.2501])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([1.9996])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1169,  0.0840, -0.0121, -0.0442, -0.0009])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1169,  0.0840, -0.0121, -0.0442, -0.0009])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.1881, -0.2233, -0.3085,  0.3151,  0.6217])
  [Layer 12] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 12] Output sample values after mixer: tensor([-0.1881, -0.2233, -0.3085,  0.3151,  0.6217])
  [Layer 12] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 12] Residual connection sample values: tensor([ 1.5108,  1.1274,  1.7079, -0.4647,  0.3728])
[Mamba2LMHeadModel] Processing layer 13/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([5.1826])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.4393])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2685,  0.1734,  0.2801, -0.0717,  0.0672])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-3.5997,  0.5870, -0.1104,  0.6900,  0.4398])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-3.5997,  0.5870, -0.1104,  0.6900,  0.4398])
  [Mamba2] xBC (step) sample values: tensor([ 0.1574,  0.5123, -1.3103, -0.6686, -1.6151])
  [Mamba2] dt (step) sample values: tensor([1.5698, 1.2215, 1.5289, 0.8472, 1.8777])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6495, -0.5729,  0.2348,  0.1574, -0.2188], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0111, -0.0490,  0.0127, -0.1378, -0.2584])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2536, -0.1589, -0.0078, -0.1386, -0.2823])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1108, -0.0731, -0.0039, -0.0645, -0.1214])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1108, -0.0731, -0.0039, -0.0645, -0.1214])
  [Mamba2] B (step) sample values: tensor([ 0.0293,  0.1731, -0.0921,  0.5205,  0.0627])
  [Mamba2] C (step) sample values: tensor([ 0.0892, -0.2643, -0.1238,  0.3926,  0.2440])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3103, -1.7871, -0.8606, -1.8811, -0.5252])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0453, 0.0327, 0.1657, 0.1057, 0.1098])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9423, 0.9432, 0.8671, 0.8197, 0.9440])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1108, -0.0731, -0.0039, -0.0645, -0.1214])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0001, -0.0009,  0.0005, -0.0026, -0.0003])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0015, -0.0048,  0.0025, -0.0442, -0.0023], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0679, -0.0018,  0.0057, -0.0135,  0.0188])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0727, -0.0050,  0.0055, -0.0163,  0.0136])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0727, -0.0050,  0.0055, -0.0163,  0.0136])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0070, -0.0019, -0.0003, -0.0075,  0.0036])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0947])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.2496])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0307, -0.0027, -0.0017, -0.0509,  0.0094])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0307, -0.0027, -0.0017, -0.0509,  0.0094])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0164,  0.2129,  0.2895,  0.0863, -0.3750])
  [Layer 13] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 13] Output sample values after mixer: tensor([ 0.0164,  0.2129,  0.2895,  0.0863, -0.3750])
  [Layer 13] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 13] Residual connection sample values: tensor([ 1.5272,  1.3403,  1.9974, -0.3784, -0.0022])
[Mamba2LMHeadModel] Processing layer 14/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([6.4362])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3942])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2102,  0.1620,  0.2545, -0.0453, -0.0003])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2715, -0.8880, -0.4354, -1.4011, -0.0812])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2715, -0.8880, -0.4354, -1.4011, -0.0812])
  [Mamba2] xBC (step) sample values: tensor([-3.0996,  0.9495, -1.7110, -0.5546, -1.2242])
  [Mamba2] dt (step) sample values: tensor([0.3677, 0.5037, 1.1465, 1.3008, 1.1959])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.2765, -1.3516, -1.2849, -3.0996, -0.1006], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.7682, -0.3054,  0.2549, -0.1782,  0.1907])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.8078, -0.3466,  0.1940, -0.2410,  0.2272])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.2491, -0.1436,  0.1064, -0.1060,  0.1265])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.2491, -0.1436,  0.1064, -0.1060,  0.1265])
  [Mamba2] B (step) sample values: tensor([-0.0544, -0.0468,  0.0137,  0.0132,  0.0772])
  [Mamba2] C (step) sample values: tensor([-0.2164, -0.0097, -0.0250,  0.0064, -0.0568])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.3184, -0.7621, -2.6670, -5.1836, -2.8487])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0566, 0.0198, 0.2363, 0.0594, 0.0452])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7831, 0.9850, 0.5325, 0.7348, 0.8791])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.2491, -0.1436,  0.1064, -0.1060,  0.1265])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0008,  0.0007, -0.0002, -0.0002, -0.0011])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0030,  0.0012, -0.0021,  0.0022, -0.0005], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0140, -0.0086,  0.0057, -0.0063,  0.0071])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.1146, -0.0667,  0.0487, -0.0492,  0.0582])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.1146, -0.0667,  0.0487, -0.0492,  0.0582])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0135,  0.0173, -0.0083,  0.0136, -0.0023])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0217])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.7869])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0996,  0.0743, -0.0520,  0.1196, -0.0231])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0996,  0.0743, -0.0520,  0.1196, -0.0231])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.3324,  0.0071,  0.4245, -0.2830,  1.2428])
  [Layer 14] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 14] Output sample values after mixer: tensor([-0.3324,  0.0071,  0.4245, -0.2830,  1.2428])
  [Layer 14] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 14] Residual connection sample values: tensor([ 1.1948,  1.3474,  2.4219, -0.6614,  1.2406])
[Mamba2LMHeadModel] Processing layer 15/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([9.5957])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.3228])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1351,  0.1296,  0.2518, -0.0644,  0.1344])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.1688,  1.3513, -0.5580,  0.3072, -0.2669])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.1688,  1.3513, -0.5580,  0.3072, -0.2669])
  [Mamba2] xBC (step) sample values: tensor([ 0.5297, -0.4482,  0.6184,  0.5536,  0.6198])
  [Mamba2] dt (step) sample values: tensor([0.2594, 0.5534, 1.0237, 0.3835, 0.4273])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0531, -0.1941, -0.0449,  0.5297, -0.7318], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0260,  0.1000, -0.1281, -0.1181, -0.0364])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0634,  0.0931, -0.1528, -0.1359, -0.0618])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0307,  0.0487, -0.0706, -0.0633, -0.0299])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0307,  0.0487, -0.0706, -0.0633, -0.0299])
  [Mamba2] B (step) sample values: tensor([-0.0337, -0.0014,  0.0141,  0.0111, -0.0179])
  [Mamba2] C (step) sample values: tensor([ 0.1381,  0.0783, -0.0221,  0.1670, -0.0403])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.2782, -0.6808, -2.7209, -0.1126, -3.8484])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0025, 0.0274, 0.0416, 0.0084, 0.0353])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9993, 0.9815, 0.8931, 0.9991, 0.8730])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0307,  0.0487, -0.0706, -0.0633, -0.0299])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.5940e-06,  1.0613e-07, -1.0858e-06, -8.5222e-07,  1.3785e-06])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-4.9380e-05,  1.3533e-05, -2.2116e-05, -1.3897e-05, -8.2662e-06],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 4.1822e-05, -1.3880e-05,  4.1547e-06,  1.2303e-05,  3.5190e-05])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0052,  0.0083, -0.0120, -0.0108, -0.0051])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0052,  0.0083, -0.0120, -0.0108, -0.0051])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0005,  0.0089,  0.0024, -0.0019,  0.0006])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0021])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([21.5445])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0106,  0.2593,  0.0549, -0.0499,  0.0112])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0106,  0.2593,  0.0549, -0.0499,  0.0112])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.7868,  0.8029,  0.7724, -0.7273,  0.0264])
  [Layer 15] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 15] Output sample values after mixer: tensor([ 1.7868,  0.8029,  0.7724, -0.7273,  0.0264])
  [Layer 15] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 15] Residual connection sample values: tensor([ 2.9816,  2.1503,  3.1943, -1.3887,  1.2670])
[Mamba2LMHeadModel] Processing layer 16/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([14.4820])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2628])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.3057,  0.1843,  0.3000, -0.1195,  0.1248])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7388, -0.6874,  0.8443, -0.7733, -0.6936])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7388, -0.6874,  0.8443, -0.7733, -0.6936])
  [Mamba2] xBC (step) sample values: tensor([ 1.0122,  0.3080, -1.0101, -0.3098, -0.7099])
  [Mamba2] dt (step) sample values: tensor([1.3201, 0.7124, 1.2488, 0.8972, 1.4178])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.6475, 0.7791, 0.2722, 1.0122, 0.0963], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2506,  0.0471, -0.2162,  0.0834, -0.2378])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2145,  0.0060, -0.2294, -0.0091, -0.2799])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1187,  0.0030, -0.1016, -0.0045, -0.1205])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1187,  0.0030, -0.1016, -0.0045, -0.1205])
  [Mamba2] B (step) sample values: tensor([ 0.0462,  0.2635,  0.0916,  0.1516, -0.0273])
  [Mamba2] C (step) sample values: tensor([-0.0655, -0.0407, -0.1585,  0.8881, -0.1206])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6906, -0.1348, -1.3129, -3.7740, -1.2635])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1989, 0.1338, 0.1606, 0.1714, 0.0930])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.5856, 0.9821, 0.8099, 0.5238, 0.8891])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1187,  0.0030, -0.1016, -0.0045, -0.1205])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0011,  0.0062,  0.0022,  0.0036, -0.0006])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0028,  0.0054,  0.0028,  0.0032,  0.0014], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0415, -0.0088, -0.0211,  0.0107, -0.0358])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1179, -0.0068, -0.0865,  0.0078, -0.1133])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1179, -0.0068, -0.0865,  0.0078, -0.1133])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0282,  0.0016, -0.0511, -0.0019,  0.0262])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0642])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([3.9472])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1429,  0.0062, -0.2438, -0.0081,  0.1144])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1429,  0.0062, -0.2438, -0.0081,  0.1144])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.2317, -0.3856, -0.4036,  0.4602, -0.1380])
  [Layer 16] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 16] Output sample values after mixer: tensor([ 0.2317, -0.3856, -0.4036,  0.4602, -0.1380])
  [Layer 16] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 16] Residual connection sample values: tensor([ 3.2134,  1.7647,  2.7907, -0.9285,  1.1290])
[Mamba2LMHeadModel] Processing layer 17/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([18.4481])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2328])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2893,  0.1335,  0.2238, -0.0689,  0.0978])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1123, -0.3419, -0.1029, -0.3779, -0.3187])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1123, -0.3419, -0.1029, -0.3779, -0.3187])
  [Mamba2] xBC (step) sample values: tensor([ 0.0924, -0.0353, -0.3203,  0.3222, -0.7980])
  [Mamba2] dt (step) sample values: tensor([ 0.2325, -0.1057,  0.2100,  1.7158,  0.4494])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.4684, -0.3540, -1.1873,  0.0924, -0.7466], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0281,  0.0260,  0.0614, -0.0890,  0.1389])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0599, -0.0002,  0.0471, -0.0944,  0.1515])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-2.9055e-02, -9.5000e-05,  2.4082e-02, -4.4976e-02,  8.1491e-02])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-2.9055e-02, -9.5000e-05,  2.4082e-02, -4.4976e-02,  8.1491e-02])
  [Mamba2] B (step) sample values: tensor([-0.1885,  0.0233, -0.1736, -0.1368,  0.0452])
  [Mamba2] C (step) sample values: tensor([-0.0252, -0.0668,  0.0383, -0.0439, -0.0580])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -1.1571, -11.4668, -14.2150,  -0.1286, -14.2428])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0006, 0.0092, 0.0266, 0.1161, 0.0110])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9993, 0.8995, 0.6853, 0.9852, 0.8544])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-2.9055e-02, -9.5000e-05,  2.4082e-02, -4.4976e-02,  8.1491e-02])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.5466e-06, -4.3844e-07,  3.2667e-06,  2.5754e-06, -8.5071e-07])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-5.1098e-05,  7.5593e-05,  1.0326e-04, -2.6103e-04, -2.9564e-06],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 2.5168e-04, -7.2049e-05,  2.8078e-04,  1.0152e-04, -1.7994e-04])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0185, -0.0001,  0.0158, -0.0289,  0.0524])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0185, -0.0001,  0.0158, -0.0289,  0.0524])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 9.8001e-04,  1.8933e-05, -7.7138e-04,  4.4415e-03, -7.0280e-03])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0218])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.7677])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0103,  0.0002, -0.0075,  0.0527, -0.0837])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0103,  0.0002, -0.0075,  0.0527, -0.0837])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.5811,  0.5476, -0.0663,  0.3224,  1.4715])
  [Layer 17] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 17] Output sample values after mixer: tensor([ 0.5811,  0.5476, -0.0663,  0.3224,  1.4715])
  [Layer 17] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 17] Residual connection sample values: tensor([ 3.7945,  2.3124,  2.7244, -0.6061,  2.6005])
[Mamba2LMHeadModel] Processing layer 18/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([22.9555])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.2087])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2742,  0.1413,  0.1760, -0.0368,  0.1806])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0827,  0.9874, -0.0224, -0.4781,  0.5207])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0827,  0.9874, -0.0224, -0.4781,  0.5207])
  [Mamba2] xBC (step) sample values: tensor([-0.9715, -0.8448, -0.1518,  0.5474,  1.7617])
  [Mamba2] dt (step) sample values: tensor([0.8622, 1.0600, 0.5444, 1.5022, 1.5708])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0258, -0.9200, -0.4058, -0.9715,  0.6980], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2110,  0.4981,  0.0626,  0.0326,  0.4080])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2210,  0.2327,  0.3424,  0.0188,  0.3659])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0983,  0.1298,  0.2002,  0.0095,  0.2161])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0983,  0.1298,  0.2002,  0.0095,  0.2161])
  [Mamba2] B (step) sample values: tensor([ 0.0781, -0.0157,  0.0998,  0.0989,  0.1796])
  [Mamba2] C (step) sample values: tensor([-0.2777, -0.0635, -0.1368,  0.0393, -0.1036])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3011, -1.4686, -1.2083, -1.2129, -2.5875])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2133, 0.1500, 0.1234, 0.2969, 0.1911])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7577, 0.8022, 0.8615, 0.6976, 0.6099])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0983,  0.1298,  0.2002,  0.0095,  0.2161])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0016,  0.0003, -0.0021, -0.0021, -0.0038])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0022,  0.0037,  0.0028, -0.0057, -0.0039], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0281, -0.0280,  0.0883, -0.0292,  0.0269])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0471, -0.0029,  0.1270, -0.0273,  0.0686])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0471, -0.0029,  0.1270, -0.0273,  0.0686])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0019, -0.0021, -0.0014,  0.0050,  0.0224])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0176])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.5259])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0184, -0.0086, -0.0104,  0.0473,  0.3333])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0184, -0.0086, -0.0104,  0.0473,  0.3333])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2810, -0.6171,  0.0225,  0.0194, -0.4878])
  [Layer 18] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 18] Output sample values after mixer: tensor([-0.2810, -0.6171,  0.0225,  0.0194, -0.4878])
  [Layer 18] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 18] Residual connection sample values: tensor([ 3.5135,  1.6953,  2.7469, -0.5867,  2.1128])
[Mamba2LMHeadModel] Processing layer 19/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([26.0376])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1960])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2348,  0.0978,  0.1714, -0.0337,  0.1409])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5063, -0.0229,  0.5588, -1.1426,  0.1550])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5063, -0.0229,  0.5588, -1.1426,  0.1550])
  [Mamba2] xBC (step) sample values: tensor([ 0.5976,  0.1172, -0.0502,  0.2832,  0.3605])
  [Mamba2] dt (step) sample values: tensor([0.6419, 1.0868, 1.1983, 0.8685, 1.1506])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0258, -1.3337,  0.1269,  0.5976, -0.4758], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0501,  0.0308, -0.0171,  0.0437, -0.0849])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0145,  0.0065, -0.0221,  0.0011, -0.1178])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0073,  0.0033, -0.0109,  0.0006, -0.0554])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0073,  0.0033, -0.0109,  0.0006, -0.0554])
  [Mamba2] B (step) sample values: tensor([-0.0678, -0.2650, -0.1813,  0.0023, -0.0425])
  [Mamba2] C (step) sample values: tensor([-0.2334, -0.0089, -0.1052, -0.2438, -0.2289])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9436, -1.8179, -2.0862, -1.0006, -0.9650])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1011, 0.0831, 0.0746, 0.1181, 0.2120])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8216, 0.8599, 0.8558, 0.8886, 0.8150])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0073,  0.0033, -0.0109,  0.0006, -0.0554])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-4.9872e-05, -1.9490e-04, -1.3338e-04,  1.7227e-06, -3.1264e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0013, -0.0093, -0.0003, -0.0022, -0.0008], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0059, -0.0038, -0.0011,  0.0005, -0.0003])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0051, -0.0034, -0.0023,  0.0006, -0.0065])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0051, -0.0034, -0.0023,  0.0006, -0.0065])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 9.6513e-04,  3.8798e-05, -8.1205e-04, -1.5789e-04, -5.4202e-04])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0010])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([31.4386])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0367,  0.0015, -0.0416, -0.0059, -0.0289])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0367,  0.0015, -0.0416, -0.0059, -0.0289])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.1710, -0.0591, -0.2765,  0.0609,  0.4177])
  [Layer 19] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 19] Output sample values after mixer: tensor([ 0.1710, -0.0591, -0.2765,  0.0609,  0.4177])
  [Layer 19] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 19] Residual connection sample values: tensor([ 3.6845,  1.6362,  2.4704, -0.5258,  2.5304])
[Mamba2LMHeadModel] Processing layer 20/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([30.5340])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1810])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2577,  0.0981,  0.1586, -0.0312,  0.1716])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 1.3625, -0.1631,  0.2343,  0.1283, -0.0910])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 1.3625, -0.1631,  0.2343,  0.1283, -0.0910])
  [Mamba2] xBC (step) sample values: tensor([ 0.4870,  0.5880, -0.8158, -0.1669, -0.4217])
  [Mamba2] dt (step) sample values: tensor([1.3800, 1.3109, 1.7322, 1.4136, 1.3503])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.0375, 0.6735, 0.5232, 0.4870, 0.4224], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1252,  0.0941, -0.0088, -0.1095,  0.0459])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1637,  0.1027,  0.0577, -0.1283,  0.0184])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0752,  0.0540,  0.0297, -0.0600,  0.0093])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0752,  0.0540,  0.0297, -0.0600,  0.0093])
  [Mamba2] B (step) sample values: tensor([0.1344, 0.2883, 0.0523, 0.2438, 0.3030])
  [Mamba2] C (step) sample values: tensor([ 0.0620, -0.1765,  0.1728, -0.0910,  0.6556])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.6216, -5.0389, -1.2056, -1.6435, -1.3345])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1115, 0.0415, 0.0485, 0.1771, 0.1119])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8346, 0.8114, 0.9432, 0.7474, 0.8613])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0752,  0.0540,  0.0297, -0.0600,  0.0093])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0011, -0.0024, -0.0004, -0.0020, -0.0025])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0003, -0.0070,  0.0008, -0.0017, -0.0020], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0078,  0.0204, -0.0015, -0.0338,  0.0207])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0084,  0.0208, -0.0012, -0.0343,  0.0207])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0084,  0.0208, -0.0012, -0.0343,  0.0207])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0091, -0.0016, -0.0002, -0.0023, -0.0009])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0058])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.0990])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1589, -0.0291, -0.0041, -0.0444, -0.0153])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1589, -0.0291, -0.0041, -0.0444, -0.0153])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.5379,  1.0921,  0.3962, -0.4641,  0.4815])
  [Layer 20] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 20] Output sample values after mixer: tensor([ 1.5379,  1.0921,  0.3962, -0.4641,  0.4815])
  [Layer 20] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 20] Residual connection sample values: tensor([ 5.2224,  2.7283,  2.8667, -0.9899,  3.0120])
[Mamba2LMHeadModel] Processing layer 21/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([32.9793])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1741])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2666,  0.1264,  0.1260, -0.0420,  0.1438])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.3251,  0.0411,  0.2010,  0.0573, -0.5079])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.3251,  0.0411,  0.2010,  0.0573, -0.5079])
  [Mamba2] xBC (step) sample values: tensor([ 0.7433,  0.3615, -0.9583,  0.1030, -0.3261])
  [Mamba2] dt (step) sample values: tensor([0.7677, 3.3535, 0.8252, 1.0130, 1.6152])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0051,  1.1839, -0.1865,  0.7433,  0.5011], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1152,  0.0790,  0.1302, -0.0262,  0.0590])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1465,  0.0489,  0.1451, -0.0313,  0.0869])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0679,  0.0251,  0.0778, -0.0154,  0.0453])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0679,  0.0251,  0.0778, -0.0154,  0.0453])
  [Mamba2] B (step) sample values: tensor([-0.0088, -0.0024,  0.0376, -0.0359, -0.0870])
  [Mamba2] C (step) sample values: tensor([-0.0949, -0.0645, -0.0538, -0.0611, -0.0938])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-3.2092, -0.0434, -3.8147, -6.6624, -0.0228])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1217, 0.1147, 0.0674, 0.0652, 0.0389])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6767, 0.9950, 0.7732, 0.6478, 0.9991])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0679,  0.0251,  0.0778, -0.0154,  0.0453])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 7.2855e-05,  2.0000e-05, -3.1027e-04,  2.9692e-04,  7.1866e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 5.1128e-05,  1.3792e-05, -4.2644e-04, -2.2846e-05,  3.3021e-04],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0005, -0.0006, -0.0007, -0.0001, -0.0004])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0115,  0.0038,  0.0130, -0.0028,  0.0076])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0115,  0.0038,  0.0130, -0.0028,  0.0076])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 1.5616e-03,  8.0514e-05,  1.4345e-03, -8.3117e-05, -1.4468e-03])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0002])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([71.9448])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.1423,  0.0067,  0.1595, -0.0078, -0.1220])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.1423,  0.0067,  0.1595, -0.0078, -0.1220])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0969, -0.2820,  0.6381,  0.0803,  0.6049])
  [Layer 21] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 21] Output sample values after mixer: tensor([ 0.0969, -0.2820,  0.6381,  0.0803,  0.6049])
  [Layer 21] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 21] Residual connection sample values: tensor([ 5.3192,  2.4463,  3.5048, -0.9096,  3.6168])
[Mamba2LMHeadModel] Processing layer 22/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([37.8379])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1626])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.3988,  0.1545,  0.2345, -0.0561,  0.2542])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3647,  0.2091,  0.0107,  0.2681, -0.8452])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3647,  0.2091,  0.0107,  0.2681, -0.8452])
  [Mamba2] xBC (step) sample values: tensor([ 0.3453, -0.8195,  0.3689,  0.1713, -0.9777])
  [Mamba2] dt (step) sample values: tensor([0.8959, 0.6001, 0.9379, 1.1368, 1.4880])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6780, -0.1725,  0.2034,  0.3453,  0.0390], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0881, -0.1702,  0.0539, -0.0226, -0.3771])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0404, -0.2490,  0.3732, -0.0636, -0.4428])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0206, -0.1091,  0.2210, -0.0308, -0.1732])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0206, -0.1091,  0.2210, -0.0308, -0.1732])
  [Mamba2] B (step) sample values: tensor([ 0.0153, -0.0367, -0.0792, -0.2039, -0.0684])
  [Mamba2] C (step) sample values: tensor([-0.0177, -0.0288,  0.0008, -0.0199, -0.0577])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-4.1489, -3.5006, -2.8321, -5.5396, -1.7186])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0033, 0.0727, 0.1521, 0.1368, 0.0126])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9866, 0.7754, 0.6500, 0.4686, 0.9786])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0206, -0.1091,  0.2210, -0.0308, -0.1732])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.0259e-06, -2.4682e-06, -5.3207e-06, -1.3696e-05, -4.5935e-06])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0002,  0.0003,  0.0001,  0.0004,  0.0003], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-2.5353e-03,  1.4580e-05,  4.3048e-03,  5.7218e-04, -2.4812e-03])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0025, -0.0264,  0.0578, -0.0069, -0.0444])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0025, -0.0264,  0.0578, -0.0069, -0.0444])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0005, -0.0030,  0.0003, -0.0010,  0.0113])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0024])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([20.3399])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0036, -0.0581,  0.0034, -0.0280,  0.1982])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0036, -0.0581,  0.0034, -0.0280,  0.1982])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.4061, -0.0507,  0.0432, -0.7884, -1.0048])
  [Layer 22] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 22] Output sample values after mixer: tensor([ 1.4061, -0.0507,  0.0432, -0.7884, -1.0048])
  [Layer 22] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 22] Residual connection sample values: tensor([ 6.7254,  2.3956,  3.5480, -1.6980,  2.6121])
[Mamba2LMHeadModel] Processing layer 23/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([45.6351])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1480])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.3220,  0.0987,  0.1555, -0.0703,  0.1212])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0938, -0.0248, -0.4957, -0.3382, -0.1269])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0938, -0.0248, -0.4957, -0.3382, -0.1269])
  [Mamba2] xBC (step) sample values: tensor([-0.3297, -0.6132,  0.0022, -0.5117, -1.2142])
  [Mamba2] dt (step) sample values: tensor([1.1205, 0.6845, 1.8634, 0.8701, 0.2458])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5952,  1.0781, -0.1570, -0.3297, -0.4787], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1288,  0.5123, -0.0109, -0.0948,  0.4904])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1511,  0.4792, -0.0222, -0.0970,  0.4410])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0699,  0.2959, -0.0110, -0.0461,  0.2684])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0699,  0.2959, -0.0110, -0.0461,  0.2684])
  [Mamba2] B (step) sample values: tensor([ 0.0040,  0.0587,  0.2508, -0.0103, -0.1385])
  [Mamba2] C (step) sample values: tensor([-0.1062,  0.0499,  0.3366,  0.0344, -0.0324])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0811, -3.7998, -0.0826, -0.4878, -1.4532])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0359, 0.0837, 0.0651, 0.0035, 0.0013])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9971, 0.7276, 0.9946, 0.9983, 0.9981])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0699,  0.2959, -0.0110, -0.0461,  0.2684])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-9.9990e-06, -1.4719e-04, -6.2896e-04,  2.5873e-05,  3.4746e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 7.5865e-04,  5.1650e-04, -2.0809e-03,  3.3452e-04, -4.9087e-05],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0018,  0.0039,  0.0005, -0.0016,  0.0030])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0003, -0.0024,  0.0008, -0.0006, -0.0027])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0003, -0.0024,  0.0008, -0.0006, -0.0027])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 1.4017e-05,  2.9230e-05, -1.4220e-04,  8.6952e-05,  1.6288e-04])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0004])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([47.3605])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0030,  0.0008, -0.0067,  0.0066,  0.0360])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0030,  0.0008, -0.0067,  0.0066,  0.0360])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.2806, -0.0288,  0.7562, -0.5494, -0.7495])
  [Layer 23] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 23] Output sample values after mixer: tensor([-1.2806, -0.0288,  0.7562, -0.5494, -0.7495])
  [Layer 23] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 23] Residual connection sample values: tensor([ 5.4447,  2.3668,  4.3041, -2.2474,  1.8625])
[Mamba2LMHeadModel] Processing layer 24/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([54.7681])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1351])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1958,  0.0812,  0.1427, -0.0719,  0.0649])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.4180, -0.2026,  0.6363,  0.0564, -0.1106])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.4180, -0.2026,  0.6363,  0.0564, -0.1106])
  [Mamba2] xBC (step) sample values: tensor([-0.0574,  0.3181, -1.2551, -0.1999, -1.2039])
  [Mamba2] dt (step) sample values: tensor([2.1052, 0.0348, 0.3350, 1.8211, 0.7117])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.1292, -0.4203, -0.0107, -0.0574,  0.3148], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0065,  0.1230, -0.1758, -0.0421, -0.5600])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0032,  0.1230, -0.1798, -0.0437, -0.5648])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0016,  0.0653, -0.0818, -0.0214, -0.2047])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0016,  0.0653, -0.0818, -0.0214, -0.2047])
  [Mamba2] B (step) sample values: tensor([ 0.0159,  0.0264, -0.0057,  0.0475, -0.0642])
  [Mamba2] C (step) sample values: tensor([-0.0881, -0.2685, -0.2729, -0.2707,  0.0377])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0742, -3.4497, -3.2885, -0.1609, -2.6945])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0443, 0.0301, 0.0633, 0.0280, 0.0435])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9967, 0.9014, 0.8120, 0.9955, 0.8893])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0016,  0.0653, -0.0818, -0.0214, -0.2047])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.1199e-06,  1.8655e-06, -4.0273e-07,  3.3556e-06, -4.5343e-06])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.3839e-04,  5.7645e-04, -2.7603e-05, -1.0729e-04,  3.5514e-04],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0005, -0.0016,  0.0004, -0.0010, -0.0115])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0005, -0.0020,  0.0009, -0.0009, -0.0104])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0005, -0.0020,  0.0009, -0.0009, -0.0104])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 1.2147e-04,  1.8155e-04,  3.6187e-04, -2.4983e-05,  5.4256e-04])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0002])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([71.2095])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0082,  0.0173,  0.0312, -0.0079,  0.1009])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0082,  0.0173,  0.0312, -0.0079,  0.1009])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2530,  0.0723,  2.1399,  1.0183, -0.0229])
  [Layer 24] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 24] Output sample values after mixer: tensor([-0.2530,  0.0723,  2.1399,  1.0183, -0.0229])
  [Layer 24] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 24] Residual connection sample values: tensor([ 5.1917,  2.4391,  6.4441, -1.2291,  1.8396])
[Mamba2LMHeadModel] Processing layer 25/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([61.8495])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1272])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1968,  0.0845,  0.2307, -0.0411,  0.0690])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5808, -0.0661,  0.0654, -0.1088,  0.1560])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5808, -0.0661,  0.0654, -0.1088,  0.1560])
  [Mamba2] xBC (step) sample values: tensor([ 0.1106, -0.2022,  0.3166,  0.7256,  0.1888])
  [Mamba2] dt (step) sample values: tensor([ 0.7437, -0.9092,  0.5156,  1.2800, -0.4784])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1142,  1.5756,  0.2158,  0.1106, -0.2667], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0972, -0.2878, -0.0177, -0.1944,  0.3788])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0998, -0.3160, -0.0291, -0.1336,  0.3730])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0474, -0.1333, -0.0143, -0.0623,  0.2209])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0474, -0.1333, -0.0143, -0.0623,  0.2209])
  [Mamba2] B (step) sample values: tensor([-0.0253,  0.0653, -0.0443, -0.0342,  0.0177])
  [Mamba2] C (step) sample values: tensor([ 0.0563,  0.0155, -0.0805, -0.0388, -0.2387])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -0.3702,  -1.5045,  -5.7210,  -0.8176, -14.6662])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.2695, 0.0026, 0.0435, 0.0251, 0.0203])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9050, 0.9961, 0.7797, 0.9797, 0.7420])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0474, -0.1333, -0.0143, -0.0623,  0.2209])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0003, -0.0008,  0.0006,  0.0004, -0.0002])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0066, -0.0038,  0.0005,  0.0040,  0.0012], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0066, -0.0092,  0.0041,  0.0016,  0.0115])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0061, -0.0105,  0.0039,  0.0009,  0.0138])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0061, -0.0105,  0.0039,  0.0009,  0.0138])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-1.2753e-03,  3.3683e-04,  1.3321e-04, -4.6885e-05,  1.1586e-03])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0003])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([59.2226])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0904,  0.0163,  0.0104, -0.0022,  0.1183])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0904,  0.0163,  0.0104, -0.0022,  0.1183])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.8059,  1.2409, -0.2449, -0.9958, -0.0133])
  [Layer 25] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 25] Output sample values after mixer: tensor([ 0.8059,  1.2409, -0.2449, -0.9958, -0.0133])
  [Layer 25] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 25] Residual connection sample values: tensor([ 5.9977,  3.6799,  6.1992, -2.2249,  1.8263])
[Mamba2LMHeadModel] Processing layer 26/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([73.7843])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1164])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2693,  0.1529,  0.2594, -0.0913,  0.0802])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.8409, -0.2763, -0.5011, -0.0730, -0.7535])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.8409, -0.2763, -0.5011, -0.0730, -0.7535])
  [Mamba2] xBC (step) sample values: tensor([ 0.6338, -1.1265, -0.3958,  1.2357, -0.9778])
  [Mamba2] dt (step) sample values: tensor([1.1060, 0.7481, 1.1011, 1.6952, 2.1737])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5639, -1.1610, -0.3228,  0.6338, -0.3627], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.4227,  0.2340, -0.1439, -0.1815,  0.1759])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.3342,  0.1779, -0.0798, -0.2084,  0.1840])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1948,  0.0969, -0.0383, -0.0934,  0.1004])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1948,  0.0969, -0.0383, -0.0934,  0.1004])
  [Mamba2] B (step) sample values: tensor([-0.0230,  0.0169,  0.0609,  0.0873,  0.0979])
  [Mamba2] C (step) sample values: tensor([-0.0762, -0.0314, -0.0160,  0.1493,  0.0203])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9595, -0.3945, -0.8420, -1.4275, -0.1466])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1626, 0.2184, 0.1774, 0.4815, 0.0925])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8555, 0.9174, 0.8612, 0.5029, 0.9865])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1948,  0.0969, -0.0383, -0.0934,  0.1004])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0007,  0.0005,  0.0019,  0.0028,  0.0031])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([0.0010, 0.0002, 0.0006, 0.0034, 0.0024], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0009,  0.0089,  0.0007, -0.0030,  0.0078])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0257,  0.0212, -0.0042, -0.0149,  0.0206])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0257,  0.0212, -0.0042, -0.0149,  0.0206])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0151, -0.0025,  0.0008,  0.0005, -0.0050])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0012])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([29.2744])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.2210, -0.0823,  0.0217,  0.0221, -0.1823])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.2210, -0.0823,  0.0217,  0.0221, -0.1823])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 0.0643,  0.2132, -0.3293, -0.5975,  1.0450])
  [Layer 26] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 26] Output sample values after mixer: tensor([ 0.0643,  0.2132, -0.3293, -0.5975,  1.0450])
  [Layer 26] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 26] Residual connection sample values: tensor([ 6.0620,  3.8931,  5.8699, -2.8224,  2.8714])
[Mamba2LMHeadModel] Processing layer 27/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([95.7579])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.1022])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2592,  0.1519,  0.2457, -0.1085,  0.1277])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.6162, -0.3893, -0.3991, -0.4823,  0.1643])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.6162, -0.3893, -0.3991, -0.4823,  0.1643])
  [Mamba2] xBC (step) sample values: tensor([-0.4049,  0.4054,  0.6466,  0.0125,  0.2889])
  [Mamba2] dt (step) sample values: tensor([1.0299, 1.0710, 0.8260, 1.5728, 1.8975])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.2342,  0.5274,  0.3117, -0.4049,  0.3215], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0098, -0.1508,  0.1550, -0.0496, -0.2016])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0358, -0.1873,  0.1450, -0.2515, -0.2314])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0176, -0.0849,  0.0777, -0.1100, -0.1024])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0176, -0.0849,  0.0777, -0.1100, -0.1024])
  [Mamba2] B (step) sample values: tensor([ 0.5989, -0.0783, -0.0652,  0.0397,  0.0347])
  [Mamba2] C (step) sample values: tensor([ 0.0736, -0.1419, -0.0629,  0.0586, -0.1575])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.3662, -1.3799, -1.8268, -2.0409, -2.3490])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1141, 0.1315, 0.1079, 0.0782, 0.2683])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8556, 0.8340, 0.8211, 0.8525, 0.5325])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0176, -0.0849,  0.0777, -0.1100, -0.1024])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-1.2008e-03,  1.5704e-04,  1.3074e-04, -7.9586e-05, -6.9545e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0020,  0.0011,  0.0018, -0.0009,  0.0003], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0064, -0.0135,  0.0115, -0.0390, -0.0150])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0082, -0.0221,  0.0194, -0.0501, -0.0254])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0082, -0.0221,  0.0194, -0.0501, -0.0254])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0018,  0.0035, -0.0031,  0.0092, -0.0023])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0060])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.9268])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0387,  0.0552, -0.0853,  0.2282, -0.0343])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0387,  0.0552, -0.0853,  0.2282, -0.0343])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.6168, -0.9649, -0.0091,  1.5136,  1.2644])
  [Layer 27] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 27] Output sample values after mixer: tensor([-0.6168, -0.9649, -0.0091,  1.5136,  1.2644])
  [Layer 27] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 27] Residual connection sample values: tensor([ 5.4452,  2.9282,  5.8609, -1.3088,  4.1358])
[Mamba2LMHeadModel] Processing layer 28/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([115.3619])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0931])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2058,  0.1036,  0.2094, -0.0455,  0.1547])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5268, -0.3108,  0.0469, -0.3803, -0.2376])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5268, -0.3108,  0.0469, -0.3803, -0.2376])
  [Mamba2] xBC (step) sample values: tensor([ 0.8156, -0.4054,  1.0494, -0.2998,  0.4421])
  [Mamba2] dt (step) sample values: tensor([1.3089, 0.9811, 0.8925, 1.1116, 1.2492])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.2787,  0.1147, -0.8093,  0.8156, -0.2187], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1959,  0.1290,  0.1858, -0.0640, -0.0658])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2537,  0.1177,  0.1721, -0.0753,  0.0389])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1108,  0.0623,  0.0935, -0.0362,  0.0198])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1108,  0.0623,  0.0935, -0.0362,  0.0198])
  [Mamba2] B (step) sample values: tensor([-2.3856e-04, -1.0886e-01, -6.8563e-02, -1.0956e-02,  2.6649e-01])
  [Mamba2] C (step) sample values: tensor([-0.1461, -0.1259,  0.4942, -0.1031,  0.2676])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.2728, -3.9978, -2.5177, -2.1714, -2.8655])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0372, 0.1133, 0.0991, 0.0512, 0.0522])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9538, 0.6357, 0.7792, 0.8948, 0.8611])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1108,  0.0623,  0.0935, -0.0362,  0.0198])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 9.8330e-07,  4.4870e-04,  2.8260e-04,  4.5158e-05, -1.0984e-03])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.4352e-04,  4.0737e-04,  4.2389e-05,  3.2648e-04, -1.2070e-03],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0007,  0.0106, -0.0007, -0.0039,  0.0041])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0247,  0.0241,  0.0195, -0.0118,  0.0084])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0247,  0.0241,  0.0195, -0.0118,  0.0084])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0048, -0.0032,  0.0005,  0.0018, -0.0009])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0015])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([25.9492])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.2594, -0.1127,  0.0158,  0.0709, -0.0334])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.2594, -0.1127,  0.0158,  0.0709, -0.0334])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.0190,  2.3496, -2.3111,  0.3790,  0.5551])
  [Layer 28] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 28] Output sample values after mixer: tensor([-1.0190,  2.3496, -2.3111,  0.3790,  0.5551])
  [Layer 28] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 28] Residual connection sample values: tensor([ 4.4261,  5.2778,  3.5498, -0.9298,  4.6909])
[Mamba2LMHeadModel] Processing layer 29/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([135.9892])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0858])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1467,  0.1673,  0.1127, -0.0284,  0.1546])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2926, -0.7487, -0.1941,  0.2857, -0.3966])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2926, -0.7487, -0.1941,  0.2857, -0.3966])
  [Mamba2] xBC (step) sample values: tensor([-1.1775,  0.5489,  1.1013, -1.0727, -1.1583])
  [Mamba2] dt (step) sample values: tensor([1.3452, 1.5682, 0.8358, 3.6386, 0.6877])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6525, -0.4257, -0.6983, -1.1775,  0.4198], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0187, -0.1541, -0.1838,  0.2291, -0.1513])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0053, -0.1886, -0.1810,  0.1687, -0.2644])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0026, -0.0854, -0.0823,  0.0915, -0.1148])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0026, -0.0854, -0.0823,  0.0915, -0.1148])
  [Mamba2] B (step) sample values: tensor([ 0.0900,  0.0376, -0.0155, -0.0198,  0.1532])
  [Mamba2] C (step) sample values: tensor([-0.2784, -0.2293, -0.1062, -0.2567,  0.0250])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8072, -2.1170, -1.9257, -0.2904, -2.0499])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0791, 0.2176, 0.1411, 0.0582, 0.1213])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8667, 0.6309, 0.7621, 0.9832, 0.7799])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0026, -0.0854, -0.0823,  0.0915, -0.1148])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.8835e-05,  7.8791e-06, -3.2507e-06, -4.1537e-06,  3.2070e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0002,  0.0003, -0.0007, -0.0003,  0.0010], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0045, -0.0020, -0.0018,  0.0225, -0.0404])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0072, -0.0893, -0.0860,  0.1160, -0.1578])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0072, -0.0893, -0.0860,  0.1160, -0.1578])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([0.0012, 0.0215, 0.0075, 0.0189, 0.0252])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0166])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.7621])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([0.0102, 0.1716, 0.0954, 0.2150, 0.2535])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([0.0102, 0.1716, 0.0954, 0.2150, 0.2535])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.0453, -1.1891,  1.4304, -2.0564, -2.5052])
  [Layer 29] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 29] Output sample values after mixer: tensor([ 1.0453, -1.1891,  1.4304, -2.0564, -2.5052])
  [Layer 29] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 29] Residual connection sample values: tensor([ 5.4714,  4.0887,  4.9802, -2.9863,  2.1857])
[Mamba2LMHeadModel] Processing layer 30/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([161.0895])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0788])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1835,  0.1350,  0.1632, -0.0923,  0.0753])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.4417, -0.9691,  0.4013,  0.1409, -0.5118])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.4417, -0.9691,  0.4013,  0.1409, -0.5118])
  [Mamba2] xBC (step) sample values: tensor([ 0.8674, -0.7242, -0.2493,  0.5172,  1.4804])
  [Mamba2] dt (step) sample values: tensor([2.5225, 1.9329, 1.7188, 2.4780, 1.8577])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.9596,  1.1811, -0.3799,  0.8674, -0.3165], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1364, -0.0992, -0.1041, -0.1017, -0.3450])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1131, -0.0855, -0.0710, -0.1198, -0.3723])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0597, -0.0409, -0.0342, -0.0563, -0.1519])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0597, -0.0409, -0.0342, -0.0563, -0.1519])
  [Mamba2] B (step) sample values: tensor([ 0.0198, -0.0280, -0.1249,  0.1564,  0.0863])
  [Mamba2] C (step) sample values: tensor([-0.2754, -0.2400, -0.2372, -0.0563,  0.0115])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0150, -0.4675, -0.4280, -0.7895, -0.4175])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0485, 0.5646, 0.9139, 0.5197, 0.5312])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9519, 0.7680, 0.6763, 0.6634, 0.8011])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0597, -0.0409, -0.0342, -0.0563, -0.1519])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.7561e-05, -8.1105e-05, -3.6234e-04,  4.5373e-04,  2.5040e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 8.5093e-04,  8.8023e-05, -1.6069e-04,  2.1093e-03,  2.0700e-04],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0034, -0.0022, -0.0031, -0.0024, -0.0059])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0770, -0.0526, -0.0453, -0.0718, -0.1931])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0770, -0.0526, -0.0453, -0.0718, -0.1931])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0133,  0.0140, -0.0109, -0.0054,  0.0370])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0183])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.3873])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1413,  0.1512, -0.0712, -0.0477,  0.2901])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1413,  0.1512, -0.0712, -0.0477,  0.2901])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.1388, -0.2669, -1.4280,  1.7559,  2.5251])
  [Layer 30] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 30] Output sample values after mixer: tensor([ 2.1388, -0.2669, -1.4280,  1.7559,  2.5251])
  [Layer 30] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 30] Residual connection sample values: tensor([ 7.6102,  3.8218,  3.5522, -1.2304,  4.7108])
[Mamba2LMHeadModel] Processing layer 31/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([180.3596])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0745])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2418,  0.1192,  0.1111, -0.0374,  0.1512])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.5745, -0.2636,  0.6144, -0.8340, -0.6212])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.5745, -0.2636,  0.6144, -0.8340, -0.6212])
  [Mamba2] xBC (step) sample values: tensor([-1.0629, -0.0369, -1.6134, -0.8846, -1.3914])
  [Mamba2] dt (step) sample values: tensor([1.7266, 1.6606, 1.6104, 0.5591, 1.1793])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-1.1307,  0.4075, -0.9861, -1.0629,  0.3566], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1896,  0.0076, -0.2065,  0.1324,  0.2492])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1901, -0.0028, -0.2055,  0.1305,  0.2439])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0860, -0.0014, -0.0922,  0.0695,  0.1368])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0860, -0.0014, -0.0922,  0.0695,  0.1368])
  [Mamba2] B (step) sample values: tensor([ 0.0586, -0.0101,  0.0401,  0.2222,  0.0405])
  [Mamba2] C (step) sample values: tensor([ 0.0627, -0.1414, -0.2755,  0.0338, -0.2018])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.9478, -3.5384, -4.7060, -2.4630, -0.9027])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1728, 0.1141, 0.0766, 0.1023, 0.1292])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.6009, 0.6678, 0.6972, 0.7772, 0.8899])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0860, -0.0014, -0.0922,  0.0695,  0.1368])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0009,  0.0002, -0.0006, -0.0033, -0.0006])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0012,  0.0011,  0.0005, -0.0008, -0.0003], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0277,  0.0058, -0.0194, -0.0137,  0.0335])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0869,  0.0049, -0.0828,  0.0341,  0.1276])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0869,  0.0049, -0.0828,  0.0341,  0.1276])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0180, -0.0006, -0.0330, -0.0086, -0.0277])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0175])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.5555])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.2677, -0.0072, -0.3823, -0.1062, -0.4044])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.2677, -0.0072, -0.3823, -0.1062, -0.4044])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.1947,  1.6394,  2.2945, -2.3622, -2.5540])
  [Layer 31] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 31] Output sample values after mixer: tensor([-2.1947,  1.6394,  2.2945, -2.3622, -2.5540])
  [Layer 31] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 31] Residual connection sample values: tensor([ 5.4155,  5.4612,  5.8467, -3.5926,  2.1567])
[Mamba2LMHeadModel] Processing layer 32/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([206.2122])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0696])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1712,  0.1733,  0.1851, -0.1065,  0.0709])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.0127,  1.3457, -4.8016, -1.0105, -0.2065])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.0127,  1.3457, -4.8016, -1.0105, -0.2065])
  [Mamba2] xBC (step) sample values: tensor([-0.8022,  0.2070, -0.0092,  0.2092,  0.6479])
  [Mamba2] dt (step) sample values: tensor([0.7132, 3.1652, 1.8125, 2.1781, 2.5599])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.1870, -0.9295, -0.8245, -0.8022, -0.1221], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.2560, -0.3203, -0.0651, -0.0437, -0.2568])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.2932, -0.3723, -0.0809, -0.0312, -0.2638])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.1679, -0.1519, -0.0388, -0.0154, -0.1146])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.1679, -0.1519, -0.0388, -0.0154, -0.1146])
  [Mamba2] B (step) sample values: tensor([ 0.0387, -0.0901,  0.0506,  0.0137,  0.0377])
  [Mamba2] C (step) sample values: tensor([-0.1895, -0.2636, -0.2694, -0.1566,  0.5128])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6971, -2.0893, -1.7967, -1.3894, -1.0395])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1535, 0.1216, 0.5582, 0.6606, 1.1712])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8985, 0.7757, 0.3668, 0.3994, 0.2960])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.1679, -0.1519, -0.0388, -0.0154, -0.1146])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0010, -0.0023,  0.0013,  0.0004,  0.0010])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0031, -0.0026,  0.0010, -0.0029,  0.0064], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0720, -0.0704, -0.0210, -0.0197, -0.0509])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1122, -0.1068, -0.0303, -0.0234, -0.0784])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1122, -0.1068, -0.0303, -0.0234, -0.0784])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0007, -0.1141,  0.0012,  0.0063,  0.0073])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0383])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([5.1094])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0044, -0.5700,  0.0115,  0.0501,  0.0472])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0044, -0.5700,  0.0115,  0.0501,  0.0472])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.7246,  0.3648, -2.2703,  0.5652,  4.1256])
  [Layer 32] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 32] Output sample values after mixer: tensor([-0.7246,  0.3648, -2.2703,  0.5652,  4.1256])
  [Layer 32] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 32] Residual connection sample values: tensor([ 4.6909,  5.8260,  3.5765, -3.0273,  6.2824])
[Mamba2LMHeadModel] Processing layer 33/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([213.2944])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0685])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1513,  0.1948,  0.1175, -0.0966,  0.2099])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2838, -0.0031, -0.6314, -1.1243, -0.5306])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2838, -0.0031, -0.6314, -1.1243, -0.5306])
  [Mamba2] xBC (step) sample values: tensor([ 0.7721, -0.8984, -1.6341, -0.1836,  0.5944])
  [Mamba2] dt (step) sample values: tensor([-0.0175, -0.1214, -0.0515, -0.1034,  0.5406])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2413,  1.4796,  0.6878,  0.7721, -0.9667], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1375, -0.2934,  0.3002, -0.0644, -0.1100])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1244, -0.3427,  0.3270, -0.0656, -0.1112])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0660, -0.1423,  0.1900, -0.0317, -0.0525])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0660, -0.1423,  0.1900, -0.0317, -0.0525])
  [Mamba2] B (step) sample values: tensor([-0.2749,  0.1356, -0.0602,  0.0307,  0.1899])
  [Mamba2] C (step) sample values: tensor([-0.0384, -0.0917, -0.2557, -0.2429,  0.5237])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9791, -9.6938, -6.1678, -0.1135, -2.0903])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0116, 0.0088, 0.0123, 0.0073, 0.0049])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9774, 0.9178, 0.9269, 0.9992, 0.9898])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0660, -0.1423,  0.1900, -0.0317, -0.0525])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-2.0974e-04,  1.0349e-04, -4.5906e-05,  2.3450e-05,  1.4487e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.6955e-04,  2.2677e-04, -1.4414e-04, -4.6511e-05,  2.3790e-04],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0005, -0.0016,  0.0022, -0.0008, -0.0013])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0692, -0.1497,  0.2001, -0.0338, -0.0559])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0692, -0.1497,  0.2001, -0.0338, -0.0559])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0084,  0.0002, -0.0439,  0.0093,  0.0110])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0229])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([6.6038])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0839,  0.0014, -0.3275,  0.0681,  0.0907])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0839,  0.0014, -0.3275,  0.0681,  0.0907])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.6946, -0.1387,  2.1719, -3.7626, -0.9166])
  [Layer 33] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 33] Output sample values after mixer: tensor([ 1.6946, -0.1387,  2.1719, -3.7626, -0.9166])
  [Layer 33] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 33] Residual connection sample values: tensor([ 6.3855,  5.6873,  5.7484, -6.7899,  5.3657])
[Mamba2LMHeadModel] Processing layer 34/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([264.8246])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0614])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1512,  0.1427,  0.1360, -0.1621,  0.1332])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8655, -0.2264,  0.6310, -1.0044, -0.3721])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8655, -0.2264,  0.6310, -1.0044, -0.3721])
  [Mamba2] xBC (step) sample values: tensor([-0.1541,  0.0048, -0.8551,  0.1539, -0.6369])
  [Mamba2] dt (step) sample values: tensor([0.7056, 1.7672, 2.4752, 4.0121, 3.9503])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.5119, -0.2410, -0.8309, -0.1541, -0.5745], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0586,  0.0203, -0.1666, -0.0322, -0.1271])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0267,  0.0463, -0.1785, -0.0717, -0.1356])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0135,  0.0237, -0.0813, -0.0346, -0.0632])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0135,  0.0237, -0.0813, -0.0346, -0.0632])
  [Mamba2] B (step) sample values: tensor([-4.7211e-02,  3.9357e-02, -2.0227e-02,  5.1820e-05, -4.0968e-02])
  [Mamba2] C (step) sample values: tensor([-0.0315, -0.2769, -0.1998, -0.2407, -0.2733])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.5611, -2.4811, -2.8936, -0.0159, -0.0261])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1031, 0.1765, 0.1062, 0.5882, 0.3297])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7680, 0.6454, 0.7354, 0.9907, 0.9914])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0135,  0.0237, -0.0813, -0.0346, -0.0632])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-6.5867e-05,  5.4908e-05, -2.8220e-05,  7.2296e-08, -5.7157e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-2.0658e-03,  2.5027e-03, -2.4567e-03,  1.9415e-04, -8.7516e-05],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0042,  0.0041, -0.0052,  0.0020, -0.0036])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0125,  0.0187, -0.0553, -0.0193, -0.0425])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0125,  0.0187, -0.0553, -0.0193, -0.0425])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0032, -0.0019, -0.0228,  0.0052,  0.0065])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0063])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.5743])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0804, -0.0457, -0.6341,  0.1629,  0.1918])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0804, -0.0457, -0.6341,  0.1629,  0.1918])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.0543,  2.8660, -4.5610,  1.5611, -2.3072])
  [Layer 34] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 34] Output sample values after mixer: tensor([-0.0543,  2.8660, -4.5610,  1.5611, -2.3072])
  [Layer 34] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 34] Residual connection sample values: tensor([ 6.3312,  8.5533,  1.1874, -5.2287,  3.0586])
[Mamba2LMHeadModel] Processing layer 35/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([435.6041])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0479])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1569,  0.2115,  0.0289, -0.1193,  0.0750])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.8324,  1.0599,  2.6597, -0.0419,  0.0230])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.8324,  1.0599,  2.6597, -0.0419,  0.0230])
  [Mamba2] xBC (step) sample values: tensor([ 1.6608, -0.5015,  1.0648,  0.4892,  0.4478])
  [Mamba2] dt (step) sample values: tensor([4.0857, 0.1651, 1.0700, 0.6498, 1.3298])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.8680,  2.3285, -0.5026,  1.6608,  1.2173], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2765,  0.1133, -0.1782,  0.0792,  0.0945])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.4325,  0.1544, -0.2144,  0.0343,  0.0531])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1702,  0.0832, -0.0957,  0.0174,  0.0272])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1702,  0.0832, -0.0957,  0.0174,  0.0272])
  [Mamba2] B (step) sample values: tensor([ 0.0130,  0.1811, -0.2515,  0.2591, -0.1412])
  [Mamba2] C (step) sample values: tensor([ 0.6316,  0.4627, -0.2544, -0.1185,  0.1939])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7098, -2.7746, -0.4453, -1.1391, -3.5906])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.4341, 0.0200, 0.4043, 0.1239, 0.0946])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7348, 0.9460, 0.8352, 0.8684, 0.7121])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1702,  0.0832, -0.0957,  0.0174,  0.0272])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0010, -0.0134,  0.0186, -0.0191,  0.0104])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0035, -0.0245,  0.0401, -0.0367,  0.0130], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.1183, -0.0182, -0.0794, -0.0751, -0.0044])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.2334,  0.0381, -0.1441, -0.0633,  0.0140])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.2334,  0.0381, -0.1441, -0.0633,  0.0140])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 5.8896e-02,  2.9989e-02, -3.5823e-01,  1.2986e-03,  1.6307e-04])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0414])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.9129])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 9.4492e-01,  2.5597e-01, -2.1604e+00,  9.0524e-03,  1.5264e-03])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 9.4492e-01,  2.5597e-01, -2.1604e+00,  9.0524e-03,  1.5264e-03])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 3.9080, -2.2112, -1.4479, -1.0197, -4.5511])
  [Layer 35] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 35] Output sample values after mixer: tensor([ 3.9080, -2.2112, -1.4479, -1.0197, -4.5511])
  [Layer 35] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 35] Residual connection sample values: tensor([10.2392,  6.3421, -0.2605, -6.2484, -1.4926])
[Mamba2LMHeadModel] Processing layer 36/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([602.9694])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0407])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.2046,  0.1283, -0.0052, -0.1232, -0.0305])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.2342, -1.7659, -0.5927,  0.0388, -0.9292])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.2342, -1.7659, -0.5927,  0.0388, -0.9292])
  [Mamba2] xBC (step) sample values: tensor([-0.0984,  1.9529,  0.0945, -0.8683,  0.2725])
  [Mamba2] dt (step) sample values: tensor([ 0.7798,  2.0860,  1.0325, -0.2396,  0.2263])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0426, -1.0857,  0.1037, -0.0984,  1.3037], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0361,  0.3444,  0.0196, -0.1925, -0.0359])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-1.1783e-04,  3.4431e-01, -8.8835e-03, -2.1742e-01, -6.3760e-02])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-5.8912e-05,  2.0151e-01, -4.4220e-03, -9.6939e-02, -3.0864e-02])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-5.8912e-05,  2.0151e-01, -4.4220e-03, -9.6939e-02, -3.0864e-02])
  [Mamba2] B (step) sample values: tensor([ 0.0679,  0.3558, -0.0786, -0.0940,  0.0490])
  [Mamba2] C (step) sample values: tensor([-0.0192, -0.2783, -0.2372, -0.1693, -0.1212])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.6566, -1.1306, -1.6058, -2.4414, -2.8823])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0908, 0.0293, 0.0594, 0.0289, 0.0511])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7856, 0.9674, 0.9090, 0.9318, 0.8629])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-5.8912e-05,  2.0151e-01, -4.4220e-03, -9.6939e-02, -3.0864e-02])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-3.6338e-07, -1.9041e-06,  4.2046e-07,  5.0322e-07, -2.6242e-07])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 2.8368e-04,  8.5362e-04, -1.2618e-04,  2.9237e-04, -7.5070e-05],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0012,  0.0155, -0.0007, -0.0110,  0.0014])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0011,  0.2464, -0.0058, -0.1220, -0.0340])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0011,  0.2464, -0.0058, -0.1220, -0.0340])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0003, -0.0636,  0.0012, -0.0024,  0.0089])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0126])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([8.8959])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0042, -1.2113,  0.0157, -0.0349,  0.1121])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0042, -1.2113,  0.0157, -0.0349,  0.1121])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.3641, -0.3704, -4.5121, -1.4320, -3.2262])
  [Layer 36] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 36] Output sample values after mixer: tensor([-2.3641, -0.3704, -4.5121, -1.4320, -3.2262])
  [Layer 36] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 36] Residual connection sample values: tensor([ 7.8751,  5.9717, -4.7726, -7.6804, -4.7188])
[Mamba2LMHeadModel] Processing layer 37/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([742.9963])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0367])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.1648,  0.1278, -0.0987, -0.1555, -0.0995])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.9210,  1.8312,  2.6433, -3.0028, -0.3963])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.9210,  1.8312,  2.6433, -3.0028, -0.3963])
  [Mamba2] xBC (step) sample values: tensor([-0.8985,  0.1883, -0.5830,  0.3226, -0.6734])
  [Mamba2] dt (step) sample values: tensor([2.8100, 1.1702, 2.7386, 1.1584, 0.2685])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.2273, -1.6311, -0.4156, -0.8985,  0.8233], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1240, -0.0259, -0.0522,  0.1656, -0.1083])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1116, -0.0543, -0.0472,  0.0147, -0.0935])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0589, -0.0264, -0.0231,  0.0074, -0.0446])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0589, -0.0264, -0.0231,  0.0074, -0.0446])
  [Mamba2] B (step) sample values: tensor([ 0.0160,  0.1209, -0.0920, -0.0208,  0.0365])
  [Mamba2] C (step) sample values: tensor([-0.1807, -0.0774, -0.2455, -0.2205, -0.2784])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.0606, -3.2470, -0.8191, -0.2453, -1.9752])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1455, 0.0311, 0.1361, 0.0040, 0.0152])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9912, 0.9039, 0.8945, 0.9990, 0.9704])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0589, -0.0264, -0.0231,  0.0074, -0.0446])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0001,  0.0010, -0.0008, -0.0002,  0.0003])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0007,  0.0006, -0.0038, -0.0007, -0.0012], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0233, -0.0234, -0.0193,  0.0663,  0.0416])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0120, -0.0184, -0.0149,  0.0649,  0.0501])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0120, -0.0184, -0.0149,  0.0649,  0.0501])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0079, -0.0290, -0.0369, -0.0092, -0.0080])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0567])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([4.1975])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0539, -0.1788, -0.4477, -0.2066, -0.0400])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0539, -0.1788, -0.4477, -0.2066, -0.0400])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-4.6055,  1.4825, -4.1609,  2.3713, -5.8732])
  [Layer 37] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 37] Output sample values after mixer: tensor([-4.6055,  1.4825, -4.1609,  2.3713, -5.8732])
  [Layer 37] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 37] Residual connection sample values: tensor([  3.2696,   7.4541,  -8.9335,  -5.3091, -10.5920])
[Mamba2LMHeadModel] Processing layer 38/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([957.0893])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0323])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0548,  0.1240, -0.1479, -0.0858, -0.1754])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1691, -0.6328, -0.9910, -0.8193, -0.2217])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1691, -0.6328, -0.9910, -0.8193, -0.2217])
  [Mamba2] xBC (step) sample values: tensor([-0.0291,  0.5633,  0.8125, -0.4628,  0.1227])
  [Mamba2] dt (step) sample values: tensor([1.0187, 1.8383, 2.3647, 1.6143, 1.7738])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.4713, -0.8226, -0.2939, -0.0291,  1.1070], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0160, -0.0963, -0.1490,  0.0908,  0.0329])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0441, -0.1335, -0.1747,  0.0792,  0.0117])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0225, -0.0623, -0.0798,  0.0411,  0.0059])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0225, -0.0623, -0.0798,  0.0411,  0.0059])
  [Mamba2] B (step) sample values: tensor([-0.2027, -0.2415, -0.0343,  0.1744, -0.2779])
  [Mamba2] C (step) sample values: tensor([-0.1928, -0.1085, -0.2777, -0.0509, -0.2287])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0881, -1.3536, -1.1764, -1.6451, -1.1941])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1377, 0.1750, 1.0802, 0.1956, 0.1284])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8608, 0.7890, 0.2806, 0.7248, 0.8579])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0225, -0.0623, -0.0798,  0.0411,  0.0059])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-0.0006, -0.0007, -0.0001,  0.0005, -0.0009])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([1.6765e-03, 2.1121e-03, 5.3831e-05, 1.5942e-03, 6.1672e-04],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0002, -0.0362, -0.0365,  0.0269,  0.0075])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0180, -0.0866, -0.1010,  0.0602,  0.0123])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0180, -0.0866, -0.1010,  0.0602,  0.0123])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0014,  0.0190,  0.0271, -0.0151, -0.0012])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0185])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([7.3483])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0204,  0.2697,  0.4035, -0.2050, -0.0148])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0204,  0.2697,  0.4035, -0.2050, -0.0148])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([  0.2232,  -5.7242, -10.5945,   2.8913,   2.9736])
  [Layer 38] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 38] Output sample values after mixer: tensor([  0.2232,  -5.7242, -10.5945,   2.8913,   2.9736])
  [Layer 38] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 38] Residual connection sample values: tensor([  3.4927,   1.7300, -19.5280,  -2.4178,  -7.6183])
[Mamba2LMHeadModel] Processing layer 39/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1232.6012])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0285])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0449,  0.0225, -0.2514, -0.0312, -0.0991])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.2835,  0.1360, -0.3833, -0.2129, -0.1991])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.2835,  0.1360, -0.3833, -0.2129, -0.1991])
  [Mamba2] xBC (step) sample values: tensor([ 0.8893, -0.2161,  0.5965, -0.4923,  0.0103])
  [Mamba2] dt (step) sample values: tensor([4.6313, 2.6647, 0.7717, 1.3222, 0.4609])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([1.5400, 2.3279, 1.4473, 0.8893, 0.2196], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.1915,  0.0314,  0.1159, -0.1693, -0.0073])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.1772,  0.1166,  0.0935, -0.1652, -0.0283])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0964,  0.0617,  0.0490, -0.0758, -0.0139])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0964,  0.0617,  0.0490, -0.0758, -0.0139])
  [Mamba2] B (step) sample values: tensor([ 0.2880, -0.0188,  0.0347, -0.0300, -0.0873])
  [Mamba2] C (step) sample values: tensor([ 0.7078,  0.1591,  0.2091,  0.1057, -0.2682])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.6942, -0.9243, -1.3151, -3.1533, -2.1087])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.4042, 0.1033, 0.0191, 0.0991, 0.0404])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.7553, 0.9089, 0.9752, 0.7316, 0.9182])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0964,  0.0617,  0.0490, -0.0758, -0.0139])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 0.0112, -0.0007,  0.0014, -0.0012, -0.0034])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0132, -0.0010,  0.0024,  0.0003, -0.0012], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0435,  0.0335,  0.0173, -0.0356, -0.0013])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.1261,  0.0864,  0.0593, -0.1005, -0.0133])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.1261,  0.0864,  0.0593, -0.1005, -0.0133])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0204,  0.0063, -0.0092,  0.0096,  0.0012])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0061])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.7865])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.4909,  0.1622, -0.2434,  0.2043,  0.0290])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.4909,  0.1622, -0.2434,  0.2043,  0.0290])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.5707, -0.7138,  1.9701,  0.7276, -7.4334])
  [Layer 39] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 39] Output sample values after mixer: tensor([-2.5707, -0.7138,  1.9701,  0.7276, -7.4334])
  [Layer 39] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 39] Residual connection sample values: tensor([  0.9220,   1.0162, -17.5579,  -1.6901, -15.0517])
[Mamba2LMHeadModel] Processing layer 40/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1494.8893])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0259])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0104,  0.0116, -0.2052, -0.0193, -0.1696])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.0501, -0.7784, -1.5441,  0.0820, -1.5605])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.0501, -0.7784, -1.5441,  0.0820, -1.5605])
  [Mamba2] xBC (step) sample values: tensor([-0.4409, -0.3305, -0.3923, -0.0612,  0.1406])
  [Mamba2] dt (step) sample values: tensor([0.1538, 1.7632, 2.5425, 1.1794, 1.3855])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.8465,  0.0553,  0.0096, -0.4409, -0.2876], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0897,  0.0515, -0.0864,  0.0040,  0.0124])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1054,  0.0329, -0.0807, -0.0059,  0.0076])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0499,  0.0167, -0.0387, -0.0029,  0.0038])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0499,  0.0167, -0.0387, -0.0029,  0.0038])
  [Mamba2] B (step) sample values: tensor([-0.1738,  0.1239, -0.0691, -0.0088, -0.0137])
  [Mamba2] C (step) sample values: tensor([-0.0941, -0.0138, -0.0520,  0.0746,  0.0459])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.9810, -1.4352, -0.7966, -1.6062, -1.8465])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0663, 0.0764, 0.0563, 0.1153, 0.2178])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8769, 0.8962, 0.9561, 0.8309, 0.6689])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0499,  0.0167, -0.0387, -0.0029,  0.0038])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 5.7520e-04, -4.1016e-04,  2.2865e-04,  2.9003e-05,  4.5463e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0011,  0.0018, -0.0002, -0.0008,  0.0010], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0049, -0.0014, -0.0074, -0.0052, -0.0077])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0359,  0.0123, -0.0391, -0.0076, -0.0046])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0359,  0.0123, -0.0391, -0.0076, -0.0046])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0098, -0.0030,  0.0106, -0.0003,  0.0012])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0044])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([15.0260])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.2879, -0.0893,  0.3098, -0.0112,  0.0364])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.2879, -0.0893,  0.3098, -0.0112,  0.0364])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-2.2654, -1.8474,  0.4119,  6.6347,  2.3114])
  [Layer 40] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 40] Output sample values after mixer: tensor([-2.2654, -1.8474,  0.4119,  6.6347,  2.3114])
  [Layer 40] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 40] Residual connection sample values: tensor([ -1.3434,  -0.8312, -17.1460,   4.9445, -12.7402])
[Mamba2LMHeadModel] Processing layer 41/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([1798.0518])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0236])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0141, -0.0088, -0.1842,  0.0520, -0.1347])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.5725, -0.3302, -0.4200, -0.6758, -0.6032])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.5725, -0.3302, -0.4200, -0.6758, -0.6032])
  [Mamba2] xBC (step) sample values: tensor([-0.1323,  0.5311,  0.3601, -0.3517,  0.6972])
  [Mamba2] dt (step) sample values: tensor([0.5094, 1.5713, 2.0297, 1.3318, 1.8309])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.2611,  0.4608, -0.0262, -0.1323, -1.1826], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0199,  0.0882,  0.0854, -0.0788,  0.2050])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0065,  0.0742,  0.0875, -0.0855,  0.1894])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0033,  0.0385,  0.0457, -0.0409,  0.1036])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0033,  0.0385,  0.0457, -0.0409,  0.1036])
  [Mamba2] B (step) sample values: tensor([-0.0466, -0.0578, -0.0933, -0.2583,  0.2090])
  [Mamba2] C (step) sample values: tensor([-0.0086,  0.1560, -0.1479, -0.0694,  0.1161])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8259, -1.8637, -1.2829, -1.4543, -4.4079])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0614, 0.1428, 0.0536, 0.1482, 0.0392])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8940, 0.7663, 0.9336, 0.8061, 0.8414])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0033,  0.0385,  0.0457, -0.0409,  0.1036])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-9.4006e-06, -1.1656e-05, -1.8792e-05, -5.2043e-05,  4.2115e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-9.8576e-05,  3.5091e-04, -5.5660e-04,  3.1656e-03, -2.5884e-03],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0031,  0.0012,  0.0140, -0.0024,  0.0064])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 9.3316e-05,  3.8707e-02,  5.8463e-02, -4.2357e-02,  1.0737e-01])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 9.3316e-05,  3.8707e-02,  5.8463e-02, -4.2357e-02,  1.0737e-01])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 3.4155e-05, -5.3455e-03, -9.7367e-03,  9.6522e-03, -2.2902e-02])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0035])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([16.9990])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.0010, -0.1572, -0.2817,  0.2934, -0.5425])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.0010, -0.1572, -0.2817,  0.2934, -0.5425])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-1.4188,  4.5484,  1.5643,  1.8960,  2.1963])
  [Layer 41] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 41] Output sample values after mixer: tensor([-1.4188,  4.5484,  1.5643,  1.8960,  2.1963])
  [Layer 41] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 41] Residual connection sample values: tensor([ -2.7622,   3.7172, -15.5816,   6.8406, -10.5439])
[Mamba2LMHeadModel] Processing layer 42/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2005.5264])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0223])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0293,  0.0401, -0.1667,  0.0719, -0.1112])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1504,  0.5478, -1.5029, -0.3673,  0.3140])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1504,  0.5478, -1.5029, -0.3673,  0.3140])
  [Mamba2] xBC (step) sample values: tensor([ 0.6804,  0.6850, -0.9734, -0.5619,  1.5870])
  [Mamba2] dt (step) sample values: tensor([1.5922, 2.9007, 1.7724, 0.5838, 3.1620])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.3848,  0.2067, -0.8124,  0.6804,  0.6304], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0947, -0.1151, -0.1537,  0.0643,  0.2596])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0854, -0.1283, -0.1437,  0.0679,  0.2397])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0445, -0.0601, -0.0667,  0.0351,  0.1341])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0445, -0.0601, -0.0667,  0.0351,  0.1341])
  [Mamba2] B (step) sample values: tensor([ 0.0141, -0.0477,  0.0560,  0.0234,  0.4096])
  [Mamba2] C (step) sample values: tensor([ 0.0124, -0.0722,  0.1455,  0.1931, -0.2749])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.0661, -1.4514, -0.7270, -1.9455, -0.6256])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1008, 1.4286, 0.0201, 0.0480, 0.2379])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8981, 0.1257, 0.9855, 0.9108, 0.8617])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0445, -0.0601, -0.0667,  0.0351,  0.1341])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 6.3504e-05, -2.1417e-04,  2.5133e-04,  1.0480e-04,  1.8381e-03])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-0.0003, -0.0009, -0.0004,  0.0013,  0.0020], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0037, -0.0053, -0.0051,  0.0025,  0.0075])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0484, -0.0656, -0.0720,  0.0377,  0.1421])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0484, -0.0656, -0.0720,  0.0377,  0.1421])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0034, -0.0228,  0.0197, -0.0057,  0.0258])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0035])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([16.7941])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.1172, -0.7794,  0.6857, -0.1634,  0.8155])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.1172, -0.7794,  0.6857, -0.1634,  0.8155])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 1.5188, -3.0596, -6.0484,  3.3231, -0.7708])
  [Layer 42] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 42] Output sample values after mixer: tensor([ 1.5188, -3.0596, -6.0484,  3.3231, -0.7708])
  [Layer 42] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 42] Residual connection sample values: tensor([ -1.2433,   0.6575, -21.6301,  10.1636, -11.3147])
[Mamba2LMHeadModel] Processing layer 43/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2183.0769])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0214])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0126,  0.0070, -0.2196,  0.1046, -0.1136])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1550, -0.1785, -0.1887,  0.0839, -0.3227])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1550, -0.1785, -0.1887,  0.0839, -0.3227])
  [Mamba2] xBC (step) sample values: tensor([ 0.2571, -0.3154, -0.8193,  0.4450, -0.1699])
  [Mamba2] dt (step) sample values: tensor([3.6576, 0.2395, 0.6893, 2.5281, 2.0804])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.2893,  0.3435,  0.4704,  0.2571, -0.0935], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0445, -0.1649, -0.1236, -0.0791,  0.0420])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0409, -0.2106, -0.1112, -0.0732,  0.0332])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0209, -0.0943, -0.0525, -0.0352,  0.0169])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0209, -0.0943, -0.0525, -0.0352,  0.0169])
  [Mamba2] B (step) sample values: tensor([ 0.0087,  0.0451,  0.8873, -0.0165, -0.0016])
  [Mamba2] C (step) sample values: tensor([-0.0888, -0.1589, -0.2779, -0.0053, -0.0254])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.9762, -1.4783, -1.0589, -1.0815, -5.9141])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.1460, 0.0189, 0.0162, 0.0832, 0.3649])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8672, 0.9725, 0.9830, 0.9139, 0.1155])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0209, -0.0943, -0.0525, -0.0352,  0.0169])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 2.6503e-05,  1.3760e-04,  2.7055e-03, -5.0206e-05, -5.0141e-06])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-1.6012e-04, -1.1102e-03,  1.3424e-02,  9.1595e-05,  1.3790e-04],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0062, -0.0132, -0.0104, -0.0070,  0.0039])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0243, -0.0950, -0.0560, -0.0376,  0.0186])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0243, -0.0950, -0.0560, -0.0376,  0.0186])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0017,  0.0077,  0.0048, -0.0016, -0.0025])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0045])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([14.9264])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0683,  0.2330,  0.1353, -0.0512, -0.0907])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0683,  0.2330,  0.1353, -0.0512, -0.0907])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-0.2133,  6.1425, -1.0212,  5.2188,  0.5170])
  [Layer 43] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 43] Output sample values after mixer: tensor([-0.2133,  6.1425, -1.0212,  5.2188,  0.5170])
  [Layer 43] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 43] Residual connection sample values: tensor([ -1.4566,   6.8000, -22.6512,  15.3824, -10.7977])
[Mamba2LMHeadModel] Processing layer 44/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2329.2090])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0207])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0142,  0.0688, -0.2225,  0.1489, -0.1050])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.7501, -1.7920, -1.1131, -0.1219, -1.4248])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.7501, -1.7920, -1.1131, -0.1219, -1.4248])
  [Mamba2] xBC (step) sample values: tensor([-0.7438,  0.2578, -0.8780, -1.8605, -2.2639])
  [Mamba2] dt (step) sample values: tensor([1.4483, 1.5255, 1.3538, 2.2942, 1.1498])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.6840, -0.5129, -1.8358, -0.7438,  0.9485], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.1549, -0.0356, -0.1464, -0.3810,  0.2650])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.1610,  0.0248, -0.1648, -0.3876,  0.2125])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0740,  0.0126, -0.0756, -0.1567,  0.1175])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0740,  0.0126, -0.0756, -0.1567,  0.1175])
  [Mamba2] B (step) sample values: tensor([-0.2699,  0.0352,  0.0214,  0.0103,  0.0871])
  [Mamba2] C (step) sample values: tensor([-0.2659, -0.0047,  0.0358,  0.0037, -0.1348])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-0.7482, -0.6439, -1.1771, -1.3506, -1.0269])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0900, 0.0675, 0.0424, 0.0938, 0.1128])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9349, 0.9575, 0.9513, 0.8810, 0.8907])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0740,  0.0126, -0.0756, -0.1567,  0.1175])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.7989e-03, -2.3453e-04, -1.4247e-04, -6.8482e-05, -5.8044e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 1.0171e-02, -4.4795e-04, -1.5188e-03, -5.9195e-05, -2.3687e-03],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0031, -0.0012, -0.0025, -0.0048,  0.0024])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0726,  0.0106, -0.0736, -0.1520,  0.1128])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0726,  0.0106, -0.0736, -0.1520,  0.1128])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0175, -0.0027,  0.0203,  0.0087, -0.0312])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0032])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([17.6886])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.5764, -0.0714,  0.7200,  0.2682, -1.0452])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.5764, -0.0714,  0.7200,  0.2682, -1.0452])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 3.4709, -7.6402, -2.1182,  7.3637, -4.3779])
  [Layer 44] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 44] Output sample values after mixer: tensor([ 3.4709, -7.6402, -2.1182,  7.3637, -4.3779])
  [Layer 44] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 44] Residual connection sample values: tensor([  2.0142,  -0.8402, -24.7695,  22.7461, -15.1757])
[Mamba2LMHeadModel] Processing layer 45/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2522.7896])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0199])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0192, -0.0082, -0.2375,  0.2137, -0.1442])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([ 0.3822, -0.3512, -0.0585,  0.6661,  0.9195])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([ 0.3822, -0.3512, -0.0585,  0.6661,  0.9195])
  [Mamba2] xBC (step) sample values: tensor([-0.5169,  0.5290,  1.0758,  0.0620, -2.8740])
  [Mamba2] dt (step) sample values: tensor([2.0554, 3.2634, 0.7292, 2.0360, 2.9457])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 1.1710,  0.9239,  0.0447, -0.5169,  0.1741], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0732, -0.0950,  0.1623,  0.0081,  0.5144])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0778, -0.0428,  0.1598,  0.0015,  0.5119])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0374, -0.0209,  0.0863,  0.0007,  0.3201])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0374, -0.0209,  0.0863,  0.0007,  0.3201])
  [Mamba2] B (step) sample values: tensor([-0.2142, -0.0079, -0.1255, -0.2045,  0.0499])
  [Mamba2] C (step) sample values: tensor([-0.0708,  0.0795,  0.0792, -0.2240,  0.5027])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-2.2502, -4.1815, -1.0937, -2.6774, -2.3149])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0549, 0.4681, 0.0399, 0.0927, 0.1006])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.8838, 0.1412, 0.9573, 0.7801, 0.7922])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0374, -0.0209,  0.0863,  0.0007,  0.3201])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 4.3982e-04,  1.6221e-05,  2.5775e-04,  4.1989e-04, -1.0238e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 0.0023, -0.0003,  0.0002, -0.0001,  0.0001], requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 0.0015,  0.0011, -0.0022, -0.0040,  0.0454])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0405, -0.0224,  0.0946, -0.0031,  0.4045])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0405, -0.0224,  0.0946, -0.0031,  0.4045])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0092,  0.0032, -0.0027, -0.0014,  0.2659])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0045])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([14.8402])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.3189,  0.0818, -0.0856, -0.0402,  8.3230])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.3189,  0.0818, -0.0856, -0.0402,  8.3230])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ 2.9761, -8.1491, -1.2173,  1.2069, -4.6732])
  [Layer 45] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 45] Output sample values after mixer: tensor([ 2.9761, -8.1491, -1.2173,  1.2069, -4.6732])
  [Layer 45] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 45] Residual connection sample values: tensor([  4.9904,  -8.9893, -25.9868,  23.9530, -19.8489])
[Mamba2LMHeadModel] Processing layer 46/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2697.3943])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0193])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0555, -0.1042, -0.2944,  0.2693, -0.2193])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.2497,  0.2640, -0.0344, -1.6126, -1.0238])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.2497,  0.2640, -0.0344, -1.6126, -1.0238])
  [Mamba2] xBC (step) sample values: tensor([ 1.2522,  0.6103, -0.8314, -1.5276,  0.6238])
  [Mamba2] dt (step) sample values: tensor([1.9956, 1.8971, 0.2230, 2.1049, 0.5412])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([0.2408, 0.9274, 1.7097, 1.2522, 0.4240], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.2477,  0.0931, -0.1405,  0.2235, -0.0986])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.2508,  0.0893, -0.1616,  0.2076, -0.0783])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.1098,  0.0467, -0.0743,  0.1145, -0.0376])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.1098,  0.0467, -0.0743,  0.1145, -0.0376])
  [Mamba2] B (step) sample values: tensor([-0.1489, -0.2691,  0.0301, -0.0312, -0.0629])
  [Mamba2] C (step) sample values: tensor([-0.0104, -0.2731, -0.1331,  0.0643,  0.2283])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-1.8673, -0.9793, -1.6584, -0.9408, -0.4381])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0220, 0.0373, 0.0079, 0.0819, 0.0151])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9597, 0.9642, 0.9870, 0.9259, 0.9934])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.1098,  0.0467, -0.0743,  0.1145, -0.0376])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 3.5967e-04,  6.5003e-04, -7.2696e-05,  7.5424e-05,  1.5192e-04])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 8.9071e-04,  2.4363e-03, -2.5559e-04, -2.9994e-06, -8.9412e-05],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-0.0010,  0.0005, -0.0007,  0.0005,  0.0011])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0886,  0.0377, -0.0600,  0.0920, -0.0289])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0886,  0.0377, -0.0600,  0.0920, -0.0289])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0097,  0.0056,  0.0010, -0.0247,  0.0078])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0057])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([13.2387])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.2986,  0.1657,  0.0270, -0.6065,  0.2352])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.2986,  0.1657,  0.0270, -0.6065,  0.2352])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ -0.9835,  -0.9943,  -1.0731,  -1.2509, -15.5448])
  [Layer 46] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 46] Output sample values after mixer: tensor([ -0.9835,  -0.9943,  -1.0731,  -1.2509, -15.5448])
  [Layer 46] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 46] Residual connection sample values: tensor([  4.0069,  -9.9836, -27.0599,  22.7021, -35.3936])
[Mamba2LMHeadModel] Processing layer 47/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([2859.6816])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0187])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([ 0.0385, -0.0967, -0.2519,  0.2139, -0.3177])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-0.1527,  1.1242, -0.5884, -1.1952, -0.9197])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-0.1527,  1.1242, -0.5884, -1.1952, -0.9197])
  [Mamba2] xBC (step) sample values: tensor([-0.2323, -1.9806,  0.1599,  0.9390, -0.5937])
  [Mamba2] dt (step) sample values: tensor([-0.6233, -0.4520,  3.0955,  2.6406,  0.4648])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([ 0.0061,  0.4181,  0.1809, -0.2323, -0.0313], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([ 0.0327,  0.1403,  0.0146, -0.1393, -0.0820])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([ 0.0498,  0.1154, -0.2049, -0.1427, -0.0768])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([ 0.0255,  0.0610, -0.0920, -0.0663, -0.0369])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([ 0.0255,  0.0610, -0.0920, -0.0663, -0.0369])
  [Mamba2] B (step) sample values: tensor([-0.1911, -0.0782, -0.2643, -0.2780, -0.0271])
  [Mamba2] C (step) sample values: tensor([ 0.6765,  0.1111, -0.0380, -0.2783, -0.0217])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([ -3.5522, -11.2450,  -2.6866,  -3.1935,  -3.1998])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0121, 0.0097, 0.0556, 0.0501, 0.0184])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.9581, 0.8968, 0.8612, 0.8522, 0.9427])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([ 0.0255,  0.0610, -0.0920, -0.0663, -0.0369])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([-5.8789e-05, -2.4056e-05, -8.1325e-05, -8.5536e-05, -8.3469e-06])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([-3.0851e-04, -1.3990e-04, -7.0493e-04, -4.5371e-04,  9.9290e-05],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([ 7.8118e-05, -6.0968e-04, -4.9785e-03, -9.2776e-04, -3.7587e-04])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([ 0.0362,  0.0856, -0.1350, -0.0946, -0.0526])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([ 0.0362,  0.0856, -0.1350, -0.0946, -0.0526])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([-0.0026,  0.0727,  0.0284,  0.0263,  0.0138])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0060])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([12.8613])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([-0.0703,  1.2002,  0.7668,  0.7419,  0.3735])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([-0.0703,  1.2002,  0.7668,  0.7419,  0.3735])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([ -6.5585,   0.4592,   0.6891,   0.3580, -13.3973])
  [Layer 47] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 47] Output sample values after mixer: tensor([ -6.5585,   0.4592,   0.6891,   0.3580, -13.3973])
  [Layer 47] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 47] Residual connection sample values: tensor([ -2.5516,  -9.5244, -26.3707,  23.0601, -48.7910])
[Mamba2LMHeadModel] Processing layer 48/48
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3199.1870])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0177])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.0236, -0.0823, -0.2228,  0.2010, -0.4012])
[Mamba2] Performing inference step.
[Mamba2] Performing single inference step.
  [Mamba2] in_proj (step) output shape: torch.Size([1, 8512])
  [Mamba2] in_proj (step) output sample values: tensor([-1.0297, -1.3535, -2.9143, -1.0373, -0.4951])
  [Mamba2] Split shapes (step) -> z: torch.Size([1, 4096]), xBC: torch.Size([1, 4352]), dt: torch.Size([1, 64])
  [Mamba2] z (step) sample values: tensor([-1.0297, -1.3535, -2.9143, -1.0373, -0.4951])
  [Mamba2] xBC (step) sample values: tensor([ 0.5055,  0.7149, -0.0054,  0.9846,  0.9563])
  [Mamba2] dt (step) sample values: tensor([-0.6591,  1.7658, -0.2403,  2.0999,  1.3973])
  [Mamba2] conv_state updated shape: torch.Size([1, 4352, 4])
  [Mamba2] conv_state updated sample values: tensor([-0.0176,  0.3866, -0.1890,  0.5055, -0.2249], requires_grad=True)
  [Mamba2] xBC after convolution sum shape: torch.Size([1, 4352])
  [Mamba2] xBC after convolution sum sample values: tensor([-0.0827,  0.0748, -0.0031,  0.1708, -0.1455])
  [Mamba2] Added conv1d bias shape: torch.Size([1, 4352])
  [Mamba2] xBC after adding bias sample values: tensor([-0.0879,  0.2947, -0.0890,  0.1045, -0.1479])
  [Mamba2] xBC after silu shape: torch.Size([1, 4352])
  [Mamba2] xBC after silu sample values: tensor([-0.0420,  0.1689, -0.0425,  0.0550, -0.0685])
  [Mamba2] Split xBC -> x: torch.Size([1, 4096]), B: torch.Size([1, 128]), C: torch.Size([1, 128])
  [Mamba2] x (step) sample values: tensor([-0.0420,  0.1689, -0.0425,  0.0550, -0.0685])
  [Mamba2] B (step) sample values: tensor([-0.0270,  0.0097,  0.0109, -0.0035, -0.1323])
  [Mamba2] C (step) sample values: tensor([-0.1165, -0.2736, -0.1252, -0.1344, -0.0119])
  [Mamba2] A shape: torch.Size([64])
  [Mamba2] A sample values: tensor([-54.8118, -78.5143, -47.2508,  -2.3308,  -4.2266])
  [Mamba2] dt after softplus (step) shape: torch.Size([1, 64])
  [Mamba2] dt after softplus (step) sample values: tensor([0.0161, 0.0505, 0.0032, 0.0089, 0.0301])
  [Mamba2] dA shape: torch.Size([1, 64])
  [Mamba2] dA sample values: tensor([0.4142, 0.0190, 0.8598, 0.9795, 0.8807])
  [Mamba2] x after rearrange (step) shape: torch.Size([1, 64, 64])
  [Mamba2] x after rearrange (step) sample values: tensor([-0.0420,  0.1689, -0.0425,  0.0550, -0.0685])
  [Mamba2] dBx shape: torch.Size([1, 64, 64, 128])
  [Mamba2] dBx sample values: tensor([ 1.8242e-05, -6.5667e-06, -7.3545e-06,  2.3348e-06,  8.9348e-05])
  [Mamba2] ssm_state updated shape: torch.Size([1, 64, 64, 128])
  [Mamba2] ssm_state updated sample values: tensor([ 6.0652e-07, -1.4473e-05,  2.3125e-06,  1.2464e-06,  8.0413e-05],
       requires_grad=True)
  [Mamba2] y after einsum shape: torch.Size([1, 64, 64])
  [Mamba2] y after einsum sample values: tensor([-1.0226e-04,  9.3018e-04, -3.0781e-04, -8.0093e-05, -2.2340e-04])
  [Mamba2] y after adding D scaling (step) shape: torch.Size([1, 64, 64])
  [Mamba2] y after adding D scaling (step) sample values: tensor([-0.0335,  0.1354, -0.0342,  0.0437, -0.0548])
  [Mamba2] y after rearrange to (b, d_inner) shape: torch.Size([1, 4096])
  [Mamba2] y after rearrange to (b, d_inner) sample values: tensor([-0.0335,  0.1354, -0.0342,  0.0437, -0.0548])
[RMSNorm] x after gated scaling shape: torch.Size([1, 4096])
[RMSNorm] x after gated scaling sample values: tensor([ 0.0091, -0.0376,  0.0051, -0.0119,  0.0103])
[RMSNorm] Mean squared value shape: torch.Size([1, 1])
[RMSNorm] mean_sq sample values: tensor([0.0043])
[RMSNorm] rsqrt shape: torch.Size([1, 1])
[RMSNorm] rsqrt sample values: tensor([15.1854])
[RMSNorm] x_normalized shape: torch.Size([1, 4096])
[RMSNorm] x_normalized sample values: tensor([ 0.3160, -1.0721,  0.1510, -0.4007,  0.3861])
  [Mamba2] y after RMSNorm (step) shape: torch.Size([1, 4096])
  [Mamba2] y after RMSNorm (step) sample values: tensor([ 0.3160, -1.0721,  0.1510, -0.4007,  0.3861])
  [Mamba2] y after out_proj (step) shape: torch.Size([1, 2048])
  [Mamba2] y after out_proj (step) sample values: tensor([-12.4048,  -1.6106,  -0.7462,   7.2448, -10.9076])
  [Layer 48] Output shape after mixer: torch.Size([1, 1, 2048])
  [Layer 48] Output sample values after mixer: tensor([-12.4048,  -1.6106,  -0.7462,   7.2448, -10.9076])
  [Layer 48] Residual connection shape: torch.Size([1, 1, 2048])
  [Layer 48] Residual connection sample values: tensor([-14.9564, -11.1350, -27.1169,  30.3048, -59.6986])
[RMSNorm] Mean squared value shape: torch.Size([1, 1, 1])
[RMSNorm] mean_sq sample values: tensor([3554.3086])
[RMSNorm] rsqrt shape: torch.Size([1, 1, 1])
[RMSNorm] rsqrt sample values: tensor([0.0168])
[RMSNorm] x_normalized shape: torch.Size([1, 1, 2048])
[RMSNorm] x_normalized sample values: tensor([-0.1398, -0.1151, -0.2581,  0.2941, -0.5525])
[Mamba2LMHeadModel] Final backbone norm output shape: torch.Size([1, 1, 2048])
[Mamba2LMHeadModel] Final backbone norm output sample values: tensor([-0.1398, -0.1151, -0.2581,  0.2941, -0.5525])
[Mamba2LMHeadModel] Logits shape: torch.Size([1, 1, 50288])
[Mamba2LMHeadModel] Logits sample values: tensor([  2.6918, -24.1661,  -1.0433,   0.8430,  -4.4663])


---
Prompt eval | tokens: 10 | elapsed: 54.42s | tok/s: 0.18
Generation | tokens: 1 | elapsed: 5.10s | tok/s: 0.20

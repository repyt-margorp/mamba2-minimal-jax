[Mamba.from_pretrained] Loaded config from /home/ryouta/.cache/huggingface/hub/models--state-spaces--mamba-370m/snapshots/b6c47221dc4908532cc9773d469d6b8cbe3f0762/config.json
  [Mamba.from_pretrained] Config data: {'d_model': 1024, 'n_layer': 48, 'vocab_size': 50277, 'ssm_cfg': {}, 'rms_norm': True, 'residual_in_fp32': True, 'fused_add_norm': True, 'pad_vocab_size_multiple': 8}
[ModelArgs] Initialized with d_model=1024, n_layer=48, vocab_size=50277, d_state=16, expand=2, dt_rank=auto, d_conv=4, pad_vocab_size_multiple=8, conv_bias=True, bias=False
[ModelArgs] dt_rank set to auto-calculated value: 64
[ModelArgs] Adjusted vocab_size from 50277 to 50280 to be a multiple of 8
[Mamba.from_pretrained] ModelArgs created: ModelArgs(d_model=1024, n_layer=48, vocab_size=50280, d_state=16, expand=2, dt_rank=64, d_conv=4, pad_vocab_size_multiple=8, conv_bias=True, bias=False)
[Mamba] Initializing Mamba model.
  [Mamba] Initialized embedding with vocab_size=50280 and d_model=1024
  [Mamba] embedding.weight shape: torch.Size([50280, 1024])
  [Mamba] embedding.weight sample values: tensor([-0.1888, -0.5154, -1.0147, -0.4001,  0.9698], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0132, -0.0306, -0.0253,  0.0047, -0.0019], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.3556,  0.3288, -0.4749,  0.3699,  0.2556], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.2265, -0.4597, -0.4746,  0.0524,  0.0548], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0179,  0.0096,  0.0126, -0.0201, -0.0021], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.0361, -0.0629,  0.0547,  0.1135, -0.0571], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0003,  0.0838,  0.0834, -0.0993, -0.0888], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0089,  0.0175, -0.0049,  0.0052,  0.0186], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0132, -0.0306, -0.0253,  0.0047, -0.0019], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0125, -0.0207,  0.0084,  0.0229,  0.0023], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.3676,  0.4988, -0.4309, -0.1565,  0.0983], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.3803,  0.1721,  0.1283,  0.2848, -0.1572], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0213,  0.0047,  0.0135, -0.0061,  0.0112], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0962, -0.0239, -0.0273,  0.0610, -0.0641], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([0.0923, 0.0360, 0.1077, 0.0397, 0.0258], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0051, -0.0046, -0.0078, -0.0033, -0.0079], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0125, -0.0207,  0.0084,  0.0229,  0.0023], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0145, -0.0291, -0.0170,  0.0289,  0.0134], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.3560,  0.0500, -0.2976, -0.2085, -0.1758], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.2639, -0.0213, -0.1115, -0.1168, -0.1790], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0180,  0.0115,  0.0211, -0.0166, -0.0027], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0365,  0.0781,  0.0906, -0.0969,  0.0116], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.1056,  0.1121, -0.0218, -0.0603, -0.0720], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0067, -0.0188, -0.0131, -0.0194, -0.0015], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0145, -0.0291, -0.0170,  0.0289,  0.0134], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0096,  0.0278,  0.0153, -0.0084, -0.0114], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.1740, -0.0178,  0.0083, -0.3316, -0.0678], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.4689, -0.2122,  0.4320, -0.1538, -0.2210], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0204, -0.0197, -0.0067, -0.0147, -0.0058], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.1051, -0.1242,  0.1242, -0.0575, -0.0071], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.1175,  0.1115, -0.0732,  0.0822, -0.0012], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0084, -0.0158, -0.0016, -0.0023,  0.0065], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0096,  0.0278,  0.0153, -0.0084, -0.0114], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0185,  0.0262,  0.0115, -0.0042, -0.0194], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.0551, -0.2625, -0.3717, -0.3523, -0.1909], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.4947, -0.1302,  0.1857, -0.3407,  0.4479], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0172,  0.0032,  0.0172, -0.0038, -0.0019], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.0397,  0.1211, -0.0994, -0.0669,  0.0646], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0295, -0.0365, -0.0926,  0.0722,  0.0349], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0087,  0.0191,  0.0204, -0.0038,  0.0058], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0185,  0.0262,  0.0115, -0.0042, -0.0194], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0182, -0.0198,  0.0013,  0.0238, -0.0125], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.4669, -0.1761,  0.3686,  0.4737,  0.4514], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.4714,  0.0509,  0.2831,  0.1062, -0.3040], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([0.0006, 0.0175, 0.0201, 0.0089, 0.0205], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0228, -0.0964, -0.0046,  0.0014, -0.0369], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0512, -0.0443, -0.0095, -0.0620, -0.1179], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0214,  0.0174,  0.0034,  0.0213, -0.0093], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0182, -0.0198,  0.0013,  0.0238, -0.0125], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0139,  0.0068,  0.0027,  0.0250,  0.0213], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.2861,  0.4000, -0.4066, -0.3103, -0.1424], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.2934, -0.1585,  0.2377, -0.1227,  0.4027], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0069,  0.0024,  0.0126, -0.0059,  0.0184], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0466,  0.0940,  0.0155, -0.0315, -0.0471], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0621, -0.0797,  0.0477, -0.0374,  0.0740], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0187, -0.0056, -0.0219, -0.0112, -0.0040], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0139,  0.0068,  0.0027,  0.0250,  0.0213], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0237,  0.0201, -0.0245, -0.0075,  0.0255], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.1642, -0.3084, -0.1119, -0.0240,  0.3046], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.4499, -0.3980,  0.2969,  0.1632,  0.1243], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0150, -0.0063,  0.0067,  0.0105,  0.0063], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0268,  0.0160,  0.0548, -0.0441, -0.0287], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0908, -0.0112, -0.1130,  0.0990, -0.0307], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0220,  0.0044,  0.0187, -0.0159,  0.0185], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0237,  0.0201, -0.0245, -0.0075,  0.0255], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0113,  0.0258,  0.0301, -0.0280, -0.0200], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.0978, -0.2572, -0.4917, -0.3163,  0.3857], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.3373, -0.4061,  0.1079, -0.4628,  0.3361], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0028,  0.0147,  0.0081, -0.0178, -0.0159], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0457,  0.1141,  0.0367, -0.0422, -0.0361], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0336, -0.0609, -0.0004, -0.0197, -0.0465], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0144, -0.0140, -0.0123,  0.0029, -0.0064], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0113,  0.0258,  0.0301, -0.0280, -0.0200], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0046, -0.0282,  0.0090, -0.0098,  0.0035], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.1731,  0.2874, -0.3434,  0.2143,  0.0646], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.4668,  0.1070,  0.3985, -0.0698, -0.1612], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0204, -0.0169, -0.0141, -0.0068, -0.0179], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.0728, -0.1099, -0.0843,  0.0357,  0.0735], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.1098, -0.1222, -0.0317, -0.1210, -0.0891], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0095,  0.0068, -0.0218,  0.0172,  0.0125], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0046, -0.0282,  0.0090, -0.0098,  0.0035], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0115,  0.0197,  0.0031, -0.0201,  0.0167], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.4985, -0.2308, -0.3883, -0.4050,  0.1712], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.3534, -0.4276, -0.1365, -0.2885, -0.1593], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0115, -0.0163,  0.0042,  0.0073, -0.0051], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.0425,  0.1150,  0.0142, -0.0415, -0.0766], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0965,  0.0414, -0.0376,  0.0907, -0.0653], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0122, -0.0031,  0.0216, -0.0137,  0.0143], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0115,  0.0197,  0.0031, -0.0201,  0.0167], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0112,  0.0238,  0.0010,  0.0260, -0.0119], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.4186,  0.0416,  0.3432, -0.4039,  0.1720], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.3085, -0.4105,  0.0413, -0.2295,  0.4360], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([0.0005, 0.0048, 0.0163, 0.0147, 0.0221], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.0601,  0.0109, -0.1246,  0.1072,  0.0585], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0412, -0.1153,  0.0530, -0.0626,  0.0717], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0215,  0.0129, -0.0216,  0.0119,  0.0127], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0112,  0.0238,  0.0010,  0.0260, -0.0119], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0053, -0.0087,  0.0061,  0.0106, -0.0303], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.4704,  0.3002, -0.4173,  0.4874, -0.1378], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.3599,  0.1133, -0.3175, -0.3218, -0.1364], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0164, -0.0011,  0.0059, -0.0155, -0.0178], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0894,  0.0181, -0.0328, -0.0032,  0.0866], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.1073,  0.0517, -0.0172,  0.0896,  0.0264], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0167, -0.0106,  0.0128,  0.0022, -0.0129], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0053, -0.0087,  0.0061,  0.0106, -0.0303], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0004, -0.0054,  0.0220,  0.0031,  0.0302], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.4394, -0.3625, -0.3422,  0.3586, -0.4087], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.3084, -0.1610,  0.3647, -0.4687,  0.4779], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([0.0155, 0.0014, 0.0061, 0.0134, 0.0127], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0563, -0.0708, -0.0477, -0.1157, -0.1104], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0800, -0.1204, -0.0610, -0.0218,  0.0046], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0027, -0.0045,  0.0019,  0.0031, -0.0216], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0004, -0.0054,  0.0220,  0.0031,  0.0302], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0070,  0.0102, -0.0309, -0.0107, -0.0208], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.0687, -0.3323,  0.1866,  0.0715, -0.3673], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.4337,  0.4186,  0.3285, -0.1627, -0.4914], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0085, -0.0023,  0.0005, -0.0179, -0.0218], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0127, -0.1163,  0.1147, -0.1109, -0.1012], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0061,  0.0522, -0.0925,  0.1084,  0.0479], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0066, -0.0138,  0.0034,  0.0205,  0.0070], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0070,  0.0102, -0.0309, -0.0107, -0.0208], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0298, -0.0109, -0.0155, -0.0098,  0.0065], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.2703, -0.0442,  0.1074,  0.4265,  0.2853], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.3123, -0.1180, -0.0530, -0.0699, -0.1574], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0007,  0.0040, -0.0039,  0.0097, -0.0126], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.0974, -0.0855,  0.0948, -0.0557, -0.0829], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0508,  0.0257,  0.0982,  0.0639, -0.0440], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0171, -0.0188, -0.0169, -0.0018, -0.0114], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0298, -0.0109, -0.0155, -0.0098,  0.0065], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0305, -0.0032,  0.0306,  0.0206,  0.0207], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.4681, -0.3463,  0.0697, -0.3427, -0.3708], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.2238,  0.1476, -0.2327, -0.2373,  0.1963], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0136, -0.0120,  0.0193, -0.0185,  0.0139], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.1190, -0.1170, -0.0210,  0.0019,  0.0137], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0897, -0.0606,  0.1225, -0.0446,  0.0790], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0097,  0.0117, -0.0109, -0.0202, -0.0143], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0305, -0.0032,  0.0306,  0.0206,  0.0207], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([0.0198, 0.0298, 0.0124, 0.0237, 0.0006], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.2478,  0.3777, -0.4755,  0.0472, -0.0998], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.3419, -0.1391, -0.0091, -0.3248,  0.3899], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0196, -0.0102, -0.0017,  0.0097,  0.0164], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.1002,  0.0626,  0.0556, -0.0375,  0.0910], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0863, -0.0998, -0.0951, -0.1058, -0.0055], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0162, -0.0135,  0.0170, -0.0015,  0.0007], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([0.0198, 0.0298, 0.0124, 0.0237, 0.0006], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0303, -0.0281, -0.0070,  0.0286, -0.0232], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.4029, -0.0659,  0.4246, -0.4028, -0.1911], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.0964,  0.3396, -0.2200,  0.3467,  0.3593], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0030,  0.0217, -0.0125,  0.0178, -0.0133], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0749,  0.0159, -0.0406,  0.0569, -0.0812], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0189, -0.1144, -0.0639, -0.0532,  0.0248], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0182, -0.0040, -0.0128,  0.0120,  0.0019], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0303, -0.0281, -0.0070,  0.0286, -0.0232], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0216, -0.0120,  0.0217,  0.0279,  0.0298], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.1059,  0.1948, -0.2397,  0.3230,  0.3401], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.2003, -0.4491, -0.2422, -0.3317, -0.2608], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0063,  0.0189,  0.0174, -0.0184, -0.0003], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([0.0697, 0.0142, 0.0608, 0.0995, 0.1027], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.1137, -0.0833,  0.1058, -0.0982, -0.0880], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([0.0158, 0.0121, 0.0127, 0.0161, 0.0182], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0216, -0.0120,  0.0217,  0.0279,  0.0298], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0127, -0.0240, -0.0247,  0.0155,  0.0091], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.1652,  0.1211,  0.0307, -0.0204, -0.1133], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.1161, -0.3264,  0.4636, -0.3915, -0.1533], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0077,  0.0039, -0.0109, -0.0214, -0.0148], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.1213,  0.0571,  0.0224, -0.1025, -0.0241], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0157, -0.0768,  0.0380, -0.0950,  0.0586], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0191, -0.0049,  0.0052, -0.0137, -0.0070], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0127, -0.0240, -0.0247,  0.0155,  0.0091], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0243,  0.0230, -0.0035, -0.0084,  0.0203], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.1255,  0.0294, -0.2835, -0.4145,  0.2801], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.4254,  0.2778, -0.4420,  0.1740, -0.0193], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0012,  0.0098,  0.0004, -0.0168, -0.0065], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.0370,  0.0673,  0.0456,  0.0710, -0.1224], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0694,  0.1084,  0.0143,  0.0828, -0.0507], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0079,  0.0065, -0.0189,  0.0004,  0.0199], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0243,  0.0230, -0.0035, -0.0084,  0.0203], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0224, -0.0269, -0.0016, -0.0195, -0.0275], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.4328, -0.2075, -0.2048,  0.1691, -0.2868], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.2696,  0.2265,  0.0199,  0.2582, -0.2464], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0154, -0.0133,  0.0130,  0.0003, -0.0003], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0486, -0.0458,  0.0404, -0.0251, -0.0351], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0841,  0.0100,  0.0055,  0.0022,  0.0299], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0071,  0.0113, -0.0136,  0.0014, -0.0086], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0224, -0.0269, -0.0016, -0.0195, -0.0275], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0068,  0.0031, -0.0020,  0.0307,  0.0070], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.3056,  0.2649, -0.1232, -0.1038,  0.0285], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.0615,  0.2843, -0.4301, -0.2241,  0.2561], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0004,  0.0220, -0.0116, -0.0018, -0.0206], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.1122, -0.0518, -0.1119,  0.0114, -0.0272], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0093, -0.0496, -0.0336, -0.0016, -0.0861], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0058, -0.0002,  0.0012, -0.0087, -0.0004], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0068,  0.0031, -0.0020,  0.0307,  0.0070], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0107, -0.0037,  0.0096, -0.0100, -0.0292], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.2828, -0.3997, -0.2420, -0.1539,  0.4976], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.4199,  0.0869,  0.1140,  0.1672, -0.2967], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0054,  0.0086, -0.0174, -0.0140, -0.0086], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.0030, -0.0944,  0.0290, -0.0639, -0.0010], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0370, -0.1112,  0.1020, -0.0523, -0.1020], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0125,  0.0007, -0.0009, -0.0175,  0.0148], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0107, -0.0037,  0.0096, -0.0100, -0.0292], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([0.0270, 0.0235, 0.0037, 0.0024, 0.0059], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.2654, -0.2916,  0.2225,  0.0095, -0.1220], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.1224,  0.1840,  0.1692, -0.0411, -0.1330], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0044, -0.0179,  0.0081, -0.0028,  0.0216], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.0906,  0.0152,  0.1137,  0.0538, -0.0731], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0701, -0.0316,  0.0191,  0.0193,  0.1000], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0144,  0.0126, -0.0134,  0.0066, -0.0182], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([0.0270, 0.0235, 0.0037, 0.0024, 0.0059], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0262,  0.0215, -0.0301, -0.0255,  0.0272], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.1223,  0.2123, -0.1083, -0.0867, -0.3239], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.4823, -0.0125, -0.0131,  0.1094, -0.1348], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0111, -0.0072,  0.0063,  0.0220, -0.0008], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.0528,  0.1199,  0.0654, -0.0344,  0.0672], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0961, -0.0059, -0.0611,  0.0551,  0.1190], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0196, -0.0050, -0.0083,  0.0086,  0.0154], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0262,  0.0215, -0.0301, -0.0255,  0.0272], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0066,  0.0134, -0.0264,  0.0174,  0.0127], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.4056, -0.1132,  0.4245, -0.0420,  0.4714], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.3431,  0.2697, -0.2277,  0.2856, -0.3992], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0206, -0.0151,  0.0142, -0.0011, -0.0157], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.1128,  0.0691,  0.1243,  0.1226, -0.0349], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0845,  0.0289,  0.1209, -0.0788, -0.0974], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0140,  0.0093,  0.0211, -0.0151, -0.0164], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0066,  0.0134, -0.0264,  0.0174,  0.0127], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0030,  0.0089, -0.0161,  0.0258,  0.0241], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.0595, -0.0040, -0.3025, -0.4791,  0.3771], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.1457, -0.0015,  0.0117,  0.4165,  0.2778], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0091, -0.0078, -0.0002, -0.0127, -0.0123], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.0959, -0.1152, -0.0499, -0.1146, -0.0537], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0419, -0.1038, -0.0903, -0.1196,  0.0375], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0123,  0.0165, -0.0128,  0.0186, -0.0132], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0030,  0.0089, -0.0161,  0.0258,  0.0241], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0167, -0.0152,  0.0285, -0.0224,  0.0168], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.3544,  0.0250, -0.0496, -0.2206,  0.3396], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.0866,  0.2945,  0.0349,  0.4383,  0.1525], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0005,  0.0187,  0.0205,  0.0063,  0.0109], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0491,  0.0070, -0.0947, -0.1121, -0.0884], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.1013, -0.0881, -0.1165, -0.0137,  0.0543], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0111, -0.0185, -0.0129,  0.0179,  0.0102], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0167, -0.0152,  0.0285, -0.0224,  0.0168], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0295,  0.0045, -0.0102, -0.0076, -0.0312], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.2735,  0.2400,  0.2835, -0.4119,  0.0995], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.4671,  0.1825, -0.0503,  0.1858, -0.4688], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0083, -0.0118,  0.0178,  0.0071, -0.0010], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.0620, -0.0744, -0.0174,  0.0919,  0.0324], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.1220, -0.0634,  0.0113,  0.0096,  0.0385], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0139,  0.0103, -0.0040,  0.0144,  0.0202], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0295,  0.0045, -0.0102, -0.0076, -0.0312], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0303, -0.0094,  0.0081,  0.0024, -0.0176], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.0751, -0.4947, -0.0880,  0.4839, -0.4790], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.4050, -0.2663, -0.3312, -0.3646, -0.3379], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0172, -0.0023, -0.0043, -0.0187,  0.0160], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.1176, -0.0460,  0.0336,  0.0400, -0.1060], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0427,  0.0637, -0.0419,  0.1088, -0.0258], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0160, -0.0178, -0.0192,  0.0015, -0.0124], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0303, -0.0094,  0.0081,  0.0024, -0.0176], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0083,  0.0029, -0.0272, -0.0112,  0.0081], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.3070, -0.0159, -0.2755, -0.2269,  0.2173], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.0849, -0.1766,  0.1476,  0.3298, -0.1838], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0196, -0.0142, -0.0171,  0.0081, -0.0098], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0601,  0.1118, -0.0638,  0.0757, -0.0007], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.1220,  0.0833,  0.1119,  0.0092, -0.0779], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0206, -0.0214, -0.0155, -0.0108,  0.0019], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0083,  0.0029, -0.0272, -0.0112,  0.0081], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0235, -0.0062,  0.0306,  0.0163,  0.0022], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.2478, -0.0340, -0.4156,  0.0604,  0.1171], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.2354,  0.3700,  0.2610,  0.4806, -0.2286], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0069,  0.0130,  0.0130,  0.0023, -0.0053], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0824,  0.0694,  0.0755, -0.0431,  0.0945], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0869, -0.0436, -0.0284,  0.1172,  0.0735], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0178, -0.0180, -0.0151,  0.0103, -0.0159], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0235, -0.0062,  0.0306,  0.0163,  0.0022], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0259, -0.0079, -0.0156,  0.0306,  0.0007], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.4390, -0.2967, -0.1635,  0.2309, -0.4682], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.3021,  0.3007, -0.2083, -0.4322,  0.0590], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0086, -0.0079,  0.0214, -0.0060, -0.0034], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0186,  0.0388,  0.0636, -0.1219, -0.0431], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0433,  0.0342,  0.0914,  0.0281, -0.0842], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0202, -0.0105, -0.0196, -0.0009, -0.0125], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0259, -0.0079, -0.0156,  0.0306,  0.0007], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0061, -0.0087, -0.0064, -0.0292, -0.0165], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.3664,  0.1891, -0.3107, -0.3779, -0.0348], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.2763,  0.2991, -0.4552, -0.4896, -0.3597], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0062, -0.0100,  0.0038, -0.0186,  0.0059], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.1154, -0.0368, -0.0733, -0.0378,  0.0130], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0340, -0.0207, -0.0041, -0.0128,  0.0809], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0068, -0.0156,  0.0154,  0.0057, -0.0151], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0061, -0.0087, -0.0064, -0.0292, -0.0165], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0194, -0.0003, -0.0187, -0.0211,  0.0031], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.3833, -0.4740,  0.2197, -0.3834, -0.3065], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.3274, -0.0611, -0.2103,  0.4266, -0.1592], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0199, -0.0133, -0.0008, -0.0009, -0.0142], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.0598, -0.0768, -0.0804, -0.0831,  0.0011], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.1084,  0.0451,  0.0545, -0.1186, -0.0191], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0091, -0.0131, -0.0149, -0.0129, -0.0144], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0194, -0.0003, -0.0187, -0.0211,  0.0031], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0193, -0.0169, -0.0303,  0.0135, -0.0045], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.0635,  0.2994, -0.3390,  0.4728,  0.1740], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.2000, -0.3699, -0.4704,  0.1344, -0.3590], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0029, -0.0058,  0.0216,  0.0144, -0.0057], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0223,  0.0929, -0.1193, -0.0304, -0.0134], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0038, -0.0110,  0.0978, -0.0856, -0.0774], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0145,  0.0139,  0.0029,  0.0099, -0.0082], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0193, -0.0169, -0.0303,  0.0135, -0.0045], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0070,  0.0235, -0.0006,  0.0260, -0.0070], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.4035, -0.3517, -0.3826, -0.0412, -0.3339], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([1.0851e-01, 2.0385e-04, 4.1114e-01, 9.2444e-02, 3.1331e-01],
       grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0187,  0.0202,  0.0013, -0.0216, -0.0118], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.0181, -0.0922,  0.1128, -0.1004, -0.0384], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.1095, -0.0146, -0.1112,  0.0799,  0.0608], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0217,  0.0008, -0.0082,  0.0048,  0.0113], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0070,  0.0235, -0.0006,  0.0260, -0.0070], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0002, -0.0297, -0.0027, -0.0014, -0.0178], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.3371, -0.1589, -0.1086, -0.1989,  0.3260], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.0859, -0.2469,  0.4963,  0.0394, -0.3457], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0153, -0.0102,  0.0176,  0.0144, -0.0149], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0235, -0.0502,  0.1030,  0.0678,  0.0744], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0021,  0.0670, -0.0728, -0.0874, -0.0480], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([0.0040, 0.0169, 0.0082, 0.0006, 0.0115], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0002, -0.0297, -0.0027, -0.0014, -0.0178], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0141, -0.0197, -0.0252,  0.0256, -0.0197], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.1310, -0.3504,  0.1738,  0.1610,  0.4501], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.0090,  0.3460,  0.2698, -0.3956, -0.4229], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0159, -0.0216,  0.0154, -0.0169, -0.0142], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0635,  0.0774, -0.0707,  0.0078,  0.1110], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0216,  0.0904,  0.0096,  0.0531, -0.0543], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([0.0207, 0.0150, 0.0136, 0.0007, 0.0079], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0141, -0.0197, -0.0252,  0.0256, -0.0197], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0216, -0.0071, -0.0071, -0.0142,  0.0072], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.3143, -0.1644, -0.4358,  0.4636, -0.4748], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.1642, -0.1307,  0.0128,  0.2795,  0.0142], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0174, -0.0171,  0.0195,  0.0173, -0.0119], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0827, -0.0766, -0.0317, -0.0783, -0.1064], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 8.0591e-02, -3.3081e-06, -1.1220e-01,  1.0650e-01, -2.0919e-02],
       grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0168, -0.0179,  0.0099, -0.0180,  0.0151], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0216, -0.0071, -0.0071, -0.0142,  0.0072], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0278, -0.0034, -0.0149, -0.0213, -0.0255], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.3288,  0.4195,  0.3686, -0.3463,  0.3642], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.4520, -0.2446,  0.0885, -0.3574,  0.3497], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0110, -0.0138,  0.0038, -0.0082, -0.0209], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0269, -0.0147, -0.0112,  0.0081, -0.0367], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0892,  0.1201,  0.0622, -0.0331,  0.1247], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0083,  0.0014, -0.0071,  0.0066,  0.0156], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0278, -0.0034, -0.0149, -0.0213, -0.0255], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0311,  0.0212, -0.0197,  0.0276,  0.0189], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.0949, -0.2465, -0.2866, -0.2680, -0.1852], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.0463, -0.0579,  0.0497, -0.0820, -0.4546], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0187, -0.0097, -0.0097,  0.0206,  0.0165], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0006,  0.0160, -0.0151,  0.1077,  0.1241], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0975, -0.0952,  0.1126,  0.0803,  0.0091], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([ 0.0024, -0.0193,  0.0004, -0.0048, -0.0137], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0311,  0.0212, -0.0197,  0.0276,  0.0189], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0130,  0.0306, -0.0020,  0.0063,  0.0263], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([0.1284, 0.4975, 0.3215, 0.2484, 0.2383], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.1861, -0.0633,  0.4421, -0.4303,  0.4049], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([-0.0141, -0.0046,  0.0056,  0.0176,  0.0083], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0954, -0.0723,  0.0427,  0.1084,  0.0694], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0262,  0.0199, -0.1011, -0.1238, -0.1076], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0152, -0.0105, -0.0071,  0.0168,  0.0068], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0130,  0.0306, -0.0020,  0.0063,  0.0263], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0137,  0.0185,  0.0048, -0.0263,  0.0255], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-6.2795e-02,  9.3624e-02,  2.0415e-04, -1.0306e-02, -4.1781e-01],
       grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.1695, -0.1435, -0.2070, -0.2103,  0.4196], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0035,  0.0177,  0.0110, -0.0035, -0.0150], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([-0.0634,  0.0727,  0.0640,  0.0749,  0.0568], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([ 0.0005,  0.0334, -0.0032, -0.0815, -0.0146], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0026, -0.0142,  0.0117, -0.0080,  0.0031], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0137,  0.0185,  0.0048, -0.0263,  0.0255], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([-0.0111,  0.0049, -0.0270, -0.0024, -0.0170], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([-0.1182,  0.3925,  0.3713, -0.2087, -0.4877], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([-0.1707,  0.0183,  0.4138,  0.0600, -0.0825], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([ 0.0145,  0.0182,  0.0203, -0.0166, -0.0214], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.1105, -0.1192,  0.1238, -0.1024,  0.1197], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0473, -0.1198,  0.0608, -0.0164,  0.1035], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0103,  0.0116,  0.0015,  0.0015,  0.0205], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([-0.0111,  0.0049, -0.0270, -0.0024, -0.0170], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
[ResidualBlock] Initializing ResidualBlock.
[MambaBlock] Initializing MambaBlock.
  [MambaBlock] Initialized in_proj with input_dim=1024, output_dim=4096
  [MambaBlock] in_proj.weight shape: torch.Size([4096, 1024])
  [MambaBlock] in_proj.weight sample values: tensor([ 0.0237, -0.0199, -0.0065,  0.0027,  0.0231], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized conv1d with in_channels=2048, out_channels=2048, kernel_size=4, groups=2048, padding=3
  [MambaBlock] conv1d.weight shape: torch.Size([2048, 1, 4])
  [MambaBlock] conv1d.weight sample values: tensor([ 0.0394, -0.1423, -0.1166, -0.2677,  0.2942], grad_fn=<SliceBackward0>)
  [MambaBlock] conv1d.bias shape: torch.Size([2048])
  [MambaBlock] conv1d.bias sample values: tensor([ 0.0961, -0.0678, -0.2730,  0.1513, -0.2077], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized x_proj with input_dim=2048, output_dim=96
  [MambaBlock] x_proj.weight shape: torch.Size([96, 2048])
  [MambaBlock] x_proj.weight sample values: tensor([0.0130, 0.0065, 0.0198, 0.0075, 0.0078], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized dt_proj with input_dim=64, output_dim=2048
  [MambaBlock] dt_proj.weight shape: torch.Size([2048, 64])
  [MambaBlock] dt_proj.weight sample values: tensor([ 0.0624, -0.0233, -0.0228, -0.0589,  0.0945], grad_fn=<SliceBackward0>)
  [MambaBlock] dt_proj.bias shape: torch.Size([2048])
  [MambaBlock] dt_proj.bias sample values: tensor([-0.0057, -0.0212,  0.0850, -0.0184, -0.0584], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized A_log with shape: torch.Size([2048, 16])
  [MambaBlock] A_log sample values: tensor([0.0000, 0.6931, 1.0986, 1.3863, 1.6094], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized D with shape: torch.Size([2048])
  [MambaBlock] D sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [MambaBlock] Initialized out_proj with input_dim=2048, output_dim=1024
  [MambaBlock] out_proj.weight shape: torch.Size([1024, 2048])
  [MambaBlock] out_proj.weight sample values: tensor([-0.0142,  0.0120,  0.0016, -0.0133, -0.0125], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized MambaBlock.
    [ResidualBlock] mixer.in_proj.weight shape: torch.Size([4096, 1024])
    [ResidualBlock] mixer.in_proj.weight sample values: tensor([ 0.0237, -0.0199, -0.0065,  0.0027,  0.0231], grad_fn=<SliceBackward0>)
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [ResidualBlock] Initialized RMSNorm with d_model=1024
    [ResidualBlock] norm.weight shape: torch.Size([1024])
    [ResidualBlock] norm.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba] Initialized 48 ResidualBlocks.
[RMSNorm] Initialized RMSNorm with d_model=1024, eps=1e-05
  [RMSNorm] weight shape: torch.Size([1024])
  [RMSNorm] weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba] Initialized final RMSNorm with d_model=1024
  [Mamba] norm_f.weight shape: torch.Size([1024])
  [Mamba] norm_f.weight sample values: tensor([1., 1., 1., 1., 1.], grad_fn=<SliceBackward0>)
  [Mamba] Initialized LM Head and tied weights with embedding.
  [Mamba] lm_head.weight shape: torch.Size([50280, 1024])
  [Mamba] lm_head.weight sample values: tensor([-0.1888, -0.5154, -1.0147, -0.4001,  0.9698], grad_fn=<SliceBackward0>)
[Mamba.from_pretrained] Loaded state_dict from /home/ryouta/.cache/huggingface/hub/models--state-spaces--mamba-370m/snapshots/b6c47221dc4908532cc9773d469d6b8cbe3f0762/pytorch_model.bin
  [Mamba.from_pretrained] state_dict keys: ['backbone.embedding.weight', 'backbone.layers.0.mixer.D', 'backbone.layers.0.mixer.in_proj.weight', 'backbone.layers.0.mixer.conv1d.weight', 'backbone.layers.0.mixer.conv1d.bias']
  [Mamba.from_pretrained] Mapping backbone.embedding.weight to embedding.weight
  [Mamba.from_pretrained] Mapping backbone.layers.0.mixer.D to layers.0.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.0.mixer.in_proj.weight to layers.0.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.0.mixer.conv1d.weight to layers.0.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.0.mixer.conv1d.bias to layers.0.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.0.mixer.x_proj.weight to layers.0.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.0.mixer.dt_proj.weight to layers.0.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.0.mixer.dt_proj.bias to layers.0.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.0.mixer.A_log to layers.0.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.0.mixer.out_proj.weight to layers.0.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.0.norm.weight to layers.0.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.1.mixer.D to layers.1.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.1.mixer.in_proj.weight to layers.1.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.1.mixer.conv1d.weight to layers.1.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.1.mixer.conv1d.bias to layers.1.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.1.mixer.x_proj.weight to layers.1.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.1.mixer.dt_proj.weight to layers.1.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.1.mixer.dt_proj.bias to layers.1.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.1.mixer.A_log to layers.1.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.1.mixer.out_proj.weight to layers.1.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.1.norm.weight to layers.1.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.2.mixer.D to layers.2.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.2.mixer.in_proj.weight to layers.2.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.2.mixer.conv1d.weight to layers.2.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.2.mixer.conv1d.bias to layers.2.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.2.mixer.x_proj.weight to layers.2.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.2.mixer.dt_proj.weight to layers.2.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.2.mixer.dt_proj.bias to layers.2.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.2.mixer.A_log to layers.2.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.2.mixer.out_proj.weight to layers.2.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.2.norm.weight to layers.2.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.3.mixer.D to layers.3.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.3.mixer.in_proj.weight to layers.3.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.3.mixer.conv1d.weight to layers.3.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.3.mixer.conv1d.bias to layers.3.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.3.mixer.x_proj.weight to layers.3.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.3.mixer.dt_proj.weight to layers.3.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.3.mixer.dt_proj.bias to layers.3.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.3.mixer.A_log to layers.3.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.3.mixer.out_proj.weight to layers.3.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.3.norm.weight to layers.3.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.4.mixer.D to layers.4.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.4.mixer.in_proj.weight to layers.4.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.4.mixer.conv1d.weight to layers.4.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.4.mixer.conv1d.bias to layers.4.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.4.mixer.x_proj.weight to layers.4.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.4.mixer.dt_proj.weight to layers.4.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.4.mixer.dt_proj.bias to layers.4.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.4.mixer.A_log to layers.4.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.4.mixer.out_proj.weight to layers.4.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.4.norm.weight to layers.4.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.5.mixer.D to layers.5.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.5.mixer.in_proj.weight to layers.5.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.5.mixer.conv1d.weight to layers.5.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.5.mixer.conv1d.bias to layers.5.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.5.mixer.x_proj.weight to layers.5.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.5.mixer.dt_proj.weight to layers.5.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.5.mixer.dt_proj.bias to layers.5.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.5.mixer.A_log to layers.5.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.5.mixer.out_proj.weight to layers.5.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.5.norm.weight to layers.5.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.6.mixer.D to layers.6.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.6.mixer.in_proj.weight to layers.6.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.6.mixer.conv1d.weight to layers.6.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.6.mixer.conv1d.bias to layers.6.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.6.mixer.x_proj.weight to layers.6.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.6.mixer.dt_proj.weight to layers.6.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.6.mixer.dt_proj.bias to layers.6.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.6.mixer.A_log to layers.6.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.6.mixer.out_proj.weight to layers.6.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.6.norm.weight to layers.6.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.7.mixer.D to layers.7.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.7.mixer.in_proj.weight to layers.7.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.7.mixer.conv1d.weight to layers.7.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.7.mixer.conv1d.bias to layers.7.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.7.mixer.x_proj.weight to layers.7.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.7.mixer.dt_proj.weight to layers.7.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.7.mixer.dt_proj.bias to layers.7.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.7.mixer.A_log to layers.7.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.7.mixer.out_proj.weight to layers.7.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.7.norm.weight to layers.7.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.8.mixer.D to layers.8.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.8.mixer.in_proj.weight to layers.8.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.8.mixer.conv1d.weight to layers.8.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.8.mixer.conv1d.bias to layers.8.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.8.mixer.x_proj.weight to layers.8.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.8.mixer.dt_proj.weight to layers.8.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.8.mixer.dt_proj.bias to layers.8.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.8.mixer.A_log to layers.8.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.8.mixer.out_proj.weight to layers.8.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.8.norm.weight to layers.8.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.9.mixer.D to layers.9.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.9.mixer.in_proj.weight to layers.9.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.9.mixer.conv1d.weight to layers.9.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.9.mixer.conv1d.bias to layers.9.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.9.mixer.x_proj.weight to layers.9.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.9.mixer.dt_proj.weight to layers.9.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.9.mixer.dt_proj.bias to layers.9.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.9.mixer.A_log to layers.9.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.9.mixer.out_proj.weight to layers.9.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.9.norm.weight to layers.9.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.10.mixer.D to layers.10.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.10.mixer.in_proj.weight to layers.10.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.10.mixer.conv1d.weight to layers.10.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.10.mixer.conv1d.bias to layers.10.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.10.mixer.x_proj.weight to layers.10.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.10.mixer.dt_proj.weight to layers.10.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.10.mixer.dt_proj.bias to layers.10.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.10.mixer.A_log to layers.10.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.10.mixer.out_proj.weight to layers.10.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.10.norm.weight to layers.10.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.11.mixer.D to layers.11.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.11.mixer.in_proj.weight to layers.11.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.11.mixer.conv1d.weight to layers.11.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.11.mixer.conv1d.bias to layers.11.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.11.mixer.x_proj.weight to layers.11.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.11.mixer.dt_proj.weight to layers.11.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.11.mixer.dt_proj.bias to layers.11.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.11.mixer.A_log to layers.11.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.11.mixer.out_proj.weight to layers.11.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.11.norm.weight to layers.11.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.12.mixer.D to layers.12.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.12.mixer.in_proj.weight to layers.12.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.12.mixer.conv1d.weight to layers.12.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.12.mixer.conv1d.bias to layers.12.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.12.mixer.x_proj.weight to layers.12.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.12.mixer.dt_proj.weight to layers.12.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.12.mixer.dt_proj.bias to layers.12.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.12.mixer.A_log to layers.12.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.12.mixer.out_proj.weight to layers.12.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.12.norm.weight to layers.12.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.13.mixer.D to layers.13.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.13.mixer.in_proj.weight to layers.13.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.13.mixer.conv1d.weight to layers.13.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.13.mixer.conv1d.bias to layers.13.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.13.mixer.x_proj.weight to layers.13.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.13.mixer.dt_proj.weight to layers.13.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.13.mixer.dt_proj.bias to layers.13.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.13.mixer.A_log to layers.13.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.13.mixer.out_proj.weight to layers.13.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.13.norm.weight to layers.13.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.14.mixer.D to layers.14.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.14.mixer.in_proj.weight to layers.14.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.14.mixer.conv1d.weight to layers.14.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.14.mixer.conv1d.bias to layers.14.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.14.mixer.x_proj.weight to layers.14.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.14.mixer.dt_proj.weight to layers.14.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.14.mixer.dt_proj.bias to layers.14.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.14.mixer.A_log to layers.14.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.14.mixer.out_proj.weight to layers.14.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.14.norm.weight to layers.14.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.15.mixer.D to layers.15.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.15.mixer.in_proj.weight to layers.15.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.15.mixer.conv1d.weight to layers.15.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.15.mixer.conv1d.bias to layers.15.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.15.mixer.x_proj.weight to layers.15.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.15.mixer.dt_proj.weight to layers.15.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.15.mixer.dt_proj.bias to layers.15.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.15.mixer.A_log to layers.15.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.15.mixer.out_proj.weight to layers.15.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.15.norm.weight to layers.15.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.16.mixer.D to layers.16.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.16.mixer.in_proj.weight to layers.16.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.16.mixer.conv1d.weight to layers.16.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.16.mixer.conv1d.bias to layers.16.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.16.mixer.x_proj.weight to layers.16.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.16.mixer.dt_proj.weight to layers.16.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.16.mixer.dt_proj.bias to layers.16.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.16.mixer.A_log to layers.16.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.16.mixer.out_proj.weight to layers.16.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.16.norm.weight to layers.16.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.17.mixer.D to layers.17.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.17.mixer.in_proj.weight to layers.17.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.17.mixer.conv1d.weight to layers.17.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.17.mixer.conv1d.bias to layers.17.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.17.mixer.x_proj.weight to layers.17.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.17.mixer.dt_proj.weight to layers.17.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.17.mixer.dt_proj.bias to layers.17.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.17.mixer.A_log to layers.17.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.17.mixer.out_proj.weight to layers.17.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.17.norm.weight to layers.17.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.18.mixer.D to layers.18.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.18.mixer.in_proj.weight to layers.18.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.18.mixer.conv1d.weight to layers.18.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.18.mixer.conv1d.bias to layers.18.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.18.mixer.x_proj.weight to layers.18.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.18.mixer.dt_proj.weight to layers.18.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.18.mixer.dt_proj.bias to layers.18.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.18.mixer.A_log to layers.18.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.18.mixer.out_proj.weight to layers.18.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.18.norm.weight to layers.18.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.19.mixer.D to layers.19.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.19.mixer.in_proj.weight to layers.19.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.19.mixer.conv1d.weight to layers.19.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.19.mixer.conv1d.bias to layers.19.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.19.mixer.x_proj.weight to layers.19.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.19.mixer.dt_proj.weight to layers.19.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.19.mixer.dt_proj.bias to layers.19.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.19.mixer.A_log to layers.19.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.19.mixer.out_proj.weight to layers.19.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.19.norm.weight to layers.19.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.20.mixer.D to layers.20.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.20.mixer.in_proj.weight to layers.20.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.20.mixer.conv1d.weight to layers.20.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.20.mixer.conv1d.bias to layers.20.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.20.mixer.x_proj.weight to layers.20.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.20.mixer.dt_proj.weight to layers.20.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.20.mixer.dt_proj.bias to layers.20.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.20.mixer.A_log to layers.20.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.20.mixer.out_proj.weight to layers.20.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.20.norm.weight to layers.20.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.21.mixer.D to layers.21.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.21.mixer.in_proj.weight to layers.21.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.21.mixer.conv1d.weight to layers.21.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.21.mixer.conv1d.bias to layers.21.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.21.mixer.x_proj.weight to layers.21.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.21.mixer.dt_proj.weight to layers.21.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.21.mixer.dt_proj.bias to layers.21.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.21.mixer.A_log to layers.21.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.21.mixer.out_proj.weight to layers.21.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.21.norm.weight to layers.21.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.22.mixer.D to layers.22.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.22.mixer.in_proj.weight to layers.22.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.22.mixer.conv1d.weight to layers.22.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.22.mixer.conv1d.bias to layers.22.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.22.mixer.x_proj.weight to layers.22.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.22.mixer.dt_proj.weight to layers.22.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.22.mixer.dt_proj.bias to layers.22.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.22.mixer.A_log to layers.22.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.22.mixer.out_proj.weight to layers.22.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.22.norm.weight to layers.22.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.23.mixer.D to layers.23.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.23.mixer.in_proj.weight to layers.23.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.23.mixer.conv1d.weight to layers.23.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.23.mixer.conv1d.bias to layers.23.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.23.mixer.x_proj.weight to layers.23.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.23.mixer.dt_proj.weight to layers.23.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.23.mixer.dt_proj.bias to layers.23.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.23.mixer.A_log to layers.23.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.23.mixer.out_proj.weight to layers.23.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.23.norm.weight to layers.23.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.24.mixer.D to layers.24.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.24.mixer.in_proj.weight to layers.24.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.24.mixer.conv1d.weight to layers.24.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.24.mixer.conv1d.bias to layers.24.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.24.mixer.x_proj.weight to layers.24.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.24.mixer.dt_proj.weight to layers.24.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.24.mixer.dt_proj.bias to layers.24.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.24.mixer.A_log to layers.24.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.24.mixer.out_proj.weight to layers.24.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.24.norm.weight to layers.24.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.25.mixer.D to layers.25.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.25.mixer.in_proj.weight to layers.25.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.25.mixer.conv1d.weight to layers.25.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.25.mixer.conv1d.bias to layers.25.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.25.mixer.x_proj.weight to layers.25.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.25.mixer.dt_proj.weight to layers.25.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.25.mixer.dt_proj.bias to layers.25.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.25.mixer.A_log to layers.25.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.25.mixer.out_proj.weight to layers.25.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.25.norm.weight to layers.25.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.26.mixer.D to layers.26.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.26.mixer.in_proj.weight to layers.26.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.26.mixer.conv1d.weight to layers.26.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.26.mixer.conv1d.bias to layers.26.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.26.mixer.x_proj.weight to layers.26.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.26.mixer.dt_proj.weight to layers.26.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.26.mixer.dt_proj.bias to layers.26.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.26.mixer.A_log to layers.26.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.26.mixer.out_proj.weight to layers.26.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.26.norm.weight to layers.26.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.27.mixer.D to layers.27.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.27.mixer.in_proj.weight to layers.27.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.27.mixer.conv1d.weight to layers.27.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.27.mixer.conv1d.bias to layers.27.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.27.mixer.x_proj.weight to layers.27.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.27.mixer.dt_proj.weight to layers.27.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.27.mixer.dt_proj.bias to layers.27.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.27.mixer.A_log to layers.27.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.27.mixer.out_proj.weight to layers.27.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.27.norm.weight to layers.27.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.28.mixer.D to layers.28.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.28.mixer.in_proj.weight to layers.28.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.28.mixer.conv1d.weight to layers.28.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.28.mixer.conv1d.bias to layers.28.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.28.mixer.x_proj.weight to layers.28.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.28.mixer.dt_proj.weight to layers.28.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.28.mixer.dt_proj.bias to layers.28.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.28.mixer.A_log to layers.28.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.28.mixer.out_proj.weight to layers.28.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.28.norm.weight to layers.28.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.29.mixer.D to layers.29.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.29.mixer.in_proj.weight to layers.29.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.29.mixer.conv1d.weight to layers.29.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.29.mixer.conv1d.bias to layers.29.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.29.mixer.x_proj.weight to layers.29.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.29.mixer.dt_proj.weight to layers.29.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.29.mixer.dt_proj.bias to layers.29.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.29.mixer.A_log to layers.29.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.29.mixer.out_proj.weight to layers.29.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.29.norm.weight to layers.29.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.30.mixer.D to layers.30.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.30.mixer.in_proj.weight to layers.30.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.30.mixer.conv1d.weight to layers.30.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.30.mixer.conv1d.bias to layers.30.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.30.mixer.x_proj.weight to layers.30.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.30.mixer.dt_proj.weight to layers.30.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.30.mixer.dt_proj.bias to layers.30.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.30.mixer.A_log to layers.30.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.30.mixer.out_proj.weight to layers.30.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.30.norm.weight to layers.30.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.31.mixer.D to layers.31.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.31.mixer.in_proj.weight to layers.31.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.31.mixer.conv1d.weight to layers.31.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.31.mixer.conv1d.bias to layers.31.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.31.mixer.x_proj.weight to layers.31.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.31.mixer.dt_proj.weight to layers.31.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.31.mixer.dt_proj.bias to layers.31.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.31.mixer.A_log to layers.31.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.31.mixer.out_proj.weight to layers.31.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.31.norm.weight to layers.31.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.32.mixer.D to layers.32.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.32.mixer.in_proj.weight to layers.32.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.32.mixer.conv1d.weight to layers.32.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.32.mixer.conv1d.bias to layers.32.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.32.mixer.x_proj.weight to layers.32.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.32.mixer.dt_proj.weight to layers.32.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.32.mixer.dt_proj.bias to layers.32.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.32.mixer.A_log to layers.32.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.32.mixer.out_proj.weight to layers.32.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.32.norm.weight to layers.32.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.33.mixer.D to layers.33.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.33.mixer.in_proj.weight to layers.33.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.33.mixer.conv1d.weight to layers.33.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.33.mixer.conv1d.bias to layers.33.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.33.mixer.x_proj.weight to layers.33.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.33.mixer.dt_proj.weight to layers.33.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.33.mixer.dt_proj.bias to layers.33.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.33.mixer.A_log to layers.33.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.33.mixer.out_proj.weight to layers.33.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.33.norm.weight to layers.33.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.34.mixer.D to layers.34.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.34.mixer.in_proj.weight to layers.34.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.34.mixer.conv1d.weight to layers.34.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.34.mixer.conv1d.bias to layers.34.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.34.mixer.x_proj.weight to layers.34.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.34.mixer.dt_proj.weight to layers.34.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.34.mixer.dt_proj.bias to layers.34.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.34.mixer.A_log to layers.34.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.34.mixer.out_proj.weight to layers.34.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.34.norm.weight to layers.34.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.35.mixer.D to layers.35.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.35.mixer.in_proj.weight to layers.35.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.35.mixer.conv1d.weight to layers.35.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.35.mixer.conv1d.bias to layers.35.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.35.mixer.x_proj.weight to layers.35.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.35.mixer.dt_proj.weight to layers.35.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.35.mixer.dt_proj.bias to layers.35.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.35.mixer.A_log to layers.35.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.35.mixer.out_proj.weight to layers.35.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.35.norm.weight to layers.35.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.36.mixer.D to layers.36.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.36.mixer.in_proj.weight to layers.36.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.36.mixer.conv1d.weight to layers.36.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.36.mixer.conv1d.bias to layers.36.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.36.mixer.x_proj.weight to layers.36.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.36.mixer.dt_proj.weight to layers.36.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.36.mixer.dt_proj.bias to layers.36.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.36.mixer.A_log to layers.36.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.36.mixer.out_proj.weight to layers.36.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.36.norm.weight to layers.36.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.37.mixer.D to layers.37.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.37.mixer.in_proj.weight to layers.37.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.37.mixer.conv1d.weight to layers.37.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.37.mixer.conv1d.bias to layers.37.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.37.mixer.x_proj.weight to layers.37.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.37.mixer.dt_proj.weight to layers.37.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.37.mixer.dt_proj.bias to layers.37.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.37.mixer.A_log to layers.37.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.37.mixer.out_proj.weight to layers.37.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.37.norm.weight to layers.37.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.38.mixer.D to layers.38.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.38.mixer.in_proj.weight to layers.38.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.38.mixer.conv1d.weight to layers.38.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.38.mixer.conv1d.bias to layers.38.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.38.mixer.x_proj.weight to layers.38.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.38.mixer.dt_proj.weight to layers.38.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.38.mixer.dt_proj.bias to layers.38.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.38.mixer.A_log to layers.38.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.38.mixer.out_proj.weight to layers.38.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.38.norm.weight to layers.38.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.39.mixer.D to layers.39.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.39.mixer.in_proj.weight to layers.39.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.39.mixer.conv1d.weight to layers.39.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.39.mixer.conv1d.bias to layers.39.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.39.mixer.x_proj.weight to layers.39.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.39.mixer.dt_proj.weight to layers.39.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.39.mixer.dt_proj.bias to layers.39.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.39.mixer.A_log to layers.39.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.39.mixer.out_proj.weight to layers.39.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.39.norm.weight to layers.39.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.40.mixer.D to layers.40.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.40.mixer.in_proj.weight to layers.40.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.40.mixer.conv1d.weight to layers.40.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.40.mixer.conv1d.bias to layers.40.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.40.mixer.x_proj.weight to layers.40.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.40.mixer.dt_proj.weight to layers.40.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.40.mixer.dt_proj.bias to layers.40.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.40.mixer.A_log to layers.40.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.40.mixer.out_proj.weight to layers.40.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.40.norm.weight to layers.40.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.41.mixer.D to layers.41.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.41.mixer.in_proj.weight to layers.41.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.41.mixer.conv1d.weight to layers.41.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.41.mixer.conv1d.bias to layers.41.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.41.mixer.x_proj.weight to layers.41.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.41.mixer.dt_proj.weight to layers.41.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.41.mixer.dt_proj.bias to layers.41.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.41.mixer.A_log to layers.41.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.41.mixer.out_proj.weight to layers.41.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.41.norm.weight to layers.41.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.42.mixer.D to layers.42.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.42.mixer.in_proj.weight to layers.42.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.42.mixer.conv1d.weight to layers.42.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.42.mixer.conv1d.bias to layers.42.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.42.mixer.x_proj.weight to layers.42.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.42.mixer.dt_proj.weight to layers.42.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.42.mixer.dt_proj.bias to layers.42.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.42.mixer.A_log to layers.42.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.42.mixer.out_proj.weight to layers.42.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.42.norm.weight to layers.42.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.43.mixer.D to layers.43.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.43.mixer.in_proj.weight to layers.43.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.43.mixer.conv1d.weight to layers.43.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.43.mixer.conv1d.bias to layers.43.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.43.mixer.x_proj.weight to layers.43.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.43.mixer.dt_proj.weight to layers.43.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.43.mixer.dt_proj.bias to layers.43.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.43.mixer.A_log to layers.43.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.43.mixer.out_proj.weight to layers.43.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.43.norm.weight to layers.43.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.44.mixer.D to layers.44.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.44.mixer.in_proj.weight to layers.44.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.44.mixer.conv1d.weight to layers.44.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.44.mixer.conv1d.bias to layers.44.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.44.mixer.x_proj.weight to layers.44.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.44.mixer.dt_proj.weight to layers.44.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.44.mixer.dt_proj.bias to layers.44.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.44.mixer.A_log to layers.44.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.44.mixer.out_proj.weight to layers.44.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.44.norm.weight to layers.44.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.45.mixer.D to layers.45.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.45.mixer.in_proj.weight to layers.45.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.45.mixer.conv1d.weight to layers.45.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.45.mixer.conv1d.bias to layers.45.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.45.mixer.x_proj.weight to layers.45.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.45.mixer.dt_proj.weight to layers.45.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.45.mixer.dt_proj.bias to layers.45.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.45.mixer.A_log to layers.45.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.45.mixer.out_proj.weight to layers.45.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.45.norm.weight to layers.45.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.46.mixer.D to layers.46.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.46.mixer.in_proj.weight to layers.46.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.46.mixer.conv1d.weight to layers.46.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.46.mixer.conv1d.bias to layers.46.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.46.mixer.x_proj.weight to layers.46.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.46.mixer.dt_proj.weight to layers.46.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.46.mixer.dt_proj.bias to layers.46.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.46.mixer.A_log to layers.46.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.46.mixer.out_proj.weight to layers.46.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.46.norm.weight to layers.46.norm.weight
  [Mamba.from_pretrained] Mapping backbone.layers.47.mixer.D to layers.47.mixer.D
  [Mamba.from_pretrained] Mapping backbone.layers.47.mixer.in_proj.weight to layers.47.mixer.in_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.47.mixer.conv1d.weight to layers.47.mixer.conv1d.weight
  [Mamba.from_pretrained] Mapping backbone.layers.47.mixer.conv1d.bias to layers.47.mixer.conv1d.bias
  [Mamba.from_pretrained] Mapping backbone.layers.47.mixer.x_proj.weight to layers.47.mixer.x_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.47.mixer.dt_proj.weight to layers.47.mixer.dt_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.47.mixer.dt_proj.bias to layers.47.mixer.dt_proj.bias
  [Mamba.from_pretrained] Mapping backbone.layers.47.mixer.A_log to layers.47.mixer.A_log
  [Mamba.from_pretrained] Mapping backbone.layers.47.mixer.out_proj.weight to layers.47.mixer.out_proj.weight
  [Mamba.from_pretrained] Mapping backbone.layers.47.norm.weight to layers.47.norm.weight
  [Mamba.from_pretrained] Mapping backbone.norm_f.weight to norm_f.weight
  [Mamba.from_pretrained] Mapping lm_head.weight to lm_head.weight
[Mamba.from_pretrained] State dict loaded into model.
[Mamba.forward] Input_ids shape: torch.Size([1, 4])
[Mamba.forward] input_ids sample values: tensor([   46, 31834,   310,   253])
[Mamba.forward] Embedding output shape: torch.Size([1, 4, 1024])
[Mamba.forward] Embedding output sample values: tensor([-0.2568,  0.0735, -0.3682,  0.2225,  0.1106])
[Mamba.forward] Processing layer 1/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.2568,  0.0735, -0.3682,  0.2225,  0.1106])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.2568,  0.0735, -0.3682,  0.2225,  0.1106])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.3369,  0.1116, -0.4718,  0.3112,  0.1459])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.3369,  0.1116, -0.4718,  0.3112,  0.1459])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.3369,  0.1116, -0.4718,  0.3112,  0.1459])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 0.6588, -0.5707, -0.7355,  0.5027,  1.3532])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 0.6588, -0.5707, -0.7355,  0.5027,  1.3532])
  [MambaBlock.forward] res sample values: tensor([-0.2294, -0.6511,  0.5866,  1.8791, -0.1082])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.6588, -0.8075,  0.0576, -0.0176, -0.5707])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.1618,  0.0185, -0.2079, -0.0943,  0.0832])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.1618,  0.0832,  0.0016,  0.1822,  0.1667])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0744,  0.0433,  0.0008,  0.0994,  0.0903])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -4.9154,  -0.5902, -17.3128,  -0.6593,  -4.5849])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.0291,  0.0837, -0.0554,  0.1478, -0.0215], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.1945,  0.5079, -0.0149,  0.0935, -0.1801])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.1945,  0.5079, -0.0149,  0.0935, -0.1801])
  [MambaBlock.ssm] B sample values: tensor([-0.3898,  6.0406,  0.2920, -1.0335,  1.6670])
  [MambaBlock.ssm] C sample values: tensor([-0.2299, -0.4729,  0.3546, -0.6504, -0.8088])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([2.3974e-01, 2.0111e-01, 7.5458e-02, 9.3861e-06, 3.0796e-01])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.3078, 0.8681, 0.0158, 0.8538, 0.3332])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 0.0070, -0.1077, -0.0052,  0.0184, -0.0297])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 0.0070, -0.1077, -0.0052,  0.0184, -0.0297])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-2.7933e-02,  1.3652e-02,  9.3079e-05,  1.4610e-06,  4.3543e-02])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0032, -0.0966, -0.0007,  0.0163, -0.0160])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-3.5510e-02,  1.2611e-01,  2.6968e-02,  1.7645e-05, -1.0779e-02])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.0020, -0.0999, -0.0020,  0.0168, -0.0115])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-1.4251e-02,  1.1184e-02, -3.5494e-04,  3.8220e-05,  1.1201e-02])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-2.3945e-06, -9.8769e-02,  3.2128e-04,  1.6775e-02, -9.6114e-03])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0086,  0.0009,  0.0002, -0.0001,  0.0097])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-2.7933e-02,  1.3652e-02,  9.3079e-05,  1.4610e-06,  4.3543e-02])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-3.0096e-02,  1.7281e-02,  4.9464e-05,  1.4689e-02,  4.1604e-02])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-3.0096e-02,  1.7281e-02,  4.9464e-05,  1.4689e-02,  4.1604e-02])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-3.0096e-02,  1.7281e-02,  4.9464e-05,  1.4689e-02,  4.1604e-02])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 3.0582e-03, -3.8565e-03,  1.8644e-05,  2.3945e-02, -2.1296e-03])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.2318, -0.0708,  0.0503, -0.1111, -0.0815])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.2318, -0.0708,  0.0503, -0.1111, -0.0815])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-0.0250,  0.0027, -0.3179,  0.1114,  0.0292])
  [Mamba.forward] After layer 1 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 1 sample values: tensor([-0.0250,  0.0027, -0.3179,  0.1114,  0.0292])
[Mamba.forward] Processing layer 2/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.0250,  0.0027, -0.3179,  0.1114,  0.0292])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.0250,  0.0027, -0.3179,  0.1114,  0.0292])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.0369,  0.0043, -0.4965,  0.1821,  0.0468])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.0369,  0.0043, -0.4965,  0.1821,  0.0468])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.0369,  0.0043, -0.4965,  0.1821,  0.0468])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.2809, -0.4530, -0.5366, -0.1476, -0.7956])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.2809, -0.4530, -0.5366, -0.1476, -0.7956])
  [MambaBlock.forward] res sample values: tensor([ 0.6127,  0.5846,  0.1722, -0.6567, -0.6720])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.2809,  0.2632,  0.6223, -0.5349, -0.4530])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0179, -0.0278,  0.0428,  0.1075,  0.0088])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0179,  0.0088,  0.0028, -0.0082, -0.0252])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0090,  0.0044,  0.0014, -0.0041, -0.0125])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-30.5025,  -1.6451, -56.1790, -32.2034,  -7.1779])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0341,  0.0013, -0.1032, -0.0254, -0.0157], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.2510, -0.6871,  0.6493,  0.4036, -0.0924])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.2510, -0.6871,  0.6493,  0.4036, -0.0924])
  [MambaBlock.ssm] B sample values: tensor([-0.1332, -0.3034,  0.0278, -0.2043, -1.0082])
  [MambaBlock.ssm] C sample values: tensor([-0.1129,  0.4768,  0.3670,  0.0295, -0.4651])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1502, 0.1463, 0.0589, 0.2170, 0.0160])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([1.0252e-02, 7.8112e-01, 2.1695e-04, 7.9414e-03, 3.4033e-01])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-1.8060e-04, -4.1118e-04,  3.7623e-05, -2.7686e-04, -1.3665e-03])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-1.8060e-04, -4.1118e-04,  3.7623e-05, -2.7686e-04, -1.3665e-03])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0066,  0.0032,  0.0004, -0.0043, -0.0010])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 7.8139e-04,  1.2962e-04, -8.3893e-04, -8.7307e-05,  1.4642e-03])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-0.0150, -0.0305, -0.0090, -0.0096, -0.0149])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.0007, -0.0007,  0.0010, -0.0006, -0.0005])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.0020, -0.0049, -0.0087, -0.0118, -0.0017])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0013, -0.0052,  0.0006, -0.0016, -0.0105])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.0243, -0.0079,  0.0002, -0.0598,  0.0211])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0066,  0.0032,  0.0004, -0.0043, -0.0010])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.0063,  0.0032,  0.0003, -0.0042, -0.0008])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.0063,  0.0032,  0.0003, -0.0042, -0.0008])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.0063,  0.0032,  0.0003, -0.0042, -0.0008])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([2.5142e-03, 1.1956e-03, 2.3933e-05, 9.4881e-04, 1.7717e-04])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0334, -0.1024,  0.0108, -0.0127,  0.0095])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0334, -0.1024,  0.0108, -0.0127,  0.0095])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0084, -0.0997, -0.3072,  0.0988,  0.0387])
  [Mamba.forward] After layer 2 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 2 sample values: tensor([ 0.0084, -0.0997, -0.3072,  0.0988,  0.0387])
[Mamba.forward] Processing layer 3/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0084, -0.0997, -0.3072,  0.0988,  0.0387])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0084, -0.0997, -0.3072,  0.0988,  0.0387])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0124, -0.1640, -0.4557,  0.1566,  0.0610])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0124, -0.1640, -0.4557,  0.1566,  0.0610])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0124, -0.1640, -0.4557,  0.1566,  0.0610])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 0.2603,  0.5315, -0.4097,  1.1640, -0.4911])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 0.2603,  0.5315, -0.4097,  1.1640, -0.4911])
  [MambaBlock.forward] res sample values: tensor([ 0.4923,  0.6446, -0.2111,  0.2555,  0.0557])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.2603, -1.4150, -0.5937,  0.0343,  0.5315])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0079, -0.0481,  0.1625,  0.0749, -0.1618])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0079, -0.1618,  0.0083,  0.0141, -0.0101])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0040, -0.0744,  0.0042,  0.0071, -0.0050])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -0.3057, -15.5499,  -4.6798,  -6.1584,  -8.2861])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0771,  0.2766, -0.0196, -0.0504,  0.0953], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([0.1138, 0.0482, 0.0078, 0.3180, 0.2678])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([0.1138, 0.0482, 0.0078, 0.3180, 0.2678])
  [MambaBlock.ssm] B sample values: tensor([-0.3383, -0.0908, -0.0428, -0.4119,  0.4841])
  [MambaBlock.ssm] C sample values: tensor([ 0.2690,  0.5789,  0.3108, -0.6506, -0.0198])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1220, 0.0150, 0.1063, 0.1030, 0.1272])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.9634, 0.1501, 0.5651, 0.4719, 0.3640])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-1.6364e-04, -4.3921e-05, -2.0694e-05, -1.9922e-04,  2.3413e-04])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-1.6364e-04, -4.3921e-05, -2.0694e-05, -1.9922e-04,  2.3413e-04])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0018, -0.0042,  0.0017,  0.0028, -0.0024])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 2.9933e-04,  4.3350e-04,  5.0552e-05,  1.0773e-03, -1.3735e-03])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-0.0241, -0.0332, -0.0249, -0.0928,  0.0108])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.0022, -0.0036,  0.0005, -0.0080,  0.0063])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.0140, -0.0126, -0.0003, -0.0075,  0.0059])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0040, -0.0021, -0.0008, -0.0082,  0.0046])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.0247, -0.0090, -0.0004, -0.0117, -0.0257])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0018, -0.0042,  0.0017,  0.0028, -0.0024])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.0015, -0.0248,  0.0016,  0.0024, -0.0029])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.0015, -0.0248,  0.0016,  0.0024, -0.0029])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.0015, -0.0248,  0.0016,  0.0024, -0.0029])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 4.6893e-04, -1.0488e-02, -1.5122e-04,  3.4871e-04, -8.3164e-05])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0057,  0.0127,  0.0514,  0.0160, -0.0047])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0057,  0.0127,  0.0514,  0.0160, -0.0047])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0028, -0.0870, -0.2558,  0.1148,  0.0340])
  [Mamba.forward] After layer 3 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 3 sample values: tensor([ 0.0028, -0.0870, -0.2558,  0.1148,  0.0340])
[Mamba.forward] Processing layer 4/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0028, -0.0870, -0.2558,  0.1148,  0.0340])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0028, -0.0870, -0.2558,  0.1148,  0.0340])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0055, -0.1847, -0.5195,  0.2614,  0.0710])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0055, -0.1847, -0.5195,  0.2614,  0.0710])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0055, -0.1847, -0.5195,  0.2614,  0.0710])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 1.9476, -0.4303, -1.3707,  1.0677,  0.3295])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 1.9476, -0.4303, -1.3707,  1.0677,  0.3295])
  [MambaBlock.forward] res sample values: tensor([ 0.3563, -1.4805,  0.3260,  0.3351,  0.6581])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 1.9476,  0.9659,  0.1046, -0.8796, -0.4303])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0380, -0.2073, -0.1070, -0.0282, -0.0172])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0380, -0.0172, -0.0672,  0.0156,  0.0021])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0194, -0.0085, -0.0325,  0.0078,  0.0011])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-20.3106,  -3.0142, -27.3495, -29.0402, -70.1625])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0144,  0.0463,  0.1718,  0.0196, -0.0065], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 0.1756,  0.8733, -0.7658, -0.4098, -0.6096])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 0.1756,  0.8733, -0.7658, -0.4098, -0.6096])
  [MambaBlock.ssm] B sample values: tensor([ 0.3332, -0.4807, -0.1838,  0.1827,  0.1078])
  [MambaBlock.ssm] C sample values: tensor([0.2906, 0.7374, 0.2398, 0.4810, 0.3606])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0407, 0.0305, 0.0001, 0.0478, 0.0218])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.4371, 0.8844, 0.3281, 0.3063, 0.0573])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 2.6272e-04, -3.7901e-04, -1.4489e-04,  1.4408e-04,  8.5012e-05])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 2.6272e-04, -3.7901e-04, -1.4489e-04,  1.4408e-04,  8.5012e-05])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 2.6464e-03, -8.7414e-04, -1.4890e-05,  1.2583e-03,  7.7609e-05])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0001,  0.0030,  0.0004, -0.0024, -0.0035])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-8.6886e-02, -9.3588e-03,  8.6577e-05, -3.5112e-02,  7.1544e-04])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.0019,  0.0042, -0.0013, -0.0024, -0.0034])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-1.4415e-02,  4.9613e-03,  7.6199e-06,  3.8496e-03, -3.7231e-03])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-8.9203e-04,  4.2295e-03,  6.8289e-04, -4.3613e-04,  5.5888e-05])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-2.9691e-03,  6.5673e-04,  8.3736e-05,  1.2193e-03, -2.4340e-03])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 2.6464e-03, -8.7414e-04, -1.4890e-05,  1.2583e-03,  7.7609e-05])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 2.3675e-03, -1.2690e-03, -5.5935e-03,  1.4119e-03,  7.0649e-05])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 2.3675e-03, -1.2690e-03, -5.5935e-03,  1.4119e-03,  7.0649e-05])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 2.3675e-03, -1.2690e-03, -5.5935e-03,  1.4119e-03,  7.0649e-05])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 4.9619e-04,  3.4823e-04, -1.0592e-03,  2.7580e-04,  3.0630e-05])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0051, -0.0221,  0.0141,  0.0071,  0.0137])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0051, -0.0221,  0.0141,  0.0071,  0.0137])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-0.0023, -0.1091, -0.2416,  0.1219,  0.0476])
  [Mamba.forward] After layer 4 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 4 sample values: tensor([-0.0023, -0.1091, -0.2416,  0.1219,  0.0476])
[Mamba.forward] Processing layer 5/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.0023, -0.1091, -0.2416,  0.1219,  0.0476])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.0023, -0.1091, -0.2416,  0.1219,  0.0476])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.0038, -0.1935, -0.4030,  0.2058,  0.0837])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.0038, -0.1935, -0.4030,  0.2058,  0.0837])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.0038, -0.1935, -0.4030,  0.2058,  0.0837])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.0439, -0.0766, -0.7687, -1.9230,  0.3363])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.0439, -0.0766, -0.7687, -1.9230,  0.3363])
  [MambaBlock.forward] res sample values: tensor([ 0.7229, -0.2009, -0.7565, -0.8227, -0.7759])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.0439,  0.7116,  0.0186, -0.6780, -0.0766])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0029,  0.0083, -0.0901, -0.0099, -0.0055])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0029, -0.0055, -0.0948, -0.0156,  0.0477])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0015, -0.0027, -0.0452, -0.0077,  0.0244])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -0.8952,  -3.9432, -11.9554,  -5.6089, -16.4203])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0461, -0.0410, -0.0134, -0.0232,  0.0289], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.0238,  0.6540, -0.1298, -1.1068,  0.2124])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.0238,  0.6540, -0.1298, -1.1068,  0.2124])
  [MambaBlock.ssm] B sample values: tensor([-1.4714,  0.4173, -0.4814,  0.3886, -0.1115])
  [MambaBlock.ssm] C sample values: tensor([ 0.5433,  0.1655,  0.2959, -0.0020, -0.3403])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1764, 0.1747, 0.2322, 0.1441, 0.0372])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.8539, 0.4988, 0.1214, 0.3718, 0.0552])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 3.8214e-04, -1.0838e-04,  1.2502e-04, -1.0092e-04,  2.8959e-05])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 3.8214e-04, -1.0838e-04,  1.2502e-04, -1.0092e-04,  2.8959e-05])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.0004, -0.0007, -0.0152, -0.0016,  0.0013])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0002,  0.0002, -0.0001,  0.0001, -0.0003])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0030,  0.0012, -0.0034,  0.0793,  0.0122])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0025, -0.0016,  0.0015, -0.0041,  0.0025])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0031,  0.0005,  0.0092,  0.0040,  0.0083])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 0.0025, -0.0011,  0.0004, -0.0020,  0.0004])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0013, -0.0118, -0.0056, -0.0005,  0.0295])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.0004, -0.0007, -0.0152, -0.0016,  0.0013])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.0003, -0.0006, -0.0146, -0.0014,  0.0020])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.0003, -0.0006, -0.0146, -0.0014,  0.0020])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.0003, -0.0006, -0.0146, -0.0014,  0.0020])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-1.5016e-04,  5.2257e-05,  3.5268e-03,  3.5979e-04, -4.9532e-04])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0401, -0.0297, -0.0333,  0.0659, -0.0205])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0401, -0.0297, -0.0333,  0.0659, -0.0205])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-0.0424, -0.1388, -0.2749,  0.1877,  0.0272])
  [Mamba.forward] After layer 5 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 5 sample values: tensor([-0.0424, -0.1388, -0.2749,  0.1877,  0.0272])
[Mamba.forward] Processing layer 6/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.0424, -0.1388, -0.2749,  0.1877,  0.0272])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.0424, -0.1388, -0.2749,  0.1877,  0.0272])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.0657, -0.2304, -0.4375,  0.3092,  0.0462])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.0657, -0.2304, -0.4375,  0.3092,  0.0462])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.0657, -0.2304, -0.4375,  0.3092,  0.0462])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.3256,  2.0214, -1.3963,  1.1312,  0.3062])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.3256,  2.0214, -1.3963,  1.1312,  0.3062])
  [MambaBlock.forward] res sample values: tensor([-0.6642, -0.1460,  1.0926,  0.1104,  0.0740])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.3256,  0.8600,  0.1651, -0.0226,  2.0214])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0111,  0.0531, -0.1183, -0.0267,  0.0145])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0111,  0.0145,  0.0306, -0.0185, -0.0091])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0055,  0.0073,  0.0155, -0.0092, -0.0045])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -1.2871,  -6.4763, -12.3912,  -7.8476,  -6.7050])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0533, -0.0487, -0.0370, -0.0683,  0.1109], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.5973,  0.7889,  0.0235,  0.1848,  0.6344])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.5973,  0.7889,  0.0235,  0.1848,  0.6344])
  [MambaBlock.ssm] B sample values: tensor([ 0.8120, -0.1694, -0.4800, -0.2525,  0.9615])
  [MambaBlock.ssm] C sample values: tensor([-0.5383,  0.1265,  0.1905, -0.4898, -0.3374])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0893, 0.0848, 0.1104, 0.0988, 0.0571])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.8914, 0.5608, 0.3306, 0.4961, 0.5494])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-4.0086e-04,  8.3629e-05,  2.3696e-04,  1.2464e-04, -4.7471e-04])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-4.0086e-04,  8.3629e-05,  2.3696e-04,  1.2464e-04, -4.7471e-04])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.0016,  0.0020,  0.0055, -0.0029, -0.0008])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0011, -0.0006, -0.0007, -0.0014,  0.0011])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0250, -0.0837, -0.0500,  0.0743,  0.0492])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.0008,  0.0002,  0.0003,  0.0015, -0.0027])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0051, -0.0038, -0.0043,  0.0004,  0.0177])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0018,  0.0004,  0.0012,  0.0014, -0.0021])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0053,  0.0118,  0.0274, -0.0205,  0.0191])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.0016,  0.0020,  0.0055, -0.0029, -0.0008])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.0013,  0.0016,  0.0049, -0.0023, -0.0013])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.0013,  0.0016,  0.0049, -0.0023, -0.0013])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.0013,  0.0016,  0.0049, -0.0023, -0.0013])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 2.8870e-04, -1.0913e-04,  4.0018e-03, -1.3186e-04, -5.0874e-05])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0174,  0.0126, -0.0333, -0.0532,  0.0169])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0174,  0.0126, -0.0333, -0.0532,  0.0169])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-0.0598, -0.1262, -0.3081,  0.1345,  0.0440])
  [Mamba.forward] After layer 6 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 6 sample values: tensor([-0.0598, -0.1262, -0.3081,  0.1345,  0.0440])
[Mamba.forward] Processing layer 7/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.0598, -0.1262, -0.3081,  0.1345,  0.0440])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.0598, -0.1262, -0.3081,  0.1345,  0.0440])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.0920, -0.2218, -0.5137,  0.2291,  0.0775])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.0920, -0.2218, -0.5137,  0.2291,  0.0775])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.0920, -0.2218, -0.5137,  0.2291,  0.0775])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 0.6424, -0.0792, -2.0839,  0.3268, -0.4731])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 0.6424, -0.0792, -2.0839,  0.3268, -0.4731])
  [MambaBlock.forward] res sample values: tensor([ 0.1154, -0.6059, -1.4965, -0.6294,  0.2939])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.6424, -0.5712,  0.4458,  0.0550, -0.0792])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0055,  0.0821, -0.0744,  0.0520, -0.0023])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0055, -0.0023,  0.0636,  0.1337,  0.0436])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0028, -0.0012,  0.0328,  0.0713,  0.0223])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -2.4244, -11.6993,  -1.7549, -10.5437, -10.1338])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0692, -0.0557, -0.0614, -0.0255,  0.2088], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.5836, -1.8984, -0.6632, -0.0156, -0.4527])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.5836, -1.8984, -0.6632, -0.0156, -0.4527])
  [MambaBlock.ssm] B sample values: tensor([ 1.5312, -0.6118, -1.2303, -0.1556, -0.8760])
  [MambaBlock.ssm] C sample values: tensor([-0.7615,  0.0885, -0.3101,  0.1201,  0.0404])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1422, 0.1175, 0.2700, 0.2885, 0.0199])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.7083, 0.1894, 0.7791, 0.2232, 0.2366])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-6.0117e-04,  2.4020e-04,  4.8303e-04,  6.1094e-05,  3.4392e-04])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-6.0117e-04,  2.4020e-04,  4.8303e-04,  6.1094e-05,  3.4392e-04])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-2.6409e-04, -9.1073e-05,  5.9617e-03,  1.3844e-02,  2.9859e-04])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0012, -0.0005, -0.0022,  0.0008, -0.0022])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0290,  0.0037, -0.0670,  0.0466,  0.0035])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.0009, -0.0027, -0.0002,  0.0027,  0.0006])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0064,  0.0015, -0.0225, -0.0043,  0.0059])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 0.0014, -0.0024, -0.0027, -0.0006, -0.0016])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.0130, -0.0144,  0.0310,  0.0141,  0.0074])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-2.6409e-04, -9.1073e-05,  5.9617e-03,  1.3844e-02,  2.9859e-04])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-7.2938e-05, -2.6864e-05,  3.9448e-03,  1.2023e-02,  4.9513e-03])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-7.2938e-05, -2.6864e-05,  3.9448e-03,  1.2023e-02,  4.9513e-03])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-7.2938e-05, -2.6864e-05,  3.9448e-03,  1.2023e-02,  4.9513e-03])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-4.4499e-06,  5.7458e-06, -1.0800e-03, -2.6307e-03,  8.3360e-04])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0090,  0.0206,  0.0119, -0.0376,  0.0038])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0090,  0.0206,  0.0119, -0.0376,  0.0038])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-0.0508, -0.1056, -0.2962,  0.0970,  0.0478])
  [Mamba.forward] After layer 7 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 7 sample values: tensor([-0.0508, -0.1056, -0.2962,  0.0970,  0.0478])
[Mamba.forward] Processing layer 8/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.0508, -0.1056, -0.2962,  0.0970,  0.0478])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.0508, -0.1056, -0.2962,  0.0970,  0.0478])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.0760, -0.1733, -0.4664,  0.1527,  0.0800])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.0760, -0.1733, -0.4664,  0.1527,  0.0800])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.0760, -0.1733, -0.4664,  0.1527,  0.0800])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 0.9001, -1.4309, -0.0052,  0.1716,  0.2550])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 0.9001, -1.4309, -0.0052,  0.1716,  0.2550])
  [MambaBlock.forward] res sample values: tensor([-0.6230,  0.5625, -1.0107,  0.3272,  0.1328])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.9001, -0.3459, -0.0807,  1.0715, -1.4309])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0263, -0.2452, -0.1881,  0.0644, -0.2780])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0263, -0.2780, -0.0096,  0.0204,  0.0078])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0133, -0.1198, -0.0048,  0.0103,  0.0039])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-181.6753,   -9.0146, -226.9914, -268.5148,  -19.3936])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.2624,  0.1404,  0.1324,  0.1101, -0.0646], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.2925, -0.7550,  0.4970,  0.3779,  0.2547])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.2925, -0.7550,  0.4970,  0.3779,  0.2547])
  [MambaBlock.ssm] B sample values: tensor([-0.5418,  0.7023,  0.0943, -0.4582, -0.0248])
  [MambaBlock.ssm] C sample values: tensor([ 0.5888, -0.0573, -0.0326, -0.6046, -0.3470])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0171, 0.0297, 0.0519, 0.0777, 0.0912])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.0445, 0.8569, 0.0205, 0.0101, 0.7174])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-1.2365e-04,  1.6029e-04,  2.1514e-05, -1.0457e-04, -5.6656e-06])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-1.2365e-04,  1.6029e-04,  2.1514e-05, -1.0457e-04, -5.6656e-06])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0007, -0.0113, -0.0008,  0.0025,  0.0011])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0011, -0.0015,  0.0004,  0.0011,  0.0028])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-0.0172, -0.0348,  0.0293, -0.0271, -0.0051])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0014, -0.0034,  0.0037,  0.0014, -0.0002])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0043, -0.0040,  0.0129, -0.0055, -0.0092])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0005, -0.0021,  0.0006, -0.0006, -0.0001])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.0028, -0.0180,  0.0272, -0.0072,  0.0184])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0007, -0.0113, -0.0008,  0.0025,  0.0011])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.0042, -0.0282, -0.0014,  0.0037,  0.0009])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.0042, -0.0282, -0.0014,  0.0037,  0.0009])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.0042, -0.0282, -0.0014,  0.0037,  0.0009])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-9.1864e-04, -1.0088e-02,  3.8546e-04,  7.0007e-04,  6.2722e-05])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0017, -0.0230,  0.0169,  0.0106, -0.0436])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0017, -0.0230,  0.0169,  0.0106, -0.0436])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-0.0525, -0.1286, -0.2793,  0.1076,  0.0042])
  [Mamba.forward] After layer 8 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 8 sample values: tensor([-0.0525, -0.1286, -0.2793,  0.1076,  0.0042])
[Mamba.forward] Processing layer 9/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.0525, -0.1286, -0.2793,  0.1076,  0.0042])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.0525, -0.1286, -0.2793,  0.1076,  0.0042])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.0851, -0.2245, -0.4874,  0.1884,  0.0079])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.0851, -0.2245, -0.4874,  0.1884,  0.0079])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.0851, -0.2245, -0.4874,  0.1884,  0.0079])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.4895,  0.5575,  0.8009, -0.2898,  0.3637])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.4895,  0.5575,  0.8009, -0.2898,  0.3637])
  [MambaBlock.forward] res sample values: tensor([ 1.3903,  0.0528,  0.6360,  0.0906, -0.2872])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.4895,  0.6775, -0.0550, -0.0035,  0.5575])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0973,  0.0651, -0.0134, -0.0250, -0.0234])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0973, -0.0234, -0.0216, -0.0408, -0.0007])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0463, -0.0115, -0.0107, -0.0200, -0.0004])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-11.0617,  -0.3140,  -4.6858,  -4.7537, -26.3659])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.1566, -0.0429, -0.1128,  0.0458,  0.1692], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 0.0056, -0.7665, -0.3081, -0.1087, -0.3811])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 0.0056, -0.7665, -0.3081, -0.1087, -0.3811])
  [MambaBlock.ssm] B sample values: tensor([-0.3693, -0.4591, -0.5687, -0.7392,  0.9189])
  [MambaBlock.ssm] C sample values: tensor([ 0.1910, -0.2665, -0.7064,  0.5829,  0.7575])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0155, 0.1217, 0.1901, 0.1224, 0.0073])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.8424, 0.9951, 0.9299, 0.9289, 0.6644])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 0.0003,  0.0003,  0.0004,  0.0005, -0.0007])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 0.0003,  0.0003,  0.0004,  0.0005, -0.0007])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-1.0305e-03, -2.0179e-03, -2.9203e-03, -3.5119e-03, -3.7634e-06])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-0.0002, -0.0001, -0.0003, -0.0003,  0.0007])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0104,  0.0099,  0.0008, -0.0232, -0.0126])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-4.4638e-04, -6.2092e-05,  1.7057e-04, -5.5080e-05, -3.5895e-05])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-6.2986e-05, -1.0625e-03, -9.0678e-03, -1.6085e-02, -1.3966e-03])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 1.9047e-04,  1.8846e-04,  9.3709e-05, -3.5094e-04, -6.6478e-04])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0035, -0.0084,  0.0029, -0.0158, -0.0093])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-1.0305e-03, -2.0179e-03, -2.9203e-03, -3.5119e-03, -3.7634e-06])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-8.2799e-03, -1.5229e-03, -1.7126e-03, -4.4276e-03, -6.4469e-05])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-8.2799e-03, -1.5229e-03, -1.7126e-03, -4.4276e-03, -6.4469e-05])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-8.2799e-03, -1.5229e-03, -1.7126e-03, -4.4276e-03, -6.4469e-05])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-9.2167e-03, -4.1265e-05, -7.1213e-04, -2.0972e-04,  7.9367e-06])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0378, -0.0148, -0.0382,  0.0849, -0.0285])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0378, -0.0148, -0.0382,  0.0849, -0.0285])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-0.0903, -0.1434, -0.3175,  0.1925, -0.0243])
  [Mamba.forward] After layer 9 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 9 sample values: tensor([-0.0903, -0.1434, -0.3175,  0.1925, -0.0243])
[Mamba.forward] Processing layer 10/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.0903, -0.1434, -0.3175,  0.1925, -0.0243])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.0903, -0.1434, -0.3175,  0.1925, -0.0243])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.1341, -0.2220, -0.5044,  0.3115, -0.0396])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.1341, -0.2220, -0.5044,  0.3115, -0.0396])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.1341, -0.2220, -0.5044,  0.3115, -0.0396])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 1.0693, -0.9459, -0.4737,  0.0681,  0.6870])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 1.0693, -0.9459, -0.4737,  0.0681,  0.6870])
  [MambaBlock.forward] res sample values: tensor([ 1.2186,  1.2586,  0.1682, -0.6808, -0.4191])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 1.0693, -0.6242,  0.3446, -0.8663, -0.9459])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0007, -0.1492,  0.0828, -0.0510,  0.0053])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0007,  0.0053,  0.0090, -0.0210, -0.0300])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0004,  0.0027,  0.0045, -0.0104, -0.0148])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -1.4960,  -6.8687,  -3.3573,  -3.2350, -11.3436])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0726, -0.0179,  0.1525,  0.0616,  0.0346], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.2023,  1.4765,  0.2686,  0.3425,  0.4262])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.2023,  1.4765,  0.2686,  0.3425,  0.4262])
  [MambaBlock.ssm] B sample values: tensor([-1.9195, -0.1572, -0.4622,  0.7222, -0.9861])
  [MambaBlock.ssm] C sample values: tensor([ 0.4358,  0.1675, -0.0310, -0.2452,  0.5513])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1889, 0.1313, 0.0712, 0.2288, 0.0743])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.7538, 0.2732, 0.5304, 0.5428, 0.1173])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-1.2720e-04, -1.0417e-05, -3.0630e-05,  4.7858e-05, -6.5343e-05])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-1.2720e-04, -1.0417e-05, -3.0630e-05,  4.7858e-05, -6.5343e-05])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0001,  0.0006,  0.0005, -0.0041, -0.0019])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 4.2301e-03,  8.5414e-05,  5.1876e-03, -2.2978e-03,  3.6587e-03])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-0.0223,  0.0298,  0.0369, -0.0193, -0.0128])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0008,  0.0048,  0.0010,  0.0008, -0.0017])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.0051,  0.0110,  0.0006, -0.0049, -0.0068])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([0.0028, 0.0027, 0.0004, 0.0004, 0.0036])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0083, -0.0191,  0.0090, -0.0053,  0.0623])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0001,  0.0006,  0.0005, -0.0041, -0.0019])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 8.7354e-05,  5.5035e-04,  1.2310e-03, -4.6969e-03, -2.3772e-03])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 8.7354e-05,  5.5035e-04,  1.2310e-03, -4.6969e-03, -2.3772e-03])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 8.7354e-05,  5.5035e-04,  1.2310e-03, -4.6969e-03, -2.3772e-03])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([8.2160e-05, 5.3942e-04, 1.1221e-04, 1.0747e-03, 3.9522e-04])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0025,  0.0597, -0.0382,  0.0006,  0.0222])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0025,  0.0597, -0.0382,  0.0006,  0.0222])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-0.0878, -0.0837, -0.3557,  0.1931, -0.0021])
  [Mamba.forward] After layer 10 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 10 sample values: tensor([-0.0878, -0.0837, -0.3557,  0.1931, -0.0021])
[Mamba.forward] Processing layer 11/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.0878, -0.0837, -0.3557,  0.1931, -0.0021])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.0878, -0.0837, -0.3557,  0.1931, -0.0021])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.1260, -0.1234, -0.5427,  0.2933, -0.0034])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.1260, -0.1234, -0.5427,  0.2933, -0.0034])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.1260, -0.1234, -0.5427,  0.2933, -0.0034])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.7527, -1.0684, -0.3140,  1.1872,  0.1241])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.7527, -1.0684, -0.3140,  1.1872,  0.1241])
  [MambaBlock.forward] res sample values: tensor([ 0.0329, -0.4351, -0.1673,  1.8765,  0.9258])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.7527, -0.4561, -0.4983, -0.2052, -1.0684])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0766,  0.0939,  0.0827,  0.0510, -0.2300])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0766, -0.2300,  0.0201,  0.0926, -0.0338])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0398, -0.1018,  0.0102,  0.0484, -0.0166])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-14.6788,  -0.1230,  -1.3936,  -7.2285,  -2.0258])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.1438,  0.2704, -0.0373,  0.0559, -0.1026], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.0251,  0.0836,  0.1915,  0.1078,  0.1021])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.0251,  0.0836,  0.1915,  0.1078,  0.1021])
  [MambaBlock.ssm] B sample values: tensor([-0.5930,  0.0139,  0.6633,  0.3739,  0.2296])
  [MambaBlock.ssm] C sample values: tensor([ 0.3408,  0.1954, -0.4405, -0.3552,  0.2186])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0677, 0.0381, 0.2213, 0.1240, 0.1646])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.3703, 0.9917, 0.9100, 0.6131, 0.8719])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-1.5963e-03,  3.7470e-05,  1.7854e-03,  1.0063e-03,  6.1797e-04])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-1.5963e-03,  3.7470e-05,  1.7854e-03,  1.0063e-03,  6.1797e-04])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0079, -0.0115,  0.0066,  0.0177, -0.0081])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-0.0025, -0.0004,  0.0036,  0.0022,  0.0015])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0130, -0.0174,  0.0194,  0.0082, -0.0137])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.0020,  0.0018,  0.0044,  0.0018,  0.0008])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.0100, -0.0002,  0.0089, -0.0102, -0.0072])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0019,  0.0015,  0.0045,  0.0014,  0.0019])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.0095, -0.0048,  0.0067, -0.0174, -0.0075])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0079, -0.0115,  0.0066,  0.0177, -0.0081])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.0137, -0.0390,  0.0063,  0.0204, -0.0064])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.0137, -0.0390,  0.0063,  0.0204, -0.0064])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.0137, -0.0390,  0.0063,  0.0204, -0.0064])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 0.0002,  0.0067, -0.0005,  0.0332, -0.0042])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0610,  0.0036, -0.0171,  0.0103,  0.0256])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0610,  0.0036, -0.0171,  0.0103,  0.0256])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-0.0267, -0.0801, -0.3728,  0.2034,  0.0235])
  [Mamba.forward] After layer 11 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 11 sample values: tensor([-0.0267, -0.0801, -0.3728,  0.2034,  0.0235])
[Mamba.forward] Processing layer 12/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.0267, -0.0801, -0.3728,  0.2034,  0.0235])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.0267, -0.0801, -0.3728,  0.2034,  0.0235])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.0341, -0.1088, -0.5004,  0.2874,  0.0333])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.0341, -0.1088, -0.5004,  0.2874,  0.0333])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.0341, -0.1088, -0.5004,  0.2874,  0.0333])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.2080, -0.0874,  0.6571,  0.0645, -1.0771])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.2080, -0.0874,  0.6571,  0.0645, -1.0771])
  [MambaBlock.forward] res sample values: tensor([ 0.6918, -0.3141, -0.8588, -0.8514, -0.4075])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.2080,  0.6661, -0.0908,  0.2697, -0.0874])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0393,  0.0321, -0.0700,  0.0161, -0.0091])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0393, -0.0091, -0.0127,  0.0022,  0.3169])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0200, -0.0045, -0.0063,  0.0011,  0.1834])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([  -0.9486,   -0.2490,   -1.2781, -146.7445, -159.8159])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.1172,  0.0709, -0.0489, -0.0192,  0.3821], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 0.2926,  0.4577,  0.2403,  1.1415, -0.1016])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 0.2926,  0.4577,  0.2403,  1.1415, -0.1016])
  [MambaBlock.ssm] B sample values: tensor([-0.8127, -0.0250, -0.4346, -0.0142,  0.0167])
  [MambaBlock.ssm] C sample values: tensor([ 0.3388,  0.6548, -0.1861,  0.1059,  0.3488])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0464, 0.2265, 0.2215, 0.2369, 0.0359])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([9.5698e-01, 9.8853e-01, 9.4248e-01, 1.1117e-03, 6.0655e-04])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-7.5416e-04, -2.3214e-05, -4.0330e-04, -1.3150e-05,  1.5516e-05])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-7.5416e-04, -2.3214e-05, -4.0330e-04, -1.3150e-05,  1.5516e-05])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0020, -0.0023, -0.0031,  0.0006,  0.0145])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-9.2459e-04,  1.0885e-04, -2.5871e-04,  5.2457e-05,  8.0633e-05])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0035, -0.0020, -0.0090,  0.0051,  0.0129])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0036, -0.0055, -0.0050, -0.0015, -0.0018])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0068, -0.0127,  0.0107, -0.0330,  0.0030])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 3.2748e-03, -5.5404e-03, -5.0437e-03, -2.0798e-05,  8.7050e-06])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0044, -0.0374, -0.0100,  0.0021,  0.0156])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0020, -0.0023, -0.0031,  0.0006,  0.0145])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.0044, -0.0026, -0.0028,  0.0006,  0.0846])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.0044, -0.0026, -0.0028,  0.0006,  0.0846])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.0044, -0.0026, -0.0028,  0.0006,  0.0846])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 0.0020,  0.0003,  0.0007, -0.0001, -0.0138])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0913, -0.0716, -0.0096, -0.0458,  0.0142])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0913, -0.0716, -0.0096, -0.0458,  0.0142])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0645, -0.1518, -0.3824,  0.1576,  0.0377])
  [Mamba.forward] After layer 12 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 12 sample values: tensor([ 0.0645, -0.1518, -0.3824,  0.1576,  0.0377])
[Mamba.forward] Processing layer 13/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0645, -0.1518, -0.3824,  0.1576,  0.0377])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0645, -0.1518, -0.3824,  0.1576,  0.0377])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0880, -0.2143, -0.5744,  0.2295,  0.0570])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0880, -0.2143, -0.5744,  0.2295,  0.0570])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0880, -0.2143, -0.5744,  0.2295,  0.0570])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.9028,  0.8347,  1.1738, -1.3216, -0.8221])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.9028,  0.8347,  1.1738, -1.3216, -0.8221])
  [MambaBlock.forward] res sample values: tensor([-1.4181, -1.4157,  2.0501,  0.2828, -1.1936])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.9028, -1.4484, -0.7963, -1.0642,  0.8347])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0478,  0.1888,  0.2251,  0.1597, -0.1583])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0478, -0.1583, -0.2456,  0.1490, -0.1514])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0245, -0.0729, -0.1078,  0.0800, -0.0700])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -4.5369,  -6.9567, -12.3063, -12.1373, -92.6928])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0183, -0.0241, -0.0109,  0.1897,  0.1576], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.1068,  0.0257,  1.0498, -0.0472,  0.1332])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.1068,  0.0257,  1.0498, -0.0472,  0.1332])
  [MambaBlock.ssm] B sample values: tensor([ 0.3853,  0.1827, -0.1160,  0.3985, -0.3976])
  [MambaBlock.ssm] C sample values: tensor([-0.1684, -0.1680,  0.1631, -0.1810, -0.5048])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0983, 0.1581, 0.0376, 0.1291, 0.0846])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([6.4009e-01, 5.0455e-01, 2.9815e-01, 3.0315e-01, 1.0999e-04])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 0.0009,  0.0004, -0.0003,  0.0010, -0.0010])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 0.0009,  0.0004, -0.0003,  0.0010, -0.0010])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0044, -0.0212, -0.0075,  0.0190, -0.0109])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0033,  0.0043, -0.0010,  0.0068, -0.0069])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0516, -0.0144, -0.0170, -0.0462, -0.0206])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0058,  0.0017, -0.0008,  0.0067, -0.0069])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.0285,  0.0064, -0.0105,  0.0019, -0.0128])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 6.2553e-03,  6.6062e-05,  7.9832e-04,  7.0264e-03, -2.9497e-03])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 2.7774e-02, -5.8475e-03, -2.4158e-02,  5.4715e-05,  2.2832e-03])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0044, -0.0212, -0.0075,  0.0190, -0.0109])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.0040, -0.0194, -0.0063,  0.0342, -0.0219])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.0040, -0.0194, -0.0063,  0.0342, -0.0219])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.0040, -0.0194, -0.0063,  0.0342, -0.0219])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-0.0011,  0.0054, -0.0114,  0.0055,  0.0061])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0204, -0.0153,  0.0805, -0.0117,  0.0133])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0204, -0.0153,  0.0805, -0.0117,  0.0133])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0850, -0.1670, -0.3019,  0.1459,  0.0511])
  [Mamba.forward] After layer 13 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 13 sample values: tensor([ 0.0850, -0.1670, -0.3019,  0.1459,  0.0511])
[Mamba.forward] Processing layer 14/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0850, -0.1670, -0.3019,  0.1459,  0.0511])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0850, -0.1670, -0.3019,  0.1459,  0.0511])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.1070, -0.2140, -0.4116,  0.1974,  0.0705])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.1070, -0.2140, -0.4116,  0.1974,  0.0705])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.1070, -0.2140, -0.4116,  0.1974,  0.0705])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.1977,  0.4503,  0.6260, -0.0992,  0.4212])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.1977,  0.4503,  0.6260, -0.0992,  0.4212])
  [MambaBlock.forward] res sample values: tensor([-0.6018, -0.6974, -1.3352, -0.8900,  0.1618])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.1977,  0.8477, -0.4678, -1.1217,  0.4503])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0640,  0.1171, -0.0932, -0.2378,  0.0610])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0640,  0.0610,  0.0617, -0.0026, -1.1387])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0310,  0.0314,  0.0318, -0.0013, -0.2762])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-11.3547,  -0.3211, -10.6479,  -2.3115,  -1.1527])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([0.2234, 0.3296, 0.1757, 0.0156, 0.2947], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-1.6736,  0.3742,  0.7581,  0.6132,  0.7930])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-1.6736,  0.3742,  0.7581,  0.6132,  0.7930])
  [MambaBlock.ssm] B sample values: tensor([ 0.4109, -0.2953,  0.3033, -0.6384,  0.4163])
  [MambaBlock.ssm] C sample values: tensor([-0.0328, -0.3949,  0.6790,  0.1516,  1.7647])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0389, 0.0663, 0.0368, 0.1744, 0.0199])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.6431, 0.9876, 0.6610, 0.9140, 0.9562])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-0.0005,  0.0004, -0.0004,  0.0008, -0.0005])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-0.0005,  0.0004, -0.0004,  0.0008, -0.0005])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.0037,  0.0064,  0.0036, -0.0007, -0.0169])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0015, -0.0010,  0.0008, -0.0011, -0.0003])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0202,  0.0309, -0.0062,  0.0029, -0.0456])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.0013,  0.0022,  0.0019,  0.0053, -0.0034])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0059,  0.0186, -0.0042,  0.0097, -0.0368])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0018,  0.0066,  0.0049,  0.0154, -0.0088])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0560,  0.0079, -0.0066,  0.0313, -0.0385])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.0037,  0.0064,  0.0036, -0.0007, -0.0169])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.0106,  0.0168,  0.0092, -0.0007, -0.0983])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.0106,  0.0168,  0.0092, -0.0007, -0.0983])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.0106,  0.0168,  0.0092, -0.0007, -0.0983])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 0.0023, -0.0039, -0.0026,  0.0002, -0.0086])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0848, -0.0049, -0.0184,  0.0191,  0.0420])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0848, -0.0049, -0.0184,  0.0191,  0.0420])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 1.2320e-04, -1.7196e-01, -3.2024e-01,  1.6500e-01,  9.3035e-02])
  [Mamba.forward] After layer 14 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 14 sample values: tensor([ 1.2320e-04, -1.7196e-01, -3.2024e-01,  1.6500e-01,  9.3035e-02])
[Mamba.forward] Processing layer 15/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 1.2320e-04, -1.7196e-01, -3.2024e-01,  1.6500e-01,  9.3035e-02])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 1.2320e-04, -1.7196e-01, -3.2024e-01,  1.6500e-01,  9.3035e-02])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 1.4718e-04, -2.1263e-01, -4.2337e-01,  2.1025e-01,  1.2574e-01])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 1.4718e-04, -2.1263e-01, -4.2337e-01,  2.1025e-01,  1.2574e-01])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 1.4718e-04, -2.1263e-01, -4.2337e-01,  2.1025e-01,  1.2574e-01])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 0.5021,  0.2389, -1.1308,  0.4785,  0.8909])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 0.5021,  0.2389, -1.1308,  0.4785,  0.8909])
  [MambaBlock.forward] res sample values: tensor([-0.3887,  0.4872,  4.9794,  0.7899,  2.0382])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.5021,  0.6217,  0.1459, -1.1161,  0.2389])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0010, -0.0669, -0.0978, -0.0661, -0.0809])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0010, -0.0809,  0.1671, -0.0306,  0.1927])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0005, -0.0388,  0.0905, -0.0151,  0.1056])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -0.3063, -11.7071,  -4.5962,  -3.9733,  -1.3539])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.1056,  0.2919,  0.0581,  0.0822,  0.2294], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([0.3781, 0.1976, 0.4260, 0.5468, 0.2645])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([0.3781, 0.1976, 0.4260, 0.5468, 0.2645])
  [MambaBlock.ssm] B sample values: tensor([-0.4995,  0.1685, -0.0115, -0.7830,  0.4534])
  [MambaBlock.ssm] C sample values: tensor([ 0.2498,  0.2183, -0.3035,  0.1473, -0.1033])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([1.4336e-01, 4.6035e-02, 1.5341e-01, 1.3352e-01, 1.3713e-04])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.9570, 0.1867, 0.5174, 0.5657, 0.8236])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 3.4024e-05, -1.1480e-05,  7.8232e-07,  5.3339e-05, -3.0882e-05])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 3.4024e-05, -1.1480e-05,  7.8232e-07,  5.3339e-05, -3.0882e-05])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-2.2513e-04, -5.9053e-03,  4.5888e-02, -6.6469e-03,  4.7874e-05])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0007, -0.0005, -0.0001,  0.0007, -0.0006])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-7.0930e-03, -1.0776e-02,  5.7093e-04,  1.8467e-03,  3.7872e-05])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0015, -0.0032, -0.0004,  0.0031, -0.0021])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-7.7089e-03, -1.7818e-02,  1.0465e-02,  6.2857e-03,  5.3345e-05])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 0.0021, -0.0005,  0.0021,  0.0054, -0.0009])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-1.5651e-02, -6.6465e-03,  1.6370e-01, -2.8485e-02, -3.8148e-05])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-2.2513e-04, -5.9053e-03,  4.5888e-02, -6.6469e-03,  4.7874e-05])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.0002, -0.0172,  0.0511, -0.0079,  0.0243])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.0002, -0.0172,  0.0511, -0.0079,  0.0243])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.0002, -0.0172,  0.0511, -0.0079,  0.0243])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 2.7479e-05, -5.2022e-03,  2.5292e-01, -4.2838e-03,  4.3775e-02])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0663, -0.0048,  0.0135,  0.0743,  0.0081])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0663, -0.0048,  0.0135,  0.0743,  0.0081])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0664, -0.1768, -0.3067,  0.2393,  0.1011])
  [Mamba.forward] After layer 15 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 15 sample values: tensor([ 0.0664, -0.1768, -0.3067,  0.2393,  0.1011])
[Mamba.forward] Processing layer 16/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0664, -0.1768, -0.3067,  0.2393,  0.1011])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0664, -0.1768, -0.3067,  0.2393,  0.1011])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0727, -0.1977, -0.3734,  0.2683,  0.1232])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0727, -0.1977, -0.3734,  0.2683,  0.1232])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0727, -0.1977, -0.3734,  0.2683,  0.1232])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([0.0212, 0.7468, 0.2129, 0.6875, 0.3710])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([0.0212, 0.7468, 0.2129, 0.6875, 0.3710])
  [MambaBlock.forward] res sample values: tensor([-0.4005, -0.8088, -0.7511, -0.2141, -1.0170])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.0212, -0.0534, -0.2077, -0.2077,  0.7468])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0019, -0.0074, -0.0037,  0.0200, -0.1542])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0019, -0.1542,  0.0245,  0.0106,  0.0203])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0009, -0.0712,  0.0124,  0.0054,  0.0102])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([  -0.5281,   -4.3891, -118.9350,   -2.9302,   -3.9457])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0814,  0.1978, -0.0708, -0.0462,  0.2475], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 0.3379, -0.8036, -0.0143, -0.0900, -0.1073])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 0.3379, -0.8036, -0.0143, -0.0900, -0.1073])
  [MambaBlock.ssm] B sample values: tensor([-0.6729, -0.4078, -0.3022, -0.0896,  0.9507])
  [MambaBlock.ssm] C sample values: tensor([ 0.2490,  0.0557, -0.0386,  0.2163, -0.9647])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1875, 0.0931, 0.0780, 0.1865, 0.0961])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([9.0574e-01, 4.3918e-01, 2.0716e-10, 5.7733e-01, 4.7725e-01])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 1.1790e-04,  7.1450e-05,  5.2941e-05,  1.5691e-05, -1.6656e-04])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 1.1790e-04,  7.1450e-05,  5.2941e-05,  1.5691e-05, -1.6656e-04])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.0007, -0.0258,  0.0038,  0.0039,  0.0038])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 1.9407e-04,  1.1561e-04,  3.9542e-05, -2.3969e-05, -3.0684e-04])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-0.0014, -0.0041,  0.0042, -0.0087, -0.0848])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 2.6600e-04,  1.7102e-04,  5.4008e-05, -3.1560e-05, -3.6269e-04])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0010,  0.0107,  0.0029, -0.0126, -0.0160])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0003, -0.0005, -0.0004,  0.0003,  0.0006])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.0033,  0.0033,  0.1385, -0.0061,  0.0245])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.0007, -0.0258,  0.0038,  0.0039,  0.0038])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.0006, -0.0398,  0.0029,  0.0036,  0.0064])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.0006, -0.0398,  0.0029,  0.0036,  0.0064])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.0006, -0.0398,  0.0029,  0.0036,  0.0064])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 9.7209e-05,  9.9277e-03, -6.9304e-04, -3.4735e-04, -1.7182e-03])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.1111,  0.0306, -0.0164, -0.0881, -0.1541])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.1111,  0.0306, -0.0164, -0.0881, -0.1541])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-0.0447, -0.1462, -0.3231,  0.1513, -0.0529])
  [Mamba.forward] After layer 16 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 16 sample values: tensor([-0.0447, -0.1462, -0.3231,  0.1513, -0.0529])
[Mamba.forward] Processing layer 17/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.0447, -0.1462, -0.3231,  0.1513, -0.0529])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.0447, -0.1462, -0.3231,  0.1513, -0.0529])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.0397, -0.1348, -0.3237,  0.1388, -0.0537])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.0397, -0.1348, -0.3237,  0.1388, -0.0537])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.0397, -0.1348, -0.3237,  0.1388, -0.0537])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 0.3109, -0.0197, -1.4255,  0.2946, -1.1775])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 0.3109, -0.0197, -1.4255,  0.2946, -1.1775])
  [MambaBlock.forward] res sample values: tensor([-0.6493, -0.6661, -0.6165,  0.5645,  0.4602])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.3109,  0.1522, -0.2019,  0.3526, -0.0197])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0422,  0.0280, -0.0426,  0.0409, -0.0243])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0422, -0.0243,  0.4382, -0.0511, -0.3555])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0216, -0.0120,  0.2663, -0.0249, -0.1465])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-0.9080, -0.2451, -5.7759, -1.6476, -3.6279])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([0.2026, 0.0587, 0.4025, 0.3913, 0.3429], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.1538,  0.7252, -0.2269, -0.6004,  0.0146])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.1538,  0.7252, -0.2269, -0.6004,  0.0146])
  [MambaBlock.ssm] B sample values: tensor([ 0.4204, -0.1686,  0.3551,  0.2045,  0.6674])
  [MambaBlock.ssm] C sample values: tensor([-0.2326, -0.3318, -0.3389,  0.6017,  0.5896])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0870, 0.1186, 0.0224, 0.0616, 0.0267])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.9240, 0.9789, 0.6049, 0.8664, 0.7292])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 0.0008, -0.0003,  0.0007,  0.0004,  0.0013])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 0.0008, -0.0003,  0.0007,  0.0004,  0.0013])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0059, -0.0045,  0.0186, -0.0048, -0.0122])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 1.7785e-03, -1.3069e-03,  1.5570e-03, -5.0637e-05,  2.2218e-03])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0139, -0.0023,  0.0309,  0.0228,  0.0132])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.0015,  0.0060,  0.0012,  0.0011, -0.0037])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0187,  0.0260,  0.0348, -0.0005, -0.0061])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0004,  0.0058,  0.0019,  0.0023, -0.0013])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0047,  0.1151,  0.0386, -0.0294,  0.0042])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0059, -0.0045,  0.0186, -0.0048, -0.0122])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.0102, -0.0052,  0.1258, -0.0145, -0.0625])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.0102, -0.0052,  0.1258, -0.0145, -0.0625])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.0102, -0.0052,  0.1258, -0.0145, -0.0625])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-0.0023,  0.0012, -0.0272, -0.0052, -0.0176])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([0.0701, 0.0969, 0.1461, 0.0840, 0.0755])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([0.0701, 0.0969, 0.1461, 0.0840, 0.0755])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0254, -0.0493, -0.1770,  0.2353,  0.0225])
  [Mamba.forward] After layer 17 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 17 sample values: tensor([ 0.0254, -0.0493, -0.1770,  0.2353,  0.0225])
[Mamba.forward] Processing layer 18/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0254, -0.0493, -0.1770,  0.2353,  0.0225])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0254, -0.0493, -0.1770,  0.2353,  0.0225])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0210, -0.0408, -0.1567,  0.1960,  0.0204])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0210, -0.0408, -0.1567,  0.1960,  0.0204])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0210, -0.0408, -0.1567,  0.1960,  0.0204])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 0.8917, -0.7340,  0.8125, -0.5340,  1.2391])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 0.8917, -0.7340,  0.8125, -0.5340,  1.2391])
  [MambaBlock.forward] res sample values: tensor([-0.4416, -0.4424, -0.4926,  0.1374,  0.6415])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.8917, -1.1249, -0.1267, -0.4071, -0.7340])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0341,  0.0504, -0.1826, -0.0435,  0.0056])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0341,  0.0056, -0.2216, -0.1234,  0.1490])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0173,  0.0028, -0.0986, -0.0579,  0.0800])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-2.6850, -8.9284, -5.0936, -1.7456, -2.8801])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([0.1047, 0.0018, 0.4752, 0.1175, 0.3709], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 0.4919, -1.9463,  0.6910, -1.2281,  1.6288])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 0.4919, -1.9463,  0.6910, -1.2281,  1.6288])
  [MambaBlock.ssm] B sample values: tensor([ 0.1481, -0.1757, -0.1201,  0.2380, -0.9984])
  [MambaBlock.ssm] C sample values: tensor([ 0.4079, -0.2365,  0.0958,  0.4854, -1.2044])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1128, 0.1905, 0.0736, 0.0876, 0.0719])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.7387, 0.3653, 0.5630, 0.8213, 0.7226])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 0.0003, -0.0003, -0.0002,  0.0005, -0.0020])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 0.0003, -0.0003, -0.0002,  0.0005, -0.0020])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0047,  0.0013, -0.0173, -0.0121,  0.0137])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0002, -0.0004, -0.0002,  0.0006, -0.0021])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0051, -0.0051, -0.0167, -0.0156, -0.0180])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0029,  0.0036, -0.0012, -0.0006,  0.0026])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0054, -0.0090, -0.0152, -0.0195, -0.0250])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 0.0019,  0.0018,  0.0002, -0.0002,  0.0040])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0063, -0.0245,  0.0030, -0.0366, -0.0264])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0047,  0.0013, -0.0173, -0.0121,  0.0137])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.0065,  0.0013, -0.0641, -0.0189,  0.0434])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.0065,  0.0013, -0.0641, -0.0189,  0.0434])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.0065,  0.0013, -0.0641, -0.0189,  0.0434])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-0.0011, -0.0002,  0.0120, -0.0014,  0.0182])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0409,  0.0366, -0.0375,  0.0318,  0.0247])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0409,  0.0366, -0.0375,  0.0318,  0.0247])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-0.0155, -0.0127, -0.2145,  0.2671,  0.0472])
  [Mamba.forward] After layer 18 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 18 sample values: tensor([-0.0155, -0.0127, -0.2145,  0.2671,  0.0472])
[Mamba.forward] Processing layer 19/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.0155, -0.0127, -0.2145,  0.2671,  0.0472])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.0155, -0.0127, -0.2145,  0.2671,  0.0472])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.0125, -0.0109, -0.1998,  0.2228,  0.0431])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.0125, -0.0109, -0.1998,  0.2228,  0.0431])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.0125, -0.0109, -0.1998,  0.2228,  0.0431])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 0.1604, -1.0621, -0.3579,  0.2985, -0.3448])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 0.1604, -1.0621, -0.3579,  0.2985, -0.3448])
  [MambaBlock.forward] res sample values: tensor([-0.4108,  0.0149,  1.6904, -0.0174, -1.2822])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.1604,  1.0066,  0.4891,  0.2190, -1.0621])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0777, -0.2171, -0.1247, -0.0816, -0.1323])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0777, -0.1323,  0.0127,  0.0691, -0.0539])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0373, -0.0618,  0.0064,  0.0358, -0.0262])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -1.8862,  -0.9731, -13.5717,  -2.4939, -14.3508])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.2745,  0.4989, -0.0606,  0.0540,  0.2724], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.2030, -0.0115, -0.5798,  0.2866,  1.3971])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.2030, -0.0115, -0.5798,  0.2866,  1.3971])
  [MambaBlock.ssm] B sample values: tensor([ 0.3786, -0.5045, -0.4963, -0.2241,  0.6941])
  [MambaBlock.ssm] C sample values: tensor([-0.1390, -0.2730, -0.1320, -0.3750, -0.4638])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0696, 0.0871, 0.0735, 0.0569, 0.0620])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.8770, 0.9345, 0.3888, 0.8406, 0.3683])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-0.0010,  0.0013,  0.0013,  0.0006, -0.0018])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-0.0010,  0.0013,  0.0013,  0.0006, -0.0018])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.0061, -0.0126,  0.0011,  0.0048, -0.0038])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-0.0035,  0.0049,  0.0015,  0.0032, -0.0053])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-0.0356, -0.0274, -0.0028,  0.0222, -0.0279])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.0061,  0.0090,  0.0011,  0.0108, -0.0053])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0342,  0.0077, -0.0004,  0.0985, -0.0217])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0057,  0.0082,  0.0026,  0.0101, -0.0028])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0370,  0.0257,  0.0588,  0.1590, -0.0173])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.0061, -0.0126,  0.0011,  0.0048, -0.0038])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.0163, -0.0435,  0.0007,  0.0067, -0.0110])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.0163, -0.0435,  0.0007,  0.0067, -0.0110])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.0163, -0.0435,  0.0007,  0.0067, -0.0110])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 2.6776e-03, -3.2673e-04,  1.0190e-03, -5.7783e-05,  3.0541e-03])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0490, -0.0038, -0.0439,  0.0115, -0.0251])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0490, -0.0038, -0.0439,  0.0115, -0.0251])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0335, -0.0165, -0.2584,  0.2786,  0.0221])
  [Mamba.forward] After layer 19 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 19 sample values: tensor([ 0.0335, -0.0165, -0.2584,  0.2786,  0.0221])
[Mamba.forward] Processing layer 20/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0335, -0.0165, -0.2584,  0.2786,  0.0221])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0335, -0.0165, -0.2584,  0.2786,  0.0221])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0232, -0.0119, -0.2057,  0.1924,  0.0174])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0232, -0.0119, -0.2057,  0.1924,  0.0174])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0232, -0.0119, -0.2057,  0.1924,  0.0174])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.0316,  0.0459, -0.1251,  0.5162,  0.1750])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.0316,  0.0459, -0.1251,  0.5162,  0.1750])
  [MambaBlock.forward] res sample values: tensor([-0.9396, -0.4406,  0.7616,  0.7245, -0.3042])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.0316, -0.1376,  0.3015,  0.2407,  0.0459])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0024,  0.0122,  0.0037, -0.0533, -0.0214])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0024, -0.0214,  0.0102, -0.1525, -0.0187])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0012, -0.0106,  0.0051, -0.0704, -0.0093])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -2.6743, -11.4036,  -2.4939, -22.9045,  -5.4555])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.0386,  0.3293,  0.0585,  0.3629, -0.0363], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 0.4146,  0.8433, -3.0418, -0.5900, -0.9134])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 0.4146,  0.8433, -3.0418, -0.5900, -0.9134])
  [MambaBlock.ssm] B sample values: tensor([-0.3303,  0.2206, -0.0607, -0.1487,  0.0179])
  [MambaBlock.ssm] C sample values: tensor([ 0.6378, -0.4201,  0.0289,  0.0288,  0.1283])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1084, 0.0715, 0.1323, 0.0221, 0.0161])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.7484, 0.2905, 0.7631, 0.0835, 0.5536])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-4.3639e-05,  2.9151e-05, -8.0218e-06, -1.9651e-05,  2.3613e-06])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-4.3639e-05,  2.9151e-05, -8.0218e-06, -1.9651e-05,  2.3613e-06])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0003, -0.0017,  0.0016, -0.0036, -0.0003])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-1.6895e-04,  1.5493e-04,  8.3113e-05, -3.1305e-05,  2.8234e-06])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0008, -0.0044,  0.0007, -0.0077, -0.0027])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-2.0435e-04,  1.5775e-04,  1.1158e-04,  3.9437e-06, -1.2704e-05])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.0017, -0.0036,  0.0074, -0.0168,  0.0179])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 0.0022,  0.0012,  0.0005, -0.0036,  0.0005])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0221,  0.0099, -0.1214, -0.0228,  0.0024])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0003, -0.0017,  0.0016, -0.0036, -0.0003])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 3.4891e-04, -5.2213e-03,  1.8504e-03, -2.9113e-02, -4.3627e-06])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 3.4891e-04, -5.2213e-03,  1.8504e-03, -2.9113e-02, -4.3627e-06])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 3.4891e-04, -5.2213e-03,  1.8504e-03, -2.9113e-02, -4.3627e-06])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-9.2114e-05,  9.0092e-04,  9.6073e-04, -1.4208e-02,  5.6347e-07])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0232, -0.0804,  0.0373, -0.0048, -0.1111])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0232, -0.0804,  0.0373, -0.0048, -0.1111])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0104, -0.0969, -0.2211,  0.2738, -0.0891])
  [Mamba.forward] After layer 20 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 20 sample values: tensor([ 0.0104, -0.0969, -0.2211,  0.2738, -0.0891])
[Mamba.forward] Processing layer 21/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0104, -0.0969, -0.2211,  0.2738, -0.0891])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0104, -0.0969, -0.2211,  0.2738, -0.0891])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0055, -0.0556, -0.1454,  0.1466, -0.0546])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0055, -0.0556, -0.1454,  0.1466, -0.0546])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0055, -0.0556, -0.1454,  0.1466, -0.0546])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.9613, -0.2355, -1.7044, -0.0323,  0.2856])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.9613, -0.2355, -1.7044, -0.0323,  0.2856])
  [MambaBlock.forward] res sample values: tensor([-0.2510,  0.4472, -0.5544,  0.1655,  0.5493])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.9613, -0.4609, -0.6051, -0.9351, -0.2355])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0090, -0.1258, -0.0548, -0.0700,  0.0023])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0090,  0.0023,  0.6414, -0.0581,  0.0121])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0045,  0.0012,  0.4201, -0.0282,  0.0061])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-254.4525,   -0.9449,   -1.1400,   -0.5035,   -0.4524])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0299, -0.0231,  0.3997,  0.4814,  0.5528], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-1.5691,  1.1901, -0.2816,  0.5410,  0.0677])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-1.5691,  1.1901, -0.2816,  0.5410,  0.0677])
  [MambaBlock.ssm] B sample values: tensor([-0.2248,  0.0355,  0.0567, -0.0487,  0.0099])
  [MambaBlock.ssm] C sample values: tensor([-0.6180,  0.2841,  0.7115,  0.1169, -0.3243])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0278, 0.0153, 0.0020, 0.0527, 0.0269])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([8.5233e-04, 9.7410e-01, 9.6883e-01, 9.8611e-01, 9.8751e-01])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-2.8174e-05,  4.4486e-06,  7.1102e-06, -6.1074e-06,  1.2376e-06])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-2.8174e-05,  4.4486e-06,  7.1102e-06, -6.1074e-06,  1.2376e-06])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 3.7782e-04,  5.3977e-05,  2.4727e-03, -4.4728e-03,  4.9385e-04])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0002, -0.0012, -0.0011, -0.0009,  0.0007])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-0.0112,  0.0005,  0.0058, -0.0243,  0.0420])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0009, -0.0040, -0.0024, -0.0012, -0.0012])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0089, -0.0677,  0.0040, -0.0288, -0.0025])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 0.0007, -0.0042, -0.0029, -0.0001, -0.0019])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0078, -0.0440,  0.0023, -0.0367,  0.0020])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 3.7782e-04,  5.3977e-05,  2.4727e-03, -4.4728e-03,  4.9385e-04])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 2.4303e-04,  2.6949e-05,  1.7042e-01, -1.8040e-02,  3.8633e-03])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 2.4303e-04,  2.6949e-05,  1.7042e-01, -1.8040e-02,  3.8633e-03])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 2.4303e-04,  2.6949e-05,  1.7042e-01, -1.8040e-02,  3.8633e-03])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-2.6696e-05,  7.3516e-06, -3.4474e-02, -1.6165e-03,  1.3454e-03])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0379,  0.0646,  0.0701,  0.0143, -0.0627])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0379,  0.0646,  0.0701,  0.0143, -0.0627])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-0.0275, -0.0323, -0.1509,  0.2881, -0.1518])
  [Mamba.forward] After layer 21 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 21 sample values: tensor([-0.0275, -0.0323, -0.1509,  0.2881, -0.1518])
[Mamba.forward] Processing layer 22/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.0275, -0.0323, -0.1509,  0.2881, -0.1518])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.0275, -0.0323, -0.1509,  0.2881, -0.1518])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.0170, -0.0200, -0.1052,  0.1759, -0.1070])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.0170, -0.0200, -0.1052,  0.1759, -0.1070])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.0170, -0.0200, -0.1052,  0.1759, -0.1070])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-2.3270,  0.4965,  1.3124, -0.2634, -1.0432])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-2.3270,  0.4965,  1.3124, -0.2634, -1.0432])
  [MambaBlock.forward] res sample values: tensor([ 0.0521,  0.6040, -0.6776,  0.2182,  0.5487])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-2.3270, -0.7056,  0.7260,  0.3266,  0.4965])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.3208, -0.0537,  0.1435,  0.0634, -0.1108])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.3208, -0.1108,  0.1891,  0.0801,  0.1818])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.1349, -0.0523,  0.1034,  0.0416,  0.0991])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-2.2389, -1.5144, -5.0901, -2.1540, -2.2951])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([0.3662, 0.3595, 0.4369, 0.1591, 0.5331], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-1.1541,  0.0538,  1.2132,  0.5727, -0.2756])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-1.1541,  0.0538,  1.2132,  0.5727, -0.2756])
  [MambaBlock.ssm] B sample values: tensor([-0.5187, -0.5041,  0.8128,  1.0022,  0.2432])
  [MambaBlock.ssm] C sample values: tensor([0.3561, 0.0105, 0.4439, 0.1607, 1.5076])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1054, 0.0366, 0.1293, 0.2107, 0.0547])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.7898, 0.8525, 0.5849, 0.7969, 0.7852])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 0.0074,  0.0072, -0.0116, -0.0142, -0.0035])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 0.0074,  0.0072, -0.0116, -0.0142, -0.0035])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.0466, -0.0063,  0.0438,  0.0287,  0.0178])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0078,  0.0074, -0.0098, -0.0149, -0.0037])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-0.0458, -0.0320, -0.0192,  0.0386,  0.0169])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0046,  0.0033, -0.0053, -0.0084, -0.0027])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0341, -0.0344, -0.0053,  0.0607,  0.0200])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 0.0020,  0.0007,  0.0013, -0.0030, -0.0033])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.0006, -0.0340,  0.0133,  0.0681,  0.0209])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.0466, -0.0063,  0.0438,  0.0287,  0.0178])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.0960, -0.0251,  0.0890,  0.0354,  0.0706])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.0960, -0.0251,  0.0890,  0.0354,  0.0706])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.0960, -0.0251,  0.0890,  0.0354,  0.0706])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-0.0026, -0.0098, -0.0203,  0.0043,  0.0246])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0483, -0.1211,  0.0008,  0.0237,  0.0521])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0483, -0.1211,  0.0008,  0.0237,  0.0521])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0208, -0.1534, -0.1501,  0.3118, -0.0997])
  [Mamba.forward] After layer 22 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 22 sample values: tensor([ 0.0208, -0.1534, -0.1501,  0.3118, -0.0997])
[Mamba.forward] Processing layer 23/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0208, -0.1534, -0.1501,  0.3118, -0.0997])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0208, -0.1534, -0.1501,  0.3118, -0.0997])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0111, -0.0828, -0.0930,  0.1636, -0.0592])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0111, -0.0828, -0.0930,  0.1636, -0.0592])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0111, -0.0828, -0.0930,  0.1636, -0.0592])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([0.1695, 0.1533, 0.8288, 0.2989, 0.9955])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([0.1695, 0.1533, 0.8288, 0.2989, 0.9955])
  [MambaBlock.forward] res sample values: tensor([-0.1384,  0.2720, -0.1570,  0.4124, -0.0456])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.1695,  0.1654, -0.6489, -0.4827,  0.1533])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0490, -0.0721,  0.0122,  0.1088, -0.0523])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0490, -0.0523,  0.1129, -0.1666, -0.2463])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0239, -0.0254,  0.0596, -0.0764, -0.1081])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([  -0.5022,   -0.6839,  -78.8670, -130.0712,   -1.1101])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([0.2319, 0.4938, 0.3851, 0.2678, 0.2860], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 0.1994, -0.4107, -0.5326, -0.2230,  0.2823])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 0.1994, -0.4107, -0.5326, -0.2230,  0.2823])
  [MambaBlock.ssm] B sample values: tensor([-0.4472,  0.2331, -0.1196, -0.5814, -0.1655])
  [MambaBlock.ssm] C sample values: tensor([ 0.3292,  0.0654, -1.0887, -0.2447, -0.7962])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1069, 0.1868, 0.0824, 0.0332, 0.0428])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([9.4773e-01, 9.2950e-01, 2.1793e-04, 9.1404e-07, 8.8810e-01])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 0.0011, -0.0006,  0.0003,  0.0015,  0.0004])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 0.0011, -0.0006,  0.0003,  0.0015,  0.0004])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.0078, -0.0145,  0.0150, -0.0078, -0.0141])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0016, -0.0008,  0.0002,  0.0006,  0.0009])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-0.0122, -0.0125, -0.0037, -0.0126, -0.0206])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 1.2708e-03, -1.3325e-04,  8.7952e-05, -7.5276e-04,  6.4480e-04])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0109, -0.0283, -0.0133,  0.0033, -0.0160])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0034,  0.0058, -0.0014, -0.0115, -0.0049])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.0610,  0.0156,  0.0507,  0.0221, -0.0156])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.0078, -0.0145,  0.0150, -0.0078, -0.0141])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.0133, -0.0271,  0.0380, -0.0282, -0.0450])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.0133, -0.0271,  0.0380, -0.0282, -0.0450])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.0133, -0.0271,  0.0380, -0.0282, -0.0450])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 0.0009, -0.0042, -0.0027, -0.0070,  0.0010])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0648, -0.0582,  0.0843, -0.0383, -0.0105])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0648, -0.0582,  0.0843, -0.0383, -0.0105])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0855, -0.2117, -0.0658,  0.2735, -0.1102])
  [Mamba.forward] After layer 23 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 23 sample values: tensor([ 0.0855, -0.2117, -0.0658,  0.2735, -0.1102])
[Mamba.forward] Processing layer 24/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0855, -0.2117, -0.0658,  0.2735, -0.1102])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0855, -0.2117, -0.0658,  0.2735, -0.1102])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0489, -0.1264, -0.0444,  0.1490, -0.0689])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0489, -0.1264, -0.0444,  0.1490, -0.0689])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0489, -0.1264, -0.0444,  0.1490, -0.0689])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.7163, -0.3107, -0.3501, -2.1460,  0.7900])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.7163, -0.3107, -0.3501, -2.1460,  0.7900])
  [MambaBlock.forward] res sample values: tensor([-0.7157,  0.0840, -0.4156,  1.6922, -0.0746])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.7163, -2.0383, -1.4501, -0.5653, -0.3107])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0035,  0.0723,  0.2902,  0.2328, -0.0069])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0035, -0.0069, -0.0656, -0.0350,  0.0251])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0018, -0.0034, -0.0317, -0.0172,  0.0127])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-0.2769, -0.3409, -1.2273, -0.5397, -0.6989])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.1152,  0.0251,  0.4881,  0.0451, -0.0094], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 0.8446, -0.3341,  1.7297, -0.7329,  1.8972])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 0.8446, -0.3341,  1.7297, -0.7329,  1.8972])
  [MambaBlock.ssm] B sample values: tensor([ 0.8718,  0.1441, -1.2469,  0.0839,  0.0848])
  [MambaBlock.ssm] C sample values: tensor([ 0.4609,  0.1443, -0.0079, -0.4047, -0.0035])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0674, 0.0966, 0.0302, 0.1055, 0.0641])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.9815, 0.9773, 0.9206, 0.9643, 0.9540])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-1.0330e-04, -1.7073e-05,  1.4775e-04, -9.9460e-06, -1.0050e-05])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-1.0330e-04, -1.7073e-05,  1.4775e-04, -9.9460e-06, -1.0050e-05])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-8.6624e-05, -2.4286e-04, -7.0139e-04, -1.3255e-03,  5.9527e-04])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0012, -0.0015, -0.0036, -0.0005,  0.0003])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0062, -0.0040, -0.0056, -0.0303, -0.0026])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0255,  0.0032, -0.0437, -0.0495, -0.0105])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.1421, -0.0277, -0.0101, -0.0466, -0.0265])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 0.0441,  0.0050, -0.0786, -0.0398, -0.0276])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.1896, -0.0173, -0.0047, -0.0656, -0.0388])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-8.6624e-05, -2.4286e-04, -7.0139e-04, -1.3255e-03,  5.9527e-04])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.0001, -0.0003, -0.0162, -0.0021,  0.0005])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.0001, -0.0003, -0.0162, -0.0021,  0.0005])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.0001, -0.0003, -0.0162, -0.0021,  0.0005])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-2.7224e-05, -1.4416e-05,  2.6756e-03, -3.0034e-03, -1.7086e-05])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0243,  0.1715,  0.0066, -0.2283, -0.0243])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0243,  0.1715,  0.0066, -0.2283, -0.0243])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.1098, -0.0402, -0.0592,  0.0452, -0.1345])
  [Mamba.forward] After layer 24 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 24 sample values: tensor([ 0.1098, -0.0402, -0.0592,  0.0452, -0.1345])
[Mamba.forward] Processing layer 25/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.1098, -0.0402, -0.0592,  0.0452, -0.1345])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.1098, -0.0402, -0.0592,  0.0452, -0.1345])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0548, -0.0206, -0.0341,  0.0216, -0.0755])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0548, -0.0206, -0.0341,  0.0216, -0.0755])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0548, -0.0206, -0.0341,  0.0216, -0.0755])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.0594,  0.0746, -0.0425,  0.4045, -0.3827])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.0594,  0.0746, -0.0425,  0.4045, -0.3827])
  [MambaBlock.forward] res sample values: tensor([ 0.0082,  0.9956, -0.5810, -0.6957,  0.7127])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.0594,  0.0627, -0.0803, -0.8929,  0.0746])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0441,  0.0433,  0.0349,  0.1279, -0.0788])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0441, -0.0788, -0.0046, -0.0273, -0.0049])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0226, -0.0379, -0.0023, -0.0135, -0.0024])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -2.2154,  -2.6899, -18.9078,  -4.3500, -31.1806])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.1203,  0.4911,  0.0294, -0.0778,  0.0889], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.9863, -0.4588,  0.5484, -0.8671, -0.2218])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.9863, -0.4588,  0.5484, -0.8671, -0.2218])
  [MambaBlock.ssm] B sample values: tensor([ 0.4333, -0.8732, -0.0017,  1.4027,  0.4265])
  [MambaBlock.ssm] C sample values: tensor([-0.1709, -0.3912, -0.4484, -0.0325,  0.4575])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1510, 0.0520, 0.1189, 0.1692, 0.1172])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.7157, 0.6662, 0.0576, 0.5185, 0.0090])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 1.4751e-03, -2.9730e-03, -5.8704e-06,  4.7756e-03,  1.4520e-03])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 1.4751e-03, -2.9730e-03, -5.8704e-06,  4.7756e-03,  1.4520e-03])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0059, -0.0034, -0.0005, -0.0040, -0.0005])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0024, -0.0038, -0.0002,  0.0053,  0.0017])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0081, -0.0070, -0.0010,  0.0078, -0.0030])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0035, -0.0044, -0.0020,  0.0049,  0.0027])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.0133, -0.0217,  0.0024,  0.0001, -0.0028])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 0.0079, -0.0149, -0.0021,  0.0162,  0.0067])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.0374, -0.0401, -0.0116, -0.0100,  0.0010])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0059, -0.0034, -0.0005, -0.0040, -0.0005])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.0086, -0.0220, -0.0005, -0.0029, -0.0007])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.0086, -0.0220, -0.0005, -0.0029, -0.0007])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.0086, -0.0220, -0.0005, -0.0029, -0.0007])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 3.5611e-05, -1.6003e-02,  1.1203e-04,  6.7418e-04, -3.4069e-04])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0224, -0.0251, -0.0195, -0.0286,  0.0163])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0224, -0.0251, -0.0195, -0.0286,  0.0163])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.1322, -0.0653, -0.0787,  0.0167, -0.1183])
  [Mamba.forward] After layer 25 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 25 sample values: tensor([ 0.1322, -0.0653, -0.0787,  0.0167, -0.1183])
[Mamba.forward] Processing layer 26/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.1322, -0.0653, -0.0787,  0.0167, -0.1183])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.1322, -0.0653, -0.0787,  0.0167, -0.1183])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0738, -0.0384, -0.0514,  0.0086, -0.0713])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0738, -0.0384, -0.0514,  0.0086, -0.0713])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0738, -0.0384, -0.0514,  0.0086, -0.0713])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.2740, -0.9061,  0.2863,  0.7595, -0.4235])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.2740, -0.9061,  0.2863,  0.7595, -0.4235])
  [MambaBlock.forward] res sample values: tensor([-1.1058, -0.3543, -0.3148, -0.0206, -0.0348])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.2740, -0.1463,  0.9058, -0.0443, -0.9061])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0222,  0.0040,  0.1209, -0.0331, -0.0358])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0222, -0.0358, -0.0037, -0.0296,  0.1050])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0110, -0.0176, -0.0018, -0.0146,  0.0553])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-0.6176, -0.6307, -0.7178, -0.6320, -0.6296])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0076,  0.0182, -0.0949, -0.0155,  0.2121], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-1.3832,  0.2083, -0.5037,  1.3349, -0.0590])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-1.3832,  0.2083, -0.5037,  1.3349, -0.0590])
  [MambaBlock.ssm] B sample values: tensor([-0.0666, -0.5095, -0.0060, -0.0454, -0.0494])
  [MambaBlock.ssm] C sample values: tensor([-0.1088, -0.6846,  0.0350, -0.0460, -0.1881])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0312, 0.0047, 0.0270, 0.0156, 0.0009])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.9809, 0.9805, 0.9778, 0.9804, 0.9805])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([2.2831e-05, 1.7468e-04, 2.0553e-06, 1.5547e-05, 1.6952e-05])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([2.2831e-05, 1.7468e-04, 2.0553e-06, 1.5547e-05, 1.6952e-05])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-6.2698e-04, -1.4973e-04, -9.1095e-05, -4.1619e-04,  8.6869e-05])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 1.0210e-05,  1.3049e-04, -5.9544e-06, -4.1565e-06, -2.1921e-07])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-3.1764e-04,  5.3780e-04,  3.1781e-04, -8.3355e-05,  1.5068e-04])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 6.0102e-05,  6.6273e-05,  2.1282e-05, -8.9372e-05, -8.8132e-05])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-3.7418e-04, -2.6812e-05,  1.3429e-03, -5.4420e-03,  1.8762e-04])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 6.5068e-05,  1.0554e-04,  4.7593e-05, -2.1642e-05, -5.8210e-05])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0005, -0.0004,  0.0010,  0.0049,  0.0002])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-6.2698e-04, -1.4973e-04, -9.1095e-05, -4.1619e-04,  8.6869e-05])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-5.4393e-04, -4.6940e-04,  8.3721e-05, -1.8959e-04,  1.1812e-02])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-5.4393e-04, -4.6940e-04,  8.3721e-05, -1.8959e-04,  1.1812e-02])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-5.4393e-04, -4.6940e-04,  8.3721e-05, -1.8959e-04,  1.1812e-02])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 1.4956e-04,  6.8575e-05, -1.1121e-05,  1.9350e-06, -2.0197e-04])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0074, -0.0273,  0.1085,  0.0144, -0.0493])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0074, -0.0273,  0.1085,  0.0144, -0.0493])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.1248, -0.0926,  0.0298,  0.0311, -0.1676])
  [Mamba.forward] After layer 26 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 26 sample values: tensor([ 0.1248, -0.0926,  0.0298,  0.0311, -0.1676])
[Mamba.forward] Processing layer 27/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.1248, -0.0926,  0.0298,  0.0311, -0.1676])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.1248, -0.0926,  0.0298,  0.0311, -0.1676])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0515, -0.0422,  0.0148,  0.0129, -0.0800])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0515, -0.0422,  0.0148,  0.0129, -0.0800])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0515, -0.0422,  0.0148,  0.0129, -0.0800])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 0.4309,  0.6001,  0.7872,  0.0285, -0.3780])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 0.4309,  0.6001,  0.7872,  0.0285, -0.3780])
  [MambaBlock.forward] res sample values: tensor([-0.5222,  0.3790,  0.0441, -0.1784,  0.7443])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.4309,  0.0400,  0.3272, -0.4997,  0.6001])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0798,  0.0157,  0.0613, -0.0776,  0.0035])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0798,  0.0035,  0.0951, -0.0046,  0.0583])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0415,  0.0017,  0.0498, -0.0023,  0.0300])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -4.0620, -24.2125,  -9.8745,  -7.6421,  -0.9034])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([0.5629, 0.0495, 0.5065, 0.4324, 0.2153], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 0.8701, -0.3207, -0.1068, -0.9777,  0.9760])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 0.8701, -0.3207, -0.1068, -0.9777,  0.9760])
  [MambaBlock.ssm] B sample values: tensor([ 0.3590, -0.2697,  1.2261, -0.5145,  0.7159])
  [MambaBlock.ssm] C sample values: tensor([ 0.0261,  0.2274, -0.1007,  0.0885,  0.5263])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1390, 0.1275, 0.0525, 0.1250, 0.1346])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.5685, 0.0345, 0.2534, 0.3456, 0.8820])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 0.0021, -0.0016,  0.0071, -0.0030,  0.0041])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 0.0021, -0.0016,  0.0071, -0.0030,  0.0041])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0163,  0.0006,  0.0074, -0.0008,  0.0114])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0020, -0.0006,  0.0044, -0.0023,  0.0042])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0131,  0.0058,  0.0006, -0.0086, -0.0158])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0054, -0.0028,  0.0088, -0.0097,  0.0091])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.0419,  0.0085,  0.0016, -0.0337, -0.0397])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 8.3277e-05,  1.9407e-03, -6.2529e-03,  1.8236e-03,  3.3302e-03])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0118,  0.0508, -0.0074, -0.0255,  0.0503])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0163,  0.0006,  0.0074, -0.0008,  0.0114])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.0397,  0.0007,  0.0326, -0.0018,  0.0179])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.0397,  0.0007,  0.0326, -0.0018,  0.0179])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.0397,  0.0007,  0.0326, -0.0018,  0.0179])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-0.0077,  0.0002,  0.0007,  0.0001,  0.0090])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0403, -0.0294, -0.0135,  0.1671,  0.0786])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0403, -0.0294, -0.0135,  0.1671,  0.0786])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.1652, -0.1220,  0.0163,  0.1981, -0.0890])
  [Mamba.forward] After layer 27 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 27 sample values: tensor([ 0.1652, -0.1220,  0.0163,  0.1981, -0.0890])
[Mamba.forward] Processing layer 28/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.1652, -0.1220,  0.0163,  0.1981, -0.0890])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.1652, -0.1220,  0.0163,  0.1981, -0.0890])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0797, -0.0609,  0.0092,  0.0883, -0.0470])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0797, -0.0609,  0.0092,  0.0883, -0.0470])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0797, -0.0609,  0.0092,  0.0883, -0.0470])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-1.0702, -0.4822, -0.2390, -0.6535, -1.6533])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-1.0702, -0.4822, -0.2390, -0.6535, -1.6533])
  [MambaBlock.forward] res sample values: tensor([-0.4520, -0.4508,  0.1756,  0.8667,  0.7785])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-1.0702,  0.0539,  0.4948,  0.3815, -0.4822])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.2095, -0.0507, -0.1354, -0.0948,  0.0251])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.2095,  0.0251, -0.0096, -0.0224, -1.4220])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.1157,  0.0127, -0.0048, -0.0111, -0.2764])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -3.9591, -12.6456, -16.3348,  -6.6797,  -8.8043])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.5588, -0.0223, -0.0134,  0.0378,  0.0530], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.8602, -1.3749, -1.7265, -0.5403, -1.2860])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.8602, -1.3749, -1.7265, -0.5403, -1.2860])
  [MambaBlock.ssm] B sample values: tensor([-0.3904, -0.4692,  1.4436,  0.2925, -0.3003])
  [MambaBlock.ssm] C sample values: tensor([ 0.0656, -1.0037, -0.1766, -0.1163,  0.1375])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0883, 0.2454, 0.1335, 0.2072, 0.0899])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.7050, 0.3275, 0.2364, 0.5545, 0.4597])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-0.0040, -0.0048,  0.0147,  0.0030, -0.0031])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-0.0040, -0.0048,  0.0147,  0.0030, -0.0031])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0094,  0.0029, -0.0006, -0.0021, -0.0228])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-0.0016, -0.0006,  0.0009,  0.0009, -0.0032])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0021,  0.0017, -0.0027, -0.0117, -0.0759])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0061,  0.0039, -0.0097, -0.0025, -0.0127])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0285, -0.0037, -0.0086, -0.0173, -0.1553])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 0.0064,  0.0038, -0.0087, -0.0011, -0.0082])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0330,  0.0576, -0.0077, -0.0235, -0.1430])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0094,  0.0029, -0.0006, -0.0021, -0.0228])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.0740,  0.0026, -0.0005, -0.0025, -0.0375])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.0740,  0.0026, -0.0005, -0.0025, -0.0375])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.0740,  0.0026, -0.0005, -0.0025, -0.0375])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-1.3014e-02, -4.5272e-04, -4.9634e-05, -1.5411e-03, -1.9986e-02])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0328, -0.0393,  0.0514, -0.0050, -0.0978])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0328, -0.0393,  0.0514, -0.0050, -0.0978])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.1324, -0.1613,  0.0677,  0.1931, -0.1868])
  [Mamba.forward] After layer 28 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 28 sample values: tensor([ 0.1324, -0.1613,  0.0677,  0.1931, -0.1868])
[Mamba.forward] Processing layer 29/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.1324, -0.1613,  0.0677,  0.1931, -0.1868])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.1324, -0.1613,  0.0677,  0.1931, -0.1868])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0688, -0.0869,  0.0406,  0.0879, -0.1018])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0688, -0.0869,  0.0406,  0.0879, -0.1018])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0688, -0.0869,  0.0406,  0.0879, -0.1018])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 1.6989,  0.6173,  0.1952, -1.5813,  0.9751])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 1.6989,  0.6173,  0.1952, -1.5813,  0.9751])
  [MambaBlock.forward] res sample values: tensor([-0.5692, -2.1042, -0.4672,  1.5217, -1.4747])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 1.6989,  0.1010, -0.7095, -0.9838,  0.6173])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-1.0266, -0.2596,  0.1524,  0.3215, -0.0169])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-1.0266, -0.0169,  0.0065, -0.2664, -0.0025])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.2708, -0.0084,  0.0033, -0.1156, -0.0013])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-1.2439, -3.4523, -5.3463, -6.4821, -6.0890])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.2041, -0.0127,  0.0125,  0.3835, -0.0150], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 0.7672, -0.5144, -0.5546, -0.0143,  0.1447])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 0.7672, -0.5144, -0.5546, -0.0143,  0.1447])
  [MambaBlock.ssm] B sample values: tensor([ 0.6342,  0.1013,  0.1543,  0.0341, -0.0113])
  [MambaBlock.ssm] C sample values: tensor([ 0.6928,  0.1221, -0.0403, -0.0693, -0.1124])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([2.9776e-05, 9.5192e-03, 8.5175e-03, 9.7280e-06, 1.3033e-02])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([1.0000, 0.9999, 0.9998, 0.9998, 0.9998])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-5.1130e-06, -8.1703e-07, -1.2436e-06, -2.7480e-07,  9.1269e-08])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-5.1130e-06, -8.1703e-07, -1.2436e-06, -2.7480e-07,  9.1269e-08])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-1.8319e-05, -1.8150e-04,  6.3169e-05, -2.5547e-06, -3.7109e-05])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-1.0001e-05, -1.4809e-06, -3.1167e-06, -1.1054e-07,  1.0742e-07])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-2.6438e-05, -3.6242e-04,  2.3357e-04, -2.9014e-06, -1.8590e-04])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-8.3786e-06, -4.6410e-07, -3.0542e-06, -1.0252e-06, -1.5971e-07])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-3.3906e-05,  1.2618e-03,  5.7098e-04, -5.2353e-06,  1.7111e-03])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-6.7250e-06,  1.7496e-06, -4.5380e-06, -7.1729e-07, -2.4953e-06])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-2.5261e-05, -2.8552e-03, -5.8942e-03, -6.4363e-06, -4.6563e-03])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-1.8319e-05, -1.8150e-04,  6.3169e-05, -2.5547e-06, -3.7109e-05])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-5.5274e-02, -7.5138e-05,  1.0406e-04, -4.4326e-02, -1.8302e-05])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-5.5274e-02, -7.5138e-05,  1.0406e-04, -4.4326e-02, -1.8302e-05])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-5.5274e-02, -7.5138e-05,  1.0406e-04, -4.4326e-02, -1.8302e-05])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 1.1370e-02,  1.7184e-05, -1.8730e-05, -5.5365e-02,  5.0263e-06])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0820,  0.1169, -0.0214, -0.0524,  0.0560])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0820,  0.1169, -0.0214, -0.0524,  0.0560])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0505, -0.0444,  0.0462,  0.1407, -0.1308])
  [Mamba.forward] After layer 29 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 29 sample values: tensor([ 0.0505, -0.0444,  0.0462,  0.1407, -0.1308])
[Mamba.forward] Processing layer 30/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0505, -0.0444,  0.0462,  0.1407, -0.1308])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0505, -0.0444,  0.0462,  0.1407, -0.1308])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0214, -0.0193,  0.0225,  0.0566, -0.0610])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0214, -0.0193,  0.0225,  0.0566, -0.0610])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0214, -0.0193,  0.0225,  0.0566, -0.0610])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 1.1146, -0.3501,  0.2941, -0.2993, -0.1774])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 1.1146, -0.3501,  0.2941, -0.2993, -0.1774])
  [MambaBlock.forward] res sample values: tensor([-1.4360,  0.3519, -0.3472,  0.5369, -0.4579])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 1.1146,  1.0001,  0.6928,  0.7421, -0.3501])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([1.1715, 1.1341, 1.1393, 1.1503, 0.0185])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 1.1715,  0.0185, -0.0782, -0.0468, -0.0143])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.8943,  0.0094, -0.0376, -0.0228, -0.0071])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([  -0.9113, -382.3654,  -11.6041,   -3.6841,   -3.6599])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([0.7055, 0.4026, 0.4645, 0.4292, 0.1706], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.4673, -1.5189,  1.1720,  0.3754, -0.0893])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.4673, -1.5189,  1.1720,  0.3754, -0.0893])
  [MambaBlock.ssm] B sample values: tensor([-0.3914, -0.3926,  0.8561, -0.8160,  0.3758])
  [MambaBlock.ssm] C sample values: tensor([-0.4255,  0.0439, -0.5480, -0.0533,  0.0138])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.9055, 0.0578, 0.0745, 0.1008, 0.1698])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([4.3816e-01, 0.0000e+00, 2.7328e-05, 3.5581e-02, 3.6368e-02])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-0.3170, -0.3179,  0.6933, -0.6608,  0.3044])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-0.3170, -0.3179,  0.6933, -0.6608,  0.3044])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 2.6021e+00,  1.7361e-03, -9.0021e-03, -7.3992e-03, -3.8767e-03])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-0.3427, -0.1760,  0.2098, -0.2481,  0.2786])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 2.7659e+00,  7.7337e-03, -1.1661e-02, -4.0379e-04, -2.6280e-03])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.3598, -0.1760,  0.2427, -0.0983,  0.3258])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 4.0232e+00,  2.6535e-03, -1.2069e-02, -2.4633e-02,  6.2219e-03])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.3849, -0.0732,  0.1850, -0.2303,  0.2673])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 3.8490,  0.0118, -0.0041, -0.0203,  0.0495])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 2.6021e+00,  1.7361e-03, -9.0021e-03, -7.3992e-03, -3.8767e-03])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 3.2330,  0.0055, -0.0265, -0.0172, -0.0051])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 3.2330,  0.0055, -0.0265, -0.0172, -0.0051])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 3.2330,  0.0055, -0.0265, -0.0172, -0.0051])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-0.8921,  0.0011,  0.0038, -0.0058,  0.0009])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0172, -0.0280, -0.0472, -0.0256,  0.0803])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0172, -0.0280, -0.0472, -0.0256,  0.0803])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0333, -0.0724, -0.0010,  0.1151, -0.0505])
  [Mamba.forward] After layer 30 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 30 sample values: tensor([ 0.0333, -0.0724, -0.0010,  0.1151, -0.0505])
[Mamba.forward] Processing layer 31/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0333, -0.0724, -0.0010,  0.1151, -0.0505])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0333, -0.0724, -0.0010,  0.1151, -0.0505])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0186, -0.0409, -0.0006,  0.0595, -0.0304])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0186, -0.0409, -0.0006,  0.0595, -0.0304])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0186, -0.0409, -0.0006,  0.0595, -0.0304])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 0.2466, -0.5898, -0.2029, -0.8688, -0.1222])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 0.2466, -0.5898, -0.2029, -0.8688, -0.1222])
  [MambaBlock.forward] res sample values: tensor([-0.9512,  0.0246, -0.5188, -0.3132, -1.0031])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.2466,  1.0185,  1.9261,  2.0317, -0.5898])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0066, -0.0638, -0.1950, -0.3102, -0.1238])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0066, -0.1238, -0.0850,  0.0158, -0.0123])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0033, -0.0581, -0.0407,  0.0080, -0.0061])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-0.2965, -0.9313, -1.3837, -9.1953, -1.4852])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0456,  0.5815,  0.3038, -0.1054, -0.0784], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 0.0324,  0.8298,  3.7341, -1.0947, -1.2930])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 0.0324,  0.8298,  3.7341, -1.0947, -1.2930])
  [MambaBlock.ssm] B sample values: tensor([ 0.4538,  0.5537,  0.0427,  1.3236, -0.5404])
  [MambaBlock.ssm] C sample values: tensor([0.2093, 0.6871, 0.0811, 0.8828, 0.0064])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1368, 0.0280, 0.0132, 0.6309, 0.5302])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.9602, 0.8803, 0.8275, 0.2841, 0.8161])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-2.0449e-04, -2.4951e-04, -1.9263e-05, -5.9646e-04,  2.4350e-04])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-2.0449e-04, -2.4951e-04, -1.9263e-05, -5.9646e-04,  2.4350e-04])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.0006, -0.0020, -0.0007,  0.0062, -0.0040])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-1.0140e-03, -1.5431e-03,  7.0287e-05, -1.5907e-03,  9.3990e-04])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-1.4355e-03, -2.3640e-03, -1.7512e-03,  7.6159e-06,  3.2279e-03])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.0029, -0.0063,  0.0012, -0.0060,  0.0045])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0078, -0.0016, -0.0075, -0.0028, -0.0073])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0104, -0.0189,  0.0042, -0.0126,  0.0143])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0155,  0.0021, -0.0127, -0.0064, -0.0159])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.0006, -0.0020, -0.0007,  0.0062, -0.0040])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.0004, -0.0358, -0.0130,  0.0053, -0.0035])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.0004, -0.0358, -0.0130,  0.0053, -0.0035])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.0004, -0.0358, -0.0130,  0.0053, -0.0035])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 0.0001, -0.0004,  0.0025, -0.0007,  0.0009])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0226,  0.0630, -0.0011,  0.0602,  0.0337])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0226,  0.0630, -0.0011,  0.0602,  0.0337])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0107, -0.0094, -0.0021,  0.1754, -0.0169])
  [Mamba.forward] After layer 31 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 31 sample values: tensor([ 0.0107, -0.0094, -0.0021,  0.1754, -0.0169])
[Mamba.forward] Processing layer 32/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0107, -0.0094, -0.0021,  0.1754, -0.0169])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0107, -0.0094, -0.0021,  0.1754, -0.0169])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0057, -0.0050, -0.0012,  0.0864, -0.0089])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0057, -0.0050, -0.0012,  0.0864, -0.0089])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0057, -0.0050, -0.0012,  0.0864, -0.0089])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.0182, -0.2538,  0.7987,  2.2056,  0.5560])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.0182, -0.2538,  0.7987,  2.2056,  0.5560])
  [MambaBlock.forward] res sample values: tensor([-0.0023,  0.2570, -1.3013,  0.7839, -1.7388])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.0182,  0.5106,  0.6408,  0.1344, -0.2538])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0377, -0.1774, -0.2294, -0.1066, -0.0229])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0377, -0.0229, -0.1079, -1.1920,  0.0046])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0185, -0.0113, -0.0510, -0.2776,  0.0023])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-9.9125, -7.8557, -7.0864, -6.3567, -6.9433])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.4195, -0.0730,  0.5838,  0.0546,  0.0136], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-2.7885,  0.4861,  2.6724,  0.0823, -1.1039])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-2.7885,  0.4861,  2.6724,  0.0823, -1.1039])
  [MambaBlock.ssm] B sample values: tensor([0.0167, 0.0841, 0.0408, 0.0370, 0.0355])
  [MambaBlock.ssm] C sample values: tensor([ 0.1486, -0.6216, -0.6826, -0.0555, -0.4714])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([3.8720e-04, 4.0888e-02, 4.4126e-05, 9.9014e-07, 9.4362e-03])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.9962, 0.9970, 0.9973, 0.9975, 0.9973])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-1.1944e-07, -6.0282e-07, -2.9274e-07, -2.6537e-07, -2.5416e-07])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-1.1944e-07, -6.0282e-07, -2.9274e-07, -2.6537e-07, -2.5416e-07])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 2.2190e-06,  1.4349e-04,  6.9720e-07,  8.5088e-08, -6.7661e-06])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-4.0815e-07, -2.5308e-06,  3.3114e-07,  9.2193e-07, -1.7719e-06])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([5.7083e-06, 4.0056e-04, 5.5287e-07, 8.9594e-08, 2.0699e-05])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-5.2483e-06,  9.0311e-06,  1.2717e-05,  1.4139e-06,  4.4466e-06])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-2.6495e-05, -8.1854e-03, -1.0715e-07, -9.3719e-07, -5.0283e-04])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-3.3214e-06,  2.2866e-05,  1.6465e-05, -3.7456e-06,  1.1536e-05])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-5.3143e-05, -1.1739e-02, -1.4655e-06, -6.7273e-06,  5.3153e-03])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 2.2190e-06,  1.4349e-04,  6.9720e-07,  8.5088e-08, -6.7661e-06])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-7.7646e-03,  9.7100e-04, -2.9797e-02, -1.5150e-02,  2.4717e-05])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-7.7646e-03,  9.7100e-04, -2.9797e-02, -1.5150e-02,  2.4717e-05])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-7.7646e-03,  9.7100e-04, -2.9797e-02, -1.5150e-02,  2.4717e-05])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 9.0224e-06,  1.4070e-04,  8.2957e-03, -8.1533e-03, -6.4235e-06])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0043, -0.1354,  0.0008,  0.0823,  0.0577])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0043, -0.1354,  0.0008,  0.0823,  0.0577])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0150, -0.1448, -0.0013,  0.2577,  0.0408])
  [Mamba.forward] After layer 32 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 32 sample values: tensor([ 0.0150, -0.1448, -0.0013,  0.2577,  0.0408])
[Mamba.forward] Processing layer 33/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0150, -0.1448, -0.0013,  0.2577,  0.0408])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0150, -0.1448, -0.0013,  0.2577,  0.0408])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0097, -0.0917, -0.0009,  0.1525,  0.0276])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0097, -0.0917, -0.0009,  0.1525,  0.0276])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0097, -0.0917, -0.0009,  0.1525,  0.0276])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.6184, -0.2081, -0.0782,  0.0084,  1.0748])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.6184, -0.2081, -0.0782,  0.0084,  1.0748])
  [MambaBlock.forward] res sample values: tensor([-1.3976,  0.1128, -1.9378, -3.0135, -2.0913])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.6184,  0.4813, -0.4663, -0.7837, -0.2081])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0063, -0.0634,  0.0560, -0.0407,  0.0140])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([0.0063, 0.0140, 0.3396, 0.2171, 0.0705])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([0.0031, 0.0070, 0.1983, 0.1203, 0.0365])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-0.5419, -0.6177, -0.6083, -0.5592, -0.6505])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0175,  0.0493,  0.0226,  0.6486, -0.0240], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.6603, -0.1999,  0.1248, -0.6455,  0.7492])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.6603, -0.1999,  0.1248, -0.6455,  0.7492])
  [MambaBlock.ssm] B sample values: tensor([ 1.1626, -0.0930,  0.0307, -0.0888, -0.2342])
  [MambaBlock.ssm] C sample values: tensor([ 1.3783,  0.3231, -0.1372,  0.1728,  0.2477])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0099, 0.0114, 0.0304, 0.0040, 0.0023])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.9946, 0.9939, 0.9940, 0.9945, 0.9936])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 3.6317e-05, -2.9063e-06,  9.6021e-07, -2.7744e-06, -7.3169e-06])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 3.6317e-05, -2.9063e-06,  9.6021e-07, -2.7744e-06, -7.3169e-06])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([2.0412e-05, 5.2327e-05, 3.9384e-03, 3.1479e-04, 5.4957e-05])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-3.9393e-04,  1.7043e-04,  8.9059e-05,  5.4460e-05,  8.9397e-05])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-4.3995e-04,  1.2552e-04,  6.8977e-03,  1.4220e-04,  5.8365e-05])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-2.3363e-04,  8.7370e-05,  1.1888e-04,  2.9804e-05,  5.7357e-05])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0007, -0.0038,  0.0203,  0.0008,  0.0003])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-2.5457e-04,  1.0794e-04,  1.2431e-04,  2.8253e-05,  6.6215e-05])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0013, -0.0059,  0.0206,  0.0008,  0.0002])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([2.0412e-05, 5.2327e-05, 3.9384e-03, 3.1479e-04, 5.4957e-05])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-3.4696e-05,  3.9934e-04,  8.4171e-03,  7.8334e-02, -8.1934e-04])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-3.4696e-05,  3.9934e-04,  8.4171e-03,  7.8334e-02, -8.1934e-04])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-3.4696e-05,  3.9934e-04,  8.4171e-03,  7.8334e-02, -8.1934e-04])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 9.6108e-06,  2.3797e-05, -2.0534e-03, -1.1052e-02,  1.8839e-04])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0672,  0.1659, -0.0357, -0.0115,  0.0095])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0672,  0.1659, -0.0357, -0.0115,  0.0095])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-0.0522,  0.0211, -0.0369,  0.2461,  0.0504])
  [Mamba.forward] After layer 33 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 33 sample values: tensor([-0.0522,  0.0211, -0.0369,  0.2461,  0.0504])
[Mamba.forward] Processing layer 34/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.0522,  0.0211, -0.0369,  0.2461,  0.0504])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.0522,  0.0211, -0.0369,  0.2461,  0.0504])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.0212,  0.0086, -0.0159,  0.0924,  0.0214])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.0212,  0.0086, -0.0159,  0.0924,  0.0214])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.0212,  0.0086, -0.0159,  0.0924,  0.0214])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 0.4365,  0.1857, -1.7371,  0.1080, -0.7396])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 0.4365,  0.1857, -1.7371,  0.1080, -0.7396])
  [MambaBlock.forward] res sample values: tensor([-0.4611, -0.3024,  0.3200,  0.0875,  0.5667])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([0.4365, 0.1400, 0.2805, 0.4229, 0.1857])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0695, -0.0238, -0.0444, -0.0660,  0.0574])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0695,  0.0574, -1.4407,  0.0086,  0.0606])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0336,  0.0295, -0.2758,  0.0043,  0.0312])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -0.2591,  -0.6292, -79.3007,  -2.7970,  -3.5675])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.3144,  0.4181, -0.0122, -0.0644,  0.0515], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.4399,  0.0500,  0.5263, -0.1012,  0.3570])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.4399,  0.0500,  0.5263, -0.1012,  0.3570])
  [MambaBlock.ssm] B sample values: tensor([ 0.2826, -0.2456,  0.0248,  0.5763, -0.9679])
  [MambaBlock.ssm] C sample values: tensor([ 0.0673, -0.4233,  0.3426,  0.3751,  0.4254])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1955, 0.1681, 0.0020, 0.1490, 0.2470])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([9.5059e-01, 8.8424e-01, 1.8456e-07, 5.7875e-01, 4.9781e-01])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-0.0019,  0.0016, -0.0002, -0.0038,  0.0064])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-0.0019,  0.0016, -0.0002, -0.0038,  0.0064])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.0214,  0.0162, -0.0018,  0.0021,  0.0251])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-0.0029,  0.0023, -0.0017, -0.0042,  0.0048])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-0.0162,  0.0262, -0.0029,  0.0019,  0.0365])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.0073,  0.0073, -0.0050, -0.0123,  0.0101])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0515,  0.0227, -0.0056,  0.0180,  0.0124])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0094,  0.0083, -0.0021, -0.0160,  0.0118])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.0797, -0.0310, -0.0066,  0.0404, -0.0558])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.0214,  0.0162, -0.0018,  0.0021,  0.0251])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.0319,  0.0285,  0.0016,  0.0018,  0.0267])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.0319,  0.0285,  0.0016,  0.0018,  0.0267])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.0319,  0.0285,  0.0016,  0.0018,  0.0267])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 5.6973e-03, -3.6678e-03,  2.9171e-04,  8.2847e-05,  9.6658e-03])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0984,  0.0217, -0.0421, -0.0057, -0.0098])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0984,  0.0217, -0.0421, -0.0057, -0.0098])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0462,  0.0428, -0.0790,  0.2404,  0.0405])
  [Mamba.forward] After layer 34 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 34 sample values: tensor([ 0.0462,  0.0428, -0.0790,  0.2404,  0.0405])
[Mamba.forward] Processing layer 35/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0462,  0.0428, -0.0790,  0.2404,  0.0405])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0462,  0.0428, -0.0790,  0.2404,  0.0405])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0286,  0.0239, -0.0473,  0.1255,  0.0235])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0286,  0.0239, -0.0473,  0.1255,  0.0235])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0286,  0.0239, -0.0473,  0.1255,  0.0235])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 1.4117e-03, -2.6170e+00, -5.0621e-01, -3.2423e-01, -1.6633e+00])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 1.4117e-03, -2.6170e+00, -5.0621e-01, -3.2423e-01, -1.6633e+00])
  [MambaBlock.forward] res sample values: tensor([ 0.0804, -2.8279,  0.6463, -1.1996, -0.3916])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 1.4117e-03, -1.3309e+00,  8.3900e-01,  2.3545e-01, -2.6170e+00])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0551,  0.2470, -0.2336, -0.1126,  0.2181])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0551,  0.2181, -0.0698, -0.0011, -1.0177])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0268,  0.1209, -0.0337, -0.0005, -0.2702])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-13.0172, -21.8258, -10.9974, -12.0721, -10.7296])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.4472,  0.0381,  0.3916, -0.0254,  0.1968], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 0.1014, -0.1138,  0.0019, -0.6128, -0.0485])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 0.1014, -0.1138,  0.0019, -0.6128, -0.0485])
  [MambaBlock.ssm] B sample values: tensor([ 0.0410,  0.0002,  0.0954, -0.0448, -0.1267])
  [MambaBlock.ssm] C sample values: tensor([-0.1061, -0.0384,  0.1024,  0.0478,  0.0039])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([5.3789e-04, 3.3480e-03, 2.9261e-03, 2.4931e-03, 2.6018e-06])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.9930, 0.9883, 0.9941, 0.9935, 0.9942])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-5.9195e-07, -2.4896e-09, -1.3754e-06,  6.4671e-07,  1.8274e-06])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-5.9195e-07, -2.4896e-09, -1.3754e-06,  6.4671e-07,  1.8274e-06])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-1.1478e-06,  3.2212e-05, -7.8417e-06, -1.0647e-07, -5.5943e-08])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-3.1595e-05, -4.7529e-05,  1.8305e-05,  4.5017e-05, -4.6247e-06])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 6.3167e-05,  3.0978e-04,  2.7513e-04, -6.4308e-06, -3.0124e-07])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 2.1485e-05, -1.7115e-05,  6.2131e-05, -1.8934e-04, -7.2404e-05])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 5.1227e-05, -3.6248e-03,  6.0941e-04, -8.7301e-05, -3.3689e-06])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 1.9514e-05, -1.9175e-05,  6.1223e-05, -2.1450e-04, -6.7179e-05])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-8.9783e-05, -5.6611e-03, -1.0150e-04, -4.9978e-05, -1.9855e-06])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-1.1478e-06,  3.2212e-05, -7.8417e-06, -1.0647e-07, -5.5943e-08])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-1.1993e-02,  4.6436e-03, -1.3196e-02,  1.3501e-05, -5.3159e-02])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-1.1993e-02,  4.6436e-03, -1.3196e-02,  1.3501e-05, -5.3159e-02])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-1.1993e-02,  4.6436e-03, -1.3196e-02,  1.3501e-05, -5.3159e-02])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-5.0173e-04, -7.3319e-04, -5.5962e-03, -3.7502e-06,  8.3961e-03])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0171,  0.0853, -0.0570,  0.1856, -0.0418])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0171,  0.0853, -0.0570,  0.1856, -0.0418])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0633,  0.1281, -0.1360,  0.4260, -0.0012])
  [Mamba.forward] After layer 35 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 35 sample values: tensor([ 0.0633,  0.1281, -0.1360,  0.4260, -0.0012])
[Mamba.forward] Processing layer 36/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0633,  0.1281, -0.1360,  0.4260, -0.0012])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0633,  0.1281, -0.1360,  0.4260, -0.0012])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0338,  0.0660, -0.0730,  0.2059, -0.0007])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0338,  0.0660, -0.0730,  0.2059, -0.0007])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0338,  0.0660, -0.0730,  0.2059, -0.0007])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 0.4699,  0.0716, -0.9608,  0.1752,  3.3423])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 0.4699,  0.0716, -0.9608,  0.1752,  3.3423])
  [MambaBlock.forward] res sample values: tensor([0.7417, 0.2283, 2.4026, 1.2357, 5.5044])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.4699, -1.3429, -1.8826, -1.8707,  0.0716])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.6014, -0.3707,  0.3355,  0.4353, -0.0323])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.6014, -0.0323, -0.0108, -0.0079, -0.2622])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.2129, -0.0159, -0.0054, -0.0039, -0.1140])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([  -8.7528,  -22.5407,   -7.7466, -526.3169,  -27.9848])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.1314,  0.4816,  0.0527, -0.1275,  0.6428], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.0753,  0.1311,  0.2440, -2.6315,  0.2385])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.0753,  0.1311,  0.2440, -2.6315,  0.2385])
  [MambaBlock.ssm] B sample values: tensor([ 0.5102,  0.1265,  0.5266, -0.0058,  0.4588])
  [MambaBlock.ssm] C sample values: tensor([ 0.7328,  0.0446,  0.2972,  0.2081, -0.4049])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0384, 0.0365, 0.0473, 0.0765, 0.0014])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([7.1479e-01, 4.2119e-01, 7.4292e-01, 1.7048e-09, 3.4181e-01])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-4.1667e-03, -1.0329e-03, -4.3011e-03,  4.7649e-05, -3.7471e-03])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-4.1667e-03, -1.0329e-03, -4.3011e-03,  4.7649e-05, -3.7471e-03])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.0307, -0.0022, -0.0010, -0.0011, -0.0006])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-0.0043, -0.0009, -0.0045, -0.0004, -0.0028])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-4.4122e-02,  2.8440e-03,  1.3500e-02,  1.0494e-03, -9.0705e-05])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-1.6461e-03, -2.7391e-03, -1.4478e-03,  4.2821e-03, -4.0350e-07])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-2.6280e-02,  4.0115e-03,  2.3905e-02,  3.6479e-03,  5.7009e-05])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([0.0027, 0.0012, 0.0086, 0.0043, 0.0013])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.0691,  0.0292,  0.0083, -0.0028, -0.0014])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.0307, -0.0022, -0.0010, -0.0011, -0.0006])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.0586, -0.0098, -0.0012, -0.0006, -0.0739])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.0586, -0.0098, -0.0012, -0.0006, -0.0739])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.0586, -0.0098, -0.0012, -0.0006, -0.0739])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-0.0295, -0.0013, -0.0027, -0.0006, -0.4051])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.0443, -0.2887,  0.0939,  0.0276,  0.1106])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.0443, -0.2887,  0.0939,  0.0276,  0.1106])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.1076, -0.1606, -0.0420,  0.4536,  0.1093])
  [Mamba.forward] After layer 36 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 36 sample values: tensor([ 0.1076, -0.1606, -0.0420,  0.4536,  0.1093])
[Mamba.forward] Processing layer 37/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.1076, -0.1606, -0.0420,  0.4536,  0.1093])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.1076, -0.1606, -0.0420,  0.4536,  0.1093])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0544, -0.0812, -0.0214,  0.2212,  0.0566])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0544, -0.0812, -0.0214,  0.2212,  0.0566])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0544, -0.0812, -0.0214,  0.2212,  0.0566])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.6375, -0.7386, -0.6914, -0.9156, -0.5019])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.6375, -0.7386, -0.6914, -0.9156, -0.5019])
  [MambaBlock.forward] res sample values: tensor([ 1.3354, -1.1095,  0.1559,  0.3380, -0.2395])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.6375,  1.3602,  0.2187,  1.5221, -0.7386])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.1311,  0.2046,  0.0216,  0.2302, -0.1071])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.1311, -0.1071, -0.0408, -0.1011,  0.2978])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0613, -0.0507, -0.0200, -0.0480,  0.1709])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -3.1905, -48.0384, -94.4049, -18.8622, -29.5304])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([0.6506, 0.6064, 0.2451, 0.6765, 0.0150], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 0.9960, -1.5511,  1.6034,  0.3899,  0.3286])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 0.9960, -1.5511,  1.6034,  0.3899,  0.3286])
  [MambaBlock.ssm] B sample values: tensor([-0.3583,  0.0655,  0.0212,  0.6381,  0.0583])
  [MambaBlock.ssm] C sample values: tensor([-0.8006, -0.0278, -0.2671,  0.1001,  0.0856])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0461, 0.0346, 0.0731, 0.0555, 0.1366])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.8633, 0.1094, 0.0129, 0.4194, 0.2565])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 1.0110e-03, -1.8485e-04, -5.9806e-05, -1.8007e-03, -1.6441e-04])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 1.0110e-03, -1.8485e-04, -5.9806e-05, -1.8007e-03, -1.6441e-04])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.0072, -0.0045, -0.0037, -0.0068,  0.0597])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-0.0020,  0.0012,  0.0017,  0.0033,  0.0001])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0188,  0.0048, -0.0005, -0.0168,  0.1071])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-2.0417e-03,  1.9451e-05, -2.2345e-04,  1.6155e-03, -1.7826e-05])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.0146, -0.0066,  0.0750, -0.0528,  0.1427])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0046, -0.0005, -0.0034,  0.0045,  0.0019])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.0496,  0.0353,  0.1297, -0.0440,  0.1735])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.0072, -0.0045, -0.0037, -0.0068,  0.0597])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.0471, -0.0352, -0.0086, -0.0393,  0.0623])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.0471, -0.0352, -0.0086, -0.0393,  0.0623])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.0471, -0.0352, -0.0086, -0.0393,  0.0623])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-0.0498,  0.0097, -0.0007, -0.0078, -0.0066])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.2722, -0.1937, -0.0075,  0.2564, -0.1306])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.2722, -0.1937, -0.0075,  0.2564, -0.1306])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.3798, -0.3543, -0.0495,  0.7100, -0.0212])
  [Mamba.forward] After layer 37 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 37 sample values: tensor([ 0.3798, -0.3543, -0.0495,  0.7100, -0.0212])
[Mamba.forward] Processing layer 38/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.3798, -0.3543, -0.0495,  0.7100, -0.0212])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.3798, -0.3543, -0.0495,  0.7100, -0.0212])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.1375, -0.1308, -0.0186,  0.2615, -0.0081])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.1375, -0.1308, -0.0186,  0.2615, -0.0081])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.1375, -0.1308, -0.0186,  0.2615, -0.0081])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 0.8615,  0.8531, -0.4852,  0.3903, -0.2922])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 0.8615,  0.8531, -0.4852,  0.3903, -0.2922])
  [MambaBlock.forward] res sample values: tensor([ 0.9989,  0.4424, -0.1718,  0.1210, -0.7872])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.8615,  1.1473,  0.3329, -0.1977,  0.8531])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.1977,  0.4097,  0.3639,  0.1292, -0.4017])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.1977, -0.4017,  0.1317, -0.0715,  0.0642])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.1086, -0.1611,  0.0702, -0.0345,  0.0331])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([  -2.3163, -294.4168,   -3.3881, -133.3105, -145.9741])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.0158,  0.0664,  0.6559, -0.0176,  0.6266], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.3093,  1.4074,  0.1050,  0.1013,  0.4233])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.3093,  1.4074,  0.1050,  0.1013,  0.4233])
  [MambaBlock.ssm] B sample values: tensor([-0.8900, -0.0486,  0.3672, -0.5619,  0.5778])
  [MambaBlock.ssm] C sample values: tensor([-0.3207, -0.2154,  0.0402, -0.6356,  0.3438])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1955, 0.0232, 0.1307, 0.1035, 0.2280])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([6.3586e-01, 1.0146e-25, 5.1568e-01, 4.8192e-12, 4.0544e-13])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-0.0189, -0.0010,  0.0078, -0.0119,  0.0123])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-0.0189, -0.0010,  0.0078, -0.0119,  0.0123])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.1085, -0.0191,  0.0469, -0.0182,  0.0386])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-0.0261, -0.0042,  0.0127, -0.0130,  0.0049])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.1600, -0.0079,  0.0005, -0.0353,  0.0864])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.0438, -0.0248,  0.0188, -0.0023,  0.0266])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.3340,  0.0141,  0.0015, -0.2217,  0.0778])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0363, -0.0033,  0.0137,  0.0039,  0.0053])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.1857,  0.0395,  0.0342, -0.2219,  0.0519])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.1085, -0.0191,  0.0469, -0.0182,  0.0386])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.1102, -0.0298,  0.0929, -0.0176,  0.0593])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.1102, -0.0298,  0.0929, -0.0176,  0.0593])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.1102, -0.0298,  0.0929, -0.0176,  0.0593])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 0.0804, -0.0080, -0.0073, -0.0011, -0.0146])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.2976,  0.1747, -0.0562, -0.3135, -0.2625])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.2976,  0.1747, -0.0562, -0.3135, -0.2625])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([ 0.0822, -0.1796, -0.1057,  0.3965, -0.2838])
  [Mamba.forward] After layer 38 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 38 sample values: tensor([ 0.0822, -0.1796, -0.1057,  0.3965, -0.2838])
[Mamba.forward] Processing layer 39/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([ 0.0822, -0.1796, -0.1057,  0.3965, -0.2838])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([ 0.0822, -0.1796, -0.1057,  0.3965, -0.2838])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([ 0.0335, -0.0729, -0.0443,  0.1565, -0.1191])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([ 0.0335, -0.0729, -0.0443,  0.1565, -0.1191])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([ 0.0335, -0.0729, -0.0443,  0.1565, -0.1191])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.3013, -0.0567, -1.1785, -0.1391, -1.3497])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.3013, -0.0567, -1.1785, -0.1391, -1.3497])
  [MambaBlock.forward] res sample values: tensor([-0.8321,  0.2649, -0.5251, -1.6292,  0.5283])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.3013, -2.5821, -1.3877, -1.1946, -0.0567])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([0.0034, 0.0596, 0.3361, 0.1477, 0.0056])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0034,  0.0056,  0.2253, -0.0055, -0.0127])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0017,  0.0028,  0.1253, -0.0027, -0.0063])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-0.2355, -2.7891, -0.3334, -0.2375, -0.1979])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0961,  0.2668,  0.3642, -0.0382,  0.2623], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 1.1682,  1.4291, -0.0615, -0.5512, -0.8327])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 1.1682,  1.4291, -0.0615, -0.5512, -0.8327])
  [MambaBlock.ssm] B sample values: tensor([ 0.3481, -0.4191, -0.3290, -0.3171,  0.1417])
  [MambaBlock.ssm] C sample values: tensor([ 0.5876, -0.1146,  0.2196, -0.0915, -0.0857])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0745, 0.0767, 0.0738, 0.1269, 0.2532])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.9826, 0.8124, 0.9755, 0.9825, 0.9854])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 4.4401e-05, -5.3452e-05, -4.1953e-05, -4.0441e-05,  1.8077e-05])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 4.4401e-05, -5.3452e-05, -4.1953e-05, -4.0441e-05,  1.8077e-05])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0005,  0.0008,  0.0331, -0.0012, -0.0057])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0006, -0.0003, -0.0002, -0.0002,  0.0004])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0042,  0.0176,  0.0113, -0.0122, -0.0241])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 2.2379e-03, -1.2780e-03, -5.8615e-05, -1.3977e-03,  7.0687e-04])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.0147,  0.0052, -0.0080,  0.0504, -0.1219])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 0.0028, -0.0018, -0.0007, -0.0022,  0.0002])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.0165,  0.0203, -0.0646,  0.0013, -0.2215])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0005,  0.0008,  0.0331, -0.0012, -0.0057])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.0003,  0.0015,  0.0788, -0.0011, -0.0074])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.0003,  0.0015,  0.0788, -0.0011, -0.0074])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.0003,  0.0015,  0.0788, -0.0011, -0.0074])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-7.3880e-05,  2.2920e-04, -1.5374e-02,  3.0509e-04, -2.4467e-03])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.1996,  0.1821, -0.1081,  0.1091, -0.1425])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.1996,  0.1821, -0.1081,  0.1091, -0.1425])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-0.1174,  0.0025, -0.2138,  0.5056, -0.4263])
  [Mamba.forward] After layer 39 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 39 sample values: tensor([-0.1174,  0.0025, -0.2138,  0.5056, -0.4263])
[Mamba.forward] Processing layer 40/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.1174,  0.0025, -0.2138,  0.5056, -0.4263])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.1174,  0.0025, -0.2138,  0.5056, -0.4263])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.0707,  0.0015, -0.1325,  0.2802, -0.2556])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.0707,  0.0015, -0.1325,  0.2802, -0.2556])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.0707,  0.0015, -0.1325,  0.2802, -0.2556])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-2.3550, -0.1110, -0.6793, -1.2083,  1.3287])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-2.3550, -0.1110, -0.6793, -1.2083,  1.3287])
  [MambaBlock.forward] res sample values: tensor([-0.5961,  0.1228,  1.5980,  0.9077,  0.5519])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-2.3550,  3.1665,  4.2334,  4.5318, -0.1110])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.3487, -1.0832,  0.9461,  0.9230,  0.0471])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.3487,  0.0471,  0.0082, -0.0189,  0.2835])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.1443,  0.0241,  0.0041, -0.0094,  0.1617])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-488.4583, -126.2200,  -25.4494, -247.2481, -307.9443])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.0058,  0.3398,  0.0042, -0.0013,  0.4827], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.0122,  0.0742,  1.7671, -1.0595, -0.0483])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.0122,  0.0742,  1.7671, -1.0595, -0.0483])
  [MambaBlock.ssm] B sample values: tensor([ 2.6312, -0.3102, -0.7307,  0.6901,  0.7586])
  [MambaBlock.ssm] C sample values: tensor([ 0.5225,  0.5027, -0.2015, -0.2353,  0.5462])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.0040, 0.0010, 0.0104, 0.0151, 0.0002])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.1420, 0.6038, 0.9033, 0.3723, 0.2921])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-0.0015,  0.0002,  0.0004, -0.0004, -0.0004])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-0.0015,  0.0002,  0.0004, -0.0004, -0.0004])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.0084,  0.0004,  0.0006, -0.0021,  0.0006])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-0.0043, -0.0011, -0.0002,  0.0010,  0.0006])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-0.0236,  0.0006, -0.0002, -0.0008,  0.0012])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([7.5916e-04, 4.8731e-04, 4.3492e-04, 1.7895e-05, 5.1906e-04])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0083,  0.0004, -0.0013,  0.0036,  0.0024])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 2.6524e-03,  1.3311e-03,  6.5660e-04, -1.0073e-03,  4.5920e-05])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 3.1325e-02, -4.3904e-05, -8.9617e-04,  2.8934e-03,  5.9351e-03])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.0084,  0.0004,  0.0006, -0.0021,  0.0006])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.0093,  0.0085,  0.0006, -0.0021,  0.0786])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.0093,  0.0085,  0.0006, -0.0021,  0.0786])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.0093,  0.0085,  0.0006, -0.0021,  0.0786])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 0.0020,  0.0006,  0.0009, -0.0013,  0.0275])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.1260, -0.1694,  0.0532,  0.2941, -0.2009])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.1260, -0.1694,  0.0532,  0.2941, -0.2009])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-0.2434, -0.1669, -0.1606,  0.7996, -0.6271])
  [Mamba.forward] After layer 40 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 40 sample values: tensor([-0.2434, -0.1669, -0.1606,  0.7996, -0.6271])
[Mamba.forward] Processing layer 41/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-0.2434, -0.1669, -0.1606,  0.7996, -0.6271])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-0.2434, -0.1669, -0.1606,  0.7996, -0.6271])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.0757, -0.0515, -0.0496,  0.2562, -0.1953])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.0757, -0.0515, -0.0496,  0.2562, -0.1953])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.0757, -0.0515, -0.0496,  0.2562, -0.1953])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.9637, -0.6767, -0.4031,  0.0391,  0.0182])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.9637, -0.6767, -0.4031,  0.0391,  0.0182])
  [MambaBlock.forward] res sample values: tensor([-1.5276, -0.3722, -1.6423,  1.6198, -1.3711])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.9637,  0.1105, -1.3597, -0.1057, -0.6767])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.1436, -0.1267, -0.1651, -0.1763, -0.0956])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.1436, -0.0956,  0.0632, -0.0093, -0.0168])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0666, -0.0455,  0.0326, -0.0046, -0.0083])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -9.3837,  -3.2271, -13.8594,  -1.6357, -11.5663])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.1750,  0.5295,  0.2084, -0.0491,  0.3031], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.1916,  0.5080, -0.5865, -0.0973,  0.0847])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.1916,  0.5080, -0.5865, -0.0973,  0.0847])
  [MambaBlock.ssm] B sample values: tensor([-0.0102, -0.7400,  0.0308, -0.6024, -0.2205])
  [MambaBlock.ssm] C sample values: tensor([-0.2053, -0.1825, -0.2707, -0.3586, -0.0033])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.2841, 0.2015, 0.2980, 0.0234, 0.3458])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.0695, 0.3997, 0.0195, 0.6283, 0.0374])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 0.0002,  0.0140, -0.0006,  0.0114,  0.0042])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 0.0002,  0.0140, -0.0006,  0.0114,  0.0042])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.1397, -0.0677,  0.0717, -0.0008, -0.0213])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([0.0074, 0.0181, 0.0048, 0.0196, 0.0086])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-0.1254, -0.0806,  0.0646, -0.0028,  0.1947])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([0.0232, 0.0216, 0.0296, 0.0274, 0.0013])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.1698, -0.0434, -0.0693,  0.0400,  0.2030])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0041,  0.0259, -0.0203,  0.0367,  0.0008])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.2467, -0.0499,  0.0616,  0.0252,  0.1191])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.1397, -0.0677,  0.0717, -0.0008, -0.0213])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.1514, -0.0918,  0.0785, -0.0006, -0.0238])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.1514, -0.0918,  0.0785, -0.0006, -0.0238])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.1514, -0.0918,  0.0785, -0.0006, -0.0238])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 0.0412,  0.0139, -0.0209, -0.0008,  0.0066])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-1.0576,  0.7053, -0.0396, -1.3184, -0.1991])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-1.0576,  0.7053, -0.0396, -1.3184, -0.1991])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-1.3010,  0.5384, -0.2002, -0.5188, -0.8263])
  [Mamba.forward] After layer 41 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 41 sample values: tensor([-1.3010,  0.5384, -0.2002, -0.5188, -0.8263])
[Mamba.forward] Processing layer 42/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-1.3010,  0.5384, -0.2002, -0.5188, -0.8263])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-1.3010,  0.5384, -0.2002, -0.5188, -0.8263])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.2824,  0.1191, -0.0428, -0.1111, -0.1807])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.2824,  0.1191, -0.0428, -0.1111, -0.1807])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.2824,  0.1191, -0.0428, -0.1111, -0.1807])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 0.5651,  0.1283, -0.3199, -0.1281,  0.2532])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 0.5651,  0.1283, -0.3199, -0.1281,  0.2532])
  [MambaBlock.forward] res sample values: tensor([ 0.2546,  1.8989, -0.5797, -0.7760, -0.1684])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.5651, -0.3545, -0.1068, -0.8980,  0.1283])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0850,  0.0321,  0.0182,  0.1223, -0.0190])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0850, -0.0190,  0.0361, -0.0085, -0.0237])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0407, -0.0094,  0.0184, -0.0042, -0.0117])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -0.2273,  -3.5689, -13.2430, -25.2865,  -3.3432])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([0.0850, 0.1267, 0.2582, 0.1719, 0.1572], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.2656, -1.0362, -0.6146,  0.3322, -1.0777])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.2656, -1.0362, -0.6146,  0.3322, -1.0777])
  [MambaBlock.ssm] B sample values: tensor([ 0.4729,  0.2119,  0.8942, -0.3396, -0.8055])
  [MambaBlock.ssm] C sample values: tensor([ 0.0378, -0.1783,  0.2020,  0.7369, -0.3219])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.3669, 0.2363, 0.3896, 0.4141, 0.3445])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([9.1999e-01, 2.6996e-01, 7.7582e-03, 9.3470e-05, 2.9327e-01])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-0.0071, -0.0032, -0.0134,  0.0051,  0.0120])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-0.0071, -0.0032, -0.0134,  0.0051,  0.0120])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.1646, -0.0245,  0.0789, -0.0193, -0.0444])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-0.0037, -0.0005,  0.0024,  0.0017,  0.0032])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.0490,  0.2228, -0.2301, -0.1751, -0.1939])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-1.9654e-03, -1.3075e-03,  1.1407e-03, -4.2056e-04, -6.0984e-05])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.0436,  0.3453, -0.3911, -0.1940, -0.3695])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 0.0058,  0.0051,  0.0031,  0.0038, -0.0048])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.2310,  0.3906,  0.3410, -0.1353, -0.1036])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.1646, -0.0245,  0.0789, -0.0193, -0.0444])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.1681, -0.0257,  0.0836, -0.0200, -0.0463])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.1681, -0.0257,  0.0836, -0.0200, -0.0463])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.1681, -0.0257,  0.0836, -0.0200, -0.0463])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-0.0241, -0.0425, -0.0174,  0.0049,  0.0036])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-1.0912,  0.8413, -0.1246, -0.5556, -0.9820])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-1.0912,  0.8413, -0.1246, -0.5556, -0.9820])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-2.3922,  1.3796, -0.3248, -1.0744, -1.8083])
  [Mamba.forward] After layer 42 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 42 sample values: tensor([-2.3922,  1.3796, -0.3248, -1.0744, -1.8083])
[Mamba.forward] Processing layer 43/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-2.3922,  1.3796, -0.3248, -1.0744, -1.8083])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-2.3922,  1.3796, -0.3248, -1.0744, -1.8083])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.4769,  0.2729, -0.0627, -0.2136, -0.3519])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.4769,  0.2729, -0.0627, -0.2136, -0.3519])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.4769,  0.2729, -0.0627, -0.2136, -0.3519])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.2408, -0.7471, -0.5626, -1.0352, -0.4599])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.2408, -0.7471, -0.5626, -1.0352, -0.4599])
  [MambaBlock.forward] res sample values: tensor([ 0.4013, -0.5803, -1.0107,  0.0770, -0.0679])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.2408,  0.6231, -0.0491,  0.8764, -0.7471])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0085, -0.1368, -0.0153, -0.1731,  0.1078])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0085,  0.1078, -0.1018, -0.1411, -0.1605])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0043,  0.0568, -0.0483, -0.0656, -0.0738])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-12.2919,  -5.6740,  -6.8664,  -5.1115, -25.1806])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([0.3251, 0.2501, 0.1956, 0.2004, 0.2057], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.3945,  0.1236,  0.0949,  0.2655, -0.1428])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.3945,  0.1236,  0.0949,  0.2655, -0.1428])
  [MambaBlock.ssm] B sample values: tensor([-0.3261, -0.4665, -0.5869, -0.8242,  0.4278])
  [MambaBlock.ssm] C sample values: tensor([-0.0138,  0.1801, -0.5249, -0.8396,  0.2964])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.2004, 0.1817, 0.3432, 0.2826, 0.2643])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.0852, 0.3208, 0.2527, 0.3591, 0.0064])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-0.0003, -0.0004, -0.0005, -0.0007,  0.0004])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-0.0003, -0.0004, -0.0005, -0.0007,  0.0004])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0087,  0.1047, -0.1682, -0.1880, -0.1979])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 0.0009, -0.0002,  0.0154,  0.0172, -0.0093])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-0.1919, -0.0341, -0.2340, -0.2441, -0.6052])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0012,  0.0008,  0.0026,  0.0059, -0.0008])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-0.0480, -0.0989, -0.0364, -0.1292, -0.4354])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 0.0063,  0.0033, -0.0033,  0.0151, -0.0003])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-0.3039, -0.0939, -0.2281, -0.1681,  0.0043])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0087,  0.1047, -0.1682, -0.1880, -0.1979])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.0101,  0.1189, -0.1776, -0.2011, -0.2131])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.0101,  0.1189, -0.1776, -0.2011, -0.2131])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.0101,  0.1189, -0.1776, -0.2011, -0.2131])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 0.0024, -0.0248,  0.0479, -0.0080,  0.0070])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.1000, -0.2774, -0.2682,  0.0201, -0.0035])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.1000, -0.2774, -0.2682,  0.0201, -0.0035])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-2.4923,  1.1022, -0.5930, -1.0543, -1.8118])
  [Mamba.forward] After layer 43 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 43 sample values: tensor([-2.4923,  1.1022, -0.5930, -1.0543, -1.8118])
[Mamba.forward] Processing layer 44/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-2.4923,  1.1022, -0.5930, -1.0543, -1.8118])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-2.4923,  1.1022, -0.5930, -1.0543, -1.8118])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.4072,  0.1823, -0.0959, -0.1758, -0.2891])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.4072,  0.1823, -0.0959, -0.1758, -0.2891])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.4072,  0.1823, -0.0959, -0.1758, -0.2891])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([0.1528, 0.3265, 0.2758, 0.3253, 0.3725])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([0.1528, 0.3265, 0.2758, 0.3253, 0.3725])
  [MambaBlock.forward] res sample values: tensor([-1.0730,  0.6609, -0.6623, -0.3637,  1.9863])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.1528, -0.4590,  0.1023,  0.6586,  0.3265])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([ 0.0136, -0.0759,  0.0089,  0.0857, -0.0618])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([ 0.0136, -0.0618, -0.1635,  0.0413, -0.0627])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([ 0.0068, -0.0299, -0.0751,  0.0211, -0.0303])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -0.1766, -21.7997,  -1.5884,  -2.5522,  -1.4342])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([0.1394, 0.2764, 0.2018, 0.1310, 0.1135], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([0.4290, 0.1480, 0.6488, 0.1229, 0.0919])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([0.4290, 0.1480, 0.6488, 0.1229, 0.0919])
  [MambaBlock.ssm] B sample values: tensor([ 0.3416, -0.6300,  0.5219,  0.4120,  1.9776])
  [MambaBlock.ssm] C sample values: tensor([ 0.1445, -0.5111, -0.1336,  0.5557,  0.3797])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.2502, 0.1338, 0.4351, 0.3330, 0.2403])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.9568, 0.0043, 0.6720, 0.5280, 0.6985])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 0.0006, -0.0011,  0.0009,  0.0007,  0.0034])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 0.0006, -0.0011,  0.0009,  0.0007,  0.0034])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([ 0.0272, -0.0637, -0.5200,  0.1117, -0.1161])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-0.0059,  0.0210, -0.0069,  0.0057, -0.0227])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-0.2225,  0.0400, -0.4135, -0.3204,  0.2407])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-5.1157e-03, -5.2289e-05, -5.2937e-03,  2.7682e-03, -1.4275e-02])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.0039,  0.2531, -0.5222, -0.3094, -0.5112])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0019, -0.0011, -0.0035,  0.0007,  0.0032])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.2767, -0.0468, -0.5343, -0.0119,  0.4230])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([ 0.0272, -0.0637, -0.5200,  0.1117, -0.1161])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([ 0.0281, -0.0720, -0.5352,  0.1145, -0.1195])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([ 0.0281, -0.0720, -0.5352,  0.1145, -0.1195])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([ 0.0281, -0.0720, -0.5352,  0.1145, -0.1195])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([-0.0077, -0.0314,  0.1206, -0.0171, -0.2088])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.5937, -0.4427,  0.0638,  0.3845, -0.3270])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.5937, -0.4427,  0.0638,  0.3845, -0.3270])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-3.0860,  0.6595, -0.5291, -0.6698, -2.1387])
  [Mamba.forward] After layer 44 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 44 sample values: tensor([-3.0860,  0.6595, -0.5291, -0.6698, -2.1387])
[Mamba.forward] Processing layer 45/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-3.0860,  0.6595, -0.5291, -0.6698, -2.1387])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-3.0860,  0.6595, -0.5291, -0.6698, -2.1387])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.4132,  0.0865, -0.0696, -0.0914, -0.2728])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.4132,  0.0865, -0.0696, -0.0914, -0.2728])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.4132,  0.0865, -0.0696, -0.0914, -0.2728])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 1.0386, -0.0182,  0.3532, -0.0199,  0.3073])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 1.0386, -0.0182,  0.3532, -0.0199,  0.3073])
  [MambaBlock.forward] res sample values: tensor([-0.2192, -1.0831,  0.3854, -0.2616, -1.1265])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 1.0386, -0.2460,  0.3387,  0.1639, -0.0182])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.1331,  0.1248,  0.0073,  0.0429,  0.0040])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.1331,  0.0040,  0.0596, -0.0078,  0.0706])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0621,  0.0020,  0.0307, -0.0039,  0.0366])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-3.1530, -4.0765, -4.9488, -8.3726, -1.9834])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0322,  0.2366,  0.1109,  0.1817,  0.1160], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.4959, -0.2587, -0.5473, -0.0299,  0.1551])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.4959, -0.2587, -0.5473, -0.0299,  0.1551])
  [MambaBlock.ssm] B sample values: tensor([-0.4550, -0.8346, -0.3170,  1.2079, -0.2990])
  [MambaBlock.ssm] C sample values: tensor([-0.1468, -0.1431, -0.1084,  0.0874, -0.2574])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1516, 0.1983, 0.1408, 0.1969, 0.3192])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.6200, 0.5389, 0.4722, 0.2809, 0.7403])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([ 0.0043,  0.0079,  0.0030, -0.0114,  0.0028])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([ 0.0043,  0.0079,  0.0030, -0.0114,  0.0028])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.2442,  0.0103,  0.1120, -0.0198,  0.3025])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-0.0031, -0.0035,  0.0010,  0.0144, -0.0031])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.2958, -0.1669,  0.2254,  0.2919, -0.0235])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.0021, -0.0021,  0.0010,  0.0042, -0.0022])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.0174, -0.7211,  0.2520,  0.1146, -0.0590])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0024, -0.0043,  0.0022,  0.0042, -0.0032])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.1471, -0.2707,  0.1274,  0.6812,  0.0448])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.2442,  0.0103,  0.1120, -0.0198,  0.3025])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.2422,  0.0108,  0.1154, -0.0205,  0.3068])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.2422,  0.0108,  0.1154, -0.0205,  0.3068])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.2422,  0.0108,  0.1154, -0.0205,  0.3068])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 0.0237, -0.0030,  0.0265,  0.0023, -0.0846])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.0920, -0.1143,  0.0585, -0.1655,  0.1164])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.0920, -0.1143,  0.0585, -0.1655,  0.1164])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-3.1780,  0.5452, -0.4707, -0.8353, -2.0223])
  [Mamba.forward] After layer 45 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 45 sample values: tensor([-3.1780,  0.5452, -0.4707, -0.8353, -2.0223])
[Mamba.forward] Processing layer 46/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-3.1780,  0.5452, -0.4707, -0.8353, -2.0223])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-3.1780,  0.5452, -0.4707, -0.8353, -2.0223])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.4204,  0.0705, -0.0603, -0.1124, -0.2499])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.4204,  0.0705, -0.0603, -0.1124, -0.2499])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.4204,  0.0705, -0.0603, -0.1124, -0.2499])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 0.7604,  1.1247, -1.4183, -0.8429,  0.3408])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 0.7604,  1.1247, -1.4183, -0.8429,  0.3408])
  [MambaBlock.forward] res sample values: tensor([-1.3964,  0.9900,  0.5374,  0.7739, -0.4965])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.7604, -0.2232, -0.3464, -0.7342,  1.1247])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.1005,  0.0735,  0.0998,  0.1682, -0.1727])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.1005, -0.1727, -0.1222, -0.1394, -0.0534])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0477, -0.0789, -0.0574, -0.0648, -0.0260])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -0.1982,  -1.8997,  -3.6643, -85.5823,  -1.3346])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([ 0.1611, -0.0666,  0.1786,  0.0625, -0.0032], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 0.0713, -1.0096,  0.3599,  0.1306, -0.0076])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 0.0713, -1.0096,  0.3599,  0.1306, -0.0076])
  [MambaBlock.ssm] B sample values: tensor([ 0.3399, -0.9268, -0.0117,  1.5209, -0.2064])
  [MambaBlock.ssm] C sample values: tensor([ 0.3067,  0.0861, -0.3756, -0.2576,  0.2928])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1206, 0.1686, 0.1744, 0.1918, 0.1899])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([9.7638e-01, 7.9520e-01, 6.4273e-01, 3.2838e-05, 8.5130e-01])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-1.9576e-03,  5.3379e-03,  6.7510e-05, -8.7597e-03,  1.1887e-03])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-1.9576e-03,  5.3379e-03,  6.7510e-05, -8.7597e-03,  1.1887e-03])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.1956, -0.4520, -0.3399, -0.4224, -0.1677])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([ 1.2456e-03, -2.8580e-03,  1.5593e-03,  1.2261e-02, -4.3601e-05])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([ 0.2317,  0.3978,  0.5361, -0.9308,  0.0589])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0021, -0.0110,  0.0002,  0.0096, -0.0090])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.4073, -0.2962,  3.0373,  0.1513, -0.1799])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 0.0066, -0.0248,  0.0021,  0.0180, -0.0163])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.6911, -0.2122,  3.3256, -0.1455, -0.3748])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.1956, -0.4520, -0.3399, -0.4224, -0.1677])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.2033, -0.4467, -0.3501, -0.4264, -0.1676])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.2033, -0.4467, -0.3501, -0.4264, -0.1676])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.2033, -0.4467, -0.3501, -0.4264, -0.1676])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 0.0563, -0.3224, -0.1188, -0.2258,  0.0315])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([-0.7657, -0.2514, -0.3499, -1.2168, -0.1405])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([-0.7657, -0.2514, -0.3499, -1.2168, -0.1405])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-3.9436,  0.2938, -0.8206, -2.0521, -2.1628])
  [Mamba.forward] After layer 46 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 46 sample values: tensor([-3.9436,  0.2938, -0.8206, -2.0521, -2.1628])
[Mamba.forward] Processing layer 47/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-3.9436,  0.2938, -0.8206, -2.0521, -2.1628])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-3.9436,  0.2938, -0.8206, -2.0521, -2.1628])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.4021,  0.0302, -0.0841, -0.2309, -0.2178])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.4021,  0.0302, -0.0841, -0.2309, -0.2178])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.4021,  0.0302, -0.0841, -0.2309, -0.2178])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([-0.0917,  0.5153, -0.8860,  0.2395,  0.2146])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([-0.0917,  0.5153, -0.8860,  0.2395,  0.2146])
  [MambaBlock.forward] res sample values: tensor([-0.9087, -0.5033,  0.8553, -0.3719,  0.6839])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([-0.0917, -0.0855,  0.3887, -0.0127,  0.5153])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.0063, -0.0051,  0.0661,  0.0045, -0.0679])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.0063, -0.0679, -0.0380,  0.0513,  0.0444])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0032, -0.0328, -0.0186,  0.0263,  0.0227])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([-0.2730, -0.6274, -1.1621, -6.5302, -2.0090])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([-0.0248,  0.1752, -0.1855, -0.0411,  0.1563], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([ 0.8183, -0.0515, -0.1911,  0.0721, -0.3072])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([ 0.8183, -0.0515, -0.1911,  0.0721, -0.3072])
  [MambaBlock.ssm] B sample values: tensor([ 0.4581,  0.8544, -0.3855, -1.4319, -1.5966])
  [MambaBlock.ssm] C sample values: tensor([ 0.2332,  0.2346, -0.1070, -0.0311,  0.1199])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.1421, 0.1882, 0.1390, 0.1197, 0.0741])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([0.9620, 0.9147, 0.8478, 0.3955, 0.7517])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-0.0002, -0.0004,  0.0002,  0.0006,  0.0007])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-0.0002, -0.0004,  0.0002,  0.0006,  0.0007])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-0.0252, -0.3477, -0.1461,  0.1776,  0.0948])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-0.0005, -0.0006,  0.0005,  0.0008,  0.0015])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-0.0326, -0.1715, -2.0778, -0.2230, -0.3095])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([ 0.0003,  0.0045, -0.0009, -0.0069, -0.0126])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([ 0.5297, -0.5565, -2.4318,  0.0943, -0.5974])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([ 0.0005,  0.0044, -0.0011, -0.0029, -0.0099])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([ 0.0556,  0.0042, -2.7045, -0.1831, -0.7289])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-0.0252, -0.3477, -0.1461,  0.1776,  0.0948])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-0.0252, -0.3534, -0.1426,  0.1765,  0.0984])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-0.0252, -0.3534, -0.1426,  0.1765,  0.0984])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-0.0252, -0.3534, -0.1426,  0.1765,  0.0984])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 0.0066,  0.0670, -0.0856, -0.0268,  0.0447])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 1.1436, -0.9969, -0.1163, -0.1935,  0.3077])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 1.1436, -0.9969, -0.1163, -0.1935,  0.3077])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-2.8001, -0.7031, -0.9369, -2.2456, -1.8550])
  [Mamba.forward] After layer 47 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 47 sample values: tensor([-2.8001, -0.7031, -0.9369, -2.2456, -1.8550])
[Mamba.forward] Processing layer 48/48
[ResidualBlock.forward] Input shape: torch.Size([1, 4, 1024])
[ResidualBlock.forward] Input sample values: tensor([-2.8001, -0.7031, -0.9369, -2.2456, -1.8550])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-2.8001, -0.7031, -0.9369, -2.2456, -1.8550])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.2485, -0.0583, -0.0774, -0.2189, -0.1494])
  [ResidualBlock.forward] After RMSNorm shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After RMSNorm sample values: tensor([-0.2485, -0.0583, -0.0774, -0.2189, -0.1494])
[MambaBlock.forward] Input shape: torch.Size([1, 4, 1024])
[MambaBlock.forward] Input sample values: tensor([-0.2485, -0.0583, -0.0774, -0.2189, -0.1494])
  [MambaBlock.forward] Batch size: 1, Sequence length: 4, d_model: 1024
  [MambaBlock.forward] in_proj output shape: torch.Size([1, 4, 4096])
  [MambaBlock.forward] in_proj output sample values: tensor([ 2.0671e-02, -8.9279e-01, -4.1608e-01,  8.7750e-01,  4.5308e-04])
  [MambaBlock.forward] Split into x shape: torch.Size([1, 4, 2048]), res shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] x sample values: tensor([ 2.0671e-02, -8.9279e-01, -4.1608e-01,  8.7750e-01,  4.5308e-04])
  [MambaBlock.forward] res sample values: tensor([-0.7782, -0.1646, -1.0304, -0.2784,  0.7690])
  [MambaBlock.forward] After rearrange x shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After rearrange x sample values: tensor([ 0.0207,  0.4729, -0.3626,  0.5179, -0.8928])
  [MambaBlock.forward] After conv1d shape: torch.Size([1, 2048, 4])
  [MambaBlock.forward] After conv1d sample values: tensor([-0.1728, -0.0530, -0.2744, -0.0412, -0.1244])
  [MambaBlock.forward] After rearrange back x shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After rearrange back x sample values: tensor([-0.1728, -0.1244, -0.0531, -0.1681, -0.0143])
  [MambaBlock.forward] After SiLU activation shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SiLU activation sample values: tensor([-0.0790, -0.0583, -0.0258, -0.0770, -0.0071])
[MambaBlock.ssm] Starting SSM computation.
  [MambaBlock.ssm] d_in: 2048, n: 16
  [MambaBlock.ssm] A shape: torch.Size([2048, 16])
  [MambaBlock.ssm] A sample values: tensor([ -88.8181,   -2.7774,  -49.1639,   -4.1003, -116.9807])
  [MambaBlock.ssm] D shape: torch.Size([2048])
  [MambaBlock.ssm] D sample values: tensor([0.1456, 0.0368, 0.0479, 0.0824, 0.0437], requires_grad=True)
  [MambaBlock.ssm] x_proj output shape: torch.Size([1, 4, 96])
  [MambaBlock.ssm] x_proj output sample values: tensor([-0.1240, -1.4344,  1.0760, -1.1791, -0.1701])
  [MambaBlock.ssm] Split into delta shape: torch.Size([1, 4, 64]), B shape: torch.Size([1, 4, 16]), C shape: torch.Size([1, 4, 16])
  [MambaBlock.ssm] delta sample values: tensor([-0.1240, -1.4344,  1.0760, -1.1791, -0.1701])
  [MambaBlock.ssm] B sample values: tensor([ 0.3332, -1.6683,  0.5585,  2.0933, -2.1398])
  [MambaBlock.ssm] C sample values: tensor([ 0.3077,  0.1093, -0.3488,  0.2684,  0.0285])
  [MambaBlock.ssm] delta after softplus shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] delta after softplus sample values: tensor([0.2711, 0.1103, 0.0885, 0.0644, 0.0968])
[MambaBlock.selective_scan] Starting selective_scan computation.
  [MambaBlock.selective_scan] b: 1, l: 4, d_in: 2048, n: 16
[MambaBlock.selective_scan] Discretizing A and B.
  [MambaBlock.selective_scan] deltaA shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaA sample values: tensor([3.4911e-11, 4.7098e-01, 1.6280e-06, 3.2904e-01, 1.6875e-14])
  [MambaBlock.selective_scan] deltaB_u shape: torch.Size([1, 4, 2048, 16])
  [MambaBlock.selective_scan] deltaB_u sample values: tensor([-0.0071,  0.0357, -0.0120, -0.0448,  0.0458])
[MambaBlock.selective_scan] Initializing state and preparing for scan.
  [MambaBlock.selective_scan] Initial x shape: torch.Size([1, 2048, 16])
  [MambaBlock.selective_scan] Initial x sample values: tensor([0., 0., 0., 0., 0.])
  [MambaBlock.selective_scan] Step 1/4:
    [Step 1] x shape: torch.Size([1, 2048, 16])
    [Step 1] x sample values: tensor([-0.0071,  0.0357, -0.0120, -0.0448,  0.0458])
    [Step 1] y shape: torch.Size([1, 2048])
    [Step 1] y sample values: tensor([-2.5600, -0.7698, -0.2735, -0.5924, -0.0822])
  [MambaBlock.selective_scan] Step 2/4:
    [Step 2] x shape: torch.Size([1, 2048, 16])
    [Step 2] x sample values: tensor([-0.0051,  0.0289, -0.0067, -0.0336,  0.0337])
    [Step 2] y shape: torch.Size([1, 2048])
    [Step 2] y sample values: tensor([-1.2617, -0.5009, -0.2481, -0.4699, -0.8546])
  [MambaBlock.selective_scan] Step 3/4:
    [Step 3] x shape: torch.Size([1, 2048, 16])
    [Step 3] x sample values: tensor([-0.0062,  0.1300,  0.0146, -0.1570,  0.2749])
    [Step 3] y shape: torch.Size([1, 2048])
    [Step 3] y sample values: tensor([-11.3120,  -0.2579,   0.5070,   0.6359,  -0.0439])
  [MambaBlock.selective_scan] Step 4/4:
    [Step 4] x shape: torch.Size([1, 2048, 16])
    [Step 4] x sample values: tensor([-0.0109,  0.0428,  0.0068, -0.0379,  0.0322])
    [Step 4] y shape: torch.Size([1, 2048])
    [Step 4] y sample values: tensor([-2.0181,  0.0266,  0.2774,  0.0783, -0.8831])
  [MambaBlock.selective_scan] Stacked y shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] Stacked y sample values: tensor([-2.5600, -0.7698, -0.2735, -0.5924, -0.0822])
  [MambaBlock.selective_scan] After adding D * u shape: torch.Size([1, 4, 2048])
  [MambaBlock.selective_scan] After adding D * u sample values: tensor([-2.5715, -0.7719, -0.2747, -0.5988, -0.0826])
  [MambaBlock.ssm] selective_scan output shape: torch.Size([1, 4, 2048])
  [MambaBlock.ssm] selective_scan output sample values: tensor([-2.5715, -0.7719, -0.2747, -0.5988, -0.0826])
  [MambaBlock.forward] After SSM shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After SSM sample values: tensor([-2.5715, -0.7719, -0.2747, -0.5988, -0.0826])
  [MambaBlock.forward] After multiplying with SiLU(res) shape: torch.Size([1, 4, 2048])
  [MambaBlock.forward] After multiplying with SiLU(res) sample values: tensor([ 0.6298,  0.0583,  0.0744,  0.0718, -0.0434])
  [MambaBlock.forward] After out_proj shape: torch.Size([1, 4, 1024])
  [MambaBlock.forward] After out_proj sample values: tensor([ 0.2399,  1.1096,  4.6458, -4.2106,  1.4547])
  [ResidualBlock.forward] MambaBlock output shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] MambaBlock output sample values: tensor([ 0.2399,  1.1096,  4.6458, -4.2106,  1.4547])
  [ResidualBlock.forward] After residual connection shape: torch.Size([1, 4, 1024])
  [ResidualBlock.forward] After residual connection sample values: tensor([-2.5601,  0.4065,  3.7089, -6.4562, -0.4003])
  [Mamba.forward] After layer 48 shape: torch.Size([1, 4, 1024])
  [Mamba.forward] After layer 48 sample values: tensor([-2.5601,  0.4065,  3.7089, -6.4562, -0.4003])
[RMSNorm.forward] Input shape: torch.Size([1, 4, 1024])
[RMSNorm.forward] Input sample values: tensor([-2.5601,  0.4065,  3.7089, -6.4562, -0.4003])
  [RMSNorm.forward] Output shape: torch.Size([1, 4, 1024])
  [RMSNorm.forward] Output sample values: tensor([-0.3856,  0.0675,  0.5641, -1.0145, -0.0618])
[Mamba.forward] After final RMSNorm shape: torch.Size([1, 4, 1024])
[Mamba.forward] After final RMSNorm sample values: tensor([-0.3856,  0.0675,  0.5641, -1.0145, -0.0618])
[Mamba.forward] Logits shape: torch.Size([1, 4, 50280])
[Mamba.forward] Logits sample values: tensor([13.2660,  3.2762, 13.0564, 14.6508, 13.2555])
Mamba is the only
